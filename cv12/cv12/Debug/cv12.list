
cv12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000197b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e180  08019960  08019960  00029960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027ae0  08027ae0  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  08027ae0  08027ae0  00037ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027ae8  08027ae8  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027ae8  08027ae8  00037ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027aec  08027aec  00037aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08027af0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040090  2**0
                  CONTENTS
 10 .bss          000117b0  20000090  20000090  00040090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20011840  20011840  00040090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034415  00000000  00000000  00040103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000083d4  00000000  00000000  00074518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002510  00000000  00000000  0007c8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001d56  00000000  00000000  0007ee00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037469  00000000  00000000  00080b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003cc60  00000000  00000000  000b7fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001020e1  00000000  00000000  000f4c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a350  00000000  00000000  001f6d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00201050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019948 	.word	0x08019948

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08019948 	.word	0x08019948

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200000ac 	.word	0x200000ac
 80005ec:	2000014c 	.word	0x2000014c

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 ffd1 	bl	800159c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f81d 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8af 	bl	8000760 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f883 	bl	800070c <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <main+0x40>)
 8000608:	1d3c      	adds	r4, r7, #4
 800060a:	461d      	mov	r5, r3
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f004 fcd1 	bl	8004fc4 <osThreadCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <main+0x44>)
 8000626:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000628:	f004 fcb5 	bl	8004f96 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x3c>
 800062e:	bf00      	nop
 8000630:	0801996c 	.word	0x0801996c
 8000634:	20000390 	.word	0x20000390

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f018 f859 	bl	80186fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <SystemClock_Config+0xcc>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a27      	ldr	r2, [pc, #156]	; (8000704 <SystemClock_Config+0xcc>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd0>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000698:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ac:	23a8      	movs	r3, #168	; 0xa8
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fce3 	bl	8003088 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f93a 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2105      	movs	r1, #5
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 ff44 	bl	8003578 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f6:	f000 f923 	bl	8000940 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART3_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000744:	f003 fc18 	bl	8003f78 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f8f7 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000034c 	.word	0x2000034c
 800075c:	40004800 	.word	0x40004800

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	4b5b      	ldr	r3, [pc, #364]	; (80008e8 <MX_GPIO_Init+0x188>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a5a      	ldr	r2, [pc, #360]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b58      	ldr	r3, [pc, #352]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	4b54      	ldr	r3, [pc, #336]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a53      	ldr	r2, [pc, #332]	; (80008e8 <MX_GPIO_Init+0x188>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b51      	ldr	r3, [pc, #324]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b4d      	ldr	r3, [pc, #308]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a4c      	ldr	r2, [pc, #304]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b4a      	ldr	r3, [pc, #296]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b46      	ldr	r3, [pc, #280]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a45      	ldr	r2, [pc, #276]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b3f      	ldr	r3, [pc, #252]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a3e      	ldr	r2, [pc, #248]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b3c      	ldr	r3, [pc, #240]	; (80008e8 <MX_GPIO_Init+0x188>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	; (80008e8 <MX_GPIO_Init+0x188>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <MX_GPIO_Init+0x188>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f244 0181 	movw	r1, #16513	; 0x4081
 8000824:	4831      	ldr	r0, [pc, #196]	; (80008ec <MX_GPIO_Init+0x18c>)
 8000826:	f002 fc15 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	4830      	ldr	r0, [pc, #192]	; (80008f0 <MX_GPIO_Init+0x190>)
 8000830:	f002 fc10 	bl	8003054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	482a      	ldr	r0, [pc, #168]	; (80008f4 <MX_GPIO_Init+0x194>)
 800084c:	f002 fa3e 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000850:	f244 0381 	movw	r3, #16513	; 0x4081
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4820      	ldr	r0, [pc, #128]	; (80008ec <MX_GPIO_Init+0x18c>)
 800086a:	f002 fa2f 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800086e:	2340      	movs	r3, #64	; 0x40
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	481a      	ldr	r0, [pc, #104]	; (80008f0 <MX_GPIO_Init+0x190>)
 8000886:	f002 fa21 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_GPIO_Init+0x190>)
 800089e:	f002 fa15 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008b4:	230a      	movs	r3, #10
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <MX_GPIO_Init+0x198>)
 80008c0:	f002 fa04 	bl	8002ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <MX_GPIO_Init+0x198>)
 80008da:	f002 f9f7 	bl	8002ccc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008de:	bf00      	nop
 80008e0:	3730      	adds	r7, #48	; 0x30
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40021800 	.word	0x40021800
 80008f4:	40020800 	.word	0x40020800
 80008f8:	40020000 	.word	0x40020000

080008fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000904:	f003 fdfa 	bl	80044fc <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpecho_init();
 8000908:	f000 fa76 	bl	8000df8 <tcpecho_init>
  httpd_init();
 800090c:	f00a fc18 	bl	800b140 <httpd_init>
  telnet_init();
 8000910:	f000 fca6 	bl	8001260 <telnet_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000914:	2001      	movs	r0, #1
 8000916:	f004 fba1 	bl	800505c <osDelay>
 800091a:	e7fb      	b.n	8000914 <StartDefaultTask+0x18>

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 fe57 	bl	80015e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40002000 	.word	0x40002000

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_MspInit+0x54>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <HAL_MspInit+0x54>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x54>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_MspInit+0x54>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_MspInit+0x54>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_MspInit+0x54>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	210f      	movs	r1, #15
 800098e:	f06f 0001 	mvn.w	r0, #1
 8000992:	f000 ff21 	bl	80017d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0x84>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d12c      	bne.n	8000a20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a10:	2307      	movs	r3, #7
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_UART_MspInit+0x8c>)
 8000a1c:	f002 f956 	bl	8002ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40004800 	.word	0x40004800
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08e      	sub	sp, #56	; 0x38
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <HAL_InitTick+0xe4>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a32      	ldr	r2, [pc, #200]	; (8000b18 <HAL_InitTick+0xe4>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <HAL_InitTick+0xe4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a60:	f107 0210 	add.w	r2, r7, #16
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 ffa4 	bl	80039b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a70:	6a3b      	ldr	r3, [r7, #32]
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d103      	bne.n	8000a82 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a7a:	f002 ff75 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8000a7e:	6378      	str	r0, [r7, #52]	; 0x34
 8000a80:	e004      	b.n	8000a8c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a82:	f002 ff71 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 8000a86:	4603      	mov	r3, r0
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <HAL_InitTick+0xe8>)
 8000a90:	fba2 2303 	umull	r2, r3, r2, r3
 8000a94:	0c9b      	lsrs	r3, r3, #18
 8000a96:	3b01      	subs	r3, #1
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <HAL_InitTick+0xec>)
 8000a9c:	4a21      	ldr	r2, [pc, #132]	; (8000b24 <HAL_InitTick+0xf0>)
 8000a9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <HAL_InitTick+0xec>)
 8000aa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <HAL_InitTick+0xec>)
 8000aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aac:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_InitTick+0xec>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_InitTick+0xec>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_InitTick+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000ac0:	4817      	ldr	r0, [pc, #92]	; (8000b20 <HAL_InitTick+0xec>)
 8000ac2:	f002 ffab 	bl	8003a1c <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d11b      	bne.n	8000b0c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000ad4:	4812      	ldr	r0, [pc, #72]	; (8000b20 <HAL_InitTick+0xec>)
 8000ad6:	f002 fffb 	bl	8003ad0 <HAL_TIM_Base_Start_IT>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d111      	bne.n	8000b0c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ae8:	202d      	movs	r0, #45	; 0x2d
 8000aea:	f000 fe91 	bl	8001810 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d808      	bhi.n	8000b06 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	202d      	movs	r0, #45	; 0x2d
 8000afa:	f000 fe6d 	bl	80017d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_InitTick+0xf4>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e002      	b.n	8000b0c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3738      	adds	r7, #56	; 0x38
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	431bde83 	.word	0x431bde83
 8000b20:	20000394 	.word	0x20000394
 8000b24:	40002000 	.word	0x40002000
 8000b28:	20000004 	.word	0x20000004

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b5e:	f003 f827 	bl	8003bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000394 	.word	0x20000394

08000b6c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <ETH_IRQHandler+0x10>)
 8000b72:	f001 f9d5 	bl	8001f20 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20005700 	.word	0x20005700

08000b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return 1;
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_kill>:

int _kill(int pid, int sig)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <_kill+0x20>)
 8000b9c:	2216      	movs	r2, #22
 8000b9e:	601a      	str	r2, [r3, #0]
  return -1;
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	20011830 	.word	0x20011830

08000bb4 <_exit>:

void _exit (int status)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ffe5 	bl	8000b90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000bc6:	e7fe      	b.n	8000bc6 <_exit+0x12>

08000bc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e00a      	b.n	8000bf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bda:	f3af 8000 	nop.w
 8000bde:	4601      	mov	r1, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	b2ca      	uxtb	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf0      	blt.n	8000bda <_read+0x12>
  }

  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e009      	b.n	8000c28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	60ba      	str	r2, [r7, #8]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbf1      	blt.n	8000c14 <_write+0x12>
  }
  return len;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_close>:

int _close(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c62:	605a      	str	r2, [r3, #4]
  return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <_isatty>:

int _isatty(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cac:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <_sbrk+0x5c>)
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <_sbrk+0x60>)
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <_sbrk+0x64>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <_sbrk+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d205      	bcs.n	8000ce0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <_sbrk+0x6c>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	371c      	adds	r7, #28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	20030000 	.word	0x20030000
 8000d04:	00000400 	.word	0x00000400
 8000d08:	200003dc 	.word	0x200003dc
 8000d0c:	20011840 	.word	0x20011840
 8000d10:	20011830 	.word	0x20011830

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2010      	movs	r0, #16
 8000d46:	f007 f90f 	bl	8007f68 <netconn_new_with_proto_and_callback>
 8000d4a:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d04e      	beq.n	8000df0 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000d52:	2207      	movs	r2, #7
 8000d54:	2100      	movs	r1, #0
 8000d56:	69f8      	ldr	r0, [r7, #28]
 8000d58:	f007 f9c0 	bl	80080dc <netconn_bind>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000d60:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d13f      	bne.n	8000de8 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000d68:	21ff      	movs	r1, #255	; 0xff
 8000d6a:	69f8      	ldr	r0, [r7, #28]
 8000d6c:	f007 f9ee 	bl	800814c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	69f8      	ldr	r0, [r7, #28]
 8000d78:	f007 fa14 	bl	80081a4 <netconn_accept>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000d80:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1f3      	bne.n	8000d70 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d88:	e01b      	b.n	8000dc2 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	f107 020a 	add.w	r2, r7, #10
 8000d90:	f107 010c 	add.w	r1, r7, #12
 8000d94:	4618      	mov	r0, r3
 8000d96:	f009 f9a7 	bl	800a0e8 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	68f9      	ldr	r1, [r7, #12]
 8000d9e:	897b      	ldrh	r3, [r7, #10]
 8000da0:	461a      	mov	r2, r3
 8000da2:	2300      	movs	r3, #0
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2301      	movs	r3, #1
 8000da8:	f007 fc7e 	bl	80086a8 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f009 f9e4 	bl	800a17c <netbuf_next>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	dae7      	bge.n	8000d8a <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f009 f973 	bl	800a0a8 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f107 0210 	add.w	r2, r7, #16
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f007 fbf2 	bl	80085b4 <netconn_recv>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0d9      	beq.n	8000d8a <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f007 fd67 	bl	80088ac <netconn_close>
          netconn_delete(newconn);
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f007 f95f 	bl	80080a4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000de6:	e7c3      	b.n	8000d70 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f007 f95a 	bl	80080a4 <netconn_delete>
    }
  }
}
 8000df0:	bf00      	nop
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000dfe:	2304      	movs	r3, #4
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e06:	2200      	movs	r2, #0
 8000e08:	4903      	ldr	r1, [pc, #12]	; (8000e18 <tcpecho_init+0x20>)
 8000e0a:	4804      	ldr	r0, [pc, #16]	; (8000e1c <tcpecho_init+0x24>)
 8000e0c:	f017 faa6 	bl	801835c <sys_thread_new>
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	08000d39 	.word	0x08000d39
 8000e1c:	08019988 	.word	0x08019988

08000e20 <telnet_process_command>:

#define TELNET_THREAD_PRIO  ( tskIDLE_PRIORITY + 4 )
#define CMD_BUFFER_LEN 2048


static void  telnet_process_command(char *cmd, struct netconn *conn) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b096      	sub	sp, #88	; 0x58
 8000e24:	af02      	add	r7, sp, #8
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]

		char s[64] = "";
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	223c      	movs	r2, #60	; 0x3c
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f017 fc61 	bl	80186fe <memset>
		char *token;
		token = strtok(cmd, " ");
 8000e3c:	49a6      	ldr	r1, [pc, #664]	; (80010d8 <telnet_process_command+0x2b8>)
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f017 fca0 	bl	8018784 <strtok>
 8000e44:	64f8      	str	r0, [r7, #76]	; 0x4c

		if (strcasecmp(token, "HELLO") == 0) {
 8000e46:	49a5      	ldr	r1, [pc, #660]	; (80010dc <telnet_process_command+0x2bc>)
 8000e48:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e4a:	f017 fc61 	bl	8018710 <strcasecmp>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d106      	bne.n	8000e62 <telnet_process_command+0x42>
			sprintf(s, "Komunikace OK\r\n");
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	49a1      	ldr	r1, [pc, #644]	; (80010e0 <telnet_process_command+0x2c0>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f017 fbc2 	bl	80185e4 <siprintf>
 8000e60:	e127      	b.n	80010b2 <telnet_process_command+0x292>
		}

		else if (strcasecmp(token, "LED1") == 0) {
 8000e62:	49a0      	ldr	r1, [pc, #640]	; (80010e4 <telnet_process_command+0x2c4>)
 8000e64:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e66:	f017 fc53 	bl	8018710 <strcasecmp>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d124      	bne.n	8000eba <telnet_process_command+0x9a>
			token = strtok(NULL, " ");
 8000e70:	4999      	ldr	r1, [pc, #612]	; (80010d8 <telnet_process_command+0x2b8>)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f017 fc86 	bl	8018784 <strtok>
 8000e78:	64f8      	str	r0, [r7, #76]	; 0x4c
			if (strcasecmp(token, "ON") == 0){
 8000e7a:	499b      	ldr	r1, [pc, #620]	; (80010e8 <telnet_process_command+0x2c8>)
 8000e7c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e7e:	f017 fc47 	bl	8018710 <strcasecmp>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d105      	bne.n	8000e94 <telnet_process_command+0x74>
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4897      	ldr	r0, [pc, #604]	; (80010ec <telnet_process_command+0x2cc>)
 8000e8e:	f002 f8e1 	bl	8003054 <HAL_GPIO_WritePin>
 8000e92:	e00b      	b.n	8000eac <telnet_process_command+0x8c>
			}


			else if (strcasecmp(token, "OFF") == 0) {
 8000e94:	4996      	ldr	r1, [pc, #600]	; (80010f0 <telnet_process_command+0x2d0>)
 8000e96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e98:	f017 fc3a 	bl	8018710 <strcasecmp>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d104      	bne.n	8000eac <telnet_process_command+0x8c>
				HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4891      	ldr	r0, [pc, #580]	; (80010ec <telnet_process_command+0x2cc>)
 8000ea8:	f002 f8d4 	bl	8003054 <HAL_GPIO_WritePin>
			}
			sprintf(s, "OK\r\n");
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4990      	ldr	r1, [pc, #576]	; (80010f4 <telnet_process_command+0x2d4>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f017 fb96 	bl	80185e4 <siprintf>
 8000eb8:	e0fb      	b.n	80010b2 <telnet_process_command+0x292>
		}

		else if (strcasecmp(token, "LED2") == 0) {
 8000eba:	498f      	ldr	r1, [pc, #572]	; (80010f8 <telnet_process_command+0x2d8>)
 8000ebc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ebe:	f017 fc27 	bl	8018710 <strcasecmp>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d124      	bne.n	8000f12 <telnet_process_command+0xf2>
			token = strtok(NULL, " ");
 8000ec8:	4983      	ldr	r1, [pc, #524]	; (80010d8 <telnet_process_command+0x2b8>)
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f017 fc5a 	bl	8018784 <strtok>
 8000ed0:	64f8      	str	r0, [r7, #76]	; 0x4c
			if (strcasecmp(token, "ON") == 0){
 8000ed2:	4985      	ldr	r1, [pc, #532]	; (80010e8 <telnet_process_command+0x2c8>)
 8000ed4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ed6:	f017 fc1b 	bl	8018710 <strcasecmp>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d105      	bne.n	8000eec <telnet_process_command+0xcc>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	4881      	ldr	r0, [pc, #516]	; (80010ec <telnet_process_command+0x2cc>)
 8000ee6:	f002 f8b5 	bl	8003054 <HAL_GPIO_WritePin>
 8000eea:	e00b      	b.n	8000f04 <telnet_process_command+0xe4>
			}


			else if (strcasecmp(token, "OFF") == 0) {
 8000eec:	4980      	ldr	r1, [pc, #512]	; (80010f0 <telnet_process_command+0x2d0>)
 8000eee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ef0:	f017 fc0e 	bl	8018710 <strcasecmp>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d104      	bne.n	8000f04 <telnet_process_command+0xe4>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	487b      	ldr	r0, [pc, #492]	; (80010ec <telnet_process_command+0x2cc>)
 8000f00:	f002 f8a8 	bl	8003054 <HAL_GPIO_WritePin>
			}
			sprintf(s, "OK\r\n");
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	497a      	ldr	r1, [pc, #488]	; (80010f4 <telnet_process_command+0x2d4>)
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f017 fb6a 	bl	80185e4 <siprintf>
 8000f10:	e0cf      	b.n	80010b2 <telnet_process_command+0x292>
		}
		else if (strcasecmp(token, "LED3") == 0) {
 8000f12:	497a      	ldr	r1, [pc, #488]	; (80010fc <telnet_process_command+0x2dc>)
 8000f14:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f16:	f017 fbfb 	bl	8018710 <strcasecmp>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d126      	bne.n	8000f6e <telnet_process_command+0x14e>
			token = strtok(NULL, " ");
 8000f20:	496d      	ldr	r1, [pc, #436]	; (80010d8 <telnet_process_command+0x2b8>)
 8000f22:	2000      	movs	r0, #0
 8000f24:	f017 fc2e 	bl	8018784 <strtok>
 8000f28:	64f8      	str	r0, [r7, #76]	; 0x4c
			if (strcasecmp(token, "ON") == 0){
 8000f2a:	496f      	ldr	r1, [pc, #444]	; (80010e8 <telnet_process_command+0x2c8>)
 8000f2c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f2e:	f017 fbef 	bl	8018710 <strcasecmp>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d106      	bne.n	8000f46 <telnet_process_command+0x126>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3e:	486b      	ldr	r0, [pc, #428]	; (80010ec <telnet_process_command+0x2cc>)
 8000f40:	f002 f888 	bl	8003054 <HAL_GPIO_WritePin>
 8000f44:	e00c      	b.n	8000f60 <telnet_process_command+0x140>
			}


			else if (strcasecmp(token, "OFF") == 0) {
 8000f46:	496a      	ldr	r1, [pc, #424]	; (80010f0 <telnet_process_command+0x2d0>)
 8000f48:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f4a:	f017 fbe1 	bl	8018710 <strcasecmp>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d105      	bne.n	8000f60 <telnet_process_command+0x140>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f5a:	4864      	ldr	r0, [pc, #400]	; (80010ec <telnet_process_command+0x2cc>)
 8000f5c:	f002 f87a 	bl	8003054 <HAL_GPIO_WritePin>
			}
			sprintf(s, "OK\r\n");
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	4963      	ldr	r1, [pc, #396]	; (80010f4 <telnet_process_command+0x2d4>)
 8000f66:	4618      	mov	r0, r3
 8000f68:	f017 fb3c 	bl	80185e4 <siprintf>
 8000f6c:	e0a1      	b.n	80010b2 <telnet_process_command+0x292>
				}

		else if (strcasecmp(token, "STATUS") == 0) {
 8000f6e:	4964      	ldr	r1, [pc, #400]	; (8001100 <telnet_process_command+0x2e0>)
 8000f70:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f72:	f017 fbcd 	bl	8018710 <strcasecmp>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f040 809a 	bne.w	80010b2 <telnet_process_command+0x292>
			uint8_t LED1;
			LED1 = HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin);
 8000f7e:	2101      	movs	r1, #1
 8000f80:	485a      	ldr	r0, [pc, #360]	; (80010ec <telnet_process_command+0x2cc>)
 8000f82:	f002 f84f 	bl	8003024 <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			uint8_t LED2;
			LED2 = HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin);
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	4857      	ldr	r0, [pc, #348]	; (80010ec <telnet_process_command+0x2cc>)
 8000f90:	f002 f848 	bl	8003024 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			uint8_t LED3;
			LED3 = HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8000f9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9e:	4853      	ldr	r0, [pc, #332]	; (80010ec <telnet_process_command+0x2cc>)
 8000fa0:	f002 f840 	bl	8003024 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

			if ((LED1) && (LED2) && (LED3)) {
 8000faa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00e      	beq.n	8000fd0 <telnet_process_command+0x1b0>
 8000fb2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00a      	beq.n	8000fd0 <telnet_process_command+0x1b0>
 8000fba:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <telnet_process_command+0x1b0>
				sprintf(s, "LED1=ON\r\nLED2=ON\r\nLED3=ON\r\n");
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	494f      	ldr	r1, [pc, #316]	; (8001104 <telnet_process_command+0x2e4>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f017 fb0b 	bl	80185e4 <siprintf>
 8000fce:	e070      	b.n	80010b2 <telnet_process_command+0x292>
			}
			else if ((LED1 == 1) && (LED2 == 0) && (LED3 == 1)) {
 8000fd0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d10e      	bne.n	8000ff6 <telnet_process_command+0x1d6>
 8000fd8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10a      	bne.n	8000ff6 <telnet_process_command+0x1d6>
 8000fe0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d106      	bne.n	8000ff6 <telnet_process_command+0x1d6>
				sprintf(s, "LED1=ON\r\nLED2=OFF\r\nLED3=ON\r\n");
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	4946      	ldr	r1, [pc, #280]	; (8001108 <telnet_process_command+0x2e8>)
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f017 faf8 	bl	80185e4 <siprintf>
 8000ff4:	e05d      	b.n	80010b2 <telnet_process_command+0x292>
			}
			else if ((LED1 == 0) && (LED2 == 1) && (LED3 == 1)) {
 8000ff6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10e      	bne.n	800101c <telnet_process_command+0x1fc>
 8000ffe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001002:	2b01      	cmp	r3, #1
 8001004:	d10a      	bne.n	800101c <telnet_process_command+0x1fc>
 8001006:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800100a:	2b01      	cmp	r3, #1
 800100c:	d106      	bne.n	800101c <telnet_process_command+0x1fc>
				sprintf(s, "LED1=OFF\r\nLED2=ON\r\nLED3=ON\r\n");
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	493e      	ldr	r1, [pc, #248]	; (800110c <telnet_process_command+0x2ec>)
 8001014:	4618      	mov	r0, r3
 8001016:	f017 fae5 	bl	80185e4 <siprintf>
 800101a:	e04a      	b.n	80010b2 <telnet_process_command+0x292>
			}
			else if ((LED1 == 0) && (LED2 == 0) && (LED3 == 1)) {
 800101c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001020:	2b00      	cmp	r3, #0
 8001022:	d10e      	bne.n	8001042 <telnet_process_command+0x222>
 8001024:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10a      	bne.n	8001042 <telnet_process_command+0x222>
 800102c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001030:	2b01      	cmp	r3, #1
 8001032:	d106      	bne.n	8001042 <telnet_process_command+0x222>
				sprintf(s, "LED1=OFF\r\nLED2=OFF\r\nLED3=ON\r\n");
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	4935      	ldr	r1, [pc, #212]	; (8001110 <telnet_process_command+0x2f0>)
 800103a:	4618      	mov	r0, r3
 800103c:	f017 fad2 	bl	80185e4 <siprintf>
 8001040:	e037      	b.n	80010b2 <telnet_process_command+0x292>
			}
			else if ((LED1 == 1) && (LED2 == 0) && (LED3 == 0)) {
 8001042:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001046:	2b01      	cmp	r3, #1
 8001048:	d10e      	bne.n	8001068 <telnet_process_command+0x248>
 800104a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10a      	bne.n	8001068 <telnet_process_command+0x248>
 8001052:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001056:	2b00      	cmp	r3, #0
 8001058:	d106      	bne.n	8001068 <telnet_process_command+0x248>
				sprintf(s, "LED1=ON\r\nLED2=OFF\r\nLED3=OFF\r\n");
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	492d      	ldr	r1, [pc, #180]	; (8001114 <telnet_process_command+0x2f4>)
 8001060:	4618      	mov	r0, r3
 8001062:	f017 fabf 	bl	80185e4 <siprintf>
 8001066:	e024      	b.n	80010b2 <telnet_process_command+0x292>
			}
			else if ((LED1 == 0) && (LED2 == 1) && (LED3 == 0)) {
 8001068:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10e      	bne.n	800108e <telnet_process_command+0x26e>
 8001070:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001074:	2b01      	cmp	r3, #1
 8001076:	d10a      	bne.n	800108e <telnet_process_command+0x26e>
 8001078:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800107c:	2b00      	cmp	r3, #0
 800107e:	d106      	bne.n	800108e <telnet_process_command+0x26e>
				sprintf(s, "LED1=OFF\r\nLED2=ON\r\nLED3=OFF\r\n");
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	4924      	ldr	r1, [pc, #144]	; (8001118 <telnet_process_command+0x2f8>)
 8001086:	4618      	mov	r0, r3
 8001088:	f017 faac 	bl	80185e4 <siprintf>
 800108c:	e011      	b.n	80010b2 <telnet_process_command+0x292>
			}
			else if ((LED1 == 0) && (LED2 == 0) && (LED3 == 0)) {
 800108e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10d      	bne.n	80010b2 <telnet_process_command+0x292>
 8001096:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800109a:	2b00      	cmp	r3, #0
 800109c:	d109      	bne.n	80010b2 <telnet_process_command+0x292>
 800109e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d105      	bne.n	80010b2 <telnet_process_command+0x292>
				sprintf(s, "LED1=OFF\r\nLED2=OFF\r\nLED3=OFF\r\n");
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	491c      	ldr	r1, [pc, #112]	; (800111c <telnet_process_command+0x2fc>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f017 fa99 	bl	80185e4 <siprintf>
			}
		}
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f8a4 	bl	8000204 <strlen>
 80010bc:	4602      	mov	r2, r0
 80010be:	f107 0108 	add.w	r1, r7, #8
 80010c2:	2300      	movs	r3, #0
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	6838      	ldr	r0, [r7, #0]
 80010ca:	f007 faed 	bl	80086a8 <netconn_write_partly>


	}
 80010ce:	bf00      	nop
 80010d0:	3750      	adds	r7, #80	; 0x50
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	08019998 	.word	0x08019998
 80010dc:	0801999c 	.word	0x0801999c
 80010e0:	080199a4 	.word	0x080199a4
 80010e4:	080199b4 	.word	0x080199b4
 80010e8:	080199bc 	.word	0x080199bc
 80010ec:	40020400 	.word	0x40020400
 80010f0:	080199c0 	.word	0x080199c0
 80010f4:	080199c4 	.word	0x080199c4
 80010f8:	080199cc 	.word	0x080199cc
 80010fc:	080199d4 	.word	0x080199d4
 8001100:	080199dc 	.word	0x080199dc
 8001104:	080199e4 	.word	0x080199e4
 8001108:	08019a00 	.word	0x08019a00
 800110c:	08019a20 	.word	0x08019a20
 8001110:	08019a40 	.word	0x08019a40
 8001114:	08019a60 	.word	0x08019a60
 8001118:	08019a80 	.word	0x08019a80
 800111c:	08019aa0 	.word	0x08019aa0

08001120 <telnet_byte_available>:



/*-----------------------------------------------------------------------------------*/
static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
 static uint16_t cnt;
 static char data[CMD_BUFFER_LEN];
 if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <telnet_byte_available+0x68>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001134:	d210      	bcs.n	8001158 <telnet_byte_available+0x38>
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b1f      	cmp	r3, #31
 800113a:	d90d      	bls.n	8001158 <telnet_byte_available+0x38>
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db09      	blt.n	8001158 <telnet_byte_available+0x38>
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <telnet_byte_available+0x68>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	b291      	uxth	r1, r2
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <telnet_byte_available+0x68>)
 800114e:	8011      	strh	r1, [r2, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	4a0e      	ldr	r2, [pc, #56]	; (800118c <telnet_byte_available+0x6c>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	5453      	strb	r3, [r2, r1]
 if (c == '\n' || c == '\r') {
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2b0a      	cmp	r3, #10
 800115c:	d002      	beq.n	8001164 <telnet_byte_available+0x44>
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b0d      	cmp	r3, #13
 8001162:	d10c      	bne.n	800117e <telnet_byte_available+0x5e>
 data[cnt] = '\0';
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <telnet_byte_available+0x68>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <telnet_byte_available+0x6c>)
 800116c:	2100      	movs	r1, #0
 800116e:	5499      	strb	r1, [r3, r2]
 telnet_process_command(data, conn);
 8001170:	6839      	ldr	r1, [r7, #0]
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <telnet_byte_available+0x6c>)
 8001174:	f7ff fe54 	bl	8000e20 <telnet_process_command>
 cnt = 0;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <telnet_byte_available+0x68>)
 800117a:	2200      	movs	r2, #0
 800117c:	801a      	strh	r2, [r3, #0]
 }
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200003e0 	.word	0x200003e0
 800118c:	200003e4 	.word	0x200003e4

08001190 <telnet_thread>:

/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2010      	movs	r0, #16
 800119e:	f006 fee3 	bl	8007f68 <netconn_new_with_proto_and_callback>
 80011a2:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d055      	beq.n	8001256 <telnet_thread+0xc6>
  {  
    /* Bind connection to well known port number 23. */
    err = netconn_bind(conn, NULL, 23);
 80011aa:	2217      	movs	r2, #23
 80011ac:	2100      	movs	r1, #0
 80011ae:	69f8      	ldr	r0, [r7, #28]
 80011b0:	f006 ff94 	bl	80080dc <netconn_bind>
 80011b4:	4603      	mov	r3, r0
 80011b6:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 80011b8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d146      	bne.n	800124e <telnet_thread+0xbe>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 80011c0:	21ff      	movs	r1, #255	; 0xff
 80011c2:	69f8      	ldr	r0, [r7, #28]
 80011c4:	f006 ffc2 	bl	800814c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	69f8      	ldr	r0, [r7, #28]
 80011d0:	f006 ffe8 	bl	80081a4 <netconn_accept>
 80011d4:	4603      	mov	r3, r0
 80011d6:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 80011d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f3      	bne.n	80011c8 <telnet_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 80011e0:	e022      	b.n	8001228 <telnet_thread+0x98>
          {
            do 
            {
              //netbuf_data(buf, &data, &len);
              //netconn_write(newconn, data, len, NETCONN_COPY);
            	netbuf_data(buf, (void**)&data, &len);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	f107 020a 	add.w	r2, r7, #10
 80011e8:	f107 010c 	add.w	r1, r7, #12
 80011ec:	4618      	mov	r0, r3
 80011ee:	f008 ff7b 	bl	800a0e8 <netbuf_data>
            	while (len--) telnet_byte_available(*data++, newconn);
 80011f2:	e008      	b.n	8001206 <telnet_thread+0x76>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	60fa      	str	r2, [r7, #12]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff8d 	bl	8001120 <telnet_byte_available>
 8001206:	897b      	ldrh	r3, [r7, #10]
 8001208:	1e5a      	subs	r2, r3, #1
 800120a:	b292      	uxth	r2, r2
 800120c:	817a      	strh	r2, [r7, #10]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <telnet_thread+0x64>

            } 
            while (netbuf_next(buf) >= 0);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4618      	mov	r0, r3
 8001216:	f008 ffb1 	bl	800a17c <netbuf_next>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	dae0      	bge.n	80011e2 <telnet_thread+0x52>
          
            netbuf_delete(buf);
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4618      	mov	r0, r3
 8001224:	f008 ff40 	bl	800a0a8 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f107 0210 	add.w	r2, r7, #16
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f007 f9bf 	bl	80085b4 <netconn_recv>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0d2      	beq.n	80011e2 <telnet_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	4618      	mov	r0, r3
 8001240:	f007 fb34 	bl	80088ac <netconn_close>
          netconn_delete(newconn);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	4618      	mov	r0, r3
 8001248:	f006 ff2c 	bl	80080a4 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 800124c:	e7bc      	b.n	80011c8 <telnet_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	4618      	mov	r0, r3
 8001252:	f006 ff27 	bl	80080a4 <netconn_delete>
    }
  }
}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af02      	add	r7, sp, #8
  sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
 8001266:	2304      	movs	r3, #4
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126e:	2200      	movs	r2, #0
 8001270:	4903      	ldr	r1, [pc, #12]	; (8001280 <telnet_init+0x20>)
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <telnet_init+0x24>)
 8001274:	f017 f872 	bl	801835c <sys_thread_new>
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	08001191 	.word	0x08001191
 8001284:	08019ac0 	.word	0x08019ac0

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800128c:	480d      	ldr	r0, [pc, #52]	; (80012c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800128e:	490e      	ldr	r1, [pc, #56]	; (80012c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001290:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a4:	4c0b      	ldr	r4, [pc, #44]	; (80012d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012b2:	f7ff fd2f 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f017 fb5d 	bl	8018974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff f999 	bl	80005f0 <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012cc:	08027af0 	.word	0x08027af0
  ldr r2, =_sbss
 80012d0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012d4:	20011840 	.word	0x20011840

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>

080012da <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <LAN8742_RegisterBusIO+0x28>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <LAN8742_RegisterBusIO+0x28>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <LAN8742_RegisterBusIO+0x28>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e014      	b.n	8001332 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d17c      	bne.n	8001458 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2220      	movs	r2, #32
 8001370:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e01c      	b.n	80013b2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	f107 0208 	add.w	r2, r7, #8
 8001380:	2112      	movs	r1, #18
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	4798      	blx	r3
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	da03      	bge.n	8001394 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800138c:	f06f 0304 	mvn.w	r3, #4
 8001390:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001392:	e00b      	b.n	80013ac <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	d105      	bne.n	80013ac <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
         break;
 80013aa:	e005      	b.n	80013b8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3301      	adds	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2b1f      	cmp	r3, #31
 80013b6:	d9df      	bls.n	8001378 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b1f      	cmp	r3, #31
 80013be:	d902      	bls.n	80013c6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80013c0:	f06f 0302 	mvn.w	r3, #2
 80013c4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d145      	bne.n	8001458 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6810      	ldr	r0, [r2, #0]
 80013d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013d8:	2100      	movs	r1, #0
 80013da:	4798      	blx	r3
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db37      	blt.n	8001452 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6810      	ldr	r0, [r2, #0]
 80013ea:	f107 0208 	add.w	r2, r7, #8
 80013ee:	2100      	movs	r1, #0
 80013f0:	4798      	blx	r3
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db28      	blt.n	800144a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4798      	blx	r3
 80013fe:	4603      	mov	r3, r0
 8001400:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001402:	e01c      	b.n	800143e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4798      	blx	r3
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001416:	d80e      	bhi.n	8001436 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6810      	ldr	r0, [r2, #0]
 8001420:	f107 0208 	add.w	r2, r7, #8
 8001424:	2100      	movs	r1, #0
 8001426:	4798      	blx	r3
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	da07      	bge.n	800143e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800142e:	f06f 0304 	mvn.w	r3, #4
 8001432:	613b      	str	r3, [r7, #16]
                 break;
 8001434:	e010      	b.n	8001458 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001436:	f06f 0301 	mvn.w	r3, #1
 800143a:	613b      	str	r3, [r7, #16]
               break;
 800143c:	e00c      	b.n	8001458 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1dd      	bne.n	8001404 <LAN8742_Init+0xc6>
 8001448:	e006      	b.n	8001458 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800144a:	f06f 0304 	mvn.w	r3, #4
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	e002      	b.n	8001458 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001452:	f06f 0303 	mvn.w	r3, #3
 8001456:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d112      	bne.n	8001484 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	4798      	blx	r3
 8001464:	4603      	mov	r3, r0
 8001466:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001468:	bf00      	nop
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	4798      	blx	r3
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800147c:	d9f5      	bls.n	800146a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001484:	693b      	ldr	r3, [r7, #16]
 }
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6810      	ldr	r0, [r2, #0]
 80014a2:	f107 020c 	add.w	r2, r7, #12
 80014a6:	2101      	movs	r1, #1
 80014a8:	4798      	blx	r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da02      	bge.n	80014b6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014b0:	f06f 0304 	mvn.w	r3, #4
 80014b4:	e06e      	b.n	8001594 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6810      	ldr	r0, [r2, #0]
 80014be:	f107 020c 	add.w	r2, r7, #12
 80014c2:	2101      	movs	r1, #1
 80014c4:	4798      	blx	r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	da02      	bge.n	80014d2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014cc:	f06f 0304 	mvn.w	r3, #4
 80014d0:	e060      	b.n	8001594 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80014dc:	2301      	movs	r3, #1
 80014de:	e059      	b.n	8001594 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6810      	ldr	r0, [r2, #0]
 80014e8:	f107 020c 	add.w	r2, r7, #12
 80014ec:	2100      	movs	r1, #0
 80014ee:	4798      	blx	r3
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da02      	bge.n	80014fc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014f6:	f06f 0304 	mvn.w	r3, #4
 80014fa:	e04b      	b.n	8001594 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d11b      	bne.n	800153e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <LAN8742_GetLinkState+0x90>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800151a:	2302      	movs	r3, #2
 800151c:	e03a      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001528:	2303      	movs	r3, #3
 800152a:	e033      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001536:	2304      	movs	r3, #4
 8001538:	e02c      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800153a:	2305      	movs	r3, #5
 800153c:	e02a      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6810      	ldr	r0, [r2, #0]
 8001546:	f107 020c 	add.w	r2, r7, #12
 800154a:	211f      	movs	r1, #31
 800154c:	4798      	blx	r3
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	da02      	bge.n	800155a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001554:	f06f 0304 	mvn.w	r3, #4
 8001558:	e01c      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001564:	2306      	movs	r3, #6
 8001566:	e015      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 031c 	and.w	r3, r3, #28
 800156e:	2b18      	cmp	r3, #24
 8001570:	d101      	bne.n	8001576 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001572:	2302      	movs	r3, #2
 8001574:	e00e      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f003 031c 	and.w	r3, r3, #28
 800157c:	2b08      	cmp	r3, #8
 800157e:	d101      	bne.n	8001584 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001580:	2303      	movs	r3, #3
 8001582:	e007      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 031c 	and.w	r3, r3, #28
 800158a:	2b14      	cmp	r3, #20
 800158c:	d101      	bne.n	8001592 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800158e:	2304      	movs	r3, #4
 8001590:	e000      	b.n	8001594 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001592:	2305      	movs	r3, #5
    }				
  }
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <HAL_Init+0x40>)
 80015a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_Init+0x40>)
 80015b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_Init+0x40>)
 80015be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f8fc 	bl	80017c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	200f      	movs	r0, #15
 80015cc:	f7ff fa32 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff f9bc 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000008 	.word	0x20000008
 8001604:	20000be4 	.word	0x20000be4

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000be4 	.word	0x20000be4

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000008 	.word	0x20000008

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ff4c 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ea:	f7ff ff61 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 80017ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	6978      	ldr	r0, [r7, #20]
 80017f6:	f7ff ffb1 	bl	800175c <NVIC_EncodePriority>
 80017fa:	4602      	mov	r2, r0
 80017fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ff80 	bl	8001708 <__NVIC_SetPriority>
}
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff54 	bl	80016cc <__NVIC_EnableIRQ>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06c      	b.n	8001918 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001844:	2b00      	cmp	r3, #0
 8001846:	d106      	bne.n	8001856 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2223      	movs	r2, #35	; 0x23
 800184c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f003 f951 	bl	8004af8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <HAL_ETH_Init+0xf4>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a30      	ldr	r2, [pc, #192]	; (8001920 <HAL_ETH_Init+0xf4>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_ETH_Init+0xf4>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001872:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <HAL_ETH_Init+0xf8>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a2b      	ldr	r2, [pc, #172]	; (8001924 <HAL_ETH_Init+0xf8>)
 8001878:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800187c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800187e:	4b29      	ldr	r3, [pc, #164]	; (8001924 <HAL_ETH_Init+0xf8>)
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	4927      	ldr	r1, [pc, #156]	; (8001924 <HAL_ETH_Init+0xf8>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_ETH_Init+0xf8>)
 800188e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a8:	f7ff feae 	bl	8001608 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018ae:	e011      	b.n	80018d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80018b0:	f7ff feaa 	bl	8001608 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018be:	d909      	bls.n	80018d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2204      	movs	r2, #4
 80018c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	22e0      	movs	r2, #224	; 0xe0
 80018cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e021      	b.n	8001918 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1e4      	bne.n	80018b0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 ff4a 	bl	8002780 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fff1 	bl	80028d4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f001 f847 	bl	8002986 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	461a      	mov	r2, r3
 80018fe:	2100      	movs	r1, #0
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 ffaf 	bl	8002864 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2210      	movs	r2, #16
 8001912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800
 8001924:	40013800 	.word	0x40013800

08001928 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001936:	2b10      	cmp	r3, #16
 8001938:	d17f      	bne.n	8001a3a <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2223      	movs	r2, #35	; 0x23
 800193e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001956:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001968:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800196c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001980:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2204      	movs	r2, #4
 8001988:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f9f8 	bl	8001d80 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0208 	orr.w	r2, r2, #8
 800199e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019a8:	2001      	movs	r0, #1
 80019aa:	f7ff fe39 	bl	8001620 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0204 	orr.w	r2, r2, #4
 80019c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f7ff fe26 	bl	8001620 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fd70 	bl	80024c2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019f8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a10:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001a24:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001a28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a2c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2223      	movs	r2, #35	; 0x23
 8001a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
  }
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a52:	2b23      	cmp	r3, #35	; 0x23
 8001a54:	d170      	bne.n	8001b38 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2223      	movs	r2, #35	; 0x23
 8001a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001a70:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001a74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a78:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a90:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	f023 0302 	bic.w	r3, r3, #2
 8001aa4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aa8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0204 	bic.w	r2, r2, #4
 8001ab8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f7ff fdac 	bl	8001620 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fcf6 	bl	80024c2 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0208 	bic.w	r2, r2, #8
 8001ae4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff fd96 	bl	8001620 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e00e      	b.n	8001b20 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	3212      	adds	r2, #18
 8001b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d9ed      	bls.n	8001b02 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2210      	movs	r2, #16
 8001b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e000      	b.n	8001b3a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
  }
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e045      	b.n	8001bf2 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b6c:	2b23      	cmp	r3, #35	; 0x23
 8001b6e:	d13f      	bne.n	8001bf0 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 ff6f 	bl	8002a60 <ETH_Prepare_Tx_Descriptors>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d009      	beq.n	8001b9c <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8e:	f043 0202 	orr.w	r2, r3, #2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e02a      	b.n	8001bf2 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b9c:	f3bf 8f4f 	dsb	sy
}
 8001ba0:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d904      	bls.n	8001bbe <HAL_ETH_Transmit_IT+0x7c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	1f1a      	subs	r2, r3, #4
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00d      	beq.n	8001bec <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2304      	movs	r3, #4
 8001bdc:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be6:	461a      	mov	r2, r3
 8001be8:	2300      	movs	r3, #0
 8001bea:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e000      	b.n	8001bf2 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
  }
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b088      	sub	sp, #32
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c18:	f043 0201 	orr.w	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0a8      	b.n	8001d78 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c2c:	2b23      	cmp	r3, #35	; 0x23
 8001c2e:	d001      	beq.n	8001c34 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0a1      	b.n	8001d78 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	3212      	adds	r2, #18
 8001c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c44:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c4a:	f1c3 0304 	rsb	r3, r3, #4
 8001c4e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c50:	e06a      	b.n	8001d28 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	699a      	ldr	r2, [r3, #24]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <HAL_ETH_ReadData+0x88>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d040      	beq.n	8001d04 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00c      	beq.n	8001cc6 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
 8001cb2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001cb6:	3b04      	subs	r3, #4
 8001cb8:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001cde:	461a      	mov	r2, r3
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	f003 f8e2 	bl	8004eac <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	441a      	add	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	3301      	adds	r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d902      	bls.n	8001d16 <HAL_ETH_ReadData+0x11c>
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	3b04      	subs	r3, #4
 8001d14:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	3212      	adds	r2, #18
 8001d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d20:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db06      	blt.n	8001d3e <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d202      	bcs.n	8001d3e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d089      	beq.n	8001c52 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	441a      	add	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f814 	bl	8001d80 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d108      	bne.n	8001d76 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d94:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	3212      	adds	r2, #18
 8001d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001da8:	e040      	b.n	8001e2c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d112      	bne.n	8001dd8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001db2:	f107 030c 	add.w	r3, r7, #12
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 f848 	bl	8004e4c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	74fb      	strb	r3, [r7, #19]
 8001dc6:	e007      	b.n	8001dd8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001dd8:	7cfb      	ldrb	r3, [r7, #19]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d026      	beq.n	8001e2c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d103      	bne.n	8001dee <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	4a1e      	ldr	r2, [pc, #120]	; (8001e64 <ETH_UpdateDescriptor+0xe4>)
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	e003      	b.n	8001df6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001df4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001df6:	f3bf 8f5f 	dmb	sy
}
 8001dfa:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d902      	bls.n	8001e1a <ETH_UpdateDescriptor+0x9a>
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	3b04      	subs	r3, #4
 8001e18:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	3212      	adds	r2, #18
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	617b      	str	r3, [r7, #20]
      desccount--;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <ETH_UpdateDescriptor+0xb8>
 8001e32:	7cfb      	ldrb	r3, [r7, #19]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1b8      	bne.n	8001daa <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d00c      	beq.n	8001e5c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3720      	adds	r7, #32
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	80004600 	.word	0x80004600

08001e68 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3318      	adds	r3, #24
 8001e74:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001e82:	2301      	movs	r3, #1
 8001e84:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001e86:	e03f      	b.n	8001f08 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	3304      	adds	r3, #4
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001eb0:	7bbb      	ldrb	r3, [r7, #14]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d028      	beq.n	8001f08 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68d9      	ldr	r1, [r3, #12]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db1b      	blt.n	8001f04 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 f827 	bl	8004f2c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	2200      	movs	r2, #0
 8001eea:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f02:	e001      	b.n	8001f08 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d002      	beq.n	8001f14 <HAL_ETH_ReleaseTxPacket+0xac>
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1b9      	bne.n	8001e88 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	d112      	bne.n	8001f60 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f48:	2b40      	cmp	r3, #64	; 0x40
 8001f4a:	d109      	bne.n	8001f60 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b50      	ldr	r3, [pc, #320]	; (8002098 <HAL_ETH_IRQHandler+0x178>)
 8001f58:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f002 fb30 	bl	80045c0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d113      	bne.n	8001f9a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d10a      	bne.n	8001f9a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001f92:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f002 fb23 	bl	80045e0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fac:	d14c      	bne.n	8002048 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fc0:	d142      	bne.n	8002048 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc8:	f043 0208 	orr.w	r2, r3, #8
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe4:	d11a      	bne.n	800201c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <HAL_ETH_IRQHandler+0x17c>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800200c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002010:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	22e0      	movs	r2, #224	; 0xe0
 8002016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800201a:	e012      	b.n	8002042 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	f248 6380 	movw	r3, #34432	; 0x8680
 800202a:	4013      	ands	r3, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203a:	461a      	mov	r2, r3
 800203c:	f248 6380 	movw	r3, #34432	; 0x8680
 8002040:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f002 fadc 	bl	8004600 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b08      	cmp	r3, #8
 8002054:	d10e      	bne.n	8002074 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f81c 	bl	80020a4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_ETH_IRQHandler+0x180>)
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <HAL_ETH_IRQHandler+0x180>)
 8002082:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002086:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f815 	bl	80020b8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	00010040 	.word	0x00010040
 800209c:	007e2000 	.word	0x007e2000
 80020a0:	40013c00 	.word	0x40013c00

080020a4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 031c 	and.w	r3, r3, #28
 80020e8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	02db      	lsls	r3, r3, #11
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	019b      	lsls	r3, r3, #6
 80020fa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f023 0302 	bic.w	r3, r3, #2
 800210a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800211c:	f7ff fa74 	bl	8001608 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002122:	e00d      	b.n	8002140 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002124:	f7ff fa70 	bl	8001608 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002132:	d301      	bcc.n	8002138 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e010      	b.n	800215a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1ec      	bne.n	8002124 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	b29b      	uxth	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b086      	sub	sp, #24
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f003 031c 	and.w	r3, r3, #28
 800217e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	02db      	lsls	r3, r3, #11
 8002184:	b29b      	uxth	r3, r3
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	019b      	lsls	r3, r3, #6
 8002190:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021bc:	f7ff fa24 	bl	8001608 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021c2:	e00d      	b.n	80021e0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80021c4:	f7ff fa20 	bl	8001608 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d2:	d301      	bcc.n	80021d8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e009      	b.n	80021ec <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1ec      	bne.n	80021c4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0d9      	b.n	80023bc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b00      	cmp	r3, #0
 8002214:	bf14      	ite	ne
 8002216:	2301      	movne	r3, #1
 8002218:	2300      	moveq	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf14      	ite	ne
 800225c:	2301      	movne	r3, #1
 800225e:	2300      	moveq	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf14      	ite	ne
 8002290:	2301      	movne	r3, #1
 8002292:	2300      	moveq	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bf14      	ite	ne
 80022fa:	2301      	movne	r3, #1
 80022fc:	2300      	moveq	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231e:	2b00      	cmp	r3, #0
 8002320:	bf14      	ite	ne
 8002322:	2301      	movne	r3, #1
 8002324:	2300      	moveq	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf14      	ite	ne
 800233c:	2301      	movne	r3, #1
 800233e:	2300      	moveq	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	461a      	mov	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	0c1b      	lsrs	r3, r3, #16
 800237c:	b29a      	uxth	r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf14      	ite	ne
 8002390:	2301      	movne	r3, #1
 8002392:	2300      	moveq	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf14      	ite	ne
 80023ac:	2301      	movne	r3, #1
 80023ae:	2300      	moveq	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e00b      	b.n	80023f4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023e2:	2b10      	cmp	r3, #16
 80023e4:	d105      	bne.n	80023f2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80023e6:	6839      	ldr	r1, [r7, #0]
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f88f 	bl	800250c <ETH_SetMACConfig>

    return HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e000      	b.n	80023f4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
  }
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f023 031c 	bic.w	r3, r3, #28
 8002412:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002414:	f001 fa9c 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8002418:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <HAL_ETH_SetMDIOClockRange+0x98>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d908      	bls.n	8002434 <HAL_ETH_SetMDIOClockRange+0x38>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d804      	bhi.n	8002434 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	e027      	b.n	8002484 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d908      	bls.n	800244e <HAL_ETH_SetMDIOClockRange+0x52>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d204      	bcs.n	800244e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f043 030c 	orr.w	r3, r3, #12
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	e01a      	b.n	8002484 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	4a12      	ldr	r2, [pc, #72]	; (800249c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d303      	bcc.n	800245e <HAL_ETH_SetMDIOClockRange+0x62>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4a11      	ldr	r2, [pc, #68]	; (80024a0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d911      	bls.n	8002482 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d908      	bls.n	8002478 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d804      	bhi.n	8002478 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	e005      	b.n	8002484 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f043 0310 	orr.w	r3, r3, #16
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e000      	b.n	8002484 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002482:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	611a      	str	r2, [r3, #16]
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	01312cff 	.word	0x01312cff
 8002498:	02160ebf 	.word	0x02160ebf
 800249c:	03938700 	.word	0x03938700
 80024a0:	05f5e0ff 	.word	0x05f5e0ff
 80024a4:	08f0d17f 	.word	0x08f0d17f

080024a8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024e4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7ff f894 	bl	8001620 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002502:	6193      	str	r3, [r2, #24]
}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4b51      	ldr	r3, [pc, #324]	; (8002668 <ETH_SetMACConfig+0x15c>)
 8002522:	4013      	ands	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	7c1b      	ldrb	r3, [r3, #16]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <ETH_SetMACConfig+0x28>
 800252e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002532:	e000      	b.n	8002536 <ETH_SetMACConfig+0x2a>
 8002534:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	7c5b      	ldrb	r3, [r3, #17]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d102      	bne.n	8002544 <ETH_SetMACConfig+0x38>
 800253e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002542:	e000      	b.n	8002546 <ETH_SetMACConfig+0x3a>
 8002544:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002546:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800254c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	7fdb      	ldrb	r3, [r3, #31]
 8002552:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002554:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800255a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	7f92      	ldrb	r2, [r2, #30]
 8002560:	2a00      	cmp	r2, #0
 8002562:	d102      	bne.n	800256a <ETH_SetMACConfig+0x5e>
 8002564:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002568:	e000      	b.n	800256c <ETH_SetMACConfig+0x60>
 800256a:	2200      	movs	r2, #0
                        macconf->Speed |
 800256c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	7f1b      	ldrb	r3, [r3, #28]
 8002572:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002574:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800257a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	791b      	ldrb	r3, [r3, #4]
 8002580:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002582:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	f892 2020 	ldrb.w	r2, [r2, #32]
 800258a:	2a00      	cmp	r2, #0
 800258c:	d102      	bne.n	8002594 <ETH_SetMACConfig+0x88>
 800258e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002592:	e000      	b.n	8002596 <ETH_SetMACConfig+0x8a>
 8002594:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002596:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	7bdb      	ldrb	r3, [r3, #15]
 800259c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800259e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80025a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025ac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025ae:	4313      	orrs	r3, r2
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f7ff f82a 	bl	8001620 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	f64f 7341 	movw	r3, #65345	; 0xff41
 80025e2:	4013      	ands	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80025f2:	2a00      	cmp	r2, #0
 80025f4:	d101      	bne.n	80025fa <ETH_SetMACConfig+0xee>
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	e000      	b.n	80025fc <ETH_SetMACConfig+0xf0>
 80025fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025fc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002602:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800260a:	2a01      	cmp	r2, #1
 800260c:	d101      	bne.n	8002612 <ETH_SetMACConfig+0x106>
 800260e:	2208      	movs	r2, #8
 8002610:	e000      	b.n	8002614 <ETH_SetMACConfig+0x108>
 8002612:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002614:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800261c:	2a01      	cmp	r2, #1
 800261e:	d101      	bne.n	8002624 <ETH_SetMACConfig+0x118>
 8002620:	2204      	movs	r2, #4
 8002622:	e000      	b.n	8002626 <ETH_SetMACConfig+0x11a>
 8002624:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002626:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800262e:	2a01      	cmp	r2, #1
 8002630:	d101      	bne.n	8002636 <ETH_SetMACConfig+0x12a>
 8002632:	2202      	movs	r2, #2
 8002634:	e000      	b.n	8002638 <ETH_SetMACConfig+0x12c>
 8002636:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002638:	4313      	orrs	r3, r2
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002650:	2001      	movs	r0, #1
 8002652:	f7fe ffe5 	bl	8001620 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	619a      	str	r2, [r3, #24]
}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	ff20810f 	.word	0xff20810f

0800266c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4b3d      	ldr	r3, [pc, #244]	; (800277c <ETH_SetDMAConfig+0x110>)
 8002686:	4013      	ands	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	7b1b      	ldrb	r3, [r3, #12]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <ETH_SetDMAConfig+0x2c>
 8002692:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002696:	e000      	b.n	800269a <ETH_SetDMAConfig+0x2e>
 8002698:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	7b5b      	ldrb	r3, [r3, #13]
 800269e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026a0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	7f52      	ldrb	r2, [r2, #29]
 80026a6:	2a00      	cmp	r2, #0
 80026a8:	d102      	bne.n	80026b0 <ETH_SetDMAConfig+0x44>
 80026aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026ae:	e000      	b.n	80026b2 <ETH_SetDMAConfig+0x46>
 80026b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80026b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	7b9b      	ldrb	r3, [r3, #14]
 80026b8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80026ba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80026c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	7f1b      	ldrb	r3, [r3, #28]
 80026c6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80026c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	7f9b      	ldrb	r3, [r3, #30]
 80026ce:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80026d0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80026d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026de:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80026e0:	4313      	orrs	r3, r2
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f0:	461a      	mov	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002702:	2001      	movs	r0, #1
 8002704:	f7fe ff8c 	bl	8001620 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002710:	461a      	mov	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	791b      	ldrb	r3, [r3, #4]
 800271a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002720:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002726:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800272c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002734:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002736:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800273e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002744:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800274e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002752:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002760:	2001      	movs	r0, #1
 8002762:	f7fe ff5d 	bl	8001620 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	f8de3f23 	.word	0xf8de3f23

08002780 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b0a6      	sub	sp, #152	; 0x98
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002794:	2300      	movs	r3, #0
 8002796:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800279e:	2301      	movs	r3, #1
 80027a0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027bc:	2300      	movs	r3, #0
 80027be:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027e6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027f8:	4619      	mov	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff fe86 	bl	800250c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002800:	2301      	movs	r3, #1
 8002802:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002804:	2301      	movs	r3, #1
 8002806:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002808:	2301      	movs	r3, #1
 800280a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800280e:	2301      	movs	r3, #1
 8002810:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002822:	2300      	movs	r3, #0
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002826:	2301      	movs	r3, #1
 8002828:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800282c:	2301      	movs	r3, #1
 800282e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002834:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002836:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800283a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800283c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002840:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002842:	2301      	movs	r3, #1
 8002844:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002848:	2300      	movs	r3, #0
 800284a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002850:	f107 0308 	add.w	r3, r7, #8
 8002854:	4619      	mov	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ff08 	bl	800266c <ETH_SetDMAConfig>
}
 800285c:	bf00      	nop
 800285e:	3798      	adds	r7, #152	; 0x98
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3305      	adds	r3, #5
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	3204      	adds	r2, #4
 800287c:	7812      	ldrb	r2, [r2, #0]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <ETH_MACAddressConfig+0x68>)
 8002886:	4413      	add	r3, r2
 8002888:	461a      	mov	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3303      	adds	r3, #3
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	061a      	lsls	r2, r3, #24
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3302      	adds	r3, #2
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	041b      	lsls	r3, r3, #16
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3301      	adds	r3, #1
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	4313      	orrs	r3, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <ETH_MACAddressConfig+0x6c>)
 80028b6:	4413      	add	r3, r2
 80028b8:	461a      	mov	r2, r3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	6013      	str	r3, [r2, #0]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40028040 	.word	0x40028040
 80028d0:	40028044 	.word	0x40028044

080028d4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e03e      	b.n	8002960 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68d9      	ldr	r1, [r3, #12]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2200      	movs	r2, #0
 80028fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2200      	movs	r2, #0
 800290a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	3206      	adds	r2, #6
 8002914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d80c      	bhi.n	8002944 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68d9      	ldr	r1, [r3, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	461a      	mov	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	e004      	b.n	800294e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	461a      	mov	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3301      	adds	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b03      	cmp	r3, #3
 8002964:	d9bd      	bls.n	80028e2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002978:	611a      	str	r2, [r3, #16]
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e046      	b.n	8002a22 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6919      	ldr	r1, [r3, #16]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2200      	movs	r2, #0
 80029b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2200      	movs	r2, #0
 80029c2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2200      	movs	r2, #0
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80029d0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80029d8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029e6:	68b9      	ldr	r1, [r7, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	3212      	adds	r2, #18
 80029ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d80c      	bhi.n	8002a12 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6919      	ldr	r1, [r3, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	e004      	b.n	8002a1c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d9b5      	bls.n	8002994 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a52:	60da      	str	r2, [r3, #12]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b08d      	sub	sp, #52	; 0x34
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3318      	adds	r3, #24
 8002a70:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a8a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aa2:	d007      	beq.n	8002ab4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e103      	b.n	8002cc0 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	3301      	adds	r3, #1
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002ad0:	f023 031f 	bic.w	r3, r3, #31
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	6852      	ldr	r2, [r2, #4]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b3e:	f3bf 8f5f 	dmb	sy
}
 8002b42:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002b50:	e084      	b.n	8002c5c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d006      	beq.n	8002b72 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e005      	b.n	8002b7e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	3301      	adds	r3, #1
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d902      	bls.n	8002b90 <ETH_Prepare_Tx_Descriptors+0x130>
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	3b04      	subs	r3, #4
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b98:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bb2:	d007      	beq.n	8002bc4 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	3304      	adds	r3, #4
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d029      	beq.n	8002c18 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd6:	e019      	b.n	8002c0c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002bd8:	f3bf 8f5f 	dmb	sy
}
 8002bdc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	3301      	adds	r3, #1
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d902      	bls.n	8002bfc <ETH_Prepare_Tx_Descriptors+0x19c>
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	3b04      	subs	r3, #4
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c04:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	3301      	adds	r3, #1
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d3e1      	bcc.n	8002bd8 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002c14:	2302      	movs	r3, #2
 8002c16:	e053      	b.n	8002cc0 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002c36:	f023 031f 	bic.w	r3, r3, #31
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	6852      	ldr	r2, [r2, #4]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	3301      	adds	r3, #1
 8002c48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c4a:	f3bf 8f5f 	dmb	sy
}
 8002c4e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f47f af76 	bne.w	8002b52 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	e005      	b.n	8002c86 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c96:	6979      	ldr	r1, [r7, #20]
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca8:	b672      	cpsid	i
}
 8002caa:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002cba:	b662      	cpsie	i
}
 8002cbc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3734      	adds	r7, #52	; 0x34
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	; 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	e177      	b.n	8002fd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ce8:	2201      	movs	r2, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	f040 8166 	bne.w	8002fd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d005      	beq.n	8002d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d130      	bne.n	8002d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2203      	movs	r2, #3
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d54:	2201      	movs	r2, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 0201 	and.w	r2, r3, #1
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d017      	beq.n	8002dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d123      	bne.n	8002e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	08da      	lsrs	r2, r3, #3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3208      	adds	r2, #8
 8002dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	220f      	movs	r2, #15
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	08da      	lsrs	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3208      	adds	r2, #8
 8002e0a:	69b9      	ldr	r1, [r7, #24]
 8002e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0203 	and.w	r2, r3, #3
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80c0 	beq.w	8002fd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	4b66      	ldr	r3, [pc, #408]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	4a65      	ldr	r2, [pc, #404]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e60:	6453      	str	r3, [r2, #68]	; 0x44
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <HAL_GPIO_Init+0x324>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e6e:	4a61      	ldr	r2, [pc, #388]	; (8002ff4 <HAL_GPIO_Init+0x328>)
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	3302      	adds	r3, #2
 8002e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	220f      	movs	r2, #15
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a58      	ldr	r2, [pc, #352]	; (8002ff8 <HAL_GPIO_Init+0x32c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d037      	beq.n	8002f0a <HAL_GPIO_Init+0x23e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a57      	ldr	r2, [pc, #348]	; (8002ffc <HAL_GPIO_Init+0x330>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d031      	beq.n	8002f06 <HAL_GPIO_Init+0x23a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a56      	ldr	r2, [pc, #344]	; (8003000 <HAL_GPIO_Init+0x334>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d02b      	beq.n	8002f02 <HAL_GPIO_Init+0x236>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a55      	ldr	r2, [pc, #340]	; (8003004 <HAL_GPIO_Init+0x338>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d025      	beq.n	8002efe <HAL_GPIO_Init+0x232>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a54      	ldr	r2, [pc, #336]	; (8003008 <HAL_GPIO_Init+0x33c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01f      	beq.n	8002efa <HAL_GPIO_Init+0x22e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a53      	ldr	r2, [pc, #332]	; (800300c <HAL_GPIO_Init+0x340>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d019      	beq.n	8002ef6 <HAL_GPIO_Init+0x22a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a52      	ldr	r2, [pc, #328]	; (8003010 <HAL_GPIO_Init+0x344>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_GPIO_Init+0x226>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a51      	ldr	r2, [pc, #324]	; (8003014 <HAL_GPIO_Init+0x348>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00d      	beq.n	8002eee <HAL_GPIO_Init+0x222>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a50      	ldr	r2, [pc, #320]	; (8003018 <HAL_GPIO_Init+0x34c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <HAL_GPIO_Init+0x21e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4f      	ldr	r2, [pc, #316]	; (800301c <HAL_GPIO_Init+0x350>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d101      	bne.n	8002ee6 <HAL_GPIO_Init+0x21a>
 8002ee2:	2309      	movs	r3, #9
 8002ee4:	e012      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002ee6:	230a      	movs	r3, #10
 8002ee8:	e010      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002eea:	2308      	movs	r3, #8
 8002eec:	e00e      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002eee:	2307      	movs	r3, #7
 8002ef0:	e00c      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002ef2:	2306      	movs	r3, #6
 8002ef4:	e00a      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002ef6:	2305      	movs	r3, #5
 8002ef8:	e008      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002efa:	2304      	movs	r3, #4
 8002efc:	e006      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002efe:	2303      	movs	r3, #3
 8002f00:	e004      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e002      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_GPIO_Init+0x240>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	f002 0203 	and.w	r2, r2, #3
 8002f12:	0092      	lsls	r2, r2, #2
 8002f14:	4093      	lsls	r3, r2
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f1c:	4935      	ldr	r1, [pc, #212]	; (8002ff4 <HAL_GPIO_Init+0x328>)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	3302      	adds	r3, #2
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f4e:	4a34      	ldr	r2, [pc, #208]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f54:	4b32      	ldr	r3, [pc, #200]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f78:	4a29      	ldr	r2, [pc, #164]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f7e:	4b28      	ldr	r3, [pc, #160]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fa2:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fcc:	4a14      	ldr	r2, [pc, #80]	; (8003020 <HAL_GPIO_Init+0x354>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b0f      	cmp	r3, #15
 8002fdc:	f67f ae84 	bls.w	8002ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3724      	adds	r7, #36	; 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40013800 	.word	0x40013800
 8002ff8:	40020000 	.word	0x40020000
 8002ffc:	40020400 	.word	0x40020400
 8003000:	40020800 	.word	0x40020800
 8003004:	40020c00 	.word	0x40020c00
 8003008:	40021000 	.word	0x40021000
 800300c:	40021400 	.word	0x40021400
 8003010:	40021800 	.word	0x40021800
 8003014:	40021c00 	.word	0x40021c00
 8003018:	40022000 	.word	0x40022000
 800301c:	40022400 	.word	0x40022400
 8003020:	40013c00 	.word	0x40013c00

08003024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
 8003040:	e001      	b.n	8003046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003046:	7bfb      	ldrb	r3, [r7, #15]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
 8003060:	4613      	mov	r3, r2
 8003062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003064:	787b      	ldrb	r3, [r7, #1]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003070:	e003      	b.n	800307a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003072:	887b      	ldrh	r3, [r7, #2]
 8003074:	041a      	lsls	r2, r3, #16
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	619a      	str	r2, [r3, #24]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e267      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d075      	beq.n	8003192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030a6:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d00c      	beq.n	80030cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b2:	4b85      	ldr	r3, [pc, #532]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d112      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030be:	4b82      	ldr	r3, [pc, #520]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ca:	d10b      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	4b7e      	ldr	r3, [pc, #504]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d05b      	beq.n	8003190 <HAL_RCC_OscConfig+0x108>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d157      	bne.n	8003190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e242      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d106      	bne.n	80030fc <HAL_RCC_OscConfig+0x74>
 80030ee:	4b76      	ldr	r3, [pc, #472]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a75      	ldr	r2, [pc, #468]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e01d      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x98>
 8003106:	4b70      	ldr	r3, [pc, #448]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6f      	ldr	r2, [pc, #444]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b6d      	ldr	r3, [pc, #436]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6c      	ldr	r2, [pc, #432]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 8003120:	4b69      	ldr	r3, [pc, #420]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a68      	ldr	r2, [pc, #416]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b66      	ldr	r3, [pc, #408]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a65      	ldr	r2, [pc, #404]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d013      	beq.n	8003168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fa62 	bl	8001608 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003148:	f7fe fa5e 	bl	8001608 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e207      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	4b5b      	ldr	r3, [pc, #364]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0xc0>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe fa4e 	bl	8001608 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003170:	f7fe fa4a 	bl	8001608 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1f3      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	4b51      	ldr	r3, [pc, #324]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0xe8>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d063      	beq.n	8003266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800319e:	4b4a      	ldr	r3, [pc, #296]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031aa:	4b47      	ldr	r3, [pc, #284]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d11c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b44      	ldr	r3, [pc, #272]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	4b41      	ldr	r3, [pc, #260]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x152>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e1c7      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4937      	ldr	r1, [pc, #220]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	e03a      	b.n	8003266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f8:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_OscConfig+0x244>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fe fa03 	bl	8001608 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003206:	f7fe f9ff 	bl	8001608 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1a8      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4925      	ldr	r1, [pc, #148]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
 8003238:	e015      	b.n	8003266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_OscConfig+0x244>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe f9e2 	bl	8001608 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003248:	f7fe f9de 	bl	8001608 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e187      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d036      	beq.n	80032e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <HAL_RCC_OscConfig+0x248>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fe f9c2 	bl	8001608 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003288:	f7fe f9be 	bl	8001608 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e167      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_RCC_OscConfig+0x240>)
 800329c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x200>
 80032a6:	e01b      	b.n	80032e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a8:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <HAL_RCC_OscConfig+0x248>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ae:	f7fe f9ab 	bl	8001608 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	e00e      	b.n	80032d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b6:	f7fe f9a7 	bl	8001608 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d907      	bls.n	80032d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e150      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
 80032c8:	40023800 	.word	0x40023800
 80032cc:	42470000 	.word	0x42470000
 80032d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	4b88      	ldr	r3, [pc, #544]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ea      	bne.n	80032b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 8097 	beq.w	800341c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f2:	4b81      	ldr	r3, [pc, #516]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10f      	bne.n	800331e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	4b7d      	ldr	r3, [pc, #500]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a7c      	ldr	r2, [pc, #496]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
 800330e:	4b7a      	ldr	r3, [pc, #488]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b77      	ldr	r3, [pc, #476]	; (80034fc <HAL_RCC_OscConfig+0x474>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d118      	bne.n	800335c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332a:	4b74      	ldr	r3, [pc, #464]	; (80034fc <HAL_RCC_OscConfig+0x474>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a73      	ldr	r2, [pc, #460]	; (80034fc <HAL_RCC_OscConfig+0x474>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003336:	f7fe f967 	bl	8001608 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7fe f963 	bl	8001608 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e10c      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	4b6a      	ldr	r3, [pc, #424]	; (80034fc <HAL_RCC_OscConfig+0x474>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x2ea>
 8003364:	4b64      	ldr	r3, [pc, #400]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a63      	ldr	r2, [pc, #396]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	e01c      	b.n	80033ac <HAL_RCC_OscConfig+0x324>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b05      	cmp	r3, #5
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x30c>
 800337a:	4b5f      	ldr	r3, [pc, #380]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a5e      	ldr	r2, [pc, #376]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	4b5c      	ldr	r3, [pc, #368]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a5b      	ldr	r2, [pc, #364]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0x324>
 8003394:	4b58      	ldr	r3, [pc, #352]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	4a57      	ldr	r2, [pc, #348]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	6713      	str	r3, [r2, #112]	; 0x70
 80033a0:	4b55      	ldr	r3, [pc, #340]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a54      	ldr	r2, [pc, #336]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033a6:	f023 0304 	bic.w	r3, r3, #4
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe f928 	bl	8001608 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fe f924 	bl	8001608 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0cb      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d2:	4b49      	ldr	r3, [pc, #292]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0ee      	beq.n	80033bc <HAL_RCC_OscConfig+0x334>
 80033de:	e014      	b.n	800340a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e0:	f7fe f912 	bl	8001608 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fe f90e 	bl	8001608 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e0b5      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fe:	4b3e      	ldr	r3, [pc, #248]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ee      	bne.n	80033e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b39      	ldr	r3, [pc, #228]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	4a38      	ldr	r2, [pc, #224]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80a1 	beq.w	8003568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003426:	4b34      	ldr	r3, [pc, #208]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b08      	cmp	r3, #8
 8003430:	d05c      	beq.n	80034ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d141      	bne.n	80034be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343a:	4b31      	ldr	r3, [pc, #196]	; (8003500 <HAL_RCC_OscConfig+0x478>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fe f8e2 	bl	8001608 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe f8de 	bl	8001608 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e087      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345a:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	491b      	ldr	r1, [pc, #108]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003490:	4b1b      	ldr	r3, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x478>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fe f8b7 	bl	8001608 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349e:	f7fe f8b3 	bl	8001608 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e05c      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x416>
 80034bc:	e054      	b.n	8003568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_RCC_OscConfig+0x478>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fe f8a0 	bl	8001608 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe f89c 	bl	8001608 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e045      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_OscConfig+0x470>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x444>
 80034ea:	e03d      	b.n	8003568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e038      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40007000 	.word	0x40007000
 8003500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003504:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <HAL_RCC_OscConfig+0x4ec>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d028      	beq.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351c:	429a      	cmp	r2, r3
 800351e:	d121      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d11a      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800353a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800353c:	4293      	cmp	r3, r2
 800353e:	d111      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d107      	bne.n	8003564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800

08003578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0cc      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b68      	ldr	r3, [pc, #416]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d90c      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b65      	ldr	r3, [pc, #404]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b63      	ldr	r3, [pc, #396]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b8      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035cc:	4b59      	ldr	r3, [pc, #356]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a58      	ldr	r2, [pc, #352]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e4:	4b53      	ldr	r3, [pc, #332]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a52      	ldr	r2, [pc, #328]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b50      	ldr	r3, [pc, #320]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	494d      	ldr	r1, [pc, #308]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d044      	beq.n	8003698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d119      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e07f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d003      	beq.n	8003636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003632:	2b03      	cmp	r3, #3
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003636:	4b3f      	ldr	r3, [pc, #252]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e06f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e067      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003656:	4b37      	ldr	r3, [pc, #220]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4934      	ldr	r1, [pc, #208]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	4313      	orrs	r3, r2
 8003666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003668:	f7fd ffce 	bl	8001608 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	e00a      	b.n	8003686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7fd ffca 	bl	8001608 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e04f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 020c 	and.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d1eb      	bne.n	8003670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003698:	4b25      	ldr	r3, [pc, #148]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d20c      	bcs.n	80036c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b22      	ldr	r3, [pc, #136]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b20      	ldr	r3, [pc, #128]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e032      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036cc:	4b19      	ldr	r3, [pc, #100]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4916      	ldr	r1, [pc, #88]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ea:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	490e      	ldr	r1, [pc, #56]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036fe:	f000 f821 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8003702:	4602      	mov	r2, r0
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	490a      	ldr	r1, [pc, #40]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	5ccb      	ldrb	r3, [r1, r3]
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	4a09      	ldr	r2, [pc, #36]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fd f988 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023c00 	.word	0x40023c00
 8003734:	40023800 	.word	0x40023800
 8003738:	0801d604 	.word	0x0801d604
 800373c:	20000000 	.word	0x20000000
 8003740:	20000004 	.word	0x20000004

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003748:	b094      	sub	sp, #80	; 0x50
 800374a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	647b      	str	r3, [r7, #68]	; 0x44
 8003750:	2300      	movs	r3, #0
 8003752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003754:	2300      	movs	r3, #0
 8003756:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800375c:	4b79      	ldr	r3, [pc, #484]	; (8003944 <HAL_RCC_GetSysClockFreq+0x200>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b08      	cmp	r3, #8
 8003766:	d00d      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x40>
 8003768:	2b08      	cmp	r3, #8
 800376a:	f200 80e1 	bhi.w	8003930 <HAL_RCC_GetSysClockFreq+0x1ec>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x34>
 8003772:	2b04      	cmp	r3, #4
 8003774:	d003      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0x3a>
 8003776:	e0db      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b73      	ldr	r3, [pc, #460]	; (8003948 <HAL_RCC_GetSysClockFreq+0x204>)
 800377a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800377c:	e0db      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800377e:	4b73      	ldr	r3, [pc, #460]	; (800394c <HAL_RCC_GetSysClockFreq+0x208>)
 8003780:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003782:	e0d8      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003784:	4b6f      	ldr	r3, [pc, #444]	; (8003944 <HAL_RCC_GetSysClockFreq+0x200>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800378c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800378e:	4b6d      	ldr	r3, [pc, #436]	; (8003944 <HAL_RCC_GetSysClockFreq+0x200>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d063      	beq.n	8003862 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379a:	4b6a      	ldr	r3, [pc, #424]	; (8003944 <HAL_RCC_GetSysClockFreq+0x200>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	099b      	lsrs	r3, r3, #6
 80037a0:	2200      	movs	r2, #0
 80037a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ac:	633b      	str	r3, [r7, #48]	; 0x30
 80037ae:	2300      	movs	r3, #0
 80037b0:	637b      	str	r3, [r7, #52]	; 0x34
 80037b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037b6:	4622      	mov	r2, r4
 80037b8:	462b      	mov	r3, r5
 80037ba:	f04f 0000 	mov.w	r0, #0
 80037be:	f04f 0100 	mov.w	r1, #0
 80037c2:	0159      	lsls	r1, r3, #5
 80037c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037c8:	0150      	lsls	r0, r2, #5
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4621      	mov	r1, r4
 80037d0:	1a51      	subs	r1, r2, r1
 80037d2:	6139      	str	r1, [r7, #16]
 80037d4:	4629      	mov	r1, r5
 80037d6:	eb63 0301 	sbc.w	r3, r3, r1
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037e8:	4659      	mov	r1, fp
 80037ea:	018b      	lsls	r3, r1, #6
 80037ec:	4651      	mov	r1, sl
 80037ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037f2:	4651      	mov	r1, sl
 80037f4:	018a      	lsls	r2, r1, #6
 80037f6:	4651      	mov	r1, sl
 80037f8:	ebb2 0801 	subs.w	r8, r2, r1
 80037fc:	4659      	mov	r1, fp
 80037fe:	eb63 0901 	sbc.w	r9, r3, r1
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800380e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003812:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003816:	4690      	mov	r8, r2
 8003818:	4699      	mov	r9, r3
 800381a:	4623      	mov	r3, r4
 800381c:	eb18 0303 	adds.w	r3, r8, r3
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	462b      	mov	r3, r5
 8003824:	eb49 0303 	adc.w	r3, r9, r3
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003836:	4629      	mov	r1, r5
 8003838:	024b      	lsls	r3, r1, #9
 800383a:	4621      	mov	r1, r4
 800383c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003840:	4621      	mov	r1, r4
 8003842:	024a      	lsls	r2, r1, #9
 8003844:	4610      	mov	r0, r2
 8003846:	4619      	mov	r1, r3
 8003848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800384a:	2200      	movs	r2, #0
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
 800384e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003850:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003854:	f7fc fd34 	bl	80002c0 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4613      	mov	r3, r2
 800385e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003860:	e058      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003862:	4b38      	ldr	r3, [pc, #224]	; (8003944 <HAL_RCC_GetSysClockFreq+0x200>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	099b      	lsrs	r3, r3, #6
 8003868:	2200      	movs	r2, #0
 800386a:	4618      	mov	r0, r3
 800386c:	4611      	mov	r1, r2
 800386e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003872:	623b      	str	r3, [r7, #32]
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
 8003878:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800387c:	4642      	mov	r2, r8
 800387e:	464b      	mov	r3, r9
 8003880:	f04f 0000 	mov.w	r0, #0
 8003884:	f04f 0100 	mov.w	r1, #0
 8003888:	0159      	lsls	r1, r3, #5
 800388a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800388e:	0150      	lsls	r0, r2, #5
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4641      	mov	r1, r8
 8003896:	ebb2 0a01 	subs.w	sl, r2, r1
 800389a:	4649      	mov	r1, r9
 800389c:	eb63 0b01 	sbc.w	fp, r3, r1
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038b4:	ebb2 040a 	subs.w	r4, r2, sl
 80038b8:	eb63 050b 	sbc.w	r5, r3, fp
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	00eb      	lsls	r3, r5, #3
 80038c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ca:	00e2      	lsls	r2, r4, #3
 80038cc:	4614      	mov	r4, r2
 80038ce:	461d      	mov	r5, r3
 80038d0:	4643      	mov	r3, r8
 80038d2:	18e3      	adds	r3, r4, r3
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	464b      	mov	r3, r9
 80038d8:	eb45 0303 	adc.w	r3, r5, r3
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ea:	4629      	mov	r1, r5
 80038ec:	028b      	lsls	r3, r1, #10
 80038ee:	4621      	mov	r1, r4
 80038f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038f4:	4621      	mov	r1, r4
 80038f6:	028a      	lsls	r2, r1, #10
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038fe:	2200      	movs	r2, #0
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	61fa      	str	r2, [r7, #28]
 8003904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003908:	f7fc fcda 	bl	80002c0 <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4613      	mov	r3, r2
 8003912:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCC_GetSysClockFreq+0x200>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	3301      	adds	r3, #1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003924:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800392e:	e002      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_GetSysClockFreq+0x204>)
 8003932:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003938:	4618      	mov	r0, r3
 800393a:	3750      	adds	r7, #80	; 0x50
 800393c:	46bd      	mov	sp, r7
 800393e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	00f42400 	.word	0x00f42400
 800394c:	007a1200 	.word	0x007a1200

08003950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <HAL_RCC_GetHCLKFreq+0x14>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000000 	.word	0x20000000

08003968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800396c:	f7ff fff0 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8003970:	4602      	mov	r2, r0
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	0a9b      	lsrs	r3, r3, #10
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	4903      	ldr	r1, [pc, #12]	; (800398c <HAL_RCC_GetPCLK1Freq+0x24>)
 800397e:	5ccb      	ldrb	r3, [r1, r3]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	0801d614 	.word	0x0801d614

08003990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003994:	f7ff ffdc 	bl	8003950 <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0b5b      	lsrs	r3, r3, #13
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4903      	ldr	r1, [pc, #12]	; (80039b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	0801d614 	.word	0x0801d614

080039b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	220f      	movs	r2, #15
 80039c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039c8:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCC_GetClockConfig+0x5c>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0203 	and.w	r2, r3, #3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_RCC_GetClockConfig+0x5c>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <HAL_RCC_GetClockConfig+0x5c>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <HAL_RCC_GetClockConfig+0x5c>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	08db      	lsrs	r3, r3, #3
 80039f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039fa:	4b07      	ldr	r3, [pc, #28]	; (8003a18 <HAL_RCC_GetClockConfig+0x60>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 020f 	and.w	r2, r3, #15
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	601a      	str	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40023c00 	.word	0x40023c00

08003a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e041      	b.n	8003ab2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f839 	bl	8003aba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f000 f9d8 	bl	8003e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d001      	beq.n	8003ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e04e      	b.n	8003b86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d022      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b12:	d01d      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d018      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <HAL_TIM_Base_Start_IT+0xcc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00e      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_TIM_Base_Start_IT+0x80>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_TIM_Base_Start_IT+0xdc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d111      	bne.n	8003b74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d010      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 0201 	orr.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b72:	e007      	b.n	8003b84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40000400 	.word	0x40000400
 8003b9c:	40000800 	.word	0x40000800
 8003ba0:	40000c00 	.word	0x40000c00
 8003ba4:	40010400 	.word	0x40010400
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40001800 	.word	0x40001800

08003bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d122      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d11b      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0202 	mvn.w	r2, #2
 8003bdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8ee 	bl	8003dd4 <HAL_TIM_IC_CaptureCallback>
 8003bf8:	e005      	b.n	8003c06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8e0 	bl	8003dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f8f1 	bl	8003de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d122      	bne.n	8003c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d11b      	bne.n	8003c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0204 	mvn.w	r2, #4
 8003c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f8c4 	bl	8003dd4 <HAL_TIM_IC_CaptureCallback>
 8003c4c:	e005      	b.n	8003c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f8b6 	bl	8003dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f8c7 	bl	8003de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d122      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d11b      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0208 	mvn.w	r2, #8
 8003c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f89a 	bl	8003dd4 <HAL_TIM_IC_CaptureCallback>
 8003ca0:	e005      	b.n	8003cae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f88c 	bl	8003dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f89d 	bl	8003de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d122      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d11b      	bne.n	8003d08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0210 	mvn.w	r2, #16
 8003cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2208      	movs	r2, #8
 8003cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f870 	bl	8003dd4 <HAL_TIM_IC_CaptureCallback>
 8003cf4:	e005      	b.n	8003d02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f862 	bl	8003dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f873 	bl	8003de8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d10e      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d107      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0201 	mvn.w	r2, #1
 8003d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fc fdf4 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b80      	cmp	r3, #128	; 0x80
 8003d40:	d10e      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4c:	2b80      	cmp	r3, #128	; 0x80
 8003d4e:	d107      	bne.n	8003d60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f902 	bl	8003f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d10e      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d107      	bne.n	8003d8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f838 	bl	8003dfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d10e      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d107      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0220 	mvn.w	r2, #32
 8003db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8cc 	bl	8003f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003db8:	bf00      	nop
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a40      	ldr	r2, [pc, #256]	; (8003f24 <TIM_Base_SetConfig+0x114>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2e:	d00f      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a3d      	ldr	r2, [pc, #244]	; (8003f28 <TIM_Base_SetConfig+0x118>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00b      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3c      	ldr	r2, [pc, #240]	; (8003f2c <TIM_Base_SetConfig+0x11c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3b      	ldr	r2, [pc, #236]	; (8003f30 <TIM_Base_SetConfig+0x120>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3a      	ldr	r2, [pc, #232]	; (8003f34 <TIM_Base_SetConfig+0x124>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d108      	bne.n	8003e62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2f      	ldr	r2, [pc, #188]	; (8003f24 <TIM_Base_SetConfig+0x114>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d02b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e70:	d027      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a2c      	ldr	r2, [pc, #176]	; (8003f28 <TIM_Base_SetConfig+0x118>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d023      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2b      	ldr	r2, [pc, #172]	; (8003f2c <TIM_Base_SetConfig+0x11c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01f      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2a      	ldr	r2, [pc, #168]	; (8003f30 <TIM_Base_SetConfig+0x120>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a29      	ldr	r2, [pc, #164]	; (8003f34 <TIM_Base_SetConfig+0x124>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d017      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a28      	ldr	r2, [pc, #160]	; (8003f38 <TIM_Base_SetConfig+0x128>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <TIM_Base_SetConfig+0x12c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00f      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a26      	ldr	r2, [pc, #152]	; (8003f40 <TIM_Base_SetConfig+0x130>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00b      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a25      	ldr	r2, [pc, #148]	; (8003f44 <TIM_Base_SetConfig+0x134>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a24      	ldr	r2, [pc, #144]	; (8003f48 <TIM_Base_SetConfig+0x138>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a23      	ldr	r2, [pc, #140]	; (8003f4c <TIM_Base_SetConfig+0x13c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d108      	bne.n	8003ed4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <TIM_Base_SetConfig+0x114>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0xf8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0c      	ldr	r2, [pc, #48]	; (8003f34 <TIM_Base_SetConfig+0x124>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d103      	bne.n	8003f10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	615a      	str	r2, [r3, #20]
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40010000 	.word	0x40010000
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800
 8003f30:	40000c00 	.word	0x40000c00
 8003f34:	40010400 	.word	0x40010400
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40014400 	.word	0x40014400
 8003f40:	40014800 	.word	0x40014800
 8003f44:	40001800 	.word	0x40001800
 8003f48:	40001c00 	.word	0x40001c00
 8003f4c:	40002000 	.word	0x40002000

08003f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e03f      	b.n	800400a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fc fd00 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2224      	movs	r2, #36	; 0x24
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f829 	bl	8004014 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695a      	ldr	r2, [r3, #20]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004018:	b0c0      	sub	sp, #256	; 0x100
 800401a:	af00      	add	r7, sp, #0
 800401c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	68d9      	ldr	r1, [r3, #12]
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	ea40 0301 	orr.w	r3, r0, r1
 800403c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	431a      	orrs	r2, r3
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	431a      	orrs	r2, r3
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800406c:	f021 010c 	bic.w	r1, r1, #12
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800407a:	430b      	orrs	r3, r1
 800407c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408e:	6999      	ldr	r1, [r3, #24]
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	ea40 0301 	orr.w	r3, r0, r1
 800409a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b8f      	ldr	r3, [pc, #572]	; (80042e0 <UART_SetConfig+0x2cc>)
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d005      	beq.n	80040b4 <UART_SetConfig+0xa0>
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b8d      	ldr	r3, [pc, #564]	; (80042e4 <UART_SetConfig+0x2d0>)
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d104      	bne.n	80040be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040b4:	f7ff fc6c 	bl	8003990 <HAL_RCC_GetPCLK2Freq>
 80040b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040bc:	e003      	b.n	80040c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040be:	f7ff fc53 	bl	8003968 <HAL_RCC_GetPCLK1Freq>
 80040c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d0:	f040 810c 	bne.w	80042ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d8:	2200      	movs	r2, #0
 80040da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040e6:	4622      	mov	r2, r4
 80040e8:	462b      	mov	r3, r5
 80040ea:	1891      	adds	r1, r2, r2
 80040ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80040ee:	415b      	adcs	r3, r3
 80040f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040f6:	4621      	mov	r1, r4
 80040f8:	eb12 0801 	adds.w	r8, r2, r1
 80040fc:	4629      	mov	r1, r5
 80040fe:	eb43 0901 	adc.w	r9, r3, r1
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800410e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004116:	4690      	mov	r8, r2
 8004118:	4699      	mov	r9, r3
 800411a:	4623      	mov	r3, r4
 800411c:	eb18 0303 	adds.w	r3, r8, r3
 8004120:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004124:	462b      	mov	r3, r5
 8004126:	eb49 0303 	adc.w	r3, r9, r3
 800412a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800413a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800413e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004142:	460b      	mov	r3, r1
 8004144:	18db      	adds	r3, r3, r3
 8004146:	653b      	str	r3, [r7, #80]	; 0x50
 8004148:	4613      	mov	r3, r2
 800414a:	eb42 0303 	adc.w	r3, r2, r3
 800414e:	657b      	str	r3, [r7, #84]	; 0x54
 8004150:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004154:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004158:	f7fc f8b2 	bl	80002c0 <__aeabi_uldivmod>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4b61      	ldr	r3, [pc, #388]	; (80042e8 <UART_SetConfig+0x2d4>)
 8004162:	fba3 2302 	umull	r2, r3, r3, r2
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	011c      	lsls	r4, r3, #4
 800416a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800416e:	2200      	movs	r2, #0
 8004170:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004174:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004178:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800417c:	4642      	mov	r2, r8
 800417e:	464b      	mov	r3, r9
 8004180:	1891      	adds	r1, r2, r2
 8004182:	64b9      	str	r1, [r7, #72]	; 0x48
 8004184:	415b      	adcs	r3, r3
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004188:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800418c:	4641      	mov	r1, r8
 800418e:	eb12 0a01 	adds.w	sl, r2, r1
 8004192:	4649      	mov	r1, r9
 8004194:	eb43 0b01 	adc.w	fp, r3, r1
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ac:	4692      	mov	sl, r2
 80041ae:	469b      	mov	fp, r3
 80041b0:	4643      	mov	r3, r8
 80041b2:	eb1a 0303 	adds.w	r3, sl, r3
 80041b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041ba:	464b      	mov	r3, r9
 80041bc:	eb4b 0303 	adc.w	r3, fp, r3
 80041c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041d8:	460b      	mov	r3, r1
 80041da:	18db      	adds	r3, r3, r3
 80041dc:	643b      	str	r3, [r7, #64]	; 0x40
 80041de:	4613      	mov	r3, r2
 80041e0:	eb42 0303 	adc.w	r3, r2, r3
 80041e4:	647b      	str	r3, [r7, #68]	; 0x44
 80041e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041ee:	f7fc f867 	bl	80002c0 <__aeabi_uldivmod>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4611      	mov	r1, r2
 80041f8:	4b3b      	ldr	r3, [pc, #236]	; (80042e8 <UART_SetConfig+0x2d4>)
 80041fa:	fba3 2301 	umull	r2, r3, r3, r1
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2264      	movs	r2, #100	; 0x64
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	1acb      	subs	r3, r1, r3
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800420e:	4b36      	ldr	r3, [pc, #216]	; (80042e8 <UART_SetConfig+0x2d4>)
 8004210:	fba3 2302 	umull	r2, r3, r3, r2
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800421c:	441c      	add	r4, r3
 800421e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004228:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800422c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	1891      	adds	r1, r2, r2
 8004236:	63b9      	str	r1, [r7, #56]	; 0x38
 8004238:	415b      	adcs	r3, r3
 800423a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800423c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004240:	4641      	mov	r1, r8
 8004242:	1851      	adds	r1, r2, r1
 8004244:	6339      	str	r1, [r7, #48]	; 0x30
 8004246:	4649      	mov	r1, r9
 8004248:	414b      	adcs	r3, r1
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004258:	4659      	mov	r1, fp
 800425a:	00cb      	lsls	r3, r1, #3
 800425c:	4651      	mov	r1, sl
 800425e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004262:	4651      	mov	r1, sl
 8004264:	00ca      	lsls	r2, r1, #3
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	4603      	mov	r3, r0
 800426c:	4642      	mov	r2, r8
 800426e:	189b      	adds	r3, r3, r2
 8004270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004274:	464b      	mov	r3, r9
 8004276:	460a      	mov	r2, r1
 8004278:	eb42 0303 	adc.w	r3, r2, r3
 800427c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800428c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004294:	460b      	mov	r3, r1
 8004296:	18db      	adds	r3, r3, r3
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
 800429a:	4613      	mov	r3, r2
 800429c:	eb42 0303 	adc.w	r3, r2, r3
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042aa:	f7fc f809 	bl	80002c0 <__aeabi_uldivmod>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <UART_SetConfig+0x2d4>)
 80042b4:	fba3 1302 	umull	r1, r3, r3, r2
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	2164      	movs	r1, #100	; 0x64
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	3332      	adds	r3, #50	; 0x32
 80042c6:	4a08      	ldr	r2, [pc, #32]	; (80042e8 <UART_SetConfig+0x2d4>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	f003 0207 	and.w	r2, r3, #7
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4422      	add	r2, r4
 80042da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042dc:	e106      	b.n	80044ec <UART_SetConfig+0x4d8>
 80042de:	bf00      	nop
 80042e0:	40011000 	.word	0x40011000
 80042e4:	40011400 	.word	0x40011400
 80042e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f0:	2200      	movs	r2, #0
 80042f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042fe:	4642      	mov	r2, r8
 8004300:	464b      	mov	r3, r9
 8004302:	1891      	adds	r1, r2, r2
 8004304:	6239      	str	r1, [r7, #32]
 8004306:	415b      	adcs	r3, r3
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
 800430a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800430e:	4641      	mov	r1, r8
 8004310:	1854      	adds	r4, r2, r1
 8004312:	4649      	mov	r1, r9
 8004314:	eb43 0501 	adc.w	r5, r3, r1
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	00eb      	lsls	r3, r5, #3
 8004322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004326:	00e2      	lsls	r2, r4, #3
 8004328:	4614      	mov	r4, r2
 800432a:	461d      	mov	r5, r3
 800432c:	4643      	mov	r3, r8
 800432e:	18e3      	adds	r3, r4, r3
 8004330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004334:	464b      	mov	r3, r9
 8004336:	eb45 0303 	adc.w	r3, r5, r3
 800433a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800434a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800435a:	4629      	mov	r1, r5
 800435c:	008b      	lsls	r3, r1, #2
 800435e:	4621      	mov	r1, r4
 8004360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004364:	4621      	mov	r1, r4
 8004366:	008a      	lsls	r2, r1, #2
 8004368:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800436c:	f7fb ffa8 	bl	80002c0 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4b60      	ldr	r3, [pc, #384]	; (80044f8 <UART_SetConfig+0x4e4>)
 8004376:	fba3 2302 	umull	r2, r3, r3, r2
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	011c      	lsls	r4, r3, #4
 800437e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004382:	2200      	movs	r2, #0
 8004384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004388:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800438c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004390:	4642      	mov	r2, r8
 8004392:	464b      	mov	r3, r9
 8004394:	1891      	adds	r1, r2, r2
 8004396:	61b9      	str	r1, [r7, #24]
 8004398:	415b      	adcs	r3, r3
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a0:	4641      	mov	r1, r8
 80043a2:	1851      	adds	r1, r2, r1
 80043a4:	6139      	str	r1, [r7, #16]
 80043a6:	4649      	mov	r1, r9
 80043a8:	414b      	adcs	r3, r1
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043b8:	4659      	mov	r1, fp
 80043ba:	00cb      	lsls	r3, r1, #3
 80043bc:	4651      	mov	r1, sl
 80043be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c2:	4651      	mov	r1, sl
 80043c4:	00ca      	lsls	r2, r1, #3
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	4642      	mov	r2, r8
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043d4:	464b      	mov	r3, r9
 80043d6:	460a      	mov	r2, r1
 80043d8:	eb42 0303 	adc.w	r3, r2, r3
 80043dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043f8:	4649      	mov	r1, r9
 80043fa:	008b      	lsls	r3, r1, #2
 80043fc:	4641      	mov	r1, r8
 80043fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004402:	4641      	mov	r1, r8
 8004404:	008a      	lsls	r2, r1, #2
 8004406:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800440a:	f7fb ff59 	bl	80002c0 <__aeabi_uldivmod>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4611      	mov	r1, r2
 8004414:	4b38      	ldr	r3, [pc, #224]	; (80044f8 <UART_SetConfig+0x4e4>)
 8004416:	fba3 2301 	umull	r2, r3, r3, r1
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	2264      	movs	r2, #100	; 0x64
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	1acb      	subs	r3, r1, r3
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	3332      	adds	r3, #50	; 0x32
 8004428:	4a33      	ldr	r2, [pc, #204]	; (80044f8 <UART_SetConfig+0x4e4>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004434:	441c      	add	r4, r3
 8004436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800443a:	2200      	movs	r2, #0
 800443c:	673b      	str	r3, [r7, #112]	; 0x70
 800443e:	677a      	str	r2, [r7, #116]	; 0x74
 8004440:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004444:	4642      	mov	r2, r8
 8004446:	464b      	mov	r3, r9
 8004448:	1891      	adds	r1, r2, r2
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	415b      	adcs	r3, r3
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004454:	4641      	mov	r1, r8
 8004456:	1851      	adds	r1, r2, r1
 8004458:	6039      	str	r1, [r7, #0]
 800445a:	4649      	mov	r1, r9
 800445c:	414b      	adcs	r3, r1
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800446c:	4659      	mov	r1, fp
 800446e:	00cb      	lsls	r3, r1, #3
 8004470:	4651      	mov	r1, sl
 8004472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004476:	4651      	mov	r1, sl
 8004478:	00ca      	lsls	r2, r1, #3
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	4603      	mov	r3, r0
 8004480:	4642      	mov	r2, r8
 8004482:	189b      	adds	r3, r3, r2
 8004484:	66bb      	str	r3, [r7, #104]	; 0x68
 8004486:	464b      	mov	r3, r9
 8004488:	460a      	mov	r2, r1
 800448a:	eb42 0303 	adc.w	r3, r2, r3
 800448e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	663b      	str	r3, [r7, #96]	; 0x60
 800449a:	667a      	str	r2, [r7, #100]	; 0x64
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044a8:	4649      	mov	r1, r9
 80044aa:	008b      	lsls	r3, r1, #2
 80044ac:	4641      	mov	r1, r8
 80044ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b2:	4641      	mov	r1, r8
 80044b4:	008a      	lsls	r2, r1, #2
 80044b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044ba:	f7fb ff01 	bl	80002c0 <__aeabi_uldivmod>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <UART_SetConfig+0x4e4>)
 80044c4:	fba3 1302 	umull	r1, r3, r3, r2
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	2164      	movs	r1, #100	; 0x64
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	3332      	adds	r3, #50	; 0x32
 80044d6:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <UART_SetConfig+0x4e4>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	f003 020f 	and.w	r2, r3, #15
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4422      	add	r2, r4
 80044ea:	609a      	str	r2, [r3, #8]
}
 80044ec:	bf00      	nop
 80044ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044f2:	46bd      	mov	sp, r7
 80044f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f8:	51eb851f 	.word	0x51eb851f

080044fc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80044fc:	b5b0      	push	{r4, r5, r7, lr}
 80044fe:	b08c      	sub	sp, #48	; 0x30
 8004500:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004502:	2100      	movs	r1, #0
 8004504:	2000      	movs	r0, #0
 8004506:	f005 ffd7 	bl	800a4b8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800450a:	4b20      	ldr	r3, [pc, #128]	; (800458c <MX_LWIP_Init+0x90>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004510:	4b1f      	ldr	r3, [pc, #124]	; (8004590 <MX_LWIP_Init+0x94>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004516:	4b1f      	ldr	r3, [pc, #124]	; (8004594 <MX_LWIP_Init+0x98>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800451c:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <MX_LWIP_Init+0x9c>)
 800451e:	9302      	str	r3, [sp, #8]
 8004520:	4b1e      	ldr	r3, [pc, #120]	; (800459c <MX_LWIP_Init+0xa0>)
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	2300      	movs	r3, #0
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <MX_LWIP_Init+0x98>)
 800452a:	4a19      	ldr	r2, [pc, #100]	; (8004590 <MX_LWIP_Init+0x94>)
 800452c:	4917      	ldr	r1, [pc, #92]	; (800458c <MX_LWIP_Init+0x90>)
 800452e:	481c      	ldr	r0, [pc, #112]	; (80045a0 <MX_LWIP_Init+0xa4>)
 8004530:	f007 fbdc 	bl	800bcec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004534:	481a      	ldr	r0, [pc, #104]	; (80045a0 <MX_LWIP_Init+0xa4>)
 8004536:	f007 fd93 	bl	800c060 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800453a:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <MX_LWIP_Init+0xa4>)
 800453c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800454c:	4814      	ldr	r0, [pc, #80]	; (80045a0 <MX_LWIP_Init+0xa4>)
 800454e:	f007 fd97 	bl	800c080 <netif_set_up>
 8004552:	e002      	b.n	800455a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004554:	4812      	ldr	r0, [pc, #72]	; (80045a0 <MX_LWIP_Init+0xa4>)
 8004556:	f007 fdff 	bl	800c158 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800455a:	4912      	ldr	r1, [pc, #72]	; (80045a4 <MX_LWIP_Init+0xa8>)
 800455c:	4810      	ldr	r0, [pc, #64]	; (80045a0 <MX_LWIP_Init+0xa4>)
 800455e:	f007 fe95 	bl	800c28c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <MX_LWIP_Init+0xac>)
 8004564:	1d3c      	adds	r4, r7, #4
 8004566:	461d      	mov	r5, r3
 8004568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800456a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800456c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004574:	1d3b      	adds	r3, r7, #4
 8004576:	490a      	ldr	r1, [pc, #40]	; (80045a0 <MX_LWIP_Init+0xa4>)
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fd23 	bl	8004fc4 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800457e:	4808      	ldr	r0, [pc, #32]	; (80045a0 <MX_LWIP_Init+0xa4>)
 8004580:	f00f ff50 	bl	8014424 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004584:	bf00      	nop
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bdb0      	pop	{r4, r5, r7, pc}
 800458c:	20000c20 	.word	0x20000c20
 8004590:	20000c24 	.word	0x20000c24
 8004594:	20000c28 	.word	0x20000c28
 8004598:	0800a3c9 	.word	0x0800a3c9
 800459c:	08004a4d 	.word	0x08004a4d
 80045a0:	20000be8 	.word	0x20000be8
 80045a4:	080045ad 	.word	0x080045ad
 80045a8:	08019ad8 	.word	0x08019ad8

080045ac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80045c8:	4b04      	ldr	r3, [pc, #16]	; (80045dc <HAL_ETH_RxCpltCallback+0x1c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fe75 	bl	80052bc <osSemaphoreRelease>
}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200056f8 	.word	0x200056f8

080045e0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <HAL_ETH_TxCpltCallback+0x1c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fe65 	bl	80052bc <osSemaphoreRelease>
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	200056fc 	.word	0x200056fc

08004600 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7fd ff4d 	bl	80024a8 <HAL_ETH_GetDMAError>
 800460e:	4603      	mov	r3, r0
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b80      	cmp	r3, #128	; 0x80
 8004616:	d104      	bne.n	8004622 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <HAL_ETH_ErrorCallback+0x2c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fe4d 	bl	80052bc <osSemaphoreRelease>
  }
}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	200056f8 	.word	0x200056f8

08004630 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004630:	b5b0      	push	{r4, r5, r7, lr}
 8004632:	b0a8      	sub	sp, #160	; 0xa0
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800464a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800464e:	2264      	movs	r2, #100	; 0x64
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f014 f853 	bl	80186fe <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004658:	4b85      	ldr	r3, [pc, #532]	; (8004870 <low_level_init+0x240>)
 800465a:	4a86      	ldr	r2, [pc, #536]	; (8004874 <low_level_init+0x244>)
 800465c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800465e:	2300      	movs	r3, #0
 8004660:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800466a:	23e1      	movs	r3, #225	; 0xe1
 800466c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 8004670:	23fe      	movs	r3, #254	; 0xfe
 8004672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 8004676:	23ec      	movs	r3, #236	; 0xec
 8004678:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x85;
 800467c:	2385      	movs	r3, #133	; 0x85
 800467e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8004682:	4a7b      	ldr	r2, [pc, #492]	; (8004870 <low_level_init+0x240>)
 8004684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004688:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800468a:	4b79      	ldr	r3, [pc, #484]	; (8004870 <low_level_init+0x240>)
 800468c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004690:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004692:	4b77      	ldr	r3, [pc, #476]	; (8004870 <low_level_init+0x240>)
 8004694:	4a78      	ldr	r2, [pc, #480]	; (8004878 <low_level_init+0x248>)
 8004696:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004698:	4b75      	ldr	r3, [pc, #468]	; (8004870 <low_level_init+0x240>)
 800469a:	4a78      	ldr	r2, [pc, #480]	; (800487c <low_level_init+0x24c>)
 800469c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800469e:	4b74      	ldr	r3, [pc, #464]	; (8004870 <low_level_init+0x240>)
 80046a0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80046a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80046a6:	4872      	ldr	r0, [pc, #456]	; (8004870 <low_level_init+0x240>)
 80046a8:	f7fd f8c0 	bl	800182c <HAL_ETH_Init>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80046b2:	2238      	movs	r2, #56	; 0x38
 80046b4:	2100      	movs	r1, #0
 80046b6:	4872      	ldr	r0, [pc, #456]	; (8004880 <low_level_init+0x250>)
 80046b8:	f014 f821 	bl	80186fe <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80046bc:	4b70      	ldr	r3, [pc, #448]	; (8004880 <low_level_init+0x250>)
 80046be:	2221      	movs	r2, #33	; 0x21
 80046c0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80046c2:	4b6f      	ldr	r3, [pc, #444]	; (8004880 <low_level_init+0x250>)
 80046c4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80046c8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80046ca:	4b6d      	ldr	r3, [pc, #436]	; (8004880 <low_level_init+0x250>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80046d0:	486c      	ldr	r0, [pc, #432]	; (8004884 <low_level_init+0x254>)
 80046d2:	f007 f9c5 	bl	800ba60 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2206      	movs	r2, #6
 80046da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80046de:	4b64      	ldr	r3, [pc, #400]	; (8004870 <low_level_init+0x240>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	781a      	ldrb	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80046ea:	4b61      	ldr	r3, [pc, #388]	; (8004870 <low_level_init+0x240>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	785a      	ldrb	r2, [r3, #1]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80046f6:	4b5e      	ldr	r3, [pc, #376]	; (8004870 <low_level_init+0x240>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	789a      	ldrb	r2, [r3, #2]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004702:	4b5b      	ldr	r3, [pc, #364]	; (8004870 <low_level_init+0x240>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	78da      	ldrb	r2, [r3, #3]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800470e:	4b58      	ldr	r3, [pc, #352]	; (8004870 <low_level_init+0x240>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	791a      	ldrb	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800471a:	4b55      	ldr	r3, [pc, #340]	; (8004870 <low_level_init+0x240>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	795a      	ldrb	r2, [r3, #5]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800472c:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004734:	f043 030a 	orr.w	r3, r3, #10
 8004738:	b2da      	uxtb	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004740:	2203      	movs	r2, #3
 8004742:	2100      	movs	r1, #0
 8004744:	2001      	movs	r0, #1
 8004746:	f001 f89d 	bl	8005884 <xQueueGenericCreate>
 800474a:	4603      	mov	r3, r0
 800474c:	4a4e      	ldr	r2, [pc, #312]	; (8004888 <low_level_init+0x258>)
 800474e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004750:	2203      	movs	r2, #3
 8004752:	2100      	movs	r1, #0
 8004754:	2001      	movs	r0, #1
 8004756:	f001 f895 	bl	8005884 <xQueueGenericCreate>
 800475a:	4603      	mov	r3, r0
 800475c:	4a4b      	ldr	r2, [pc, #300]	; (800488c <low_level_init+0x25c>)
 800475e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004760:	4b4b      	ldr	r3, [pc, #300]	; (8004890 <low_level_init+0x260>)
 8004762:	f107 0408 	add.w	r4, r7, #8
 8004766:	461d      	mov	r5, r3
 8004768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800476a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800476c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004774:	f107 0308 	add.w	r3, r7, #8
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fc22 	bl	8004fc4 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004780:	4944      	ldr	r1, [pc, #272]	; (8004894 <low_level_init+0x264>)
 8004782:	4845      	ldr	r0, [pc, #276]	; (8004898 <low_level_init+0x268>)
 8004784:	f7fc fda9 	bl	80012da <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004788:	4843      	ldr	r0, [pc, #268]	; (8004898 <low_level_init+0x268>)
 800478a:	f7fc fdd8 	bl	800133e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800478e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004792:	2b00      	cmp	r3, #0
 8004794:	d165      	bne.n	8004862 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004796:	4840      	ldr	r0, [pc, #256]	; (8004898 <low_level_init+0x268>)
 8004798:	f7fc fe79 	bl	800148e <LAN8742_GetLinkState>
 800479c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80047a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	dc06      	bgt.n	80047b6 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f007 fd3f 	bl	800c22c <netif_set_link_down>
      netif_set_down(netif);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f007 fcd2 	bl	800c158 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80047b4:	e057      	b.n	8004866 <low_level_init+0x236>
      switch (PHYLinkState)
 80047b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047ba:	3b02      	subs	r3, #2
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d82b      	bhi.n	8004818 <low_level_init+0x1e8>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <low_level_init+0x198>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	080047d9 	.word	0x080047d9
 80047cc:	080047eb 	.word	0x080047eb
 80047d0:	080047fb 	.word	0x080047fb
 80047d4:	0800480b 	.word	0x0800480b
        duplex = ETH_FULLDUPLEX_MODE;
 80047d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80047e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80047e8:	e01f      	b.n	800482a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80047f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80047f8:	e017      	b.n	800482a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80047fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004802:	2300      	movs	r3, #0
 8004804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004808:	e00f      	b.n	800482a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800480a:	2300      	movs	r3, #0
 800480c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004810:	2300      	movs	r3, #0
 8004812:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004816:	e008      	b.n	800482a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800481c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004820:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004828:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800482a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800482e:	4619      	mov	r1, r3
 8004830:	480f      	ldr	r0, [pc, #60]	; (8004870 <low_level_init+0x240>)
 8004832:	f7fd fcdf 	bl	80021f4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004836:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800483a:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 800483c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004840:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004846:	4619      	mov	r1, r3
 8004848:	4809      	ldr	r0, [pc, #36]	; (8004870 <low_level_init+0x240>)
 800484a:	f7fd fdbd 	bl	80023c8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800484e:	4808      	ldr	r0, [pc, #32]	; (8004870 <low_level_init+0x240>)
 8004850:	f7fd f86a 	bl	8001928 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f007 fc13 	bl	800c080 <netif_set_up>
    netif_set_link_up(netif);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f007 fcae 	bl	800c1bc <netif_set_link_up>
}
 8004860:	e001      	b.n	8004866 <low_level_init+0x236>
    Error_Handler();
 8004862:	f7fc f86d 	bl	8000940 <Error_Handler>
}
 8004866:	bf00      	nop
 8004868:	37a0      	adds	r7, #160	; 0xa0
 800486a:	46bd      	mov	sp, r7
 800486c:	bdb0      	pop	{r4, r5, r7, pc}
 800486e:	bf00      	nop
 8004870:	20005700 	.word	0x20005700
 8004874:	40028000 	.word	0x40028000
 8004878:	20005658 	.word	0x20005658
 800487c:	200055b8 	.word	0x200055b8
 8004880:	200057b0 	.word	0x200057b0
 8004884:	0801d61c 	.word	0x0801d61c
 8004888:	200056f8 	.word	0x200056f8
 800488c:	200056fc 	.word	0x200056fc
 8004890:	08019afc 	.word	0x08019afc
 8004894:	2000000c 	.word	0x2000000c
 8004898:	200057e8 	.word	0x200057e8

0800489c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b092      	sub	sp, #72	; 0x48
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80048b4:	f107 030c 	add.w	r3, r7, #12
 80048b8:	2230      	movs	r2, #48	; 0x30
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f013 ff1e 	bl	80186fe <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80048c2:	f107 030c 	add.w	r3, r7, #12
 80048c6:	2230      	movs	r2, #48	; 0x30
 80048c8:	2100      	movs	r1, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f013 ff17 	bl	80186fe <memset>

  for(q = p; q != NULL; q = q->next)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	643b      	str	r3, [r7, #64]	; 0x40
 80048d4:	e045      	b.n	8004962 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80048d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d902      	bls.n	80048e2 <low_level_output+0x46>
      return ERR_IF;
 80048dc:	f06f 030b 	mvn.w	r3, #11
 80048e0:	e065      	b.n	80049ae <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80048e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e4:	6859      	ldr	r1, [r3, #4]
 80048e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048e8:	4613      	mov	r3, r2
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	3348      	adds	r3, #72	; 0x48
 80048f2:	443b      	add	r3, r7
 80048f4:	3b3c      	subs	r3, #60	; 0x3c
 80048f6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80048f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fa:	895b      	ldrh	r3, [r3, #10]
 80048fc:	4619      	mov	r1, r3
 80048fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004900:	4613      	mov	r3, r2
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	3348      	adds	r3, #72	; 0x48
 800490a:	443b      	add	r3, r7
 800490c:	3b38      	subs	r3, #56	; 0x38
 800490e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004912:	2b00      	cmp	r3, #0
 8004914:	d011      	beq.n	800493a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004918:	1e5a      	subs	r2, r3, #1
 800491a:	f107 000c 	add.w	r0, r7, #12
 800491e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004920:	460b      	mov	r3, r1
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	440b      	add	r3, r1
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	18c1      	adds	r1, r0, r3
 800492a:	4613      	mov	r3, r2
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	3348      	adds	r3, #72	; 0x48
 8004934:	443b      	add	r3, r7
 8004936:	3b34      	subs	r3, #52	; 0x34
 8004938:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800493a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004944:	4613      	mov	r3, r2
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	3348      	adds	r3, #72	; 0x48
 800494e:	443b      	add	r3, r7
 8004950:	3b34      	subs	r3, #52	; 0x34
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004958:	3301      	adds	r3, #1
 800495a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800495c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	643b      	str	r3, [r7, #64]	; 0x40
 8004962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1b6      	bne.n	80048d6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	891b      	ldrh	r3, [r3, #8]
 800496c:	461a      	mov	r2, r3
 800496e:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <low_level_output+0x11c>)
 8004970:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004972:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <low_level_output+0x11c>)
 8004974:	f107 030c 	add.w	r3, r7, #12
 8004978:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800497a:	4a0f      	ldr	r2, [pc, #60]	; (80049b8 <low_level_output+0x11c>)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004980:	6838      	ldr	r0, [r7, #0]
 8004982:	f008 f8d7 	bl	800cb34 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004986:	490c      	ldr	r1, [pc, #48]	; (80049b8 <low_level_output+0x11c>)
 8004988:	480c      	ldr	r0, [pc, #48]	; (80049bc <low_level_output+0x120>)
 800498a:	f7fd f8da 	bl	8001b42 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800498e:	bf00      	nop
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <low_level_output+0x124>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f04f 31ff 	mov.w	r1, #4294967295
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fc41 	bl	8005220 <osSemaphoreWait>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1f5      	bne.n	8004990 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80049a4:	4805      	ldr	r0, [pc, #20]	; (80049bc <low_level_output+0x120>)
 80049a6:	f7fd fa5f 	bl	8001e68 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80049aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3748      	adds	r7, #72	; 0x48
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	200057b0 	.word	0x200057b0
 80049bc:	20005700 	.word	0x20005700
 80049c0:	200056fc 	.word	0x200056fc

080049c4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80049d0:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <low_level_input+0x2c>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80049d8:	f107 030c 	add.w	r3, r7, #12
 80049dc:	4619      	mov	r1, r3
 80049de:	4805      	ldr	r0, [pc, #20]	; (80049f4 <low_level_input+0x30>)
 80049e0:	f7fd f90b 	bl	8001bfa <HAL_ETH_ReadData>
  }

  return p;
 80049e4:	68fb      	ldr	r3, [r7, #12]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	200055b4 	.word	0x200055b4
 80049f4:	20005700 	.word	0x20005700

080049f8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004a08:	4b0f      	ldr	r3, [pc, #60]	; (8004a48 <ethernetif_input+0x50>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fc05 	bl	8005220 <osSemaphoreWait>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f5      	bne.n	8004a08 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004a1c:	68b8      	ldr	r0, [r7, #8]
 8004a1e:	f7ff ffd1 	bl	80049c4 <low_level_input>
 8004a22:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	68b9      	ldr	r1, [r7, #8]
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	4798      	blx	r3
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f007 ffd4 	bl	800c9e8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1ea      	bne.n	8004a1c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004a46:	e7df      	b.n	8004a08 <ethernetif_input+0x10>
 8004a48:	200056f8 	.word	0x200056f8

08004a4c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <ethernetif_init+0x1c>
 8004a5a:	4b0e      	ldr	r3, [pc, #56]	; (8004a94 <ethernetif_init+0x48>)
 8004a5c:	f240 12df 	movw	r2, #479	; 0x1df
 8004a60:	490d      	ldr	r1, [pc, #52]	; (8004a98 <ethernetif_init+0x4c>)
 8004a62:	480e      	ldr	r0, [pc, #56]	; (8004a9c <ethernetif_init+0x50>)
 8004a64:	f013 fdac 	bl	80185c0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2273      	movs	r2, #115	; 0x73
 8004a6c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2274      	movs	r2, #116	; 0x74
 8004a74:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a09      	ldr	r2, [pc, #36]	; (8004aa0 <ethernetif_init+0x54>)
 8004a7c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <ethernetif_init+0x58>)
 8004a82:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff fdd3 	bl	8004630 <low_level_init>

  return ERR_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	08019b18 	.word	0x08019b18
 8004a98:	08019b34 	.word	0x08019b34
 8004a9c:	08019b44 	.word	0x08019b44
 8004aa0:	080162f1 	.word	0x080162f1
 8004aa4:	0800489d 	.word	0x0800489d

08004aa8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004ab4:	68f9      	ldr	r1, [r7, #12]
 8004ab6:	4809      	ldr	r0, [pc, #36]	; (8004adc <pbuf_free_custom+0x34>)
 8004ab8:	f007 f8c2 	bl	800bc40 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004abc:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <pbuf_free_custom+0x38>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d107      	bne.n	8004ad4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <pbuf_free_custom+0x38>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004aca:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <pbuf_free_custom+0x3c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fbf4 	bl	80052bc <osSemaphoreRelease>
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	0801d61c 	.word	0x0801d61c
 8004ae0:	200055b4 	.word	0x200055b4
 8004ae4:	200056f8 	.word	0x200056f8

08004ae8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004aec:	f7fc fd8c 	bl	8001608 <HAL_GetTick>
 8004af0:	4603      	mov	r3, r0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08e      	sub	sp, #56	; 0x38
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a59      	ldr	r2, [pc, #356]	; (8004c7c <HAL_ETH_MspInit+0x184>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	f040 80ac 	bne.w	8004c74 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	623b      	str	r3, [r7, #32]
 8004b20:	4b57      	ldr	r3, [pc, #348]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	4a56      	ldr	r2, [pc, #344]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b2c:	4b54      	ldr	r3, [pc, #336]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b34:	623b      	str	r3, [r7, #32]
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	4b50      	ldr	r3, [pc, #320]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	4a4f      	ldr	r2, [pc, #316]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b46:	6313      	str	r3, [r2, #48]	; 0x30
 8004b48:	4b4d      	ldr	r3, [pc, #308]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	2300      	movs	r3, #0
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	4b49      	ldr	r3, [pc, #292]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	4a48      	ldr	r2, [pc, #288]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b62:	6313      	str	r3, [r2, #48]	; 0x30
 8004b64:	4b46      	ldr	r3, [pc, #280]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	4b42      	ldr	r3, [pc, #264]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	4a41      	ldr	r2, [pc, #260]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b7a:	f043 0304 	orr.w	r3, r3, #4
 8004b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b80:	4b3f      	ldr	r3, [pc, #252]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	4b3b      	ldr	r3, [pc, #236]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	4a3a      	ldr	r2, [pc, #232]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9c:	4b38      	ldr	r3, [pc, #224]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	4b34      	ldr	r3, [pc, #208]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	4a33      	ldr	r2, [pc, #204]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004bb2:	f043 0302 	orr.w	r3, r3, #2
 8004bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb8:	4b31      	ldr	r3, [pc, #196]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60bb      	str	r3, [r7, #8]
 8004bc8:	4b2d      	ldr	r3, [pc, #180]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	4a2c      	ldr	r2, [pc, #176]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd4:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <HAL_ETH_MspInit+0x188>)
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004be0:	2332      	movs	r3, #50	; 0x32
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be4:	2302      	movs	r3, #2
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bec:	2303      	movs	r3, #3
 8004bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004bf0:	230b      	movs	r3, #11
 8004bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4822      	ldr	r0, [pc, #136]	; (8004c84 <HAL_ETH_MspInit+0x18c>)
 8004bfc:	f7fe f866 	bl	8002ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004c00:	2386      	movs	r3, #134	; 0x86
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c04:	2302      	movs	r3, #2
 8004c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c10:	230b      	movs	r3, #11
 8004c12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c18:	4619      	mov	r1, r3
 8004c1a:	481b      	ldr	r0, [pc, #108]	; (8004c88 <HAL_ETH_MspInit+0x190>)
 8004c1c:	f7fe f856 	bl	8002ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c26:	2302      	movs	r3, #2
 8004c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c32:	230b      	movs	r3, #11
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4813      	ldr	r0, [pc, #76]	; (8004c8c <HAL_ETH_MspInit+0x194>)
 8004c3e:	f7fe f845 	bl	8002ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004c42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c50:	2303      	movs	r3, #3
 8004c52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c54:	230b      	movs	r3, #11
 8004c56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	480c      	ldr	r0, [pc, #48]	; (8004c90 <HAL_ETH_MspInit+0x198>)
 8004c60:	f7fe f834 	bl	8002ccc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004c64:	2200      	movs	r2, #0
 8004c66:	2105      	movs	r1, #5
 8004c68:	203d      	movs	r0, #61	; 0x3d
 8004c6a:	f7fc fdb5 	bl	80017d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004c6e:	203d      	movs	r0, #61	; 0x3d
 8004c70:	f7fc fdce 	bl	8001810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004c74:	bf00      	nop
 8004c76:	3738      	adds	r7, #56	; 0x38
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40028000 	.word	0x40028000
 8004c80:	40023800 	.word	0x40023800
 8004c84:	40020800 	.word	0x40020800
 8004c88:	40020000 	.word	0x40020000
 8004c8c:	40020400 	.word	0x40020400
 8004c90:	40021800 	.word	0x40021800

08004c94 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004c98:	4802      	ldr	r0, [pc, #8]	; (8004ca4 <ETH_PHY_IO_Init+0x10>)
 8004c9a:	f7fd fbaf 	bl	80023fc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	20005700 	.word	0x20005700

08004ca8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  return 0;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	68f9      	ldr	r1, [r7, #12]
 8004cca:	4807      	ldr	r0, [pc, #28]	; (8004ce8 <ETH_PHY_IO_ReadReg+0x30>)
 8004ccc:	f7fd f9fe 	bl	80020cc <HAL_ETH_ReadPHYRegister>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cda:	e000      	b.n	8004cde <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20005700 	.word	0x20005700

08004cec <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	68f9      	ldr	r1, [r7, #12]
 8004cfe:	4807      	ldr	r0, [pc, #28]	; (8004d1c <ETH_PHY_IO_WriteReg+0x30>)
 8004d00:	f7fd fa2f 	bl	8002162 <HAL_ETH_WritePHYRegister>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0e:	e000      	b.n	8004d12 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20005700 	.word	0x20005700

08004d20 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004d24:	f7fc fc70 	bl	8001608 <HAL_GetTick>
 8004d28:	4603      	mov	r3, r0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b0a0      	sub	sp, #128	; 0x80
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004d38:	f107 0308 	add.w	r3, r7, #8
 8004d3c:	2264      	movs	r2, #100	; 0x64
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4618      	mov	r0, r3
 8004d42:	f013 fcdc 	bl	80186fe <memset>
  int32_t PHYLinkState = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d4e:	2300      	movs	r3, #0
 8004d50:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d52:	2300      	movs	r3, #0
 8004d54:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004d5a:	483a      	ldr	r0, [pc, #232]	; (8004e44 <ethernet_link_thread+0x114>)
 8004d5c:	f7fc fb97 	bl	800148e <LAN8742_GetLinkState>
 8004d60:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d68:	089b      	lsrs	r3, r3, #2
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00c      	beq.n	8004d8e <ethernet_link_thread+0x5e>
 8004d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	dc09      	bgt.n	8004d8e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004d7a:	4833      	ldr	r0, [pc, #204]	; (8004e48 <ethernet_link_thread+0x118>)
 8004d7c:	f7fc fe62 	bl	8001a44 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004d80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d82:	f007 f9e9 	bl	800c158 <netif_set_down>
    netif_set_link_down(netif);
 8004d86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004d88:	f007 fa50 	bl	800c22c <netif_set_link_down>
 8004d8c:	e055      	b.n	8004e3a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d14e      	bne.n	8004e3a <ethernet_link_thread+0x10a>
 8004d9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	dd4b      	ble.n	8004e3a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004da4:	3b02      	subs	r3, #2
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d82a      	bhi.n	8004e00 <ethernet_link_thread+0xd0>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <ethernet_link_thread+0x80>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004dd3 	.word	0x08004dd3
 8004db8:	08004de3 	.word	0x08004de3
 8004dbc:	08004df3 	.word	0x08004df3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004dc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dc4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004dc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004dd0:	e017      	b.n	8004e02 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004dd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dda:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004de0:	e00f      	b.n	8004e02 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004de2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004de6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004de8:	2300      	movs	r3, #0
 8004dea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004dec:	2301      	movs	r3, #1
 8004dee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004df0:	e007      	b.n	8004e02 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004df2:	2300      	movs	r3, #0
 8004df4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004df6:	2300      	movs	r3, #0
 8004df8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004dfe:	e000      	b.n	8004e02 <ethernet_link_thread+0xd2>
    default:
      break;
 8004e00:	bf00      	nop
    }

    if(linkchanged)
 8004e02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d018      	beq.n	8004e3a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004e08:	f107 0308 	add.w	r3, r7, #8
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	480e      	ldr	r0, [pc, #56]	; (8004e48 <ethernet_link_thread+0x118>)
 8004e10:	f7fd f9f0 	bl	80021f4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e16:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e1a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004e1c:	f107 0308 	add.w	r3, r7, #8
 8004e20:	4619      	mov	r1, r3
 8004e22:	4809      	ldr	r0, [pc, #36]	; (8004e48 <ethernet_link_thread+0x118>)
 8004e24:	f7fd fad0 	bl	80023c8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004e28:	4807      	ldr	r0, [pc, #28]	; (8004e48 <ethernet_link_thread+0x118>)
 8004e2a:	f7fc fd7d 	bl	8001928 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004e2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e30:	f007 f926 	bl	800c080 <netif_set_up>
      netif_set_link_up(netif);
 8004e34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004e36:	f007 f9c1 	bl	800c1bc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004e3a:	2064      	movs	r0, #100	; 0x64
 8004e3c:	f000 f90e 	bl	800505c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004e40:	e78b      	b.n	8004d5a <ethernet_link_thread+0x2a>
 8004e42:	bf00      	nop
 8004e44:	200057e8 	.word	0x200057e8
 8004e48:	20005700 	.word	0x20005700

08004e4c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004e54:	4812      	ldr	r0, [pc, #72]	; (8004ea0 <HAL_ETH_RxAllocateCallback+0x54>)
 8004e56:	f006 fe7f 	bl	800bb58 <memp_malloc_pool>
 8004e5a:	60f8      	str	r0, [r7, #12]
  if (p)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d014      	beq.n	8004e8c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f103 0220 	add.w	r2, r3, #32
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a0d      	ldr	r2, [pc, #52]	; (8004ea4 <HAL_ETH_RxAllocateCallback+0x58>)
 8004e70:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004e7a:	9201      	str	r2, [sp, #4]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2241      	movs	r2, #65	; 0x41
 8004e82:	2100      	movs	r1, #0
 8004e84:	2000      	movs	r0, #0
 8004e86:	f007 fbf5 	bl	800c674 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004e8a:	e005      	b.n	8004e98 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004e8e:	2201      	movs	r2, #1
 8004e90:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	0801d61c 	.word	0x0801d61c
 8004ea4:	08004aa9 	.word	0x08004aa9
 8004ea8:	200055b4 	.word	0x200055b4

08004eac <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b089      	sub	sp, #36	; 0x24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3b20      	subs	r3, #32
 8004eca:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	887a      	ldrh	r2, [r7, #2]
 8004edc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	e003      	b.n	8004ef6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	61fb      	str	r3, [r7, #28]
 8004f02:	e009      	b.n	8004f18 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	891a      	ldrh	r2, [r3, #8]
 8004f08:	887b      	ldrh	r3, [r7, #2]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f2      	bne.n	8004f04 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	3724      	adds	r7, #36	; 0x24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f007 fd57 	bl	800c9e8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	4603      	mov	r3, r0
 8004f4a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f54:	2b84      	cmp	r3, #132	; 0x84
 8004f56:	d005      	beq.n	8004f64 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	3303      	adds	r3, #3
 8004f62:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f64:	68fb      	ldr	r3, [r7, #12]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f78:	f3ef 8305 	mrs	r3, IPSR
 8004f7c:	607b      	str	r3, [r7, #4]
  return(result);
 8004f7e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f9a:	f001 fd3b 	bl	8006a14 <vTaskStartScheduler>
  
  return osOK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004fa8:	f7ff ffe3 	bl	8004f72 <inHandlerMode>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004fb2:	f001 fe53 	bl	8006c5c <xTaskGetTickCountFromISR>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	e002      	b.n	8004fc0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004fba:	f001 fe3f 	bl	8006c3c <xTaskGetTickCount>
 8004fbe:	4603      	mov	r3, r0
  }
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc6:	b089      	sub	sp, #36	; 0x24
 8004fc8:	af04      	add	r7, sp, #16
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d020      	beq.n	8005018 <osThreadCreate+0x54>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01c      	beq.n	8005018 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685c      	ldr	r4, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691e      	ldr	r6, [r3, #16]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff ffa6 	bl	8004f42 <makeFreeRtosPriority>
 8004ff6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005000:	9202      	str	r2, [sp, #8]
 8005002:	9301      	str	r3, [sp, #4]
 8005004:	9100      	str	r1, [sp, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	4632      	mov	r2, r6
 800500a:	4629      	mov	r1, r5
 800500c:	4620      	mov	r0, r4
 800500e:	f001 fb23 	bl	8006658 <xTaskCreateStatic>
 8005012:	4603      	mov	r3, r0
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	e01c      	b.n	8005052 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685c      	ldr	r4, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005024:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff ff88 	bl	8004f42 <makeFreeRtosPriority>
 8005032:	4602      	mov	r2, r0
 8005034:	f107 030c 	add.w	r3, r7, #12
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	9200      	str	r2, [sp, #0]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	4632      	mov	r2, r6
 8005040:	4629      	mov	r1, r5
 8005042:	4620      	mov	r0, r4
 8005044:	f001 fb65 	bl	8006712 <xTaskCreate>
 8005048:	4603      	mov	r3, r0
 800504a:	2b01      	cmp	r3, #1
 800504c:	d001      	beq.n	8005052 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	e000      	b.n	8005054 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005052:	68fb      	ldr	r3, [r7, #12]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800505c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <osDelay+0x16>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	e000      	b.n	8005074 <osDelay+0x18>
 8005072:	2301      	movs	r3, #1
 8005074:	4618      	mov	r0, r3
 8005076:	f001 fc99 	bl	80069ac <vTaskDelay>
  
  return osOK;
 800507a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d007      	beq.n	80050a4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	4619      	mov	r1, r3
 800509a:	2001      	movs	r0, #1
 800509c:	f000 fc7d 	bl	800599a <xQueueCreateMutexStatic>
 80050a0:	4603      	mov	r3, r0
 80050a2:	e003      	b.n	80050ac <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80050a4:	2001      	movs	r0, #1
 80050a6:	f000 fc60 	bl	800596a <xQueueCreateMutex>
 80050aa:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <osMutexWait+0x18>
    return osErrorParameter;
 80050c8:	2380      	movs	r3, #128	; 0x80
 80050ca:	e03a      	b.n	8005142 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d103      	bne.n	80050e0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80050d8:	f04f 33ff 	mov.w	r3, #4294967295
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	e009      	b.n	80050f4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d006      	beq.n	80050f4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <osMutexWait+0x40>
      ticks = 1;
 80050f0:	2301      	movs	r3, #1
 80050f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80050f4:	f7ff ff3d 	bl	8004f72 <inHandlerMode>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d017      	beq.n	800512e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80050fe:	f107 0308 	add.w	r3, r7, #8
 8005102:	461a      	mov	r2, r3
 8005104:	2100      	movs	r1, #0
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f001 f874 	bl	80061f4 <xQueueReceiveFromISR>
 800510c:	4603      	mov	r3, r0
 800510e:	2b01      	cmp	r3, #1
 8005110:	d001      	beq.n	8005116 <osMutexWait+0x62>
      return osErrorOS;
 8005112:	23ff      	movs	r3, #255	; 0xff
 8005114:	e015      	b.n	8005142 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d011      	beq.n	8005140 <osMutexWait+0x8c>
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <osMutexWait+0x98>)
 800511e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	e008      	b.n	8005140 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800512e:	68f9      	ldr	r1, [r7, #12]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 ff53 	bl	8005fdc <xQueueSemaphoreTake>
 8005136:	4603      	mov	r3, r0
 8005138:	2b01      	cmp	r3, #1
 800513a:	d001      	beq.n	8005140 <osMutexWait+0x8c>
    return osErrorOS;
 800513c:	23ff      	movs	r3, #255	; 0xff
 800513e:	e000      	b.n	8005142 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800515c:	2300      	movs	r3, #0
 800515e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005160:	f7ff ff07 	bl	8004f72 <inHandlerMode>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d016      	beq.n	8005198 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800516a:	f107 0308 	add.w	r3, r7, #8
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fdc6 	bl	8005d02 <xQueueGiveFromISR>
 8005176:	4603      	mov	r3, r0
 8005178:	2b01      	cmp	r3, #1
 800517a:	d001      	beq.n	8005180 <osMutexRelease+0x30>
      return osErrorOS;
 800517c:	23ff      	movs	r3, #255	; 0xff
 800517e:	e017      	b.n	80051b0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d013      	beq.n	80051ae <osMutexRelease+0x5e>
 8005186:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <osMutexRelease+0x68>)
 8005188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	e00a      	b.n	80051ae <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005198:	2300      	movs	r3, #0
 800519a:	2200      	movs	r2, #0
 800519c:	2100      	movs	r1, #0
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fc16 	bl	80059d0 <xQueueGenericSend>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d001      	beq.n	80051ae <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80051aa:	23ff      	movs	r3, #255	; 0xff
 80051ac:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80051ae:	68fb      	ldr	r3, [r7, #12]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	e000ed04 	.word	0xe000ed04

080051bc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00f      	beq.n	80051ee <osSemaphoreCreate+0x32>
    if (count == 1) {
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d10a      	bne.n	80051ea <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2203      	movs	r2, #3
 80051da:	9200      	str	r2, [sp, #0]
 80051dc:	2200      	movs	r2, #0
 80051de:	2100      	movs	r1, #0
 80051e0:	2001      	movs	r0, #1
 80051e2:	f000 fad7 	bl	8005794 <xQueueGenericCreateStatic>
 80051e6:	4603      	mov	r3, r0
 80051e8:	e016      	b.n	8005218 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e014      	b.n	8005218 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d110      	bne.n	8005216 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80051f4:	2203      	movs	r2, #3
 80051f6:	2100      	movs	r1, #0
 80051f8:	2001      	movs	r0, #1
 80051fa:	f000 fb43 	bl	8005884 <xQueueGenericCreate>
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <osSemaphoreCreate+0x56>
 8005206:	2300      	movs	r3, #0
 8005208:	2200      	movs	r2, #0
 800520a:	2100      	movs	r1, #0
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 fbdf 	bl	80059d0 <xQueueGenericSend>
      return sema;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	e000      	b.n	8005218 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005216:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	e03a      	b.n	80052ae <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d103      	bne.n	800524c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005244:	f04f 33ff 	mov.w	r3, #4294967295
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	e009      	b.n	8005260 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d006      	beq.n	8005260 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <osSemaphoreWait+0x40>
      ticks = 1;
 800525c:	2301      	movs	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005260:	f7ff fe87 	bl	8004f72 <inHandlerMode>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d017      	beq.n	800529a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800526a:	f107 0308 	add.w	r3, r7, #8
 800526e:	461a      	mov	r2, r3
 8005270:	2100      	movs	r1, #0
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 ffbe 	bl	80061f4 <xQueueReceiveFromISR>
 8005278:	4603      	mov	r3, r0
 800527a:	2b01      	cmp	r3, #1
 800527c:	d001      	beq.n	8005282 <osSemaphoreWait+0x62>
      return osErrorOS;
 800527e:	23ff      	movs	r3, #255	; 0xff
 8005280:	e015      	b.n	80052ae <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d011      	beq.n	80052ac <osSemaphoreWait+0x8c>
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <osSemaphoreWait+0x98>)
 800528a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	e008      	b.n	80052ac <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800529a:	68f9      	ldr	r1, [r7, #12]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fe9d 	bl	8005fdc <xQueueSemaphoreTake>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d001      	beq.n	80052ac <osSemaphoreWait+0x8c>
    return osErrorOS;
 80052a8:	23ff      	movs	r3, #255	; 0xff
 80052aa:	e000      	b.n	80052ae <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	e000ed04 	.word	0xe000ed04

080052bc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80052cc:	f7ff fe51 	bl	8004f72 <inHandlerMode>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d016      	beq.n	8005304 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80052d6:	f107 0308 	add.w	r3, r7, #8
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fd10 	bl	8005d02 <xQueueGiveFromISR>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d001      	beq.n	80052ec <osSemaphoreRelease+0x30>
      return osErrorOS;
 80052e8:	23ff      	movs	r3, #255	; 0xff
 80052ea:	e017      	b.n	800531c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d013      	beq.n	800531a <osSemaphoreRelease+0x5e>
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <osSemaphoreRelease+0x68>)
 80052f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	e00a      	b.n	800531a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005304:	2300      	movs	r3, #0
 8005306:	2200      	movs	r2, #0
 8005308:	2100      	movs	r1, #0
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fb60 	bl	80059d0 <xQueueGenericSend>
 8005310:	4603      	mov	r3, r0
 8005312:	2b01      	cmp	r3, #1
 8005314:	d001      	beq.n	800531a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005316:	23ff      	movs	r3, #255	; 0xff
 8005318:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800531a:	68fb      	ldr	r3, [r7, #12]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	e000ed04 	.word	0xe000ed04

08005328 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005330:	f7ff fe1f 	bl	8004f72 <inHandlerMode>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800533a:	2382      	movs	r3, #130	; 0x82
 800533c:	e003      	b.n	8005346 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f001 f814 	bl	800636c <vQueueDelete>

  return osOK; 
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800534e:	b590      	push	{r4, r7, lr}
 8005350:	b085      	sub	sp, #20
 8005352:	af02      	add	r7, sp, #8
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d011      	beq.n	8005384 <osMessageCreate+0x36>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00d      	beq.n	8005384 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6859      	ldr	r1, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2400      	movs	r4, #0
 800537a:	9400      	str	r4, [sp, #0]
 800537c:	f000 fa0a 	bl	8005794 <xQueueGenericCreateStatic>
 8005380:	4603      	mov	r3, r0
 8005382:	e008      	b.n	8005396 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	4619      	mov	r1, r3
 8005390:	f000 fa78 	bl	8005884 <xQueueGenericCreate>
 8005394:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	bd90      	pop	{r4, r7, pc}
	...

080053a0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <osMessagePut+0x1e>
    ticks = 1;
 80053ba:	2301      	movs	r3, #1
 80053bc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80053be:	f7ff fdd8 	bl	8004f72 <inHandlerMode>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d018      	beq.n	80053fa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80053c8:	f107 0210 	add.w	r2, r7, #16
 80053cc:	f107 0108 	add.w	r1, r7, #8
 80053d0:	2300      	movs	r3, #0
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fbfa 	bl	8005bcc <xQueueGenericSendFromISR>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d001      	beq.n	80053e2 <osMessagePut+0x42>
      return osErrorOS;
 80053de:	23ff      	movs	r3, #255	; 0xff
 80053e0:	e018      	b.n	8005414 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d014      	beq.n	8005412 <osMessagePut+0x72>
 80053e8:	4b0c      	ldr	r3, [pc, #48]	; (800541c <osMessagePut+0x7c>)
 80053ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	e00b      	b.n	8005412 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80053fa:	f107 0108 	add.w	r1, r7, #8
 80053fe:	2300      	movs	r3, #0
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fae4 	bl	80059d0 <xQueueGenericSend>
 8005408:	4603      	mov	r3, r0
 800540a:	2b01      	cmp	r3, #1
 800540c:	d001      	beq.n	8005412 <osMessagePut+0x72>
      return osErrorOS;
 800540e:	23ff      	movs	r3, #255	; 0xff
 8005410:	e000      	b.n	8005414 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	e000ed04 	.word	0xe000ed04

08005420 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b08b      	sub	sp, #44	; 0x2c
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800543a:	2380      	movs	r3, #128	; 0x80
 800543c:	617b      	str	r3, [r7, #20]
    return event;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	461c      	mov	r4, r3
 8005442:	f107 0314 	add.w	r3, r7, #20
 8005446:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800544a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800544e:	e054      	b.n	80054fa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005450:	2300      	movs	r3, #0
 8005452:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545e:	d103      	bne.n	8005468 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005460:	f04f 33ff 	mov.w	r3, #4294967295
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
 8005466:	e009      	b.n	800547c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d006      	beq.n	800547c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <osMessageGet+0x5c>
      ticks = 1;
 8005478:	2301      	movs	r3, #1
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800547c:	f7ff fd79 	bl	8004f72 <inHandlerMode>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01c      	beq.n	80054c0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005486:	f107 0220 	add.w	r2, r7, #32
 800548a:	f107 0314 	add.w	r3, r7, #20
 800548e:	3304      	adds	r3, #4
 8005490:	4619      	mov	r1, r3
 8005492:	68b8      	ldr	r0, [r7, #8]
 8005494:	f000 feae 	bl	80061f4 <xQueueReceiveFromISR>
 8005498:	4603      	mov	r3, r0
 800549a:	2b01      	cmp	r3, #1
 800549c:	d102      	bne.n	80054a4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800549e:	2310      	movs	r3, #16
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	e001      	b.n	80054a8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01d      	beq.n	80054ea <osMessageGet+0xca>
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <osMessageGet+0xe4>)
 80054b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	e014      	b.n	80054ea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80054c0:	f107 0314 	add.w	r3, r7, #20
 80054c4:	3304      	adds	r3, #4
 80054c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c8:	4619      	mov	r1, r3
 80054ca:	68b8      	ldr	r0, [r7, #8]
 80054cc:	f000 fca6 	bl	8005e1c <xQueueReceive>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d102      	bne.n	80054dc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80054d6:	2310      	movs	r3, #16
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	e006      	b.n	80054ea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <osMessageGet+0xc6>
 80054e2:	2300      	movs	r3, #0
 80054e4:	e000      	b.n	80054e8 <osMessageGet+0xc8>
 80054e6:	2340      	movs	r3, #64	; 0x40
 80054e8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	461c      	mov	r4, r3
 80054ee:	f107 0314 	add.w	r3, r7, #20
 80054f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	372c      	adds	r7, #44	; 0x2c
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd90      	pop	{r4, r7, pc}
 8005502:	bf00      	nop
 8005504:	e000ed04 	.word	0xe000ed04

08005508 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005510:	f7ff fd2f 	bl	8004f72 <inHandlerMode>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 ff08 	bl	8006330 <uxQueueMessagesWaitingFromISR>
 8005520:	4603      	mov	r3, r0
 8005522:	e003      	b.n	800552c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fee5 	bl	80062f4 <uxQueueMessagesWaiting>
 800552a:	4603      	mov	r3, r0
  }
}
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800553c:	f7ff fd19 	bl	8004f72 <inHandlerMode>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <osMessageDelete+0x16>
    return osErrorISR;
 8005546:	2382      	movs	r3, #130	; 0x82
 8005548:	e003      	b.n	8005552 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 ff0e 	bl	800636c <vQueueDelete>

  return osOK; 
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f103 0208 	add.w	r2, r3, #8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f04f 32ff 	mov.w	r2, #4294967295
 8005572:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f103 0208 	add.w	r2, r3, #8
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f103 0208 	add.w	r2, r3, #8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	601a      	str	r2, [r3, #0]
}
 80055f0:	bf00      	nop
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d103      	bne.n	800561c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	e00c      	b.n	8005636 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3308      	adds	r3, #8
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e002      	b.n	800562a <vListInsert+0x2e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	429a      	cmp	r2, r3
 8005634:	d2f6      	bcs.n	8005624 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	601a      	str	r2, [r3, #0]
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6892      	ldr	r2, [r2, #8]
 8005684:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6852      	ldr	r2, [r2, #4]
 800568e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	429a      	cmp	r2, r3
 8005698:	d103      	bne.n	80056a2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	1e5a      	subs	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056ee:	f002 f911 	bl	8007914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	441a      	add	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	3b01      	subs	r3, #1
 8005720:	68f9      	ldr	r1, [r7, #12]
 8005722:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005724:	fb01 f303 	mul.w	r3, r1, r3
 8005728:	441a      	add	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	22ff      	movs	r2, #255	; 0xff
 8005732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	22ff      	movs	r2, #255	; 0xff
 800573a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d114      	bne.n	800576e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01a      	beq.n	8005782 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3310      	adds	r3, #16
 8005750:	4618      	mov	r0, r3
 8005752:	f001 fbd3 	bl	8006efc <xTaskRemoveFromEventList>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d012      	beq.n	8005782 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800575c:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <xQueueGenericReset+0xcc>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	e009      	b.n	8005782 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3310      	adds	r3, #16
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff fef1 	bl	800555a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3324      	adds	r3, #36	; 0x24
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff feec 	bl	800555a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005782:	f002 f8f7 	bl	8007974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005786:	2301      	movs	r3, #1
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08e      	sub	sp, #56	; 0x38
 8005798:	af02      	add	r7, sp, #8
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057ba:	bf00      	nop
 80057bc:	e7fe      	b.n	80057bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <xQueueGenericCreateStatic+0x52>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <xQueueGenericCreateStatic+0x56>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <xQueueGenericCreateStatic+0x58>
 80057ea:	2300      	movs	r3, #0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	623b      	str	r3, [r7, #32]
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d102      	bne.n	8005812 <xQueueGenericCreateStatic+0x7e>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <xQueueGenericCreateStatic+0x82>
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <xQueueGenericCreateStatic+0x84>
 8005816:	2300      	movs	r3, #0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	61fb      	str	r3, [r7, #28]
}
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005832:	2348      	movs	r3, #72	; 0x48
 8005834:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b48      	cmp	r3, #72	; 0x48
 800583a:	d00a      	beq.n	8005852 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	61bb      	str	r3, [r7, #24]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005852:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00d      	beq.n	800587a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005866:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	4613      	mov	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f83f 	bl	80058f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800587c:	4618      	mov	r0, r3
 800587e:	3730      	adds	r7, #48	; 0x30
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	; 0x28
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	4613      	mov	r3, r2
 8005890:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10a      	bne.n	80058ae <xQueueGenericCreate+0x2a>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	613b      	str	r3, [r7, #16]
}
 80058aa:	bf00      	nop
 80058ac:	e7fe      	b.n	80058ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	fb02 f303 	mul.w	r3, r2, r3
 80058b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	3348      	adds	r3, #72	; 0x48
 80058bc:	4618      	mov	r0, r3
 80058be:	f002 f94b 	bl	8007b58 <pvPortMalloc>
 80058c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d011      	beq.n	80058ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	3348      	adds	r3, #72	; 0x48
 80058d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058dc:	79fa      	ldrb	r2, [r7, #7]
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	4613      	mov	r3, r2
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f805 	bl	80058f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058ee:	69bb      	ldr	r3, [r7, #24]
	}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3720      	adds	r7, #32
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d103      	bne.n	8005914 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	e002      	b.n	800591a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005926:	2101      	movs	r1, #1
 8005928:	69b8      	ldr	r0, [r7, #24]
 800592a:	f7ff fecb 	bl	80056c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00e      	beq.n	8005962 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005956:	2300      	movs	r3, #0
 8005958:	2200      	movs	r2, #0
 800595a:	2100      	movs	r1, #0
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f837 	bl	80059d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800596a:	b580      	push	{r7, lr}
 800596c:	b086      	sub	sp, #24
 800596e:	af00      	add	r7, sp, #0
 8005970:	4603      	mov	r3, r0
 8005972:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005974:	2301      	movs	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	2300      	movs	r3, #0
 800597a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	461a      	mov	r2, r3
 8005980:	6939      	ldr	r1, [r7, #16]
 8005982:	6978      	ldr	r0, [r7, #20]
 8005984:	f7ff ff7e 	bl	8005884 <xQueueGenericCreate>
 8005988:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff ffd3 	bl	8005936 <prvInitialiseMutex>

		return xNewQueue;
 8005990:	68fb      	ldr	r3, [r7, #12]
	}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800599a:	b580      	push	{r7, lr}
 800599c:	b088      	sub	sp, #32
 800599e:	af02      	add	r7, sp, #8
 80059a0:	4603      	mov	r3, r0
 80059a2:	6039      	str	r1, [r7, #0]
 80059a4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80059a6:	2301      	movs	r3, #1
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	2300      	movs	r3, #0
 80059ac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2200      	movs	r2, #0
 80059b6:	6939      	ldr	r1, [r7, #16]
 80059b8:	6978      	ldr	r0, [r7, #20]
 80059ba:	f7ff feeb 	bl	8005794 <xQueueGenericCreateStatic>
 80059be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff ffb8 	bl	8005936 <prvInitialiseMutex>

		return xNewQueue;
 80059c6:	68fb      	ldr	r3, [r7, #12]
	}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08e      	sub	sp, #56	; 0x38
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059de:	2300      	movs	r3, #0
 80059e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10a      	bne.n	8005a02 <xQueueGenericSend+0x32>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059fe:	bf00      	nop
 8005a00:	e7fe      	b.n	8005a00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d103      	bne.n	8005a10 <xQueueGenericSend+0x40>
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <xQueueGenericSend+0x44>
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <xQueueGenericSend+0x46>
 8005a14:	2300      	movs	r3, #0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10a      	bne.n	8005a30 <xQueueGenericSend+0x60>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a2c:	bf00      	nop
 8005a2e:	e7fe      	b.n	8005a2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d103      	bne.n	8005a3e <xQueueGenericSend+0x6e>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <xQueueGenericSend+0x72>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <xQueueGenericSend+0x74>
 8005a42:	2300      	movs	r3, #0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <xQueueGenericSend+0x8e>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	623b      	str	r3, [r7, #32]
}
 8005a5a:	bf00      	nop
 8005a5c:	e7fe      	b.n	8005a5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a5e:	f001 fc0d 	bl	800727c <xTaskGetSchedulerState>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d102      	bne.n	8005a6e <xQueueGenericSend+0x9e>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <xQueueGenericSend+0xa2>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <xQueueGenericSend+0xa4>
 8005a72:	2300      	movs	r3, #0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <xQueueGenericSend+0xbe>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	61fb      	str	r3, [r7, #28]
}
 8005a8a:	bf00      	nop
 8005a8c:	e7fe      	b.n	8005a8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a8e:	f001 ff41 	bl	8007914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d302      	bcc.n	8005aa4 <xQueueGenericSend+0xd4>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d129      	bne.n	8005af8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aaa:	f000 fc9a 	bl	80063e2 <prvCopyDataToQueue>
 8005aae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d010      	beq.n	8005ada <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	3324      	adds	r3, #36	; 0x24
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 fa1d 	bl	8006efc <xTaskRemoveFromEventList>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d013      	beq.n	8005af0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ac8:	4b3f      	ldr	r3, [pc, #252]	; (8005bc8 <xQueueGenericSend+0x1f8>)
 8005aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	e00a      	b.n	8005af0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d007      	beq.n	8005af0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ae0:	4b39      	ldr	r3, [pc, #228]	; (8005bc8 <xQueueGenericSend+0x1f8>)
 8005ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005af0:	f001 ff40 	bl	8007974 <vPortExitCritical>
				return pdPASS;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e063      	b.n	8005bc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d103      	bne.n	8005b06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005afe:	f001 ff39 	bl	8007974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e05c      	b.n	8005bc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b0c:	f107 0314 	add.w	r3, r7, #20
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 fa55 	bl	8006fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b16:	2301      	movs	r3, #1
 8005b18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b1a:	f001 ff2b 	bl	8007974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b1e:	f000 ffe3 	bl	8006ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b22:	f001 fef7 	bl	8007914 <vPortEnterCritical>
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b2c:	b25b      	sxtb	r3, r3
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d103      	bne.n	8005b3c <xQueueGenericSend+0x16c>
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b42:	b25b      	sxtb	r3, r3
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d103      	bne.n	8005b52 <xQueueGenericSend+0x182>
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b52:	f001 ff0f 	bl	8007974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b56:	1d3a      	adds	r2, r7, #4
 8005b58:	f107 0314 	add.w	r3, r7, #20
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 fa44 	bl	8006fec <xTaskCheckForTimeOut>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d124      	bne.n	8005bb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b6c:	f000 fd31 	bl	80065d2 <prvIsQueueFull>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d018      	beq.n	8005ba8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	3310      	adds	r3, #16
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 f998 	bl	8006eb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b86:	f000 fcbc 	bl	8006502 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b8a:	f000 ffbb 	bl	8006b04 <xTaskResumeAll>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f47f af7c 	bne.w	8005a8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005b96:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <xQueueGenericSend+0x1f8>)
 8005b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	e772      	b.n	8005a8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005baa:	f000 fcaa 	bl	8006502 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bae:	f000 ffa9 	bl	8006b04 <xTaskResumeAll>
 8005bb2:	e76c      	b.n	8005a8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bb6:	f000 fca4 	bl	8006502 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bba:	f000 ffa3 	bl	8006b04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005bbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3738      	adds	r7, #56	; 0x38
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b090      	sub	sp, #64	; 0x40
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d103      	bne.n	8005c08 <xQueueGenericSendFromISR+0x3c>
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <xQueueGenericSendFromISR+0x40>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <xQueueGenericSendFromISR+0x42>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c24:	bf00      	nop
 8005c26:	e7fe      	b.n	8005c26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d103      	bne.n	8005c36 <xQueueGenericSendFromISR+0x6a>
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <xQueueGenericSendFromISR+0x6e>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <xQueueGenericSendFromISR+0x70>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	623b      	str	r3, [r7, #32]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c56:	f001 ff3f 	bl	8007ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c5a:	f3ef 8211 	mrs	r2, BASEPRI
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	61fa      	str	r2, [r7, #28]
 8005c70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d302      	bcc.n	8005c88 <xQueueGenericSendFromISR+0xbc>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d12f      	bne.n	8005ce8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	68b9      	ldr	r1, [r7, #8]
 8005c9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c9e:	f000 fba0 	bl	80063e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ca2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005caa:	d112      	bne.n	8005cd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d016      	beq.n	8005ce2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	3324      	adds	r3, #36	; 0x24
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 f91f 	bl	8006efc <xTaskRemoveFromEventList>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00e      	beq.n	8005ce2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00b      	beq.n	8005ce2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	e007      	b.n	8005ce2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	b25a      	sxtb	r2, r3
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005ce6:	e001      	b.n	8005cec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cf6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3740      	adds	r7, #64	; 0x40
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b08e      	sub	sp, #56	; 0x38
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	623b      	str	r3, [r7, #32]
}
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <xQueueGiveFromISR+0x48>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	61fb      	str	r3, [r7, #28]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d103      	bne.n	8005d5a <xQueueGiveFromISR+0x58>
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <xQueueGiveFromISR+0x5c>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <xQueueGiveFromISR+0x5e>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <xQueueGiveFromISR+0x78>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	61bb      	str	r3, [r7, #24]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d7a:	f001 fead 	bl	8007ad8 <vPortValidateInterruptPriority>
	__asm volatile
 8005d7e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	617a      	str	r2, [r7, #20]
 8005d94:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005d96:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d22b      	bcs.n	8005e02 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d112      	bne.n	8005dec <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d016      	beq.n	8005dfc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	3324      	adds	r3, #36	; 0x24
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 f892 	bl	8006efc <xTaskRemoveFromEventList>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00e      	beq.n	8005dfc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00b      	beq.n	8005dfc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2201      	movs	r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	e007      	b.n	8005dfc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df0:	3301      	adds	r3, #1
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	b25a      	sxtb	r2, r3
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8005e00:	e001      	b.n	8005e06 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	637b      	str	r3, [r7, #52]	; 0x34
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f383 8811 	msr	BASEPRI, r3
}
 8005e10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3738      	adds	r7, #56	; 0x38
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08c      	sub	sp, #48	; 0x30
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <xQueueReceive+0x30>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	623b      	str	r3, [r7, #32]
}
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d103      	bne.n	8005e5a <xQueueReceive+0x3e>
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <xQueueReceive+0x42>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e000      	b.n	8005e60 <xQueueReceive+0x44>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <xQueueReceive+0x5e>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	61fb      	str	r3, [r7, #28]
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e7a:	f001 f9ff 	bl	800727c <xTaskGetSchedulerState>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d102      	bne.n	8005e8a <xQueueReceive+0x6e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <xQueueReceive+0x72>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e000      	b.n	8005e90 <xQueueReceive+0x74>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <xQueueReceive+0x8e>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	61bb      	str	r3, [r7, #24]
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005eaa:	f001 fd33 	bl	8007914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01f      	beq.n	8005efa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ebe:	f000 fafa 	bl	80064b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	1e5a      	subs	r2, r3, #1
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00f      	beq.n	8005ef2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	3310      	adds	r3, #16
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 f810 	bl	8006efc <xTaskRemoveFromEventList>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d007      	beq.n	8005ef2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ee2:	4b3d      	ldr	r3, [pc, #244]	; (8005fd8 <xQueueReceive+0x1bc>)
 8005ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ef2:	f001 fd3f 	bl	8007974 <vPortExitCritical>
				return pdPASS;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e069      	b.n	8005fce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d103      	bne.n	8005f08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f00:	f001 fd38 	bl	8007974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f04:	2300      	movs	r3, #0
 8005f06:	e062      	b.n	8005fce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f0e:	f107 0310 	add.w	r3, r7, #16
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 f854 	bl	8006fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f1c:	f001 fd2a 	bl	8007974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f20:	f000 fde2 	bl	8006ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f24:	f001 fcf6 	bl	8007914 <vPortEnterCritical>
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f2e:	b25b      	sxtb	r3, r3
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f34:	d103      	bne.n	8005f3e <xQueueReceive+0x122>
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f44:	b25b      	sxtb	r3, r3
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4a:	d103      	bne.n	8005f54 <xQueueReceive+0x138>
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f54:	f001 fd0e 	bl	8007974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f58:	1d3a      	adds	r2, r7, #4
 8005f5a:	f107 0310 	add.w	r3, r7, #16
 8005f5e:	4611      	mov	r1, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 f843 	bl	8006fec <xTaskCheckForTimeOut>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d123      	bne.n	8005fb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f6e:	f000 fb1a 	bl	80065a6 <prvIsQueueEmpty>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d017      	beq.n	8005fa8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7a:	3324      	adds	r3, #36	; 0x24
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	4611      	mov	r1, r2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 ff97 	bl	8006eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f88:	f000 fabb 	bl	8006502 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f8c:	f000 fdba 	bl	8006b04 <xTaskResumeAll>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d189      	bne.n	8005eaa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f96:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <xQueueReceive+0x1bc>)
 8005f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	e780      	b.n	8005eaa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005faa:	f000 faaa 	bl	8006502 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fae:	f000 fda9 	bl	8006b04 <xTaskResumeAll>
 8005fb2:	e77a      	b.n	8005eaa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb6:	f000 faa4 	bl	8006502 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fba:	f000 fda3 	bl	8006b04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc0:	f000 faf1 	bl	80065a6 <prvIsQueueEmpty>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f43f af6f 	beq.w	8005eaa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3730      	adds	r7, #48	; 0x30
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	e000ed04 	.word	0xe000ed04

08005fdc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08e      	sub	sp, #56	; 0x38
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	623b      	str	r3, [r7, #32]
}
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	61fb      	str	r3, [r7, #28]
}
 8006028:	bf00      	nop
 800602a:	e7fe      	b.n	800602a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800602c:	f001 f926 	bl	800727c <xTaskGetSchedulerState>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <xQueueSemaphoreTake+0x60>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <xQueueSemaphoreTake+0x64>
 800603c:	2301      	movs	r3, #1
 800603e:	e000      	b.n	8006042 <xQueueSemaphoreTake+0x66>
 8006040:	2300      	movs	r3, #0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10a      	bne.n	800605c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	61bb      	str	r3, [r7, #24]
}
 8006058:	bf00      	nop
 800605a:	e7fe      	b.n	800605a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800605c:	f001 fc5a 	bl	8007914 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	2b00      	cmp	r3, #0
 800606a:	d024      	beq.n	80060b6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	1e5a      	subs	r2, r3, #1
 8006070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006072:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d104      	bne.n	8006086 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800607c:	f001 faa6 	bl	80075cc <pvTaskIncrementMutexHeldCount>
 8006080:	4602      	mov	r2, r0
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00f      	beq.n	80060ae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	3310      	adds	r3, #16
 8006092:	4618      	mov	r0, r3
 8006094:	f000 ff32 	bl	8006efc <xTaskRemoveFromEventList>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800609e:	4b54      	ldr	r3, [pc, #336]	; (80061f0 <xQueueSemaphoreTake+0x214>)
 80060a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060ae:	f001 fc61 	bl	8007974 <vPortExitCritical>
				return pdPASS;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e097      	b.n	80061e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d111      	bne.n	80060e0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80060c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	617b      	str	r3, [r7, #20]
}
 80060d4:	bf00      	nop
 80060d6:	e7fe      	b.n	80060d6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80060d8:	f001 fc4c 	bl	8007974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060dc:	2300      	movs	r3, #0
 80060de:	e082      	b.n	80061e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060e6:	f107 030c 	add.w	r3, r7, #12
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 ff68 	bl	8006fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060f0:	2301      	movs	r3, #1
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060f4:	f001 fc3e 	bl	8007974 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060f8:	f000 fcf6 	bl	8006ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060fc:	f001 fc0a 	bl	8007914 <vPortEnterCritical>
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006106:	b25b      	sxtb	r3, r3
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610c:	d103      	bne.n	8006116 <xQueueSemaphoreTake+0x13a>
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800611c:	b25b      	sxtb	r3, r3
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d103      	bne.n	800612c <xQueueSemaphoreTake+0x150>
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800612c:	f001 fc22 	bl	8007974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006130:	463a      	mov	r2, r7
 8006132:	f107 030c 	add.w	r3, r7, #12
 8006136:	4611      	mov	r1, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f000 ff57 	bl	8006fec <xTaskCheckForTimeOut>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d132      	bne.n	80061aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006146:	f000 fa2e 	bl	80065a6 <prvIsQueueEmpty>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d026      	beq.n	800619e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d109      	bne.n	800616c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006158:	f001 fbdc 	bl	8007914 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	4618      	mov	r0, r3
 8006162:	f001 f8a9 	bl	80072b8 <xTaskPriorityInherit>
 8006166:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006168:	f001 fc04 	bl	8007974 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	3324      	adds	r3, #36	; 0x24
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	4611      	mov	r1, r2
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fe9d 	bl	8006eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800617a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800617c:	f000 f9c1 	bl	8006502 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006180:	f000 fcc0 	bl	8006b04 <xTaskResumeAll>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	f47f af68 	bne.w	800605c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800618c:	4b18      	ldr	r3, [pc, #96]	; (80061f0 <xQueueSemaphoreTake+0x214>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	e75e      	b.n	800605c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800619e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061a0:	f000 f9af 	bl	8006502 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061a4:	f000 fcae 	bl	8006b04 <xTaskResumeAll>
 80061a8:	e758      	b.n	800605c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80061aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061ac:	f000 f9a9 	bl	8006502 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061b0:	f000 fca8 	bl	8006b04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061b6:	f000 f9f6 	bl	80065a6 <prvIsQueueEmpty>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f43f af4d 	beq.w	800605c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00d      	beq.n	80061e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80061c8:	f001 fba4 	bl	8007914 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80061cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061ce:	f000 f8f0 	bl	80063b2 <prvGetDisinheritPriorityAfterTimeout>
 80061d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 f968 	bl	80074b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80061e0:	f001 fbc8 	bl	8007974 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3738      	adds	r7, #56	; 0x38
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	e000ed04 	.word	0xe000ed04

080061f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08e      	sub	sp, #56	; 0x38
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10a      	bne.n	8006220 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	623b      	str	r3, [r7, #32]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d103      	bne.n	800622e <xQueueReceiveFromISR+0x3a>
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <xQueueReceiveFromISR+0x3e>
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <xQueueReceiveFromISR+0x40>
 8006232:	2300      	movs	r3, #0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10a      	bne.n	800624e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	61fb      	str	r3, [r7, #28]
}
 800624a:	bf00      	nop
 800624c:	e7fe      	b.n	800624c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800624e:	f001 fc43 	bl	8007ad8 <vPortValidateInterruptPriority>
	__asm volatile
 8006252:	f3ef 8211 	mrs	r2, BASEPRI
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	61ba      	str	r2, [r7, #24]
 8006268:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800626a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800626c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	2b00      	cmp	r3, #0
 8006278:	d02f      	beq.n	80062da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006288:	f000 f915 	bl	80064b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	1e5a      	subs	r2, r3, #1
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006294:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629c:	d112      	bne.n	80062c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d016      	beq.n	80062d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	3310      	adds	r3, #16
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fe26 	bl	8006efc <xTaskRemoveFromEventList>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00e      	beq.n	80062d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00b      	beq.n	80062d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e007      	b.n	80062d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80062c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062c8:	3301      	adds	r3, #1
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	b25a      	sxtb	r2, r3
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80062d4:	2301      	movs	r3, #1
 80062d6:	637b      	str	r3, [r7, #52]	; 0x34
 80062d8:	e001      	b.n	80062de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80062da:	2300      	movs	r3, #0
 80062dc:	637b      	str	r3, [r7, #52]	; 0x34
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f383 8811 	msr	BASEPRI, r3
}
 80062e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3738      	adds	r7, #56	; 0x38
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	60bb      	str	r3, [r7, #8]
}
 8006314:	bf00      	nop
 8006316:	e7fe      	b.n	8006316 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006318:	f001 fafc 	bl	8007914 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006322:	f001 fb27 	bl	8007974 <vPortExitCritical>

	return uxReturn;
 8006326:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	60fb      	str	r3, [r7, #12]
}
 8006354:	bf00      	nop
 8006356:	e7fe      	b.n	8006356 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800635e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006360:	4618      	mov	r0, r3
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10a      	bne.n	8006394 <vQueueDelete+0x28>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	60bb      	str	r3, [r7, #8]
}
 8006390:	bf00      	nop
 8006392:	e7fe      	b.n	8006392 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 f935 	bl	8006604 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d102      	bne.n	80063aa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f001 fca3 	bl	8007cf0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80063aa:	bf00      	nop
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80063b2:	b480      	push	{r7}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d006      	beq.n	80063d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f1c3 0307 	rsb	r3, r3, #7
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	e001      	b.n	80063d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80063d4:	68fb      	ldr	r3, [r7, #12]
	}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b086      	sub	sp, #24
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10d      	bne.n	800641c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d14d      	bne.n	80064a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 ffc9 	bl	80073a4 <xTaskPriorityDisinherit>
 8006412:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	609a      	str	r2, [r3, #8]
 800641a:	e043      	b.n	80064a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d119      	bne.n	8006456 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6858      	ldr	r0, [r3, #4]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	461a      	mov	r2, r3
 800642c:	68b9      	ldr	r1, [r7, #8]
 800642e:	f012 fac7 	bl	80189c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	441a      	add	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	429a      	cmp	r2, r3
 800644a:	d32b      	bcc.n	80064a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	605a      	str	r2, [r3, #4]
 8006454:	e026      	b.n	80064a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	68d8      	ldr	r0, [r3, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	461a      	mov	r2, r3
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	f012 faad 	bl	80189c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	425b      	negs	r3, r3
 8006470:	441a      	add	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d207      	bcs.n	8006492 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	425b      	negs	r3, r3
 800648c:	441a      	add	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b02      	cmp	r3, #2
 8006496:	d105      	bne.n	80064a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064ac:	697b      	ldr	r3, [r7, #20]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b082      	sub	sp, #8
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d018      	beq.n	80064fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	441a      	add	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d303      	bcc.n	80064ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68d9      	ldr	r1, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	461a      	mov	r2, r3
 80064f4:	6838      	ldr	r0, [r7, #0]
 80064f6:	f012 fa63 	bl	80189c0 <memcpy>
	}
}
 80064fa:	bf00      	nop
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800650a:	f001 fa03 	bl	8007914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006514:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006516:	e011      	b.n	800653c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	2b00      	cmp	r3, #0
 800651e:	d012      	beq.n	8006546 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3324      	adds	r3, #36	; 0x24
 8006524:	4618      	mov	r0, r3
 8006526:	f000 fce9 	bl	8006efc <xTaskRemoveFromEventList>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006530:	f000 fdbe 	bl	80070b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	3b01      	subs	r3, #1
 8006538:	b2db      	uxtb	r3, r3
 800653a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800653c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006540:	2b00      	cmp	r3, #0
 8006542:	dce9      	bgt.n	8006518 <prvUnlockQueue+0x16>
 8006544:	e000      	b.n	8006548 <prvUnlockQueue+0x46>
					break;
 8006546:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	22ff      	movs	r2, #255	; 0xff
 800654c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006550:	f001 fa10 	bl	8007974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006554:	f001 f9de 	bl	8007914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800655e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006560:	e011      	b.n	8006586 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d012      	beq.n	8006590 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3310      	adds	r3, #16
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fcc4 	bl	8006efc <xTaskRemoveFromEventList>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800657a:	f000 fd99 	bl	80070b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800657e:	7bbb      	ldrb	r3, [r7, #14]
 8006580:	3b01      	subs	r3, #1
 8006582:	b2db      	uxtb	r3, r3
 8006584:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006586:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800658a:	2b00      	cmp	r3, #0
 800658c:	dce9      	bgt.n	8006562 <prvUnlockQueue+0x60>
 800658e:	e000      	b.n	8006592 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006590:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	22ff      	movs	r2, #255	; 0xff
 8006596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800659a:	f001 f9eb 	bl	8007974 <vPortExitCritical>
}
 800659e:	bf00      	nop
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065ae:	f001 f9b1 	bl	8007914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065ba:	2301      	movs	r3, #1
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e001      	b.n	80065c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065c4:	f001 f9d6 	bl	8007974 <vPortExitCritical>

	return xReturn;
 80065c8:	68fb      	ldr	r3, [r7, #12]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b084      	sub	sp, #16
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065da:	f001 f99b 	bl	8007914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d102      	bne.n	80065f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065ea:	2301      	movs	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
 80065ee:	e001      	b.n	80065f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065f4:	f001 f9be 	bl	8007974 <vPortExitCritical>

	return xReturn;
 80065f8:	68fb      	ldr	r3, [r7, #12]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e016      	b.n	8006640 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006612:	4a10      	ldr	r2, [pc, #64]	; (8006654 <vQueueUnregisterQueue+0x50>)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	4413      	add	r3, r2
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	429a      	cmp	r2, r3
 8006620:	d10b      	bne.n	800663a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006622:	4a0c      	ldr	r2, [pc, #48]	; (8006654 <vQueueUnregisterQueue+0x50>)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2100      	movs	r1, #0
 8006628:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800662c:	4a09      	ldr	r2, [pc, #36]	; (8006654 <vQueueUnregisterQueue+0x50>)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	4413      	add	r3, r2
 8006634:	2200      	movs	r2, #0
 8006636:	605a      	str	r2, [r3, #4]
				break;
 8006638:	e006      	b.n	8006648 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b07      	cmp	r3, #7
 8006644:	d9e5      	bls.n	8006612 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006646:	bf00      	nop
 8006648:	bf00      	nop
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	20005808 	.word	0x20005808

08006658 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08e      	sub	sp, #56	; 0x38
 800665c:	af04      	add	r7, sp, #16
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <xTaskCreateStatic+0x2a>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	623b      	str	r3, [r7, #32]
}
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <xTaskCreateStatic+0x46>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	61fb      	str	r3, [r7, #28]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800669e:	23a0      	movs	r3, #160	; 0xa0
 80066a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	2ba0      	cmp	r3, #160	; 0xa0
 80066a6:	d00a      	beq.n	80066be <xTaskCreateStatic+0x66>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	61bb      	str	r3, [r7, #24]
}
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d01e      	beq.n	8006704 <xTaskCreateStatic+0xac>
 80066c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01b      	beq.n	8006704 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	2202      	movs	r2, #2
 80066da:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066de:	2300      	movs	r3, #0
 80066e0:	9303      	str	r3, [sp, #12]
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	9302      	str	r3, [sp, #8]
 80066e6:	f107 0314 	add.w	r3, r7, #20
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f850 	bl	800679c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066fe:	f000 f8eb 	bl	80068d8 <prvAddNewTaskToReadyList>
 8006702:	e001      	b.n	8006708 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006708:	697b      	ldr	r3, [r7, #20]
	}
 800670a:	4618      	mov	r0, r3
 800670c:	3728      	adds	r7, #40	; 0x28
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006712:	b580      	push	{r7, lr}
 8006714:	b08c      	sub	sp, #48	; 0x30
 8006716:	af04      	add	r7, sp, #16
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	603b      	str	r3, [r7, #0]
 800671e:	4613      	mov	r3, r2
 8006720:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006722:	88fb      	ldrh	r3, [r7, #6]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4618      	mov	r0, r3
 8006728:	f001 fa16 	bl	8007b58 <pvPortMalloc>
 800672c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00e      	beq.n	8006752 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006734:	20a0      	movs	r0, #160	; 0xa0
 8006736:	f001 fa0f 	bl	8007b58 <pvPortMalloc>
 800673a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	631a      	str	r2, [r3, #48]	; 0x30
 8006748:	e005      	b.n	8006756 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800674a:	6978      	ldr	r0, [r7, #20]
 800674c:	f001 fad0 	bl	8007cf0 <vPortFree>
 8006750:	e001      	b.n	8006756 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006752:	2300      	movs	r3, #0
 8006754:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d017      	beq.n	800678c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006764:	88fa      	ldrh	r2, [r7, #6]
 8006766:	2300      	movs	r3, #0
 8006768:	9303      	str	r3, [sp, #12]
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	9302      	str	r3, [sp, #8]
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	9301      	str	r3, [sp, #4]
 8006772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 f80e 	bl	800679c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006780:	69f8      	ldr	r0, [r7, #28]
 8006782:	f000 f8a9 	bl	80068d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006786:	2301      	movs	r3, #1
 8006788:	61bb      	str	r3, [r7, #24]
 800678a:	e002      	b.n	8006792 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800678c:	f04f 33ff 	mov.w	r3, #4294967295
 8006790:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006792:	69bb      	ldr	r3, [r7, #24]
	}
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067b4:	3b01      	subs	r3, #1
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f023 0307 	bic.w	r3, r3, #7
 80067c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	617b      	str	r3, [r7, #20]
}
 80067e0:	bf00      	nop
 80067e2:	e7fe      	b.n	80067e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d01f      	beq.n	800682a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067ea:	2300      	movs	r3, #0
 80067ec:	61fb      	str	r3, [r7, #28]
 80067ee:	e012      	b.n	8006816 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	7819      	ldrb	r1, [r3, #0]
 80067f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	3334      	adds	r3, #52	; 0x34
 8006800:	460a      	mov	r2, r1
 8006802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	4413      	add	r3, r2
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d006      	beq.n	800681e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	3301      	adds	r3, #1
 8006814:	61fb      	str	r3, [r7, #28]
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	2b0f      	cmp	r3, #15
 800681a:	d9e9      	bls.n	80067f0 <prvInitialiseNewTask+0x54>
 800681c:	e000      	b.n	8006820 <prvInitialiseNewTask+0x84>
			{
				break;
 800681e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006828:	e003      	b.n	8006832 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	2b06      	cmp	r3, #6
 8006836:	d901      	bls.n	800683c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006838:	2306      	movs	r3, #6
 800683a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006840:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006846:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684a:	2200      	movs	r2, #0
 800684c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	3304      	adds	r3, #4
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fea1 	bl	800559a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685a:	3318      	adds	r3, #24
 800685c:	4618      	mov	r0, r3
 800685e:	f7fe fe9c 	bl	800559a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686a:	f1c3 0207 	rsb	r2, r3, #7
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006876:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	2200      	movs	r2, #0
 8006884:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	334c      	adds	r3, #76	; 0x4c
 800688c:	224c      	movs	r2, #76	; 0x4c
 800688e:	2100      	movs	r1, #0
 8006890:	4618      	mov	r0, r3
 8006892:	f011 ff34 	bl	80186fe <memset>
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	4a0c      	ldr	r2, [pc, #48]	; (80068cc <prvInitialiseNewTask+0x130>)
 800689a:	651a      	str	r2, [r3, #80]	; 0x50
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	4a0c      	ldr	r2, [pc, #48]	; (80068d0 <prvInitialiseNewTask+0x134>)
 80068a0:	655a      	str	r2, [r3, #84]	; 0x54
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	4a0b      	ldr	r2, [pc, #44]	; (80068d4 <prvInitialiseNewTask+0x138>)
 80068a6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	69b8      	ldr	r0, [r7, #24]
 80068ae:	f000 ff07 	bl	80076c0 <pxPortInitialiseStack>
 80068b2:	4602      	mov	r2, r0
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c4:	bf00      	nop
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	200116f4 	.word	0x200116f4
 80068d0:	2001175c 	.word	0x2001175c
 80068d4:	200117c4 	.word	0x200117c4

080068d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068e0:	f001 f818 	bl	8007914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068e4:	4b2a      	ldr	r3, [pc, #168]	; (8006990 <prvAddNewTaskToReadyList+0xb8>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3301      	adds	r3, #1
 80068ea:	4a29      	ldr	r2, [pc, #164]	; (8006990 <prvAddNewTaskToReadyList+0xb8>)
 80068ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068ee:	4b29      	ldr	r3, [pc, #164]	; (8006994 <prvAddNewTaskToReadyList+0xbc>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d109      	bne.n	800690a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068f6:	4a27      	ldr	r2, [pc, #156]	; (8006994 <prvAddNewTaskToReadyList+0xbc>)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068fc:	4b24      	ldr	r3, [pc, #144]	; (8006990 <prvAddNewTaskToReadyList+0xb8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d110      	bne.n	8006926 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006904:	f000 fbf8 	bl	80070f8 <prvInitialiseTaskLists>
 8006908:	e00d      	b.n	8006926 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800690a:	4b23      	ldr	r3, [pc, #140]	; (8006998 <prvAddNewTaskToReadyList+0xc0>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006912:	4b20      	ldr	r3, [pc, #128]	; (8006994 <prvAddNewTaskToReadyList+0xbc>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	429a      	cmp	r2, r3
 800691e:	d802      	bhi.n	8006926 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006920:	4a1c      	ldr	r2, [pc, #112]	; (8006994 <prvAddNewTaskToReadyList+0xbc>)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006926:	4b1d      	ldr	r3, [pc, #116]	; (800699c <prvAddNewTaskToReadyList+0xc4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3301      	adds	r3, #1
 800692c:	4a1b      	ldr	r2, [pc, #108]	; (800699c <prvAddNewTaskToReadyList+0xc4>)
 800692e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	2201      	movs	r2, #1
 8006936:	409a      	lsls	r2, r3
 8006938:	4b19      	ldr	r3, [pc, #100]	; (80069a0 <prvAddNewTaskToReadyList+0xc8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4313      	orrs	r3, r2
 800693e:	4a18      	ldr	r2, [pc, #96]	; (80069a0 <prvAddNewTaskToReadyList+0xc8>)
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4a15      	ldr	r2, [pc, #84]	; (80069a4 <prvAddNewTaskToReadyList+0xcc>)
 8006950:	441a      	add	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3304      	adds	r3, #4
 8006956:	4619      	mov	r1, r3
 8006958:	4610      	mov	r0, r2
 800695a:	f7fe fe2b 	bl	80055b4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800695e:	f001 f809 	bl	8007974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006962:	4b0d      	ldr	r3, [pc, #52]	; (8006998 <prvAddNewTaskToReadyList+0xc0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00e      	beq.n	8006988 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800696a:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <prvAddNewTaskToReadyList+0xbc>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	429a      	cmp	r2, r3
 8006976:	d207      	bcs.n	8006988 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006978:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <prvAddNewTaskToReadyList+0xd0>)
 800697a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20005948 	.word	0x20005948
 8006994:	20005848 	.word	0x20005848
 8006998:	20005954 	.word	0x20005954
 800699c:	20005964 	.word	0x20005964
 80069a0:	20005950 	.word	0x20005950
 80069a4:	2000584c 	.word	0x2000584c
 80069a8:	e000ed04 	.word	0xe000ed04

080069ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d017      	beq.n	80069ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069be:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <vTaskDelay+0x60>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <vTaskDelay+0x30>
	__asm volatile
 80069c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	60bb      	str	r3, [r7, #8]
}
 80069d8:	bf00      	nop
 80069da:	e7fe      	b.n	80069da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069dc:	f000 f884 	bl	8006ae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069e0:	2100      	movs	r1, #0
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fe06 	bl	80075f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069e8:	f000 f88c 	bl	8006b04 <xTaskResumeAll>
 80069ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d107      	bne.n	8006a04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80069f4:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <vTaskDelay+0x64>)
 80069f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	20005970 	.word	0x20005970
 8006a10:	e000ed04 	.word	0xe000ed04

08006a14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	; 0x28
 8006a18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a22:	463a      	mov	r2, r7
 8006a24:	1d39      	adds	r1, r7, #4
 8006a26:	f107 0308 	add.w	r3, r7, #8
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7f9 fdc6 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	9202      	str	r2, [sp, #8]
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	460a      	mov	r2, r1
 8006a42:	4921      	ldr	r1, [pc, #132]	; (8006ac8 <vTaskStartScheduler+0xb4>)
 8006a44:	4821      	ldr	r0, [pc, #132]	; (8006acc <vTaskStartScheduler+0xb8>)
 8006a46:	f7ff fe07 	bl	8006658 <xTaskCreateStatic>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	4a20      	ldr	r2, [pc, #128]	; (8006ad0 <vTaskStartScheduler+0xbc>)
 8006a4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a50:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <vTaskStartScheduler+0xbc>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e001      	b.n	8006a62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d11b      	bne.n	8006aa0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	613b      	str	r3, [r7, #16]
}
 8006a7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a7c:	4b15      	ldr	r3, [pc, #84]	; (8006ad4 <vTaskStartScheduler+0xc0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	334c      	adds	r3, #76	; 0x4c
 8006a82:	4a15      	ldr	r2, [pc, #84]	; (8006ad8 <vTaskStartScheduler+0xc4>)
 8006a84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a86:	4b15      	ldr	r3, [pc, #84]	; (8006adc <vTaskStartScheduler+0xc8>)
 8006a88:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a8e:	4b14      	ldr	r3, [pc, #80]	; (8006ae0 <vTaskStartScheduler+0xcc>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a94:	4b13      	ldr	r3, [pc, #76]	; (8006ae4 <vTaskStartScheduler+0xd0>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a9a:	f000 fe99 	bl	80077d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a9e:	e00e      	b.n	8006abe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa6:	d10a      	bne.n	8006abe <vTaskStartScheduler+0xaa>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	60fb      	str	r3, [r7, #12]
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <vTaskStartScheduler+0xa8>
}
 8006abe:	bf00      	nop
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	08019b6c 	.word	0x08019b6c
 8006acc:	080070c9 	.word	0x080070c9
 8006ad0:	2000596c 	.word	0x2000596c
 8006ad4:	20005848 	.word	0x20005848
 8006ad8:	2000008c 	.word	0x2000008c
 8006adc:	20005968 	.word	0x20005968
 8006ae0:	20005954 	.word	0x20005954
 8006ae4:	2000594c 	.word	0x2000594c

08006ae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006aec:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <vTaskSuspendAll+0x18>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3301      	adds	r3, #1
 8006af2:	4a03      	ldr	r2, [pc, #12]	; (8006b00 <vTaskSuspendAll+0x18>)
 8006af4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006af6:	bf00      	nop
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	20005970 	.word	0x20005970

08006b04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b12:	4b41      	ldr	r3, [pc, #260]	; (8006c18 <xTaskResumeAll+0x114>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	603b      	str	r3, [r7, #0]
}
 8006b2c:	bf00      	nop
 8006b2e:	e7fe      	b.n	8006b2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b30:	f000 fef0 	bl	8007914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b34:	4b38      	ldr	r3, [pc, #224]	; (8006c18 <xTaskResumeAll+0x114>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	4a37      	ldr	r2, [pc, #220]	; (8006c18 <xTaskResumeAll+0x114>)
 8006b3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b3e:	4b36      	ldr	r3, [pc, #216]	; (8006c18 <xTaskResumeAll+0x114>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d161      	bne.n	8006c0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b46:	4b35      	ldr	r3, [pc, #212]	; (8006c1c <xTaskResumeAll+0x118>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d05d      	beq.n	8006c0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b4e:	e02e      	b.n	8006bae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b50:	4b33      	ldr	r3, [pc, #204]	; (8006c20 <xTaskResumeAll+0x11c>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3318      	adds	r3, #24
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe fd86 	bl	800566e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3304      	adds	r3, #4
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe fd81 	bl	800566e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	2201      	movs	r2, #1
 8006b72:	409a      	lsls	r2, r3
 8006b74:	4b2b      	ldr	r3, [pc, #172]	; (8006c24 <xTaskResumeAll+0x120>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	4a2a      	ldr	r2, [pc, #168]	; (8006c24 <xTaskResumeAll+0x120>)
 8006b7c:	6013      	str	r3, [r2, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b82:	4613      	mov	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4a27      	ldr	r2, [pc, #156]	; (8006c28 <xTaskResumeAll+0x124>)
 8006b8c:	441a      	add	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3304      	adds	r3, #4
 8006b92:	4619      	mov	r1, r3
 8006b94:	4610      	mov	r0, r2
 8006b96:	f7fe fd0d 	bl	80055b4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9e:	4b23      	ldr	r3, [pc, #140]	; (8006c2c <xTaskResumeAll+0x128>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d302      	bcc.n	8006bae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006ba8:	4b21      	ldr	r3, [pc, #132]	; (8006c30 <xTaskResumeAll+0x12c>)
 8006baa:	2201      	movs	r2, #1
 8006bac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bae:	4b1c      	ldr	r3, [pc, #112]	; (8006c20 <xTaskResumeAll+0x11c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1cc      	bne.n	8006b50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bbc:	f000 fb3e 	bl	800723c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bc0:	4b1c      	ldr	r3, [pc, #112]	; (8006c34 <xTaskResumeAll+0x130>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d010      	beq.n	8006bee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bcc:	f000 f858 	bl	8006c80 <xTaskIncrementTick>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006bd6:	4b16      	ldr	r3, [pc, #88]	; (8006c30 <xTaskResumeAll+0x12c>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1f1      	bne.n	8006bcc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006be8:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <xTaskResumeAll+0x130>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bee:	4b10      	ldr	r3, [pc, #64]	; (8006c30 <xTaskResumeAll+0x12c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d009      	beq.n	8006c0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bfa:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <xTaskResumeAll+0x134>)
 8006bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c0a:	f000 feb3 	bl	8007974 <vPortExitCritical>

	return xAlreadyYielded;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20005970 	.word	0x20005970
 8006c1c:	20005948 	.word	0x20005948
 8006c20:	20005908 	.word	0x20005908
 8006c24:	20005950 	.word	0x20005950
 8006c28:	2000584c 	.word	0x2000584c
 8006c2c:	20005848 	.word	0x20005848
 8006c30:	2000595c 	.word	0x2000595c
 8006c34:	20005958 	.word	0x20005958
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c42:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <xTaskGetTickCount+0x1c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c48:	687b      	ldr	r3, [r7, #4]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	2000594c 	.word	0x2000594c

08006c5c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c62:	f000 ff39 	bl	8007ad8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006c6a:	4b04      	ldr	r3, [pc, #16]	; (8006c7c <xTaskGetTickCountFromISR+0x20>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c70:	683b      	ldr	r3, [r7, #0]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	2000594c 	.word	0x2000594c

08006c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c8a:	4b4e      	ldr	r3, [pc, #312]	; (8006dc4 <xTaskIncrementTick+0x144>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f040 808e 	bne.w	8006db0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c94:	4b4c      	ldr	r3, [pc, #304]	; (8006dc8 <xTaskIncrementTick+0x148>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c9c:	4a4a      	ldr	r2, [pc, #296]	; (8006dc8 <xTaskIncrementTick+0x148>)
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d120      	bne.n	8006cea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ca8:	4b48      	ldr	r3, [pc, #288]	; (8006dcc <xTaskIncrementTick+0x14c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	603b      	str	r3, [r7, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <xTaskIncrementTick+0x46>
 8006cc8:	4b40      	ldr	r3, [pc, #256]	; (8006dcc <xTaskIncrementTick+0x14c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	4b40      	ldr	r3, [pc, #256]	; (8006dd0 <xTaskIncrementTick+0x150>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a3e      	ldr	r2, [pc, #248]	; (8006dcc <xTaskIncrementTick+0x14c>)
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	4a3e      	ldr	r2, [pc, #248]	; (8006dd0 <xTaskIncrementTick+0x150>)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	4b3d      	ldr	r3, [pc, #244]	; (8006dd4 <xTaskIncrementTick+0x154>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	4a3c      	ldr	r2, [pc, #240]	; (8006dd4 <xTaskIncrementTick+0x154>)
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	f000 faa9 	bl	800723c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cea:	4b3b      	ldr	r3, [pc, #236]	; (8006dd8 <xTaskIncrementTick+0x158>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d348      	bcc.n	8006d86 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cf4:	4b35      	ldr	r3, [pc, #212]	; (8006dcc <xTaskIncrementTick+0x14c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cfe:	4b36      	ldr	r3, [pc, #216]	; (8006dd8 <xTaskIncrementTick+0x158>)
 8006d00:	f04f 32ff 	mov.w	r2, #4294967295
 8006d04:	601a      	str	r2, [r3, #0]
					break;
 8006d06:	e03e      	b.n	8006d86 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d08:	4b30      	ldr	r3, [pc, #192]	; (8006dcc <xTaskIncrementTick+0x14c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d203      	bcs.n	8006d28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d20:	4a2d      	ldr	r2, [pc, #180]	; (8006dd8 <xTaskIncrementTick+0x158>)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d26:	e02e      	b.n	8006d86 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fc9e 	bl	800566e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d004      	beq.n	8006d44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	3318      	adds	r3, #24
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe fc95 	bl	800566e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	2201      	movs	r2, #1
 8006d4a:	409a      	lsls	r2, r3
 8006d4c:	4b23      	ldr	r3, [pc, #140]	; (8006ddc <xTaskIncrementTick+0x15c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	4a22      	ldr	r2, [pc, #136]	; (8006ddc <xTaskIncrementTick+0x15c>)
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4a1f      	ldr	r2, [pc, #124]	; (8006de0 <xTaskIncrementTick+0x160>)
 8006d64:	441a      	add	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f7fe fc21 	bl	80055b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d76:	4b1b      	ldr	r3, [pc, #108]	; (8006de4 <xTaskIncrementTick+0x164>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d3b9      	bcc.n	8006cf4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d80:	2301      	movs	r3, #1
 8006d82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d84:	e7b6      	b.n	8006cf4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d86:	4b17      	ldr	r3, [pc, #92]	; (8006de4 <xTaskIncrementTick+0x164>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8c:	4914      	ldr	r1, [pc, #80]	; (8006de0 <xTaskIncrementTick+0x160>)
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	440b      	add	r3, r1
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d901      	bls.n	8006da2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006da2:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <xTaskIncrementTick+0x168>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d007      	beq.n	8006dba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006daa:	2301      	movs	r3, #1
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	e004      	b.n	8006dba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006db0:	4b0e      	ldr	r3, [pc, #56]	; (8006dec <xTaskIncrementTick+0x16c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3301      	adds	r3, #1
 8006db6:	4a0d      	ldr	r2, [pc, #52]	; (8006dec <xTaskIncrementTick+0x16c>)
 8006db8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dba:	697b      	ldr	r3, [r7, #20]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20005970 	.word	0x20005970
 8006dc8:	2000594c 	.word	0x2000594c
 8006dcc:	20005900 	.word	0x20005900
 8006dd0:	20005904 	.word	0x20005904
 8006dd4:	20005960 	.word	0x20005960
 8006dd8:	20005968 	.word	0x20005968
 8006ddc:	20005950 	.word	0x20005950
 8006de0:	2000584c 	.word	0x2000584c
 8006de4:	20005848 	.word	0x20005848
 8006de8:	2000595c 	.word	0x2000595c
 8006dec:	20005958 	.word	0x20005958

08006df0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006df6:	4b29      	ldr	r3, [pc, #164]	; (8006e9c <vTaskSwitchContext+0xac>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dfe:	4b28      	ldr	r3, [pc, #160]	; (8006ea0 <vTaskSwitchContext+0xb0>)
 8006e00:	2201      	movs	r2, #1
 8006e02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e04:	e044      	b.n	8006e90 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006e06:	4b26      	ldr	r3, [pc, #152]	; (8006ea0 <vTaskSwitchContext+0xb0>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e0c:	4b25      	ldr	r3, [pc, #148]	; (8006ea4 <vTaskSwitchContext+0xb4>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	fab3 f383 	clz	r3, r3
 8006e18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	f1c3 031f 	rsb	r3, r3, #31
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	4921      	ldr	r1, [pc, #132]	; (8006ea8 <vTaskSwitchContext+0xb8>)
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	607b      	str	r3, [r7, #4]
}
 8006e48:	bf00      	nop
 8006e4a:	e7fe      	b.n	8006e4a <vTaskSwitchContext+0x5a>
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4a14      	ldr	r2, [pc, #80]	; (8006ea8 <vTaskSwitchContext+0xb8>)
 8006e58:	4413      	add	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	605a      	str	r2, [r3, #4]
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d104      	bne.n	8006e7c <vTaskSwitchContext+0x8c>
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	605a      	str	r2, [r3, #4]
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	4a0a      	ldr	r2, [pc, #40]	; (8006eac <vTaskSwitchContext+0xbc>)
 8006e84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e86:	4b09      	ldr	r3, [pc, #36]	; (8006eac <vTaskSwitchContext+0xbc>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	334c      	adds	r3, #76	; 0x4c
 8006e8c:	4a08      	ldr	r2, [pc, #32]	; (8006eb0 <vTaskSwitchContext+0xc0>)
 8006e8e:	6013      	str	r3, [r2, #0]
}
 8006e90:	bf00      	nop
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	20005970 	.word	0x20005970
 8006ea0:	2000595c 	.word	0x2000595c
 8006ea4:	20005950 	.word	0x20005950
 8006ea8:	2000584c 	.word	0x2000584c
 8006eac:	20005848 	.word	0x20005848
 8006eb0:	2000008c 	.word	0x2000008c

08006eb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	60fb      	str	r3, [r7, #12]
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006eda:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <vTaskPlaceOnEventList+0x44>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3318      	adds	r3, #24
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7fe fb8a 	bl	80055fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ee8:	2101      	movs	r1, #1
 8006eea:	6838      	ldr	r0, [r7, #0]
 8006eec:	f000 fb82 	bl	80075f4 <prvAddCurrentTaskToDelayedList>
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20005848 	.word	0x20005848

08006efc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	60fb      	str	r3, [r7, #12]
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	3318      	adds	r3, #24
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fb9e 	bl	800566e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f32:	4b1d      	ldr	r3, [pc, #116]	; (8006fa8 <xTaskRemoveFromEventList+0xac>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d11c      	bne.n	8006f74 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe fb95 	bl	800566e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	2201      	movs	r2, #1
 8006f4a:	409a      	lsls	r2, r3
 8006f4c:	4b17      	ldr	r3, [pc, #92]	; (8006fac <xTaskRemoveFromEventList+0xb0>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	4a16      	ldr	r2, [pc, #88]	; (8006fac <xTaskRemoveFromEventList+0xb0>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <xTaskRemoveFromEventList+0xb4>)
 8006f64:	441a      	add	r2, r3
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f7fe fb21 	bl	80055b4 <vListInsertEnd>
 8006f72:	e005      	b.n	8006f80 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	3318      	adds	r3, #24
 8006f78:	4619      	mov	r1, r3
 8006f7a:	480e      	ldr	r0, [pc, #56]	; (8006fb4 <xTaskRemoveFromEventList+0xb8>)
 8006f7c:	f7fe fb1a 	bl	80055b4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <xTaskRemoveFromEventList+0xbc>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d905      	bls.n	8006f9a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f92:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <xTaskRemoveFromEventList+0xc0>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	e001      	b.n	8006f9e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f9e:	697b      	ldr	r3, [r7, #20]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20005970 	.word	0x20005970
 8006fac:	20005950 	.word	0x20005950
 8006fb0:	2000584c 	.word	0x2000584c
 8006fb4:	20005908 	.word	0x20005908
 8006fb8:	20005848 	.word	0x20005848
 8006fbc:	2000595c 	.word	0x2000595c

08006fc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fc8:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <vTaskInternalSetTimeOutState+0x24>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fd0:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <vTaskInternalSetTimeOutState+0x28>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	605a      	str	r2, [r3, #4]
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	20005960 	.word	0x20005960
 8006fe8:	2000594c 	.word	0x2000594c

08006fec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	613b      	str	r3, [r7, #16]
}
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10a      	bne.n	800702e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	60fb      	str	r3, [r7, #12]
}
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800702e:	f000 fc71 	bl	8007914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007032:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <xTaskCheckForTimeOut+0xbc>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d102      	bne.n	8007052 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800704c:	2300      	movs	r3, #0
 800704e:	61fb      	str	r3, [r7, #28]
 8007050:	e023      	b.n	800709a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	4b15      	ldr	r3, [pc, #84]	; (80070ac <xTaskCheckForTimeOut+0xc0>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d007      	beq.n	800706e <xTaskCheckForTimeOut+0x82>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	429a      	cmp	r2, r3
 8007066:	d302      	bcc.n	800706e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007068:	2301      	movs	r3, #1
 800706a:	61fb      	str	r3, [r7, #28]
 800706c:	e015      	b.n	800709a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	429a      	cmp	r2, r3
 8007076:	d20b      	bcs.n	8007090 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	1ad2      	subs	r2, r2, r3
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff ff9b 	bl	8006fc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800708a:	2300      	movs	r3, #0
 800708c:	61fb      	str	r3, [r7, #28]
 800708e:	e004      	b.n	800709a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007096:	2301      	movs	r3, #1
 8007098:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800709a:	f000 fc6b 	bl	8007974 <vPortExitCritical>

	return xReturn;
 800709e:	69fb      	ldr	r3, [r7, #28]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3720      	adds	r7, #32
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	2000594c 	.word	0x2000594c
 80070ac:	20005960 	.word	0x20005960

080070b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070b4:	4b03      	ldr	r3, [pc, #12]	; (80070c4 <vTaskMissedYield+0x14>)
 80070b6:	2201      	movs	r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
}
 80070ba:	bf00      	nop
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	2000595c 	.word	0x2000595c

080070c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070d0:	f000 f852 	bl	8007178 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <prvIdleTask+0x28>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d9f9      	bls.n	80070d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80070dc:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <prvIdleTask+0x2c>)
 80070de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070ec:	e7f0      	b.n	80070d0 <prvIdleTask+0x8>
 80070ee:	bf00      	nop
 80070f0:	2000584c 	.word	0x2000584c
 80070f4:	e000ed04 	.word	0xe000ed04

080070f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070fe:	2300      	movs	r3, #0
 8007100:	607b      	str	r3, [r7, #4]
 8007102:	e00c      	b.n	800711e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	4613      	mov	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4a12      	ldr	r2, [pc, #72]	; (8007158 <prvInitialiseTaskLists+0x60>)
 8007110:	4413      	add	r3, r2
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fa21 	bl	800555a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3301      	adds	r3, #1
 800711c:	607b      	str	r3, [r7, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b06      	cmp	r3, #6
 8007122:	d9ef      	bls.n	8007104 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007124:	480d      	ldr	r0, [pc, #52]	; (800715c <prvInitialiseTaskLists+0x64>)
 8007126:	f7fe fa18 	bl	800555a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800712a:	480d      	ldr	r0, [pc, #52]	; (8007160 <prvInitialiseTaskLists+0x68>)
 800712c:	f7fe fa15 	bl	800555a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007130:	480c      	ldr	r0, [pc, #48]	; (8007164 <prvInitialiseTaskLists+0x6c>)
 8007132:	f7fe fa12 	bl	800555a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007136:	480c      	ldr	r0, [pc, #48]	; (8007168 <prvInitialiseTaskLists+0x70>)
 8007138:	f7fe fa0f 	bl	800555a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800713c:	480b      	ldr	r0, [pc, #44]	; (800716c <prvInitialiseTaskLists+0x74>)
 800713e:	f7fe fa0c 	bl	800555a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007142:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <prvInitialiseTaskLists+0x78>)
 8007144:	4a05      	ldr	r2, [pc, #20]	; (800715c <prvInitialiseTaskLists+0x64>)
 8007146:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007148:	4b0a      	ldr	r3, [pc, #40]	; (8007174 <prvInitialiseTaskLists+0x7c>)
 800714a:	4a05      	ldr	r2, [pc, #20]	; (8007160 <prvInitialiseTaskLists+0x68>)
 800714c:	601a      	str	r2, [r3, #0]
}
 800714e:	bf00      	nop
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	2000584c 	.word	0x2000584c
 800715c:	200058d8 	.word	0x200058d8
 8007160:	200058ec 	.word	0x200058ec
 8007164:	20005908 	.word	0x20005908
 8007168:	2000591c 	.word	0x2000591c
 800716c:	20005934 	.word	0x20005934
 8007170:	20005900 	.word	0x20005900
 8007174:	20005904 	.word	0x20005904

08007178 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800717e:	e019      	b.n	80071b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007180:	f000 fbc8 	bl	8007914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007184:	4b10      	ldr	r3, [pc, #64]	; (80071c8 <prvCheckTasksWaitingTermination+0x50>)
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	3304      	adds	r3, #4
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe fa6c 	bl	800566e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007196:	4b0d      	ldr	r3, [pc, #52]	; (80071cc <prvCheckTasksWaitingTermination+0x54>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3b01      	subs	r3, #1
 800719c:	4a0b      	ldr	r2, [pc, #44]	; (80071cc <prvCheckTasksWaitingTermination+0x54>)
 800719e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <prvCheckTasksWaitingTermination+0x58>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	4a0a      	ldr	r2, [pc, #40]	; (80071d0 <prvCheckTasksWaitingTermination+0x58>)
 80071a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071aa:	f000 fbe3 	bl	8007974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f810 	bl	80071d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071b4:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <prvCheckTasksWaitingTermination+0x58>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e1      	bne.n	8007180 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	2000591c 	.word	0x2000591c
 80071cc:	20005948 	.word	0x20005948
 80071d0:	20005930 	.word	0x20005930

080071d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	334c      	adds	r3, #76	; 0x4c
 80071e0:	4618      	mov	r0, r3
 80071e2:	f011 fb3b 	bl	801885c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d108      	bne.n	8007202 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fd7b 	bl	8007cf0 <vPortFree>
				vPortFree( pxTCB );
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fd78 	bl	8007cf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007200:	e018      	b.n	8007234 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007208:	2b01      	cmp	r3, #1
 800720a:	d103      	bne.n	8007214 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fd6f 	bl	8007cf0 <vPortFree>
	}
 8007212:	e00f      	b.n	8007234 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800721a:	2b02      	cmp	r3, #2
 800721c:	d00a      	beq.n	8007234 <prvDeleteTCB+0x60>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	60fb      	str	r3, [r7, #12]
}
 8007230:	bf00      	nop
 8007232:	e7fe      	b.n	8007232 <prvDeleteTCB+0x5e>
	}
 8007234:	bf00      	nop
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007242:	4b0c      	ldr	r3, [pc, #48]	; (8007274 <prvResetNextTaskUnblockTime+0x38>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d104      	bne.n	8007256 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800724c:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <prvResetNextTaskUnblockTime+0x3c>)
 800724e:	f04f 32ff 	mov.w	r2, #4294967295
 8007252:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007254:	e008      	b.n	8007268 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007256:	4b07      	ldr	r3, [pc, #28]	; (8007274 <prvResetNextTaskUnblockTime+0x38>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	4a04      	ldr	r2, [pc, #16]	; (8007278 <prvResetNextTaskUnblockTime+0x3c>)
 8007266:	6013      	str	r3, [r2, #0]
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	20005900 	.word	0x20005900
 8007278:	20005968 	.word	0x20005968

0800727c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007282:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <xTaskGetSchedulerState+0x34>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d102      	bne.n	8007290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800728a:	2301      	movs	r3, #1
 800728c:	607b      	str	r3, [r7, #4]
 800728e:	e008      	b.n	80072a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007290:	4b08      	ldr	r3, [pc, #32]	; (80072b4 <xTaskGetSchedulerState+0x38>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d102      	bne.n	800729e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007298:	2302      	movs	r3, #2
 800729a:	607b      	str	r3, [r7, #4]
 800729c:	e001      	b.n	80072a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800729e:	2300      	movs	r3, #0
 80072a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072a2:	687b      	ldr	r3, [r7, #4]
	}
 80072a4:	4618      	mov	r0, r3
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	20005954 	.word	0x20005954
 80072b4:	20005970 	.word	0x20005970

080072b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80072c4:	2300      	movs	r3, #0
 80072c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d05e      	beq.n	800738c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d2:	4b31      	ldr	r3, [pc, #196]	; (8007398 <xTaskPriorityInherit+0xe0>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	429a      	cmp	r2, r3
 80072da:	d24e      	bcs.n	800737a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	db06      	blt.n	80072f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072e4:	4b2c      	ldr	r3, [pc, #176]	; (8007398 <xTaskPriorityInherit+0xe0>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ea:	f1c3 0207 	rsb	r2, r3, #7
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	6959      	ldr	r1, [r3, #20]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fa:	4613      	mov	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4a26      	ldr	r2, [pc, #152]	; (800739c <xTaskPriorityInherit+0xe4>)
 8007304:	4413      	add	r3, r2
 8007306:	4299      	cmp	r1, r3
 8007308:	d12f      	bne.n	800736a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	3304      	adds	r3, #4
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe f9ad 	bl	800566e <uxListRemove>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10a      	bne.n	8007330 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731e:	2201      	movs	r2, #1
 8007320:	fa02 f303 	lsl.w	r3, r2, r3
 8007324:	43da      	mvns	r2, r3
 8007326:	4b1e      	ldr	r3, [pc, #120]	; (80073a0 <xTaskPriorityInherit+0xe8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4013      	ands	r3, r2
 800732c:	4a1c      	ldr	r2, [pc, #112]	; (80073a0 <xTaskPriorityInherit+0xe8>)
 800732e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007330:	4b19      	ldr	r3, [pc, #100]	; (8007398 <xTaskPriorityInherit+0xe0>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733e:	2201      	movs	r2, #1
 8007340:	409a      	lsls	r2, r3
 8007342:	4b17      	ldr	r3, [pc, #92]	; (80073a0 <xTaskPriorityInherit+0xe8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4313      	orrs	r3, r2
 8007348:	4a15      	ldr	r2, [pc, #84]	; (80073a0 <xTaskPriorityInherit+0xe8>)
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4a10      	ldr	r2, [pc, #64]	; (800739c <xTaskPriorityInherit+0xe4>)
 800735a:	441a      	add	r2, r3
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	3304      	adds	r3, #4
 8007360:	4619      	mov	r1, r3
 8007362:	4610      	mov	r0, r2
 8007364:	f7fe f926 	bl	80055b4 <vListInsertEnd>
 8007368:	e004      	b.n	8007374 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800736a:	4b0b      	ldr	r3, [pc, #44]	; (8007398 <xTaskPriorityInherit+0xe0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007374:	2301      	movs	r3, #1
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	e008      	b.n	800738c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800737e:	4b06      	ldr	r3, [pc, #24]	; (8007398 <xTaskPriorityInherit+0xe0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	429a      	cmp	r2, r3
 8007386:	d201      	bcs.n	800738c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007388:	2301      	movs	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800738c:	68fb      	ldr	r3, [r7, #12]
	}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20005848 	.word	0x20005848
 800739c:	2000584c 	.word	0x2000584c
 80073a0:	20005950 	.word	0x20005950

080073a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d06e      	beq.n	8007498 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073ba:	4b3a      	ldr	r3, [pc, #232]	; (80074a4 <xTaskPriorityDisinherit+0x100>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d00a      	beq.n	80073da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	60fb      	str	r3, [r7, #12]
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60bb      	str	r3, [r7, #8]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073fc:	1e5a      	subs	r2, r3, #1
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740a:	429a      	cmp	r2, r3
 800740c:	d044      	beq.n	8007498 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007412:	2b00      	cmp	r3, #0
 8007414:	d140      	bne.n	8007498 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	3304      	adds	r3, #4
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe f927 	bl	800566e <uxListRemove>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d115      	bne.n	8007452 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742a:	491f      	ldr	r1, [pc, #124]	; (80074a8 <xTaskPriorityDisinherit+0x104>)
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10a      	bne.n	8007452 <xTaskPriorityDisinherit+0xae>
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	2201      	movs	r2, #1
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	43da      	mvns	r2, r3
 8007448:	4b18      	ldr	r3, [pc, #96]	; (80074ac <xTaskPriorityDisinherit+0x108>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4013      	ands	r3, r2
 800744e:	4a17      	ldr	r2, [pc, #92]	; (80074ac <xTaskPriorityDisinherit+0x108>)
 8007450:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745e:	f1c3 0207 	rsb	r2, r3, #7
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	2201      	movs	r2, #1
 800746c:	409a      	lsls	r2, r3
 800746e:	4b0f      	ldr	r3, [pc, #60]	; (80074ac <xTaskPriorityDisinherit+0x108>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4313      	orrs	r3, r2
 8007474:	4a0d      	ldr	r2, [pc, #52]	; (80074ac <xTaskPriorityDisinherit+0x108>)
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4a08      	ldr	r2, [pc, #32]	; (80074a8 <xTaskPriorityDisinherit+0x104>)
 8007486:	441a      	add	r2, r3
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	3304      	adds	r3, #4
 800748c:	4619      	mov	r1, r3
 800748e:	4610      	mov	r0, r2
 8007490:	f7fe f890 	bl	80055b4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007494:	2301      	movs	r3, #1
 8007496:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007498:	697b      	ldr	r3, [r7, #20]
	}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20005848 	.word	0x20005848
 80074a8:	2000584c 	.word	0x2000584c
 80074ac:	20005950 	.word	0x20005950

080074b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074be:	2301      	movs	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d077      	beq.n	80075b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	60fb      	str	r3, [r7, #12]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d902      	bls.n	80074f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	61fb      	str	r3, [r7, #28]
 80074f4:	e002      	b.n	80074fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	429a      	cmp	r2, r3
 8007504:	d058      	beq.n	80075b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	429a      	cmp	r2, r3
 800750e:	d153      	bne.n	80075b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007510:	4b2b      	ldr	r3, [pc, #172]	; (80075c0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	429a      	cmp	r2, r3
 8007518:	d10a      	bne.n	8007530 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	60bb      	str	r3, [r7, #8]
}
 800752c:	bf00      	nop
 800752e:	e7fe      	b.n	800752e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	69fa      	ldr	r2, [r7, #28]
 800753a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	db04      	blt.n	800754e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f1c3 0207 	rsb	r2, r3, #7
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	6959      	ldr	r1, [r3, #20]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	4613      	mov	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4a19      	ldr	r2, [pc, #100]	; (80075c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800755e:	4413      	add	r3, r2
 8007560:	4299      	cmp	r1, r3
 8007562:	d129      	bne.n	80075b8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	3304      	adds	r3, #4
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe f880 	bl	800566e <uxListRemove>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10a      	bne.n	800758a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	2201      	movs	r2, #1
 800757a:	fa02 f303 	lsl.w	r3, r2, r3
 800757e:	43da      	mvns	r2, r3
 8007580:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4013      	ands	r3, r2
 8007586:	4a10      	ldr	r2, [pc, #64]	; (80075c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007588:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	2201      	movs	r2, #1
 8007590:	409a      	lsls	r2, r3
 8007592:	4b0d      	ldr	r3, [pc, #52]	; (80075c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4313      	orrs	r3, r2
 8007598:	4a0b      	ldr	r2, [pc, #44]	; (80075c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a0:	4613      	mov	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4a06      	ldr	r2, [pc, #24]	; (80075c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80075aa:	441a      	add	r2, r3
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	3304      	adds	r3, #4
 80075b0:	4619      	mov	r1, r3
 80075b2:	4610      	mov	r0, r2
 80075b4:	f7fd fffe 	bl	80055b4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075b8:	bf00      	nop
 80075ba:	3720      	adds	r7, #32
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20005848 	.word	0x20005848
 80075c4:	2000584c 	.word	0x2000584c
 80075c8:	20005950 	.word	0x20005950

080075cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80075cc:	b480      	push	{r7}
 80075ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075d0:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d004      	beq.n	80075e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80075d8:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075de:	3201      	adds	r2, #1
 80075e0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80075e2:	4b03      	ldr	r3, [pc, #12]	; (80075f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80075e4:	681b      	ldr	r3, [r3, #0]
	}
 80075e6:	4618      	mov	r0, r3
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	20005848 	.word	0x20005848

080075f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075fe:	4b29      	ldr	r3, [pc, #164]	; (80076a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007604:	4b28      	ldr	r3, [pc, #160]	; (80076a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3304      	adds	r3, #4
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe f82f 	bl	800566e <uxListRemove>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10b      	bne.n	800762e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007616:	4b24      	ldr	r3, [pc, #144]	; (80076a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	2201      	movs	r2, #1
 800761e:	fa02 f303 	lsl.w	r3, r2, r3
 8007622:	43da      	mvns	r2, r3
 8007624:	4b21      	ldr	r3, [pc, #132]	; (80076ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4013      	ands	r3, r2
 800762a:	4a20      	ldr	r2, [pc, #128]	; (80076ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800762c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007634:	d10a      	bne.n	800764c <prvAddCurrentTaskToDelayedList+0x58>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d007      	beq.n	800764c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800763c:	4b1a      	ldr	r3, [pc, #104]	; (80076a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3304      	adds	r3, #4
 8007642:	4619      	mov	r1, r3
 8007644:	481a      	ldr	r0, [pc, #104]	; (80076b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007646:	f7fd ffb5 	bl	80055b4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800764a:	e026      	b.n	800769a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4413      	add	r3, r2
 8007652:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007654:	4b14      	ldr	r3, [pc, #80]	; (80076a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	429a      	cmp	r2, r3
 8007662:	d209      	bcs.n	8007678 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007664:	4b13      	ldr	r3, [pc, #76]	; (80076b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	4b0f      	ldr	r3, [pc, #60]	; (80076a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3304      	adds	r3, #4
 800766e:	4619      	mov	r1, r3
 8007670:	4610      	mov	r0, r2
 8007672:	f7fd ffc3 	bl	80055fc <vListInsert>
}
 8007676:	e010      	b.n	800769a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007678:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3304      	adds	r3, #4
 8007682:	4619      	mov	r1, r3
 8007684:	4610      	mov	r0, r2
 8007686:	f7fd ffb9 	bl	80055fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800768a:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	429a      	cmp	r2, r3
 8007692:	d202      	bcs.n	800769a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007694:	4a09      	ldr	r2, [pc, #36]	; (80076bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	6013      	str	r3, [r2, #0]
}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	2000594c 	.word	0x2000594c
 80076a8:	20005848 	.word	0x20005848
 80076ac:	20005950 	.word	0x20005950
 80076b0:	20005934 	.word	0x20005934
 80076b4:	20005904 	.word	0x20005904
 80076b8:	20005900 	.word	0x20005900
 80076bc:	20005968 	.word	0x20005968

080076c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3b04      	subs	r3, #4
 80076d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3b04      	subs	r3, #4
 80076de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f023 0201 	bic.w	r2, r3, #1
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076f0:	4a0c      	ldr	r2, [pc, #48]	; (8007724 <pxPortInitialiseStack+0x64>)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3b14      	subs	r3, #20
 80076fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3b04      	subs	r3, #4
 8007706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f06f 0202 	mvn.w	r2, #2
 800770e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3b20      	subs	r3, #32
 8007714:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007716:	68fb      	ldr	r3, [r7, #12]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	08007729 	.word	0x08007729

08007728 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007732:	4b12      	ldr	r3, [pc, #72]	; (800777c <prvTaskExitError+0x54>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773a:	d00a      	beq.n	8007752 <prvTaskExitError+0x2a>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	60fb      	str	r3, [r7, #12]
}
 800774e:	bf00      	nop
 8007750:	e7fe      	b.n	8007750 <prvTaskExitError+0x28>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	60bb      	str	r3, [r7, #8]
}
 8007764:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007766:	bf00      	nop
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0fc      	beq.n	8007768 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800776e:	bf00      	nop
 8007770:	bf00      	nop
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	20000020 	.word	0x20000020

08007780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007780:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <pxCurrentTCBConst2>)
 8007782:	6819      	ldr	r1, [r3, #0]
 8007784:	6808      	ldr	r0, [r1, #0]
 8007786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778a:	f380 8809 	msr	PSP, r0
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f04f 0000 	mov.w	r0, #0
 8007796:	f380 8811 	msr	BASEPRI, r0
 800779a:	4770      	bx	lr
 800779c:	f3af 8000 	nop.w

080077a0 <pxCurrentTCBConst2>:
 80077a0:	20005848 	.word	0x20005848
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop

080077a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077a8:	4808      	ldr	r0, [pc, #32]	; (80077cc <prvPortStartFirstTask+0x24>)
 80077aa:	6800      	ldr	r0, [r0, #0]
 80077ac:	6800      	ldr	r0, [r0, #0]
 80077ae:	f380 8808 	msr	MSP, r0
 80077b2:	f04f 0000 	mov.w	r0, #0
 80077b6:	f380 8814 	msr	CONTROL, r0
 80077ba:	b662      	cpsie	i
 80077bc:	b661      	cpsie	f
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	df00      	svc	0
 80077c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077ca:	bf00      	nop
 80077cc:	e000ed08 	.word	0xe000ed08

080077d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077d6:	4b46      	ldr	r3, [pc, #280]	; (80078f0 <xPortStartScheduler+0x120>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a46      	ldr	r2, [pc, #280]	; (80078f4 <xPortStartScheduler+0x124>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d10a      	bne.n	80077f6 <xPortStartScheduler+0x26>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	613b      	str	r3, [r7, #16]
}
 80077f2:	bf00      	nop
 80077f4:	e7fe      	b.n	80077f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077f6:	4b3e      	ldr	r3, [pc, #248]	; (80078f0 <xPortStartScheduler+0x120>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a3f      	ldr	r2, [pc, #252]	; (80078f8 <xPortStartScheduler+0x128>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d10a      	bne.n	8007816 <xPortStartScheduler+0x46>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	60fb      	str	r3, [r7, #12]
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007816:	4b39      	ldr	r3, [pc, #228]	; (80078fc <xPortStartScheduler+0x12c>)
 8007818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	22ff      	movs	r2, #255	; 0xff
 8007826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007838:	b2da      	uxtb	r2, r3
 800783a:	4b31      	ldr	r3, [pc, #196]	; (8007900 <xPortStartScheduler+0x130>)
 800783c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800783e:	4b31      	ldr	r3, [pc, #196]	; (8007904 <xPortStartScheduler+0x134>)
 8007840:	2207      	movs	r2, #7
 8007842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007844:	e009      	b.n	800785a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007846:	4b2f      	ldr	r3, [pc, #188]	; (8007904 <xPortStartScheduler+0x134>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3b01      	subs	r3, #1
 800784c:	4a2d      	ldr	r2, [pc, #180]	; (8007904 <xPortStartScheduler+0x134>)
 800784e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	b2db      	uxtb	r3, r3
 8007858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	b2db      	uxtb	r3, r3
 800785e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007862:	2b80      	cmp	r3, #128	; 0x80
 8007864:	d0ef      	beq.n	8007846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007866:	4b27      	ldr	r3, [pc, #156]	; (8007904 <xPortStartScheduler+0x134>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f1c3 0307 	rsb	r3, r3, #7
 800786e:	2b04      	cmp	r3, #4
 8007870:	d00a      	beq.n	8007888 <xPortStartScheduler+0xb8>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	60bb      	str	r3, [r7, #8]
}
 8007884:	bf00      	nop
 8007886:	e7fe      	b.n	8007886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007888:	4b1e      	ldr	r3, [pc, #120]	; (8007904 <xPortStartScheduler+0x134>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	021b      	lsls	r3, r3, #8
 800788e:	4a1d      	ldr	r2, [pc, #116]	; (8007904 <xPortStartScheduler+0x134>)
 8007890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007892:	4b1c      	ldr	r3, [pc, #112]	; (8007904 <xPortStartScheduler+0x134>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800789a:	4a1a      	ldr	r2, [pc, #104]	; (8007904 <xPortStartScheduler+0x134>)
 800789c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078a6:	4b18      	ldr	r3, [pc, #96]	; (8007908 <xPortStartScheduler+0x138>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a17      	ldr	r2, [pc, #92]	; (8007908 <xPortStartScheduler+0x138>)
 80078ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078b2:	4b15      	ldr	r3, [pc, #84]	; (8007908 <xPortStartScheduler+0x138>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a14      	ldr	r2, [pc, #80]	; (8007908 <xPortStartScheduler+0x138>)
 80078b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078be:	f000 f8dd 	bl	8007a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078c2:	4b12      	ldr	r3, [pc, #72]	; (800790c <xPortStartScheduler+0x13c>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078c8:	f000 f8fc 	bl	8007ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078cc:	4b10      	ldr	r3, [pc, #64]	; (8007910 <xPortStartScheduler+0x140>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a0f      	ldr	r2, [pc, #60]	; (8007910 <xPortStartScheduler+0x140>)
 80078d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80078d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078d8:	f7ff ff66 	bl	80077a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078dc:	f7ff fa88 	bl	8006df0 <vTaskSwitchContext>
	prvTaskExitError();
 80078e0:	f7ff ff22 	bl	8007728 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	e000ed00 	.word	0xe000ed00
 80078f4:	410fc271 	.word	0x410fc271
 80078f8:	410fc270 	.word	0x410fc270
 80078fc:	e000e400 	.word	0xe000e400
 8007900:	20005974 	.word	0x20005974
 8007904:	20005978 	.word	0x20005978
 8007908:	e000ed20 	.word	0xe000ed20
 800790c:	20000020 	.word	0x20000020
 8007910:	e000ef34 	.word	0xe000ef34

08007914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	607b      	str	r3, [r7, #4]
}
 800792c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800792e:	4b0f      	ldr	r3, [pc, #60]	; (800796c <vPortEnterCritical+0x58>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3301      	adds	r3, #1
 8007934:	4a0d      	ldr	r2, [pc, #52]	; (800796c <vPortEnterCritical+0x58>)
 8007936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007938:	4b0c      	ldr	r3, [pc, #48]	; (800796c <vPortEnterCritical+0x58>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d10f      	bne.n	8007960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007940:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <vPortEnterCritical+0x5c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <vPortEnterCritical+0x4c>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	603b      	str	r3, [r7, #0]
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <vPortEnterCritical+0x4a>
	}
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	20000020 	.word	0x20000020
 8007970:	e000ed04 	.word	0xe000ed04

08007974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800797a:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <vPortExitCritical+0x50>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10a      	bne.n	8007998 <vPortExitCritical+0x24>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	607b      	str	r3, [r7, #4]
}
 8007994:	bf00      	nop
 8007996:	e7fe      	b.n	8007996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007998:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <vPortExitCritical+0x50>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3b01      	subs	r3, #1
 800799e:	4a09      	ldr	r2, [pc, #36]	; (80079c4 <vPortExitCritical+0x50>)
 80079a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079a2:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <vPortExitCritical+0x50>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d105      	bne.n	80079b6 <vPortExitCritical+0x42>
 80079aa:	2300      	movs	r3, #0
 80079ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	f383 8811 	msr	BASEPRI, r3
}
 80079b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	20000020 	.word	0x20000020
	...

080079d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079d0:	f3ef 8009 	mrs	r0, PSP
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	4b15      	ldr	r3, [pc, #84]	; (8007a30 <pxCurrentTCBConst>)
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	f01e 0f10 	tst.w	lr, #16
 80079e0:	bf08      	it	eq
 80079e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ea:	6010      	str	r0, [r2, #0]
 80079ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079f4:	f380 8811 	msr	BASEPRI, r0
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f7ff f9f6 	bl	8006df0 <vTaskSwitchContext>
 8007a04:	f04f 0000 	mov.w	r0, #0
 8007a08:	f380 8811 	msr	BASEPRI, r0
 8007a0c:	bc09      	pop	{r0, r3}
 8007a0e:	6819      	ldr	r1, [r3, #0]
 8007a10:	6808      	ldr	r0, [r1, #0]
 8007a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a16:	f01e 0f10 	tst.w	lr, #16
 8007a1a:	bf08      	it	eq
 8007a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a20:	f380 8809 	msr	PSP, r0
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	f3af 8000 	nop.w

08007a30 <pxCurrentTCBConst>:
 8007a30:	20005848 	.word	0x20005848
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop

08007a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	607b      	str	r3, [r7, #4]
}
 8007a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a52:	f7ff f915 	bl	8006c80 <xTaskIncrementTick>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a5c:	4b06      	ldr	r3, [pc, #24]	; (8007a78 <SysTick_Handler+0x40>)
 8007a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	2300      	movs	r3, #0
 8007a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	f383 8811 	msr	BASEPRI, r3
}
 8007a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	e000ed04 	.word	0xe000ed04

08007a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a80:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <vPortSetupTimerInterrupt+0x34>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a86:	4b0b      	ldr	r3, [pc, #44]	; (8007ab4 <vPortSetupTimerInterrupt+0x38>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <vPortSetupTimerInterrupt+0x3c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a0a      	ldr	r2, [pc, #40]	; (8007abc <vPortSetupTimerInterrupt+0x40>)
 8007a92:	fba2 2303 	umull	r2, r3, r2, r3
 8007a96:	099b      	lsrs	r3, r3, #6
 8007a98:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <vPortSetupTimerInterrupt+0x44>)
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a9e:	4b04      	ldr	r3, [pc, #16]	; (8007ab0 <vPortSetupTimerInterrupt+0x34>)
 8007aa0:	2207      	movs	r2, #7
 8007aa2:	601a      	str	r2, [r3, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	e000e010 	.word	0xe000e010
 8007ab4:	e000e018 	.word	0xe000e018
 8007ab8:	20000000 	.word	0x20000000
 8007abc:	10624dd3 	.word	0x10624dd3
 8007ac0:	e000e014 	.word	0xe000e014

08007ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ad4 <vPortEnableVFP+0x10>
 8007ac8:	6801      	ldr	r1, [r0, #0]
 8007aca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007ace:	6001      	str	r1, [r0, #0]
 8007ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ad2:	bf00      	nop
 8007ad4:	e000ed88 	.word	0xe000ed88

08007ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ade:	f3ef 8305 	mrs	r3, IPSR
 8007ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b0f      	cmp	r3, #15
 8007ae8:	d914      	bls.n	8007b14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007aea:	4a17      	ldr	r2, [pc, #92]	; (8007b48 <vPortValidateInterruptPriority+0x70>)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007af4:	4b15      	ldr	r3, [pc, #84]	; (8007b4c <vPortValidateInterruptPriority+0x74>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	7afa      	ldrb	r2, [r7, #11]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d20a      	bcs.n	8007b14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	607b      	str	r3, [r7, #4]
}
 8007b10:	bf00      	nop
 8007b12:	e7fe      	b.n	8007b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b14:	4b0e      	ldr	r3, [pc, #56]	; (8007b50 <vPortValidateInterruptPriority+0x78>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b1c:	4b0d      	ldr	r3, [pc, #52]	; (8007b54 <vPortValidateInterruptPriority+0x7c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d90a      	bls.n	8007b3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	603b      	str	r3, [r7, #0]
}
 8007b36:	bf00      	nop
 8007b38:	e7fe      	b.n	8007b38 <vPortValidateInterruptPriority+0x60>
	}
 8007b3a:	bf00      	nop
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	e000e3f0 	.word	0xe000e3f0
 8007b4c:	20005974 	.word	0x20005974
 8007b50:	e000ed0c 	.word	0xe000ed0c
 8007b54:	20005978 	.word	0x20005978

08007b58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08a      	sub	sp, #40	; 0x28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b64:	f7fe ffc0 	bl	8006ae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b68:	4b5b      	ldr	r3, [pc, #364]	; (8007cd8 <pvPortMalloc+0x180>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b70:	f000 f920 	bl	8007db4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b74:	4b59      	ldr	r3, [pc, #356]	; (8007cdc <pvPortMalloc+0x184>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f040 8093 	bne.w	8007ca8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01d      	beq.n	8007bc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b88:	2208      	movs	r2, #8
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d014      	beq.n	8007bc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f023 0307 	bic.w	r3, r3, #7
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <pvPortMalloc+0x6c>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	617b      	str	r3, [r7, #20]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d06e      	beq.n	8007ca8 <pvPortMalloc+0x150>
 8007bca:	4b45      	ldr	r3, [pc, #276]	; (8007ce0 <pvPortMalloc+0x188>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d869      	bhi.n	8007ca8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bd4:	4b43      	ldr	r3, [pc, #268]	; (8007ce4 <pvPortMalloc+0x18c>)
 8007bd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bd8:	4b42      	ldr	r3, [pc, #264]	; (8007ce4 <pvPortMalloc+0x18c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bde:	e004      	b.n	8007bea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d903      	bls.n	8007bfc <pvPortMalloc+0xa4>
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1f1      	bne.n	8007be0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bfc:	4b36      	ldr	r3, [pc, #216]	; (8007cd8 <pvPortMalloc+0x180>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d050      	beq.n	8007ca8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2208      	movs	r2, #8
 8007c0c:	4413      	add	r3, r2
 8007c0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	1ad2      	subs	r2, r2, r3
 8007c20:	2308      	movs	r3, #8
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d91f      	bls.n	8007c68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00a      	beq.n	8007c50 <pvPortMalloc+0xf8>
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	613b      	str	r3, [r7, #16]
}
 8007c4c:	bf00      	nop
 8007c4e:	e7fe      	b.n	8007c4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	1ad2      	subs	r2, r2, r3
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c62:	69b8      	ldr	r0, [r7, #24]
 8007c64:	f000 f908 	bl	8007e78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c68:	4b1d      	ldr	r3, [pc, #116]	; (8007ce0 <pvPortMalloc+0x188>)
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	4a1b      	ldr	r2, [pc, #108]	; (8007ce0 <pvPortMalloc+0x188>)
 8007c74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c76:	4b1a      	ldr	r3, [pc, #104]	; (8007ce0 <pvPortMalloc+0x188>)
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ce8 <pvPortMalloc+0x190>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d203      	bcs.n	8007c8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c82:	4b17      	ldr	r3, [pc, #92]	; (8007ce0 <pvPortMalloc+0x188>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a18      	ldr	r2, [pc, #96]	; (8007ce8 <pvPortMalloc+0x190>)
 8007c88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	4b13      	ldr	r3, [pc, #76]	; (8007cdc <pvPortMalloc+0x184>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	431a      	orrs	r2, r3
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c9e:	4b13      	ldr	r3, [pc, #76]	; (8007cec <pvPortMalloc+0x194>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	4a11      	ldr	r2, [pc, #68]	; (8007cec <pvPortMalloc+0x194>)
 8007ca6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ca8:	f7fe ff2c 	bl	8006b04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <pvPortMalloc+0x174>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	60fb      	str	r3, [r7, #12]
}
 8007cc8:	bf00      	nop
 8007cca:	e7fe      	b.n	8007cca <pvPortMalloc+0x172>
	return pvReturn;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3728      	adds	r7, #40	; 0x28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	2000d984 	.word	0x2000d984
 8007cdc:	2000d998 	.word	0x2000d998
 8007ce0:	2000d988 	.word	0x2000d988
 8007ce4:	2000d97c 	.word	0x2000d97c
 8007ce8:	2000d98c 	.word	0x2000d98c
 8007cec:	2000d990 	.word	0x2000d990

08007cf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d04d      	beq.n	8007d9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d02:	2308      	movs	r3, #8
 8007d04:	425b      	negs	r3, r3
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	4413      	add	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	4b24      	ldr	r3, [pc, #144]	; (8007da8 <vPortFree+0xb8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <vPortFree+0x44>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	60fb      	str	r3, [r7, #12]
}
 8007d30:	bf00      	nop
 8007d32:	e7fe      	b.n	8007d32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <vPortFree+0x62>
	__asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	60bb      	str	r3, [r7, #8]
}
 8007d4e:	bf00      	nop
 8007d50:	e7fe      	b.n	8007d50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	4b14      	ldr	r3, [pc, #80]	; (8007da8 <vPortFree+0xb8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01e      	beq.n	8007d9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d11a      	bne.n	8007d9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <vPortFree+0xb8>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	43db      	mvns	r3, r3
 8007d72:	401a      	ands	r2, r3
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d78:	f7fe feb6 	bl	8006ae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <vPortFree+0xbc>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4413      	add	r3, r2
 8007d86:	4a09      	ldr	r2, [pc, #36]	; (8007dac <vPortFree+0xbc>)
 8007d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d8a:	6938      	ldr	r0, [r7, #16]
 8007d8c:	f000 f874 	bl	8007e78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <vPortFree+0xc0>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	4a06      	ldr	r2, [pc, #24]	; (8007db0 <vPortFree+0xc0>)
 8007d98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d9a:	f7fe feb3 	bl	8006b04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d9e:	bf00      	nop
 8007da0:	3718      	adds	r7, #24
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	2000d998 	.word	0x2000d998
 8007dac:	2000d988 	.word	0x2000d988
 8007db0:	2000d994 	.word	0x2000d994

08007db4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007dc0:	4b27      	ldr	r3, [pc, #156]	; (8007e60 <prvHeapInit+0xac>)
 8007dc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00c      	beq.n	8007de8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3307      	adds	r3, #7
 8007dd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0307 	bic.w	r3, r3, #7
 8007dda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	4a1f      	ldr	r2, [pc, #124]	; (8007e60 <prvHeapInit+0xac>)
 8007de4:	4413      	add	r3, r2
 8007de6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dec:	4a1d      	ldr	r2, [pc, #116]	; (8007e64 <prvHeapInit+0xb0>)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007df2:	4b1c      	ldr	r3, [pc, #112]	; (8007e64 <prvHeapInit+0xb0>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e00:	2208      	movs	r2, #8
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	1a9b      	subs	r3, r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0307 	bic.w	r3, r3, #7
 8007e0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4a15      	ldr	r2, [pc, #84]	; (8007e68 <prvHeapInit+0xb4>)
 8007e14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e16:	4b14      	ldr	r3, [pc, #80]	; (8007e68 <prvHeapInit+0xb4>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e1e:	4b12      	ldr	r3, [pc, #72]	; (8007e68 <prvHeapInit+0xb4>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	1ad2      	subs	r2, r2, r3
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e34:	4b0c      	ldr	r3, [pc, #48]	; (8007e68 <prvHeapInit+0xb4>)
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	4a0a      	ldr	r2, [pc, #40]	; (8007e6c <prvHeapInit+0xb8>)
 8007e42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	4a09      	ldr	r2, [pc, #36]	; (8007e70 <prvHeapInit+0xbc>)
 8007e4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e4c:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <prvHeapInit+0xc0>)
 8007e4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e52:	601a      	str	r2, [r3, #0]
}
 8007e54:	bf00      	nop
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	2000597c 	.word	0x2000597c
 8007e64:	2000d97c 	.word	0x2000d97c
 8007e68:	2000d984 	.word	0x2000d984
 8007e6c:	2000d98c 	.word	0x2000d98c
 8007e70:	2000d988 	.word	0x2000d988
 8007e74:	2000d998 	.word	0x2000d998

08007e78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e80:	4b28      	ldr	r3, [pc, #160]	; (8007f24 <prvInsertBlockIntoFreeList+0xac>)
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	e002      	b.n	8007e8c <prvInsertBlockIntoFreeList+0x14>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d8f7      	bhi.n	8007e86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d108      	bne.n	8007eba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	441a      	add	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	441a      	add	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d118      	bne.n	8007f00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	4b15      	ldr	r3, [pc, #84]	; (8007f28 <prvInsertBlockIntoFreeList+0xb0>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d00d      	beq.n	8007ef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	441a      	add	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	e008      	b.n	8007f08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ef6:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <prvInsertBlockIntoFreeList+0xb0>)
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	e003      	b.n	8007f08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d002      	beq.n	8007f16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f16:	bf00      	nop
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	2000d97c 	.word	0x2000d97c
 8007f28:	2000d984 	.word	0x2000d984

08007f2c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	330c      	adds	r3, #12
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f002 faa3 	bl	800a48c <tcpip_send_msg_wait_sem>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d103      	bne.n	8007f5a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007f58:	e001      	b.n	8007f5e <netconn_apimsg+0x32>
  }
  return err;
 8007f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08c      	sub	sp, #48	; 0x30
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	603a      	str	r2, [r7, #0]
 8007f72:	71fb      	strb	r3, [r7, #7]
 8007f74:	460b      	mov	r3, r1
 8007f76:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f001 f923 	bl	80091c8 <netconn_alloc>
 8007f82:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d054      	beq.n	8008034 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007f8a:	79bb      	ldrb	r3, [r7, #6]
 8007f8c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f90:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007f92:	f107 0308 	add.w	r3, r7, #8
 8007f96:	4619      	mov	r1, r3
 8007f98:	4829      	ldr	r0, [pc, #164]	; (8008040 <netconn_new_with_proto_and_callback+0xd8>)
 8007f9a:	f7ff ffc7 	bl	8007f2c <netconn_apimsg>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007fa4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d043      	beq.n	8008034 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <netconn_new_with_proto_and_callback+0x58>
 8007fb4:	4b23      	ldr	r3, [pc, #140]	; (8008044 <netconn_new_with_proto_and_callback+0xdc>)
 8007fb6:	22a3      	movs	r2, #163	; 0xa3
 8007fb8:	4923      	ldr	r1, [pc, #140]	; (8008048 <netconn_new_with_proto_and_callback+0xe0>)
 8007fba:	4824      	ldr	r0, [pc, #144]	; (800804c <netconn_new_with_proto_and_callback+0xe4>)
 8007fbc:	f010 fb00 	bl	80185c0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc2:	3310      	adds	r3, #16
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f010 f8d4 	bl	8018172 <sys_mbox_valid>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d105      	bne.n	8007fdc <netconn_new_with_proto_and_callback+0x74>
 8007fd0:	4b1c      	ldr	r3, [pc, #112]	; (8008044 <netconn_new_with_proto_and_callback+0xdc>)
 8007fd2:	22a4      	movs	r2, #164	; 0xa4
 8007fd4:	491e      	ldr	r1, [pc, #120]	; (8008050 <netconn_new_with_proto_and_callback+0xe8>)
 8007fd6:	481d      	ldr	r0, [pc, #116]	; (800804c <netconn_new_with_proto_and_callback+0xe4>)
 8007fd8:	f010 faf2 	bl	80185c0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fde:	3314      	adds	r3, #20
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f010 f8c6 	bl	8018172 <sys_mbox_valid>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d005      	beq.n	8007ff8 <netconn_new_with_proto_and_callback+0x90>
 8007fec:	4b15      	ldr	r3, [pc, #84]	; (8008044 <netconn_new_with_proto_and_callback+0xdc>)
 8007fee:	22a6      	movs	r2, #166	; 0xa6
 8007ff0:	4918      	ldr	r1, [pc, #96]	; (8008054 <netconn_new_with_proto_and_callback+0xec>)
 8007ff2:	4816      	ldr	r0, [pc, #88]	; (800804c <netconn_new_with_proto_and_callback+0xe4>)
 8007ff4:	f010 fae4 	bl	80185c0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffa:	330c      	adds	r3, #12
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f010 f949 	bl	8018294 <sys_sem_valid>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d105      	bne.n	8008014 <netconn_new_with_proto_and_callback+0xac>
 8008008:	4b0e      	ldr	r3, [pc, #56]	; (8008044 <netconn_new_with_proto_and_callback+0xdc>)
 800800a:	22a9      	movs	r2, #169	; 0xa9
 800800c:	4912      	ldr	r1, [pc, #72]	; (8008058 <netconn_new_with_proto_and_callback+0xf0>)
 800800e:	480f      	ldr	r0, [pc, #60]	; (800804c <netconn_new_with_proto_and_callback+0xe4>)
 8008010:	f010 fad6 	bl	80185c0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008016:	330c      	adds	r3, #12
 8008018:	4618      	mov	r0, r3
 800801a:	f010 f92e 	bl	801827a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008020:	3310      	adds	r3, #16
 8008022:	4618      	mov	r0, r3
 8008024:	f010 f81e 	bl	8018064 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008028:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800802a:	2007      	movs	r0, #7
 800802c:	f003 fe2c 	bl	800bc88 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008030:	2300      	movs	r3, #0
 8008032:	e000      	b.n	8008036 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008036:	4618      	mov	r0, r3
 8008038:	3730      	adds	r7, #48	; 0x30
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	0800919d 	.word	0x0800919d
 8008044:	08019b74 	.word	0x08019b74
 8008048:	08019ba8 	.word	0x08019ba8
 800804c:	08019bcc 	.word	0x08019bcc
 8008050:	08019bf4 	.word	0x08019bf4
 8008054:	08019c0c 	.word	0x08019c0c
 8008058:	08019c30 	.word	0x08019c30

0800805c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b08c      	sub	sp, #48	; 0x30
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	e014      	b.n	8008098 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008072:	2329      	movs	r3, #41	; 0x29
 8008074:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008076:	f107 030c 	add.w	r3, r7, #12
 800807a:	4619      	mov	r1, r3
 800807c:	4808      	ldr	r0, [pc, #32]	; (80080a0 <netconn_prepare_delete+0x44>)
 800807e:	f7ff ff55 	bl	8007f2c <netconn_apimsg>
 8008082:	4603      	mov	r3, r0
 8008084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008088:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <netconn_prepare_delete+0x3a>
    return err;
 8008090:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008094:	e000      	b.n	8008098 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3730      	adds	r7, #48	; 0x30
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	08009709 	.word	0x08009709

080080a4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <netconn_delete+0x12>
    return ERR_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	e00d      	b.n	80080d2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff ffd0 	bl	800805c <netconn_prepare_delete>
 80080bc:	4603      	mov	r3, r0
 80080be:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80080c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d102      	bne.n	80080ce <netconn_delete+0x2a>
    netconn_free(conn);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 f8eb 	bl	80092a4 <netconn_free>
  }
  return err;
 80080ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08e      	sub	sp, #56	; 0x38
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	4613      	mov	r3, r2
 80080e8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d109      	bne.n	8008104 <netconn_bind+0x28>
 80080f0:	4b11      	ldr	r3, [pc, #68]	; (8008138 <netconn_bind+0x5c>)
 80080f2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80080f6:	4911      	ldr	r1, [pc, #68]	; (800813c <netconn_bind+0x60>)
 80080f8:	4811      	ldr	r0, [pc, #68]	; (8008140 <netconn_bind+0x64>)
 80080fa:	f010 fa61 	bl	80185c0 <iprintf>
 80080fe:	f06f 030f 	mvn.w	r3, #15
 8008102:	e015      	b.n	8008130 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800810a:	4b0e      	ldr	r3, [pc, #56]	; (8008144 <netconn_bind+0x68>)
 800810c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008116:	88fb      	ldrh	r3, [r7, #6]
 8008118:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800811a:	f107 0314 	add.w	r3, r7, #20
 800811e:	4619      	mov	r1, r3
 8008120:	4809      	ldr	r0, [pc, #36]	; (8008148 <netconn_bind+0x6c>)
 8008122:	f7ff ff03 	bl	8007f2c <netconn_apimsg>
 8008126:	4603      	mov	r3, r0
 8008128:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800812c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008130:	4618      	mov	r0, r3
 8008132:	3738      	adds	r7, #56	; 0x38
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	08019b74 	.word	0x08019b74
 800813c:	08019cac 	.word	0x08019cac
 8008140:	08019bcc 	.word	0x08019bcc
 8008144:	08027884 	.word	0x08027884
 8008148:	080098d1 	.word	0x080098d1

0800814c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08c      	sub	sp, #48	; 0x30
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d109      	bne.n	8008172 <netconn_listen_with_backlog+0x26>
 800815e:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <netconn_listen_with_backlog+0x48>)
 8008160:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008164:	490c      	ldr	r1, [pc, #48]	; (8008198 <netconn_listen_with_backlog+0x4c>)
 8008166:	480d      	ldr	r0, [pc, #52]	; (800819c <netconn_listen_with_backlog+0x50>)
 8008168:	f010 fa2a 	bl	80185c0 <iprintf>
 800816c:	f06f 030f 	mvn.w	r3, #15
 8008170:	e00c      	b.n	800818c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008176:	f107 030c 	add.w	r3, r7, #12
 800817a:	4619      	mov	r1, r3
 800817c:	4808      	ldr	r0, [pc, #32]	; (80081a0 <netconn_listen_with_backlog+0x54>)
 800817e:	f7ff fed5 	bl	8007f2c <netconn_apimsg>
 8008182:	4603      	mov	r3, r0
 8008184:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008188:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800818c:	4618      	mov	r0, r3
 800818e:	3730      	adds	r7, #48	; 0x30
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	08019b74 	.word	0x08019b74
 8008198:	08019d2c 	.word	0x08019d2c
 800819c:	08019bcc 	.word	0x08019bcc
 80081a0:	08009945 	.word	0x08009945

080081a4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d109      	bne.n	80081c8 <netconn_accept+0x24>
 80081b4:	4b3d      	ldr	r3, [pc, #244]	; (80082ac <netconn_accept+0x108>)
 80081b6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80081ba:	493d      	ldr	r1, [pc, #244]	; (80082b0 <netconn_accept+0x10c>)
 80081bc:	483d      	ldr	r0, [pc, #244]	; (80082b4 <netconn_accept+0x110>)
 80081be:	f010 f9ff 	bl	80185c0 <iprintf>
 80081c2:	f06f 030f 	mvn.w	r3, #15
 80081c6:	e06c      	b.n	80082a2 <netconn_accept+0xfe>
  *new_conn = NULL;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d109      	bne.n	80081e8 <netconn_accept+0x44>
 80081d4:	4b35      	ldr	r3, [pc, #212]	; (80082ac <netconn_accept+0x108>)
 80081d6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80081da:	4937      	ldr	r1, [pc, #220]	; (80082b8 <netconn_accept+0x114>)
 80081dc:	4835      	ldr	r0, [pc, #212]	; (80082b4 <netconn_accept+0x110>)
 80081de:	f010 f9ef 	bl	80185c0 <iprintf>
 80081e2:	f06f 030f 	mvn.w	r3, #15
 80081e6:	e05c      	b.n	80082a2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fb6c 	bl	80088c6 <netconn_err>
 80081ee:	4603      	mov	r3, r0
 80081f0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80081f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80081fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80081fe:	e050      	b.n	80082a2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3314      	adds	r3, #20
 8008204:	4618      	mov	r0, r3
 8008206:	f00f ffb4 	bl	8018172 <sys_mbox_valid>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <netconn_accept+0x78>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	7f1b      	ldrb	r3, [r3, #28]
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800821c:	f06f 030e 	mvn.w	r3, #14
 8008220:	e03f      	b.n	80082a2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	7f1b      	ldrb	r3, [r3, #28]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00e      	beq.n	800824c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	3314      	adds	r3, #20
 8008232:	f107 020c 	add.w	r2, r7, #12
 8008236:	4611      	mov	r1, r2
 8008238:	4618      	mov	r0, r3
 800823a:	f00f ff7e 	bl	801813a <sys_arch_mbox_tryfetch>
 800823e:	4603      	mov	r3, r0
 8008240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008244:	d10a      	bne.n	800825c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008246:	f06f 0306 	mvn.w	r3, #6
 800824a:	e02a      	b.n	80082a2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3314      	adds	r3, #20
 8008250:	f107 010c 	add.w	r1, r7, #12
 8008254:	2200      	movs	r2, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f00f ff30 	bl	80180bc <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	2b00      	cmp	r3, #0
 8008262:	d005      	beq.n	8008270 <netconn_accept+0xcc>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	2200      	movs	r2, #0
 800826a:	2101      	movs	r1, #1
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f107 0213 	add.w	r2, r7, #19
 8008276:	4611      	mov	r1, r2
 8008278:	4618      	mov	r0, r3
 800827a:	f000 fb75 	bl	8008968 <lwip_netconn_is_err_msg>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008284:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008288:	e00b      	b.n	80082a2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d102      	bne.n	8008296 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008290:	f06f 030e 	mvn.w	r3, #14
 8008294:	e005      	b.n	80082a2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80082a0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3718      	adds	r7, #24
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	08019b74 	.word	0x08019b74
 80082b0:	08019d4c 	.word	0x08019d4c
 80082b4:	08019bcc 	.word	0x08019bcc
 80082b8:	08019d6c 	.word	0x08019d6c

080082bc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	4613      	mov	r3, r2
 80082c8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d109      	bne.n	80082e8 <netconn_recv_data+0x2c>
 80082d4:	4b58      	ldr	r3, [pc, #352]	; (8008438 <netconn_recv_data+0x17c>)
 80082d6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80082da:	4958      	ldr	r1, [pc, #352]	; (800843c <netconn_recv_data+0x180>)
 80082dc:	4858      	ldr	r0, [pc, #352]	; (8008440 <netconn_recv_data+0x184>)
 80082de:	f010 f96f 	bl	80185c0 <iprintf>
 80082e2:	f06f 030f 	mvn.w	r3, #15
 80082e6:	e0a2      	b.n	800842e <netconn_recv_data+0x172>
  *new_buf = NULL;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2200      	movs	r2, #0
 80082ec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d109      	bne.n	8008308 <netconn_recv_data+0x4c>
 80082f4:	4b50      	ldr	r3, [pc, #320]	; (8008438 <netconn_recv_data+0x17c>)
 80082f6:	f240 224a 	movw	r2, #586	; 0x24a
 80082fa:	4952      	ldr	r1, [pc, #328]	; (8008444 <netconn_recv_data+0x188>)
 80082fc:	4850      	ldr	r0, [pc, #320]	; (8008440 <netconn_recv_data+0x184>)
 80082fe:	f010 f95f 	bl	80185c0 <iprintf>
 8008302:	f06f 030f 	mvn.w	r3, #15
 8008306:	e092      	b.n	800842e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3310      	adds	r3, #16
 800830c:	4618      	mov	r0, r3
 800830e:	f00f ff30 	bl	8018172 <sys_mbox_valid>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10e      	bne.n	8008336 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 fad4 	bl	80088c6 <netconn_err>
 800831e:	4603      	mov	r3, r0
 8008320:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008322:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800832a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800832e:	e07e      	b.n	800842e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008330:	f06f 030a 	mvn.w	r3, #10
 8008334:	e07b      	b.n	800842e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	7f1b      	ldrb	r3, [r3, #28]
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10f      	bne.n	8008362 <netconn_recv_data+0xa6>
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10a      	bne.n	8008362 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	7f1b      	ldrb	r3, [r3, #28]
 8008350:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008354:	2b00      	cmp	r3, #0
 8008356:	d104      	bne.n	8008362 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d023      	beq.n	80083aa <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3310      	adds	r3, #16
 8008366:	f107 0218 	add.w	r2, r7, #24
 800836a:	4611      	mov	r1, r2
 800836c:	4618      	mov	r0, r3
 800836e:	f00f fee4 	bl	801813a <sys_arch_mbox_tryfetch>
 8008372:	4603      	mov	r3, r0
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d11f      	bne.n	80083ba <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 faa3 	bl	80088c6 <netconn_err>
 8008380:	4603      	mov	r3, r0
 8008382:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008384:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d002      	beq.n	8008392 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800838c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008390:	e04d      	b.n	800842e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	7f1b      	ldrb	r3, [r3, #28]
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800839e:	f06f 030a 	mvn.w	r3, #10
 80083a2:	e044      	b.n	800842e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80083a4:	f06f 0306 	mvn.w	r3, #6
 80083a8:	e041      	b.n	800842e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3310      	adds	r3, #16
 80083ae:	f107 0118 	add.w	r1, r7, #24
 80083b2:	2200      	movs	r2, #0
 80083b4:	4618      	mov	r0, r3
 80083b6:	f00f fe81 	bl	80180bc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083c2:	2b10      	cmp	r3, #16
 80083c4:	d117      	bne.n	80083f6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	f107 0217 	add.w	r2, r7, #23
 80083cc:	4611      	mov	r1, r2
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 faca 	bl	8008968 <lwip_netconn_is_err_msg>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d009      	beq.n	80083ee <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80083da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083de:	f113 0f0f 	cmn.w	r3, #15
 80083e2:	d101      	bne.n	80083e8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	e022      	b.n	800842e <netconn_recv_data+0x172>
      }
      return err;
 80083e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083ec:	e01f      	b.n	800842e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	891b      	ldrh	r3, [r3, #8]
 80083f2:	83fb      	strh	r3, [r7, #30]
 80083f4:	e00d      	b.n	8008412 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d106      	bne.n	800840a <netconn_recv_data+0x14e>
 80083fc:	4b0e      	ldr	r3, [pc, #56]	; (8008438 <netconn_recv_data+0x17c>)
 80083fe:	f240 2291 	movw	r2, #657	; 0x291
 8008402:	4911      	ldr	r1, [pc, #68]	; (8008448 <netconn_recv_data+0x18c>)
 8008404:	480e      	ldr	r0, [pc, #56]	; (8008440 <netconn_recv_data+0x184>)
 8008406:	f010 f8db 	bl	80185c0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	891b      	ldrh	r3, [r3, #8]
 8008410:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008416:	2b00      	cmp	r3, #0
 8008418:	d005      	beq.n	8008426 <netconn_recv_data+0x16a>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841e:	8bfa      	ldrh	r2, [r7, #30]
 8008420:	2101      	movs	r1, #1
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3720      	adds	r7, #32
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	08019b74 	.word	0x08019b74
 800843c:	08019d8c 	.word	0x08019d8c
 8008440:	08019bcc 	.word	0x08019bcc
 8008444:	08019dac 	.word	0x08019dac
 8008448:	08019dc8 	.word	0x08019dc8

0800844c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d005      	beq.n	800846a <netconn_tcp_recvd_msg+0x1e>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008466:	2b10      	cmp	r3, #16
 8008468:	d009      	beq.n	800847e <netconn_tcp_recvd_msg+0x32>
 800846a:	4b0c      	ldr	r3, [pc, #48]	; (800849c <netconn_tcp_recvd_msg+0x50>)
 800846c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008470:	490b      	ldr	r1, [pc, #44]	; (80084a0 <netconn_tcp_recvd_msg+0x54>)
 8008472:	480c      	ldr	r0, [pc, #48]	; (80084a4 <netconn_tcp_recvd_msg+0x58>)
 8008474:	f010 f8a4 	bl	80185c0 <iprintf>
 8008478:	f06f 030f 	mvn.w	r3, #15
 800847c:	e00a      	b.n	8008494 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	4806      	ldr	r0, [pc, #24]	; (80084a8 <netconn_tcp_recvd_msg+0x5c>)
 800848e:	f7ff fd4d 	bl	8007f2c <netconn_apimsg>
 8008492:	4603      	mov	r3, r0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	08019b74 	.word	0x08019b74
 80084a0:	08019dd4 	.word	0x08019dd4
 80084a4:	08019bcc 	.word	0x08019bcc
 80084a8:	08009a75 	.word	0x08009a75

080084ac <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b090      	sub	sp, #64	; 0x40
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	4613      	mov	r3, r2
 80084b8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3310      	adds	r3, #16
 80084be:	4618      	mov	r0, r3
 80084c0:	f00f fe57 	bl	8018172 <sys_mbox_valid>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d102      	bne.n	80084d0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80084ca:	f06f 030a 	mvn.w	r3, #10
 80084ce:	e06d      	b.n	80085ac <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	7f1b      	ldrb	r3, [r3, #28]
 80084d4:	b25b      	sxtb	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da07      	bge.n	80084ea <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	7f1b      	ldrb	r3, [r3, #28]
 80084de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80084e8:	e039      	b.n	800855e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	461a      	mov	r2, r3
 80084ee:	68b9      	ldr	r1, [r7, #8]
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f7ff fee3 	bl	80082bc <netconn_recv_data>
 80084f6:	4603      	mov	r3, r0
 80084f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80084fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008504:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008508:	e050      	b.n	80085ac <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	f003 0308 	and.w	r3, r3, #8
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10e      	bne.n	8008538 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800851a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <netconn_recv_data_tcp+0x7a>
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	891b      	ldrh	r3, [r3, #8]
 8008524:	e000      	b.n	8008528 <netconn_recv_data_tcp+0x7c>
 8008526:	2301      	movs	r3, #1
 8008528:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800852a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800852c:	f107 0214 	add.w	r2, r7, #20
 8008530:	4619      	mov	r1, r3
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f7ff ff8a 	bl	800844c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	2b00      	cmp	r3, #0
 800853c:	d134      	bne.n	80085a8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	f003 0310 	and.w	r3, r3, #16
 8008544:	2b00      	cmp	r3, #0
 8008546:	d009      	beq.n	800855c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	7f1b      	ldrb	r3, [r3, #28]
 800854c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008550:	b2da      	uxtb	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008556:	f06f 0306 	mvn.w	r3, #6
 800855a:	e027      	b.n	80085ac <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800855c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	2b00      	cmp	r3, #0
 8008564:	d005      	beq.n	8008572 <netconn_recv_data_tcp+0xc6>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856a:	2200      	movs	r2, #0
 800856c:	2101      	movs	r1, #1
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10f      	bne.n	800859a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 f9a3 	bl	80088c6 <netconn_err>
 8008580:	4603      	mov	r3, r0
 8008582:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008586:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <netconn_recv_data_tcp+0xe8>
          return err;
 800858e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008592:	e00b      	b.n	80085ac <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008594:	f06f 030d 	mvn.w	r3, #13
 8008598:	e008      	b.n	80085ac <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800859a:	2101      	movs	r1, #1
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f955 	bl	800884c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80085a2:	f06f 030e 	mvn.w	r3, #14
 80085a6:	e001      	b.n	80085ac <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80085a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3740      	adds	r7, #64	; 0x40
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d109      	bne.n	80085dc <netconn_recv+0x28>
 80085c8:	4b32      	ldr	r3, [pc, #200]	; (8008694 <netconn_recv+0xe0>)
 80085ca:	f240 3263 	movw	r2, #867	; 0x363
 80085ce:	4932      	ldr	r1, [pc, #200]	; (8008698 <netconn_recv+0xe4>)
 80085d0:	4832      	ldr	r0, [pc, #200]	; (800869c <netconn_recv+0xe8>)
 80085d2:	f00f fff5 	bl	80185c0 <iprintf>
 80085d6:	f06f 030f 	mvn.w	r3, #15
 80085da:	e056      	b.n	800868a <netconn_recv+0xd6>
  *new_buf = NULL;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d109      	bne.n	80085fc <netconn_recv+0x48>
 80085e8:	4b2a      	ldr	r3, [pc, #168]	; (8008694 <netconn_recv+0xe0>)
 80085ea:	f240 3265 	movw	r2, #869	; 0x365
 80085ee:	492c      	ldr	r1, [pc, #176]	; (80086a0 <netconn_recv+0xec>)
 80085f0:	482a      	ldr	r0, [pc, #168]	; (800869c <netconn_recv+0xe8>)
 80085f2:	f00f ffe5 	bl	80185c0 <iprintf>
 80085f6:	f06f 030f 	mvn.w	r3, #15
 80085fa:	e046      	b.n	800868a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008604:	2b10      	cmp	r3, #16
 8008606:	d13a      	bne.n	800867e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800860c:	2006      	movs	r0, #6
 800860e:	f003 fac5 	bl	800bb9c <memp_malloc>
 8008612:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d102      	bne.n	8008620 <netconn_recv+0x6c>
      return ERR_MEM;
 800861a:	f04f 33ff 	mov.w	r3, #4294967295
 800861e:	e034      	b.n	800868a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008620:	f107 030c 	add.w	r3, r7, #12
 8008624:	2200      	movs	r2, #0
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff ff3f 	bl	80084ac <netconn_recv_data_tcp>
 800862e:	4603      	mov	r3, r0
 8008630:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008632:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d006      	beq.n	8008648 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800863a:	6979      	ldr	r1, [r7, #20]
 800863c:	2006      	movs	r0, #6
 800863e:	f003 fb23 	bl	800bc88 <memp_free>
      return err;
 8008642:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008646:	e020      	b.n	800868a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d106      	bne.n	800865c <netconn_recv+0xa8>
 800864e:	4b11      	ldr	r3, [pc, #68]	; (8008694 <netconn_recv+0xe0>)
 8008650:	f240 3279 	movw	r2, #889	; 0x379
 8008654:	4913      	ldr	r1, [pc, #76]	; (80086a4 <netconn_recv+0xf0>)
 8008656:	4811      	ldr	r0, [pc, #68]	; (800869c <netconn_recv+0xe8>)
 8008658:	f00f ffb2 	bl	80185c0 <iprintf>

    buf->p = p;
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	2200      	movs	r2, #0
 800866c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2200      	movs	r2, #0
 8008672:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	e005      	b.n	800868a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800867e:	2200      	movs	r2, #0
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7ff fe1a 	bl	80082bc <netconn_recv_data>
 8008688:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800868a:	4618      	mov	r0, r3
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	08019b74 	.word	0x08019b74
 8008698:	08019d8c 	.word	0x08019d8c
 800869c:	08019bcc 	.word	0x08019bcc
 80086a0:	08019dac 	.word	0x08019dac
 80086a4:	08019e24 	.word	0x08019e24

080086a8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80086be:	78fa      	ldrb	r2, [r7, #3]
 80086c0:	f107 0110 	add.w	r1, r7, #16
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	4613      	mov	r3, r2
 80086ca:	2201      	movs	r2, #1
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 f805 	bl	80086dc <netconn_write_vectors_partly>
 80086d2:	4603      	mov	r3, r0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b092      	sub	sp, #72	; 0x48
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	4611      	mov	r1, r2
 80086e8:	461a      	mov	r2, r3
 80086ea:	460b      	mov	r3, r1
 80086ec:	80fb      	strh	r3, [r7, #6]
 80086ee:	4613      	mov	r3, r2
 80086f0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d109      	bne.n	800870c <netconn_write_vectors_partly+0x30>
 80086f8:	4b4e      	ldr	r3, [pc, #312]	; (8008834 <netconn_write_vectors_partly+0x158>)
 80086fa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80086fe:	494e      	ldr	r1, [pc, #312]	; (8008838 <netconn_write_vectors_partly+0x15c>)
 8008700:	484e      	ldr	r0, [pc, #312]	; (800883c <netconn_write_vectors_partly+0x160>)
 8008702:	f00f ff5d 	bl	80185c0 <iprintf>
 8008706:	f06f 030f 	mvn.w	r3, #15
 800870a:	e08e      	b.n	800882a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008714:	2b10      	cmp	r3, #16
 8008716:	d009      	beq.n	800872c <netconn_write_vectors_partly+0x50>
 8008718:	4b46      	ldr	r3, [pc, #280]	; (8008834 <netconn_write_vectors_partly+0x158>)
 800871a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800871e:	4948      	ldr	r1, [pc, #288]	; (8008840 <netconn_write_vectors_partly+0x164>)
 8008720:	4846      	ldr	r0, [pc, #280]	; (800883c <netconn_write_vectors_partly+0x160>)
 8008722:	f00f ff4d 	bl	80185c0 <iprintf>
 8008726:	f06f 0305 	mvn.w	r3, #5
 800872a:	e07e      	b.n	800882a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	7f1b      	ldrb	r3, [r3, #28]
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	2b00      	cmp	r3, #0
 8008736:	d104      	bne.n	8008742 <netconn_write_vectors_partly+0x66>
 8008738:	797b      	ldrb	r3, [r7, #5]
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <netconn_write_vectors_partly+0x6a>
 8008742:	2301      	movs	r3, #1
 8008744:	e000      	b.n	8008748 <netconn_write_vectors_partly+0x6c>
 8008746:	2300      	movs	r3, #0
 8008748:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800874c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008750:	2b00      	cmp	r3, #0
 8008752:	d005      	beq.n	8008760 <netconn_write_vectors_partly+0x84>
 8008754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008756:	2b00      	cmp	r3, #0
 8008758:	d102      	bne.n	8008760 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800875a:	f06f 0305 	mvn.w	r3, #5
 800875e:	e064      	b.n	800882a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008760:	2300      	movs	r3, #0
 8008762:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008764:	2300      	movs	r3, #0
 8008766:	643b      	str	r3, [r7, #64]	; 0x40
 8008768:	e015      	b.n	8008796 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800876a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	4413      	add	r3, r2
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008776:	4413      	add	r3, r2
 8008778:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800877a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800877c:	00db      	lsls	r3, r3, #3
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	4413      	add	r3, r2
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008786:	429a      	cmp	r2, r3
 8008788:	d202      	bcs.n	8008790 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800878a:	f06f 0305 	mvn.w	r3, #5
 800878e:	e04c      	b.n	800882a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008792:	3301      	adds	r3, #1
 8008794:	643b      	str	r3, [r7, #64]	; 0x40
 8008796:	88fb      	ldrh	r3, [r7, #6]
 8008798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800879a:	429a      	cmp	r2, r3
 800879c:	dbe5      	blt.n	800876a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800879e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	e040      	b.n	800882a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80087a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	da0a      	bge.n	80087c4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80087ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d102      	bne.n	80087ba <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80087b4:	f06f 0305 	mvn.w	r3, #5
 80087b8:	e037      	b.n	800882a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80087ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80087be:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80087c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80087cc:	88fb      	ldrh	r3, [r7, #6]
 80087ce:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80087d4:	797b      	ldrb	r3, [r7, #5]
 80087d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80087da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087dc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80087e2:	f107 0314 	add.w	r3, r7, #20
 80087e6:	4619      	mov	r1, r3
 80087e8:	4816      	ldr	r0, [pc, #88]	; (8008844 <netconn_write_vectors_partly+0x168>)
 80087ea:	f7ff fb9f 	bl	8007f2c <netconn_apimsg>
 80087ee:	4603      	mov	r3, r0
 80087f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80087f4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d114      	bne.n	8008826 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80087fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008806:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008808:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10a      	bne.n	8008826 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008812:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008814:	429a      	cmp	r2, r3
 8008816:	d006      	beq.n	8008826 <netconn_write_vectors_partly+0x14a>
 8008818:	4b06      	ldr	r3, [pc, #24]	; (8008834 <netconn_write_vectors_partly+0x158>)
 800881a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800881e:	490a      	ldr	r1, [pc, #40]	; (8008848 <netconn_write_vectors_partly+0x16c>)
 8008820:	4806      	ldr	r0, [pc, #24]	; (800883c <netconn_write_vectors_partly+0x160>)
 8008822:	f00f fecd 	bl	80185c0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008826:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800882a:	4618      	mov	r0, r3
 800882c:	3748      	adds	r7, #72	; 0x48
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	08019b74 	.word	0x08019b74
 8008838:	08019e4c 	.word	0x08019e4c
 800883c:	08019bcc 	.word	0x08019bcc
 8008840:	08019e68 	.word	0x08019e68
 8008844:	08009e79 	.word	0x08009e79
 8008848:	08019e8c 	.word	0x08019e8c

0800884c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08c      	sub	sp, #48	; 0x30
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	460b      	mov	r3, r1
 8008856:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d109      	bne.n	8008872 <netconn_close_shutdown+0x26>
 800885e:	4b0f      	ldr	r3, [pc, #60]	; (800889c <netconn_close_shutdown+0x50>)
 8008860:	f240 4247 	movw	r2, #1095	; 0x447
 8008864:	490e      	ldr	r1, [pc, #56]	; (80088a0 <netconn_close_shutdown+0x54>)
 8008866:	480f      	ldr	r0, [pc, #60]	; (80088a4 <netconn_close_shutdown+0x58>)
 8008868:	f00f feaa 	bl	80185c0 <iprintf>
 800886c:	f06f 030f 	mvn.w	r3, #15
 8008870:	e010      	b.n	8008894 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008876:	78fb      	ldrb	r3, [r7, #3]
 8008878:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800887a:	2329      	movs	r3, #41	; 0x29
 800887c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800887e:	f107 030c 	add.w	r3, r7, #12
 8008882:	4619      	mov	r1, r3
 8008884:	4808      	ldr	r0, [pc, #32]	; (80088a8 <netconn_close_shutdown+0x5c>)
 8008886:	f7ff fb51 	bl	8007f2c <netconn_apimsg>
 800888a:	4603      	mov	r3, r0
 800888c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008890:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008894:	4618      	mov	r0, r3
 8008896:	3730      	adds	r7, #48	; 0x30
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	08019b74 	.word	0x08019b74
 80088a0:	08019eb0 	.word	0x08019eb0
 80088a4:	08019bcc 	.word	0x08019bcc
 80088a8:	08009f91 	.word	0x08009f91

080088ac <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80088b4:	2103      	movs	r1, #3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff ffc8 	bl	800884c <netconn_close_shutdown>
 80088bc:	4603      	mov	r3, r0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <netconn_err+0x12>
    return ERR_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	e00d      	b.n	80088f4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80088d8:	f00f fd66 	bl	80183a8 <sys_arch_protect>
 80088dc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	7a1b      	ldrb	r3, [r3, #8]
 80088e2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f00f fd6a 	bl	80183c4 <sys_arch_unprotect>
  return err;
 80088f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800890a:	f113 0f0d 	cmn.w	r3, #13
 800890e:	d009      	beq.n	8008924 <lwip_netconn_err_to_msg+0x28>
 8008910:	f113 0f0d 	cmn.w	r3, #13
 8008914:	dc0c      	bgt.n	8008930 <lwip_netconn_err_to_msg+0x34>
 8008916:	f113 0f0f 	cmn.w	r3, #15
 800891a:	d007      	beq.n	800892c <lwip_netconn_err_to_msg+0x30>
 800891c:	f113 0f0e 	cmn.w	r3, #14
 8008920:	d002      	beq.n	8008928 <lwip_netconn_err_to_msg+0x2c>
 8008922:	e005      	b.n	8008930 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008924:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <lwip_netconn_err_to_msg+0x54>)
 8008926:	e00e      	b.n	8008946 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <lwip_netconn_err_to_msg+0x58>)
 800892a:	e00c      	b.n	8008946 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800892c:	4b0a      	ldr	r3, [pc, #40]	; (8008958 <lwip_netconn_err_to_msg+0x5c>)
 800892e:	e00a      	b.n	8008946 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <lwip_netconn_err_to_msg+0x48>
 8008938:	4b08      	ldr	r3, [pc, #32]	; (800895c <lwip_netconn_err_to_msg+0x60>)
 800893a:	227d      	movs	r2, #125	; 0x7d
 800893c:	4908      	ldr	r1, [pc, #32]	; (8008960 <lwip_netconn_err_to_msg+0x64>)
 800893e:	4809      	ldr	r0, [pc, #36]	; (8008964 <lwip_netconn_err_to_msg+0x68>)
 8008940:	f00f fe3e 	bl	80185c0 <iprintf>
      return NULL;
 8008944:	2300      	movs	r3, #0
  }
}
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	0801d628 	.word	0x0801d628
 8008954:	0801d629 	.word	0x0801d629
 8008958:	0801d62a 	.word	0x0801d62a
 800895c:	08019ecc 	.word	0x08019ecc
 8008960:	08019f00 	.word	0x08019f00
 8008964:	08019f10 	.word	0x08019f10

08008968 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d105      	bne.n	8008984 <lwip_netconn_is_err_msg+0x1c>
 8008978:	4b12      	ldr	r3, [pc, #72]	; (80089c4 <lwip_netconn_is_err_msg+0x5c>)
 800897a:	2285      	movs	r2, #133	; 0x85
 800897c:	4912      	ldr	r1, [pc, #72]	; (80089c8 <lwip_netconn_is_err_msg+0x60>)
 800897e:	4813      	ldr	r0, [pc, #76]	; (80089cc <lwip_netconn_is_err_msg+0x64>)
 8008980:	f00f fe1e 	bl	80185c0 <iprintf>

  if (msg == &netconn_aborted) {
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a12      	ldr	r2, [pc, #72]	; (80089d0 <lwip_netconn_is_err_msg+0x68>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d104      	bne.n	8008996 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	22f3      	movs	r2, #243	; 0xf3
 8008990:	701a      	strb	r2, [r3, #0]
    return 1;
 8008992:	2301      	movs	r3, #1
 8008994:	e012      	b.n	80089bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a0e      	ldr	r2, [pc, #56]	; (80089d4 <lwip_netconn_is_err_msg+0x6c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d104      	bne.n	80089a8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	22f2      	movs	r2, #242	; 0xf2
 80089a2:	701a      	strb	r2, [r3, #0]
    return 1;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e009      	b.n	80089bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a0b      	ldr	r2, [pc, #44]	; (80089d8 <lwip_netconn_is_err_msg+0x70>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d104      	bne.n	80089ba <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	22f1      	movs	r2, #241	; 0xf1
 80089b4:	701a      	strb	r2, [r3, #0]
    return 1;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e000      	b.n	80089bc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	08019ecc 	.word	0x08019ecc
 80089c8:	08019f38 	.word	0x08019f38
 80089cc:	08019f10 	.word	0x08019f10
 80089d0:	0801d628 	.word	0x0801d628
 80089d4:	0801d629 	.word	0x0801d629
 80089d8:	0801d62a 	.word	0x0801d62a

080089dc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
 80089e8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d105      	bne.n	80089fc <recv_udp+0x20>
 80089f0:	4b34      	ldr	r3, [pc, #208]	; (8008ac4 <recv_udp+0xe8>)
 80089f2:	22e5      	movs	r2, #229	; 0xe5
 80089f4:	4934      	ldr	r1, [pc, #208]	; (8008ac8 <recv_udp+0xec>)
 80089f6:	4835      	ldr	r0, [pc, #212]	; (8008acc <recv_udp+0xf0>)
 80089f8:	f00f fde2 	bl	80185c0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d105      	bne.n	8008a0e <recv_udp+0x32>
 8008a02:	4b30      	ldr	r3, [pc, #192]	; (8008ac4 <recv_udp+0xe8>)
 8008a04:	22e6      	movs	r2, #230	; 0xe6
 8008a06:	4932      	ldr	r1, [pc, #200]	; (8008ad0 <recv_udp+0xf4>)
 8008a08:	4830      	ldr	r0, [pc, #192]	; (8008acc <recv_udp+0xf0>)
 8008a0a:	f00f fdd9 	bl	80185c0 <iprintf>
  conn = (struct netconn *)arg;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d103      	bne.n	8008a20 <recv_udp+0x44>
    pbuf_free(p);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f003 ffe5 	bl	800c9e8 <pbuf_free>
    return;
 8008a1e:	e04d      	b.n	8008abc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d005      	beq.n	8008a36 <recv_udp+0x5a>
 8008a2a:	4b26      	ldr	r3, [pc, #152]	; (8008ac4 <recv_udp+0xe8>)
 8008a2c:	22ee      	movs	r2, #238	; 0xee
 8008a2e:	4929      	ldr	r1, [pc, #164]	; (8008ad4 <recv_udp+0xf8>)
 8008a30:	4826      	ldr	r0, [pc, #152]	; (8008acc <recv_udp+0xf0>)
 8008a32:	f00f fdc5 	bl	80185c0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	3310      	adds	r3, #16
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f00f fb99 	bl	8018172 <sys_mbox_valid>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d103      	bne.n	8008a4e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f003 ffce 	bl	800c9e8 <pbuf_free>
    return;
 8008a4c:	e036      	b.n	8008abc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008a4e:	2006      	movs	r0, #6
 8008a50:	f003 f8a4 	bl	800bb9c <memp_malloc>
 8008a54:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d103      	bne.n	8008a64 <recv_udp+0x88>
    pbuf_free(p);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f003 ffc3 	bl	800c9e8 <pbuf_free>
    return;
 8008a62:	e02b      	b.n	8008abc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <recv_udp+0xa0>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	e000      	b.n	8008a7e <recv_udp+0xa2>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008a86:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	891b      	ldrh	r3, [r3, #8]
 8008a8c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	3310      	adds	r3, #16
 8008a92:	69b9      	ldr	r1, [r7, #24]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f00f faf7 	bl	8018088 <sys_mbox_trypost>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008aa0:	69b8      	ldr	r0, [r7, #24]
 8008aa2:	f001 fb01 	bl	800a0a8 <netbuf_delete>
    return;
 8008aa6:	e009      	b.n	8008abc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d005      	beq.n	8008abc <recv_udp+0xe0>
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	8afa      	ldrh	r2, [r7, #22]
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	69f8      	ldr	r0, [r7, #28]
 8008aba:	4798      	blx	r3
  }
}
 8008abc:	3720      	adds	r7, #32
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	08019ecc 	.word	0x08019ecc
 8008ac8:	08019f44 	.word	0x08019f44
 8008acc:	08019f10 	.word	0x08019f10
 8008ad0:	08019f68 	.word	0x08019f68
 8008ad4:	08019f88 	.word	0x08019f88

08008ad8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d106      	bne.n	8008afa <recv_tcp+0x22>
 8008aec:	4b36      	ldr	r3, [pc, #216]	; (8008bc8 <recv_tcp+0xf0>)
 8008aee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008af2:	4936      	ldr	r1, [pc, #216]	; (8008bcc <recv_tcp+0xf4>)
 8008af4:	4836      	ldr	r0, [pc, #216]	; (8008bd0 <recv_tcp+0xf8>)
 8008af6:	f00f fd63 	bl	80185c0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d106      	bne.n	8008b0e <recv_tcp+0x36>
 8008b00:	4b31      	ldr	r3, [pc, #196]	; (8008bc8 <recv_tcp+0xf0>)
 8008b02:	f240 122d 	movw	r2, #301	; 0x12d
 8008b06:	4933      	ldr	r1, [pc, #204]	; (8008bd4 <recv_tcp+0xfc>)
 8008b08:	4831      	ldr	r0, [pc, #196]	; (8008bd0 <recv_tcp+0xf8>)
 8008b0a:	f00f fd59 	bl	80185c0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008b0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d006      	beq.n	8008b24 <recv_tcp+0x4c>
 8008b16:	4b2c      	ldr	r3, [pc, #176]	; (8008bc8 <recv_tcp+0xf0>)
 8008b18:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008b1c:	492e      	ldr	r1, [pc, #184]	; (8008bd8 <recv_tcp+0x100>)
 8008b1e:	482c      	ldr	r0, [pc, #176]	; (8008bd0 <recv_tcp+0xf8>)
 8008b20:	f00f fd4e 	bl	80185c0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d102      	bne.n	8008b34 <recv_tcp+0x5c>
    return ERR_VAL;
 8008b2e:	f06f 0305 	mvn.w	r3, #5
 8008b32:	e045      	b.n	8008bc0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d006      	beq.n	8008b4c <recv_tcp+0x74>
 8008b3e:	4b22      	ldr	r3, [pc, #136]	; (8008bc8 <recv_tcp+0xf0>)
 8008b40:	f240 1235 	movw	r2, #309	; 0x135
 8008b44:	4925      	ldr	r1, [pc, #148]	; (8008bdc <recv_tcp+0x104>)
 8008b46:	4822      	ldr	r0, [pc, #136]	; (8008bd0 <recv_tcp+0xf8>)
 8008b48:	f00f fd3a 	bl	80185c0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	3310      	adds	r3, #16
 8008b50:	4618      	mov	r0, r3
 8008b52:	f00f fb0e 	bl	8018172 <sys_mbox_valid>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10d      	bne.n	8008b78 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d008      	beq.n	8008b74 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	891b      	ldrh	r3, [r3, #8]
 8008b66:	4619      	mov	r1, r3
 8008b68:	68b8      	ldr	r0, [r7, #8]
 8008b6a:	f004 ff17 	bl	800d99c <tcp_recved>
      pbuf_free(p);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f003 ff3a 	bl	800c9e8 <pbuf_free>
    }
    return ERR_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	e023      	b.n	8008bc0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d005      	beq.n	8008b8a <recv_tcp+0xb2>
    msg = p;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	891b      	ldrh	r3, [r3, #8]
 8008b86:	83fb      	strh	r3, [r7, #30]
 8008b88:	e003      	b.n	8008b92 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008b8a:	4b15      	ldr	r3, [pc, #84]	; (8008be0 <recv_tcp+0x108>)
 8008b8c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	3310      	adds	r3, #16
 8008b96:	69b9      	ldr	r1, [r7, #24]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f00f fa75 	bl	8018088 <sys_mbox_trypost>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba8:	e00a      	b.n	8008bc0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d005      	beq.n	8008bbe <recv_tcp+0xe6>
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	8bfa      	ldrh	r2, [r7, #30]
 8008bb8:	2100      	movs	r1, #0
 8008bba:	6978      	ldr	r0, [r7, #20]
 8008bbc:	4798      	blx	r3
  }

  return ERR_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3720      	adds	r7, #32
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	08019ecc 	.word	0x08019ecc
 8008bcc:	08019fa8 	.word	0x08019fa8
 8008bd0:	08019f10 	.word	0x08019f10
 8008bd4:	08019fcc 	.word	0x08019fcc
 8008bd8:	08019fec 	.word	0x08019fec
 8008bdc:	0801a004 	.word	0x0801a004
 8008be0:	0801d62a 	.word	0x0801d62a

08008be4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d106      	bne.n	8008c06 <poll_tcp+0x22>
 8008bf8:	4b29      	ldr	r3, [pc, #164]	; (8008ca0 <poll_tcp+0xbc>)
 8008bfa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008bfe:	4929      	ldr	r1, [pc, #164]	; (8008ca4 <poll_tcp+0xc0>)
 8008c00:	4829      	ldr	r0, [pc, #164]	; (8008ca8 <poll_tcp+0xc4>)
 8008c02:	f00f fcdd 	bl	80185c0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	785b      	ldrb	r3, [r3, #1]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d104      	bne.n	8008c18 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008c0e:	2101      	movs	r1, #1
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 ff65 	bl	8009ae0 <lwip_netconn_do_writemore>
 8008c16:	e016      	b.n	8008c46 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	785b      	ldrb	r3, [r3, #1]
 8008c1c:	2b04      	cmp	r3, #4
 8008c1e:	d112      	bne.n	8008c46 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6a1b      	ldr	r3, [r3, #32]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00a      	beq.n	8008c3e <poll_tcp+0x5a>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	7a5b      	ldrb	r3, [r3, #9]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d005      	beq.n	8008c3e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	7a5a      	ldrb	r2, [r3, #9]
 8008c38:	3a01      	subs	r2, #1
 8008c3a:	b2d2      	uxtb	r2, r2
 8008c3c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008c3e:	2101      	movs	r1, #1
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 fbf7 	bl	8009434 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	7f1b      	ldrb	r3, [r3, #28]
 8008c4a:	f003 0310 	and.w	r3, r3, #16
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d021      	beq.n	8008c96 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d01d      	beq.n	8008c96 <poll_tcp+0xb2>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008c62:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008c66:	d316      	bcc.n	8008c96 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008c70:	2b04      	cmp	r3, #4
 8008c72:	d810      	bhi.n	8008c96 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	7f1b      	ldrb	r3, [r3, #28]
 8008c78:	f023 0310 	bic.w	r3, r3, #16
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d005      	beq.n	8008c96 <poll_tcp+0xb2>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2102      	movs	r1, #2
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	08019ecc 	.word	0x08019ecc
 8008ca4:	0801a024 	.word	0x0801a024
 8008ca8:	08019f10 	.word	0x08019f10

08008cac <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d106      	bne.n	8008cd2 <sent_tcp+0x26>
 8008cc4:	4b20      	ldr	r3, [pc, #128]	; (8008d48 <sent_tcp+0x9c>)
 8008cc6:	f240 1293 	movw	r2, #403	; 0x193
 8008cca:	4920      	ldr	r1, [pc, #128]	; (8008d4c <sent_tcp+0xa0>)
 8008ccc:	4820      	ldr	r0, [pc, #128]	; (8008d50 <sent_tcp+0xa4>)
 8008cce:	f00f fc77 	bl	80185c0 <iprintf>

  if (conn) {
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d032      	beq.n	8008d3e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	785b      	ldrb	r3, [r3, #1]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d104      	bne.n	8008cea <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008ce0:	2101      	movs	r1, #1
 8008ce2:	6978      	ldr	r0, [r7, #20]
 8008ce4:	f000 fefc 	bl	8009ae0 <lwip_netconn_do_writemore>
 8008ce8:	e007      	b.n	8008cfa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	785b      	ldrb	r3, [r3, #1]
 8008cee:	2b04      	cmp	r3, #4
 8008cf0:	d103      	bne.n	8008cfa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	6978      	ldr	r0, [r7, #20]
 8008cf6:	f000 fb9d 	bl	8009434 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d01d      	beq.n	8008d3e <sent_tcp+0x92>
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008d0a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008d0e:	d316      	bcc.n	8008d3e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d810      	bhi.n	8008d3e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	7f1b      	ldrb	r3, [r3, #28]
 8008d20:	f023 0310 	bic.w	r3, r3, #16
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d005      	beq.n	8008d3e <sent_tcp+0x92>
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	88fa      	ldrh	r2, [r7, #6]
 8008d38:	2102      	movs	r1, #2
 8008d3a:	6978      	ldr	r0, [r7, #20]
 8008d3c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	08019ecc 	.word	0x08019ecc
 8008d4c:	0801a024 	.word	0x0801a024
 8008d50:	08019f10 	.word	0x08019f10

08008d54 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d106      	bne.n	8008d78 <err_tcp+0x24>
 8008d6a:	4b5f      	ldr	r3, [pc, #380]	; (8008ee8 <err_tcp+0x194>)
 8008d6c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008d70:	495e      	ldr	r1, [pc, #376]	; (8008eec <err_tcp+0x198>)
 8008d72:	485f      	ldr	r0, [pc, #380]	; (8008ef0 <err_tcp+0x19c>)
 8008d74:	f00f fc24 	bl	80185c0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008d78:	f00f fb16 	bl	80183a8 <sys_arch_protect>
 8008d7c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	2200      	movs	r2, #0
 8008d82:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	78fa      	ldrb	r2, [r7, #3]
 8008d88:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	7f1b      	ldrb	r3, [r3, #28]
 8008d8e:	f043 0301 	orr.w	r3, r3, #1
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	785b      	ldrb	r3, [r3, #1]
 8008d9c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	2200      	movs	r2, #0
 8008da2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008da4:	69b8      	ldr	r0, [r7, #24]
 8008da6:	f00f fb0d 	bl	80183c4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d005      	beq.n	8008dbe <err_tcp+0x6a>
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db6:	2200      	movs	r2, #0
 8008db8:	2104      	movs	r1, #4
 8008dba:	69f8      	ldr	r0, [r7, #28]
 8008dbc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d005      	beq.n	8008dd2 <err_tcp+0x7e>
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2100      	movs	r1, #0
 8008dce:	69f8      	ldr	r0, [r7, #28]
 8008dd0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d005      	beq.n	8008de6 <err_tcp+0x92>
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dde:	2200      	movs	r2, #0
 8008de0:	2102      	movs	r1, #2
 8008de2:	69f8      	ldr	r0, [r7, #28]
 8008de4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff fd86 	bl	80088fc <lwip_netconn_err_to_msg>
 8008df0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	3310      	adds	r3, #16
 8008df6:	4618      	mov	r0, r3
 8008df8:	f00f f9bb 	bl	8018172 <sys_mbox_valid>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d005      	beq.n	8008e0e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	3310      	adds	r3, #16
 8008e06:	6939      	ldr	r1, [r7, #16]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f00f f93d 	bl	8018088 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	3314      	adds	r3, #20
 8008e12:	4618      	mov	r0, r3
 8008e14:	f00f f9ad 	bl	8018172 <sys_mbox_valid>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d005      	beq.n	8008e2a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	3314      	adds	r3, #20
 8008e22:	6939      	ldr	r1, [r7, #16]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f00f f92f 	bl	8018088 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d005      	beq.n	8008e3c <err_tcp+0xe8>
 8008e30:	7dfb      	ldrb	r3, [r7, #23]
 8008e32:	2b04      	cmp	r3, #4
 8008e34:	d002      	beq.n	8008e3c <err_tcp+0xe8>
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	d143      	bne.n	8008ec4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	7f1b      	ldrb	r3, [r3, #28]
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	bf14      	ite	ne
 8008e48:	2301      	movne	r3, #1
 8008e4a:	2300      	moveq	r3, #0
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	7f1b      	ldrb	r3, [r3, #28]
 8008e54:	f023 0304 	bic.w	r3, r3, #4
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d13b      	bne.n	8008edc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	6a1b      	ldr	r3, [r3, #32]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d106      	bne.n	8008e7a <err_tcp+0x126>
 8008e6c:	4b1e      	ldr	r3, [pc, #120]	; (8008ee8 <err_tcp+0x194>)
 8008e6e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008e72:	4920      	ldr	r1, [pc, #128]	; (8008ef4 <err_tcp+0x1a0>)
 8008e74:	481e      	ldr	r0, [pc, #120]	; (8008ef0 <err_tcp+0x19c>)
 8008e76:	f00f fba3 	bl	80185c0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d104      	bne.n	8008e8a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	6a1b      	ldr	r3, [r3, #32]
 8008e84:	2200      	movs	r2, #0
 8008e86:	711a      	strb	r2, [r3, #4]
 8008e88:	e003      	b.n	8008e92 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	330c      	adds	r3, #12
 8008e9a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008e9c:	68b8      	ldr	r0, [r7, #8]
 8008e9e:	f00f f9f9 	bl	8018294 <sys_sem_valid>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d106      	bne.n	8008eb6 <err_tcp+0x162>
 8008ea8:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <err_tcp+0x194>)
 8008eaa:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008eae:	4912      	ldr	r1, [pc, #72]	; (8008ef8 <err_tcp+0x1a4>)
 8008eb0:	480f      	ldr	r0, [pc, #60]	; (8008ef0 <err_tcp+0x19c>)
 8008eb2:	f00f fb85 	bl	80185c0 <iprintf>
      conn->current_msg = NULL;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008ebc:	68b8      	ldr	r0, [r7, #8]
 8008ebe:	f00f f9cf 	bl	8018260 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008ec2:	e00b      	b.n	8008edc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	6a1b      	ldr	r3, [r3, #32]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d008      	beq.n	8008ede <err_tcp+0x18a>
 8008ecc:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <err_tcp+0x194>)
 8008ece:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008ed2:	490a      	ldr	r1, [pc, #40]	; (8008efc <err_tcp+0x1a8>)
 8008ed4:	4806      	ldr	r0, [pc, #24]	; (8008ef0 <err_tcp+0x19c>)
 8008ed6:	f00f fb73 	bl	80185c0 <iprintf>
  }
}
 8008eda:	e000      	b.n	8008ede <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008edc:	bf00      	nop
}
 8008ede:	bf00      	nop
 8008ee0:	3720      	adds	r7, #32
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	08019ecc 	.word	0x08019ecc
 8008eec:	0801a024 	.word	0x0801a024
 8008ef0:	08019f10 	.word	0x08019f10
 8008ef4:	0801a034 	.word	0x0801a034
 8008ef8:	0801a050 	.word	0x0801a050
 8008efc:	0801a06c 	.word	0x0801a06c

08008f00 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008f0e:	6879      	ldr	r1, [r7, #4]
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f005 fc27 	bl	800e764 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008f16:	490a      	ldr	r1, [pc, #40]	; (8008f40 <setup_tcp+0x40>)
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f005 fc35 	bl	800e788 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008f1e:	4909      	ldr	r1, [pc, #36]	; (8008f44 <setup_tcp+0x44>)
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f005 fc53 	bl	800e7cc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008f26:	2202      	movs	r2, #2
 8008f28:	4907      	ldr	r1, [pc, #28]	; (8008f48 <setup_tcp+0x48>)
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f005 fcaa 	bl	800e884 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008f30:	4906      	ldr	r1, [pc, #24]	; (8008f4c <setup_tcp+0x4c>)
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f005 fc6c 	bl	800e810 <tcp_err>
}
 8008f38:	bf00      	nop
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	08008ad9 	.word	0x08008ad9
 8008f44:	08008cad 	.word	0x08008cad
 8008f48:	08008be5 	.word	0x08008be5
 8008f4c:	08008d55 	.word	0x08008d55

08008f50 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008f50:	b590      	push	{r4, r7, lr}
 8008f52:	b089      	sub	sp, #36	; 0x24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d102      	bne.n	8008f6e <accept_function+0x1e>
    return ERR_VAL;
 8008f68:	f06f 0305 	mvn.w	r3, #5
 8008f6c:	e0a1      	b.n	80090b2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	3314      	adds	r3, #20
 8008f72:	4618      	mov	r0, r3
 8008f74:	f00f f8fd 	bl	8018172 <sys_mbox_valid>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d102      	bne.n	8008f84 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008f7e:	f06f 0305 	mvn.w	r3, #5
 8008f82:	e096      	b.n	80090b2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d11b      	bne.n	8008fc2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	f103 0414 	add.w	r4, r3, #20
 8008f90:	f06f 000c 	mvn.w	r0, #12
 8008f94:	f7ff fcb2 	bl	80088fc <lwip_netconn_err_to_msg>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f00f f873 	bl	8018088 <sys_mbox_trypost>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d109      	bne.n	8008fbc <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d005      	beq.n	8008fbc <accept_function+0x6c>
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	69f8      	ldr	r0, [r7, #28]
 8008fba:	4798      	blx	r3
    }
    return ERR_VAL;
 8008fbc:	f06f 0305 	mvn.w	r3, #5
 8008fc0:	e077      	b.n	80090b2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d006      	beq.n	8008fd8 <accept_function+0x88>
 8008fca:	4b3c      	ldr	r3, [pc, #240]	; (80090bc <accept_function+0x16c>)
 8008fcc:	f240 222a 	movw	r2, #554	; 0x22a
 8008fd0:	493b      	ldr	r1, [pc, #236]	; (80090c0 <accept_function+0x170>)
 8008fd2:	483c      	ldr	r0, [pc, #240]	; (80090c4 <accept_function+0x174>)
 8008fd4:	f00f faf4 	bl	80185c0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	781a      	ldrb	r2, [r3, #0]
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f000 f8f0 	bl	80091c8 <netconn_alloc>
 8008fe8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d11b      	bne.n	8009028 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	f103 0414 	add.w	r4, r3, #20
 8008ff6:	f06f 000c 	mvn.w	r0, #12
 8008ffa:	f7ff fc7f 	bl	80088fc <lwip_netconn_err_to_msg>
 8008ffe:	4603      	mov	r3, r0
 8009000:	4619      	mov	r1, r3
 8009002:	4620      	mov	r0, r4
 8009004:	f00f f840 	bl	8018088 <sys_mbox_trypost>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d109      	bne.n	8009022 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <accept_function+0xd2>
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901a:	2200      	movs	r2, #0
 800901c:	2100      	movs	r1, #0
 800901e:	69f8      	ldr	r0, [r7, #28]
 8009020:	4798      	blx	r3
    }
    return ERR_MEM;
 8009022:	f04f 33ff 	mov.w	r3, #4294967295
 8009026:	e044      	b.n	80090b2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800902e:	69b8      	ldr	r0, [r7, #24]
 8009030:	f7ff ff66 	bl	8008f00 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	3314      	adds	r3, #20
 8009038:	69b9      	ldr	r1, [r7, #24]
 800903a:	4618      	mov	r0, r3
 800903c:	f00f f824 	bl	8018088 <sys_mbox_trypost>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d02a      	beq.n	800909c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800904c:	2100      	movs	r1, #0
 800904e:	6978      	ldr	r0, [r7, #20]
 8009050:	f005 fb88 	bl	800e764 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009054:	2100      	movs	r1, #0
 8009056:	6978      	ldr	r0, [r7, #20]
 8009058:	f005 fb96 	bl	800e788 <tcp_recv>
    tcp_sent(pcb, NULL);
 800905c:	2100      	movs	r1, #0
 800905e:	6978      	ldr	r0, [r7, #20]
 8009060:	f005 fbb4 	bl	800e7cc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009064:	2200      	movs	r2, #0
 8009066:	2100      	movs	r1, #0
 8009068:	6978      	ldr	r0, [r7, #20]
 800906a:	f005 fc0b 	bl	800e884 <tcp_poll>
    tcp_err(pcb, NULL);
 800906e:	2100      	movs	r1, #0
 8009070:	6978      	ldr	r0, [r7, #20]
 8009072:	f005 fbcd 	bl	800e810 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	2200      	movs	r2, #0
 800907a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	3310      	adds	r3, #16
 8009080:	4618      	mov	r0, r3
 8009082:	f00e ffef 	bl	8018064 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	3310      	adds	r3, #16
 800908a:	4618      	mov	r0, r3
 800908c:	f00f f882 	bl	8018194 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009090:	69b8      	ldr	r0, [r7, #24]
 8009092:	f000 f907 	bl	80092a4 <netconn_free>
    return ERR_MEM;
 8009096:	f04f 33ff 	mov.w	r3, #4294967295
 800909a:	e00a      	b.n	80090b2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <accept_function+0x160>
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	2200      	movs	r2, #0
 80090aa:	2100      	movs	r1, #0
 80090ac:	69f8      	ldr	r0, [r7, #28]
 80090ae:	4798      	blx	r3
  }

  return ERR_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3724      	adds	r7, #36	; 0x24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd90      	pop	{r4, r7, pc}
 80090ba:	bf00      	nop
 80090bc:	08019ecc 	.word	0x08019ecc
 80090c0:	0801a088 	.word	0x0801a088
 80090c4:	08019f10 	.word	0x08019f10

080090c8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80090c8:	b590      	push	{r4, r7, lr}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80090d0:	2300      	movs	r3, #0
 80090d2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d006      	beq.n	80090ec <pcb_new+0x24>
 80090de:	4b2b      	ldr	r3, [pc, #172]	; (800918c <pcb_new+0xc4>)
 80090e0:	f240 2265 	movw	r2, #613	; 0x265
 80090e4:	492a      	ldr	r1, [pc, #168]	; (8009190 <pcb_new+0xc8>)
 80090e6:	482b      	ldr	r0, [pc, #172]	; (8009194 <pcb_new+0xcc>)
 80090e8:	f00f fa6a 	bl	80185c0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090f6:	2b10      	cmp	r3, #16
 80090f8:	d022      	beq.n	8009140 <pcb_new+0x78>
 80090fa:	2b20      	cmp	r3, #32
 80090fc:	d133      	bne.n	8009166 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681c      	ldr	r4, [r3, #0]
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	4618      	mov	r0, r3
 8009106:	f00a fdd4 	bl	8013cb2 <udp_new_ip_type>
 800910a:	4603      	mov	r3, r0
 800910c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d02a      	beq.n	800916e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b22      	cmp	r3, #34	; 0x22
 8009120:	d104      	bne.n	800912c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6858      	ldr	r0, [r3, #4]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	4917      	ldr	r1, [pc, #92]	; (8009198 <pcb_new+0xd0>)
 800913a:	f00a fd41 	bl	8013bc0 <udp_recv>
      }
      break;
 800913e:	e016      	b.n	800916e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681c      	ldr	r4, [r3, #0]
 8009144:	7bfb      	ldrb	r3, [r7, #15]
 8009146:	4618      	mov	r0, r3
 8009148:	f005 fafe 	bl	800e748 <tcp_new_ip_type>
 800914c:	4603      	mov	r3, r0
 800914e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00b      	beq.n	8009172 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff fece 	bl	8008f00 <setup_tcp>
      }
      break;
 8009164:	e005      	b.n	8009172 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	22fa      	movs	r2, #250	; 0xfa
 800916a:	711a      	strb	r2, [r3, #4]
      return;
 800916c:	e00a      	b.n	8009184 <pcb_new+0xbc>
      break;
 800916e:	bf00      	nop
 8009170:	e000      	b.n	8009174 <pcb_new+0xac>
      break;
 8009172:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d102      	bne.n	8009184 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	22ff      	movs	r2, #255	; 0xff
 8009182:	711a      	strb	r2, [r3, #4]
  }
}
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	bd90      	pop	{r4, r7, pc}
 800918a:	bf00      	nop
 800918c:	08019ecc 	.word	0x08019ecc
 8009190:	0801a0b0 	.word	0x0801a0b0
 8009194:	08019f10 	.word	0x08019f10
 8009198:	080089dd 	.word	0x080089dd

0800919c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2200      	movs	r2, #0
 80091ac:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d102      	bne.n	80091be <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f7ff ff85 	bl	80090c8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80091be:	bf00      	nop
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
	...

080091c8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	4603      	mov	r3, r0
 80091d0:	6039      	str	r1, [r7, #0]
 80091d2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80091d8:	2007      	movs	r0, #7
 80091da:	f002 fcdf 	bl	800bb9c <memp_malloc>
 80091de:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <netconn_alloc+0x22>
    return NULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	e052      	b.n	8009290 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	79fa      	ldrb	r2, [r7, #7]
 80091f4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009202:	2b10      	cmp	r3, #16
 8009204:	d004      	beq.n	8009210 <netconn_alloc+0x48>
 8009206:	2b20      	cmp	r3, #32
 8009208:	d105      	bne.n	8009216 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800920a:	2306      	movs	r3, #6
 800920c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800920e:	e00a      	b.n	8009226 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009210:	2306      	movs	r3, #6
 8009212:	617b      	str	r3, [r7, #20]
      break;
 8009214:	e007      	b.n	8009226 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009216:	4b20      	ldr	r3, [pc, #128]	; (8009298 <netconn_alloc+0xd0>)
 8009218:	f240 22e5 	movw	r2, #741	; 0x2e5
 800921c:	491f      	ldr	r1, [pc, #124]	; (800929c <netconn_alloc+0xd4>)
 800921e:	4820      	ldr	r0, [pc, #128]	; (80092a0 <netconn_alloc+0xd8>)
 8009220:	f00f f9ce 	bl	80185c0 <iprintf>
      goto free_and_return;
 8009224:	e02f      	b.n	8009286 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3310      	adds	r3, #16
 800922a:	6979      	ldr	r1, [r7, #20]
 800922c:	4618      	mov	r0, r3
 800922e:	f00e fef7 	bl	8018020 <sys_mbox_new>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d125      	bne.n	8009284 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	330c      	adds	r3, #12
 800923c:	2100      	movs	r1, #0
 800923e:	4618      	mov	r0, r3
 8009240:	f00e ffb5 	bl	80181ae <sys_sem_new>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d005      	beq.n	8009256 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3310      	adds	r3, #16
 800924e:	4618      	mov	r0, r3
 8009250:	f00e ff08 	bl	8018064 <sys_mbox_free>
    goto free_and_return;
 8009254:	e017      	b.n	8009286 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	3314      	adds	r3, #20
 800925a:	4618      	mov	r0, r3
 800925c:	f00e ff9a 	bl	8018194 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f04f 32ff 	mov.w	r2, #4294967295
 800926c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	7cfa      	ldrb	r2, [r7, #19]
 800927e:	771a      	strb	r2, [r3, #28]
  return conn;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	e005      	b.n	8009290 <netconn_alloc+0xc8>
    goto free_and_return;
 8009284:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009286:	68f9      	ldr	r1, [r7, #12]
 8009288:	2007      	movs	r0, #7
 800928a:	f002 fcfd 	bl	800bc88 <memp_free>
  return NULL;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	08019ecc 	.word	0x08019ecc
 800929c:	0801a0d0 	.word	0x0801a0d0
 80092a0:	08019f10 	.word	0x08019f10

080092a4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d006      	beq.n	80092c2 <netconn_free+0x1e>
 80092b4:	4b1b      	ldr	r3, [pc, #108]	; (8009324 <netconn_free+0x80>)
 80092b6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80092ba:	491b      	ldr	r1, [pc, #108]	; (8009328 <netconn_free+0x84>)
 80092bc:	481b      	ldr	r0, [pc, #108]	; (800932c <netconn_free+0x88>)
 80092be:	f00f f97f 	bl	80185c0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3310      	adds	r3, #16
 80092c6:	4618      	mov	r0, r3
 80092c8:	f00e ff53 	bl	8018172 <sys_mbox_valid>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d006      	beq.n	80092e0 <netconn_free+0x3c>
 80092d2:	4b14      	ldr	r3, [pc, #80]	; (8009324 <netconn_free+0x80>)
 80092d4:	f240 3223 	movw	r2, #803	; 0x323
 80092d8:	4915      	ldr	r1, [pc, #84]	; (8009330 <netconn_free+0x8c>)
 80092da:	4814      	ldr	r0, [pc, #80]	; (800932c <netconn_free+0x88>)
 80092dc:	f00f f970 	bl	80185c0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	3314      	adds	r3, #20
 80092e4:	4618      	mov	r0, r3
 80092e6:	f00e ff44 	bl	8018172 <sys_mbox_valid>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d006      	beq.n	80092fe <netconn_free+0x5a>
 80092f0:	4b0c      	ldr	r3, [pc, #48]	; (8009324 <netconn_free+0x80>)
 80092f2:	f240 3226 	movw	r2, #806	; 0x326
 80092f6:	490f      	ldr	r1, [pc, #60]	; (8009334 <netconn_free+0x90>)
 80092f8:	480c      	ldr	r0, [pc, #48]	; (800932c <netconn_free+0x88>)
 80092fa:	f00f f961 	bl	80185c0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	330c      	adds	r3, #12
 8009302:	4618      	mov	r0, r3
 8009304:	f00e ffb9 	bl	801827a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	330c      	adds	r3, #12
 800930c:	4618      	mov	r0, r3
 800930e:	f00e ffd2 	bl	80182b6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	2007      	movs	r0, #7
 8009316:	f002 fcb7 	bl	800bc88 <memp_free>
}
 800931a:	bf00      	nop
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	08019ecc 	.word	0x08019ecc
 8009328:	0801a0f8 	.word	0x0801a0f8
 800932c:	08019f10 	.word	0x08019f10
 8009330:	0801a128 	.word	0x0801a128
 8009334:	0801a164 	.word	0x0801a164

08009338 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3310      	adds	r3, #16
 8009344:	4618      	mov	r0, r3
 8009346:	f00e ff14 	bl	8018172 <sys_mbox_valid>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d02f      	beq.n	80093b0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009350:	e018      	b.n	8009384 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800935a:	2b10      	cmp	r3, #16
 800935c:	d10e      	bne.n	800937c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	f107 020f 	add.w	r2, r7, #15
 8009364:	4611      	mov	r1, r2
 8009366:	4618      	mov	r0, r3
 8009368:	f7ff fafe 	bl	8008968 <lwip_netconn_is_err_msg>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d108      	bne.n	8009384 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	4618      	mov	r0, r3
 8009376:	f003 fb37 	bl	800c9e8 <pbuf_free>
 800937a:	e003      	b.n	8009384 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fe92 	bl	800a0a8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3310      	adds	r3, #16
 8009388:	f107 0210 	add.w	r2, r7, #16
 800938c:	4611      	mov	r1, r2
 800938e:	4618      	mov	r0, r3
 8009390:	f00e fed3 	bl	801813a <sys_arch_mbox_tryfetch>
 8009394:	4603      	mov	r3, r0
 8009396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939a:	d1da      	bne.n	8009352 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	3310      	adds	r3, #16
 80093a0:	4618      	mov	r0, r3
 80093a2:	f00e fe5f 	bl	8018064 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	3310      	adds	r3, #16
 80093aa:	4618      	mov	r0, r3
 80093ac:	f00e fef2 	bl	8018194 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3314      	adds	r3, #20
 80093b4:	4618      	mov	r0, r3
 80093b6:	f00e fedc 	bl	8018172 <sys_mbox_valid>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d034      	beq.n	800942a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80093c0:	e01d      	b.n	80093fe <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f107 020e 	add.w	r2, r7, #14
 80093c8:	4611      	mov	r1, r2
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7ff facc 	bl	8008968 <lwip_netconn_is_err_msg>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d113      	bne.n	80093fe <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80093da:	6978      	ldr	r0, [r7, #20]
 80093dc:	f7ff ffac 	bl	8009338 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d007      	beq.n	80093f8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f004 f8fb 	bl	800d5e8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2200      	movs	r2, #0
 80093f6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80093f8:	6978      	ldr	r0, [r7, #20]
 80093fa:	f7ff ff53 	bl	80092a4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3314      	adds	r3, #20
 8009402:	f107 0210 	add.w	r2, r7, #16
 8009406:	4611      	mov	r1, r2
 8009408:	4618      	mov	r0, r3
 800940a:	f00e fe96 	bl	801813a <sys_arch_mbox_tryfetch>
 800940e:	4603      	mov	r3, r0
 8009410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009414:	d1d5      	bne.n	80093c2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3314      	adds	r3, #20
 800941a:	4618      	mov	r0, r3
 800941c:	f00e fe22 	bl	8018064 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3314      	adds	r3, #20
 8009424:	4618      	mov	r0, r3
 8009426:	f00e feb5 	bl	8018194 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800942a:	bf00      	nop
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
	...

08009434 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	460b      	mov	r3, r1
 800943e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d106      	bne.n	8009458 <lwip_netconn_do_close_internal+0x24>
 800944a:	4b87      	ldr	r3, [pc, #540]	; (8009668 <lwip_netconn_do_close_internal+0x234>)
 800944c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009450:	4986      	ldr	r1, [pc, #536]	; (800966c <lwip_netconn_do_close_internal+0x238>)
 8009452:	4887      	ldr	r0, [pc, #540]	; (8009670 <lwip_netconn_do_close_internal+0x23c>)
 8009454:	f00f f8b4 	bl	80185c0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009460:	2b10      	cmp	r3, #16
 8009462:	d006      	beq.n	8009472 <lwip_netconn_do_close_internal+0x3e>
 8009464:	4b80      	ldr	r3, [pc, #512]	; (8009668 <lwip_netconn_do_close_internal+0x234>)
 8009466:	f240 32a3 	movw	r2, #931	; 0x3a3
 800946a:	4982      	ldr	r1, [pc, #520]	; (8009674 <lwip_netconn_do_close_internal+0x240>)
 800946c:	4880      	ldr	r0, [pc, #512]	; (8009670 <lwip_netconn_do_close_internal+0x23c>)
 800946e:	f00f f8a7 	bl	80185c0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	785b      	ldrb	r3, [r3, #1]
 8009476:	2b04      	cmp	r3, #4
 8009478:	d006      	beq.n	8009488 <lwip_netconn_do_close_internal+0x54>
 800947a:	4b7b      	ldr	r3, [pc, #492]	; (8009668 <lwip_netconn_do_close_internal+0x234>)
 800947c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009480:	497d      	ldr	r1, [pc, #500]	; (8009678 <lwip_netconn_do_close_internal+0x244>)
 8009482:	487b      	ldr	r0, [pc, #492]	; (8009670 <lwip_netconn_do_close_internal+0x23c>)
 8009484:	f00f f89c 	bl	80185c0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d106      	bne.n	800949e <lwip_netconn_do_close_internal+0x6a>
 8009490:	4b75      	ldr	r3, [pc, #468]	; (8009668 <lwip_netconn_do_close_internal+0x234>)
 8009492:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009496:	4979      	ldr	r1, [pc, #484]	; (800967c <lwip_netconn_do_close_internal+0x248>)
 8009498:	4875      	ldr	r0, [pc, #468]	; (8009670 <lwip_netconn_do_close_internal+0x23c>)
 800949a:	f00f f891 	bl	80185c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d106      	bne.n	80094b4 <lwip_netconn_do_close_internal+0x80>
 80094a6:	4b70      	ldr	r3, [pc, #448]	; (8009668 <lwip_netconn_do_close_internal+0x234>)
 80094a8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80094ac:	4974      	ldr	r1, [pc, #464]	; (8009680 <lwip_netconn_do_close_internal+0x24c>)
 80094ae:	4870      	ldr	r0, [pc, #448]	; (8009670 <lwip_netconn_do_close_internal+0x23c>)
 80094b0:	f00f f886 	bl	80185c0 <iprintf>

  tpcb = conn->pcb.tcp;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	7a1b      	ldrb	r3, [r3, #8]
 80094c0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
 80094cc:	f003 0302 	and.w	r3, r3, #2
 80094d0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d102      	bne.n	80094de <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80094d8:	2301      	movs	r3, #1
 80094da:	75bb      	strb	r3, [r7, #22]
 80094dc:	e01f      	b.n	800951e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80094de:	7bbb      	ldrb	r3, [r7, #14]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00e      	beq.n	8009502 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80094e8:	2b05      	cmp	r3, #5
 80094ea:	d007      	beq.n	80094fc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80094f0:	2b06      	cmp	r3, #6
 80094f2:	d003      	beq.n	80094fc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80094f8:	2b08      	cmp	r3, #8
 80094fa:	d102      	bne.n	8009502 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80094fc:	2301      	movs	r3, #1
 80094fe:	75bb      	strb	r3, [r7, #22]
 8009500:	e00d      	b.n	800951e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009502:	7b7b      	ldrb	r3, [r7, #13]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d008      	beq.n	800951a <lwip_netconn_do_close_internal+0xe6>
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	8b5b      	ldrh	r3, [r3, #26]
 800950c:	f003 0310 	and.w	r3, r3, #16
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009514:	2301      	movs	r3, #1
 8009516:	75bb      	strb	r3, [r7, #22]
 8009518:	e001      	b.n	800951e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800951a:	2300      	movs	r3, #0
 800951c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800951e:	7dbb      	ldrb	r3, [r7, #22]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d003      	beq.n	800952c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009524:	2100      	movs	r1, #0
 8009526:	6938      	ldr	r0, [r7, #16]
 8009528:	f005 f91c 	bl	800e764 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	7d1b      	ldrb	r3, [r3, #20]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d104      	bne.n	800953e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009534:	2100      	movs	r1, #0
 8009536:	6938      	ldr	r0, [r7, #16]
 8009538:	f005 f98c 	bl	800e854 <tcp_accept>
 800953c:	e01d      	b.n	800957a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d007      	beq.n	8009554 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009544:	2100      	movs	r1, #0
 8009546:	6938      	ldr	r0, [r7, #16]
 8009548:	f005 f91e 	bl	800e788 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800954c:	2100      	movs	r1, #0
 800954e:	6938      	ldr	r0, [r7, #16]
 8009550:	f005 f980 	bl	800e854 <tcp_accept>
    }
    if (shut_tx) {
 8009554:	7b7b      	ldrb	r3, [r7, #13]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800955a:	2100      	movs	r1, #0
 800955c:	6938      	ldr	r0, [r7, #16]
 800955e:	f005 f935 	bl	800e7cc <tcp_sent>
    }
    if (shut_close) {
 8009562:	7dbb      	ldrb	r3, [r7, #22]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d008      	beq.n	800957a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009568:	2200      	movs	r2, #0
 800956a:	2100      	movs	r1, #0
 800956c:	6938      	ldr	r0, [r7, #16]
 800956e:	f005 f989 	bl	800e884 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009572:	2100      	movs	r1, #0
 8009574:	6938      	ldr	r0, [r7, #16]
 8009576:	f005 f94b 	bl	800e810 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800957a:	7dbb      	ldrb	r3, [r7, #22]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d005      	beq.n	800958c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009580:	6938      	ldr	r0, [r7, #16]
 8009582:	f003 feeb 	bl	800d35c <tcp_close>
 8009586:	4603      	mov	r3, r0
 8009588:	75fb      	strb	r3, [r7, #23]
 800958a:	e007      	b.n	800959c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800958c:	7bbb      	ldrb	r3, [r7, #14]
 800958e:	7b7a      	ldrb	r2, [r7, #13]
 8009590:	4619      	mov	r1, r3
 8009592:	6938      	ldr	r0, [r7, #16]
 8009594:	f003 ff0e 	bl	800d3b4 <tcp_shutdown>
 8009598:	4603      	mov	r3, r0
 800959a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800959c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d102      	bne.n	80095aa <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80095a4:	2301      	movs	r3, #1
 80095a6:	757b      	strb	r3, [r7, #21]
 80095a8:	e016      	b.n	80095d8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80095aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b2:	d10f      	bne.n	80095d4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	7a5b      	ldrb	r3, [r3, #9]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10c      	bne.n	80095d8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80095be:	2301      	movs	r3, #1
 80095c0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80095c2:	7dbb      	ldrb	r3, [r7, #22]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d007      	beq.n	80095d8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80095c8:	6938      	ldr	r0, [r7, #16]
 80095ca:	f004 f80d 	bl	800d5e8 <tcp_abort>
          err = ERR_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	75fb      	strb	r3, [r7, #23]
 80095d2:	e001      	b.n	80095d8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80095d4:	2301      	movs	r3, #1
 80095d6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80095d8:	7d7b      	ldrb	r3, [r7, #21]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d052      	beq.n	8009684 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	330c      	adds	r3, #12
 80095e6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a1b      	ldr	r3, [r3, #32]
 80095ec:	7dfa      	ldrb	r2, [r7, #23]
 80095ee:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80095fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d129      	bne.n	8009658 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009604:	7dbb      	ldrb	r3, [r7, #22]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00c      	beq.n	8009624 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	2b00      	cmp	r3, #0
 8009616:	d005      	beq.n	8009624 <lwip_netconn_do_close_internal+0x1f0>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	2200      	movs	r2, #0
 800961e:	2104      	movs	r1, #4
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	4798      	blx	r3
      }
      if (shut_rx) {
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d009      	beq.n	800963e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	2b00      	cmp	r3, #0
 8009630:	d005      	beq.n	800963e <lwip_netconn_do_close_internal+0x20a>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	2200      	movs	r2, #0
 8009638:	2100      	movs	r1, #0
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	4798      	blx	r3
      }
      if (shut_tx) {
 800963e:	7b7b      	ldrb	r3, [r7, #13]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d009      	beq.n	8009658 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009648:	2b00      	cmp	r3, #0
 800964a:	d005      	beq.n	8009658 <lwip_netconn_do_close_internal+0x224>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009650:	2200      	movs	r2, #0
 8009652:	2102      	movs	r1, #2
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009658:	78fb      	ldrb	r3, [r7, #3]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d002      	beq.n	8009664 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800965e:	68b8      	ldr	r0, [r7, #8]
 8009660:	f00e fdfe 	bl	8018260 <sys_sem_signal>
    }
    return ERR_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	e03c      	b.n	80096e2 <lwip_netconn_do_close_internal+0x2ae>
 8009668:	08019ecc 	.word	0x08019ecc
 800966c:	0801a1a0 	.word	0x0801a1a0
 8009670:	08019f10 	.word	0x08019f10
 8009674:	0801a1b0 	.word	0x0801a1b0
 8009678:	0801a1d0 	.word	0x0801a1d0
 800967c:	0801a1f4 	.word	0x0801a1f4
 8009680:	0801a034 	.word	0x0801a034
  }
  if (!close_finished) {
 8009684:	7d7b      	ldrb	r3, [r7, #21]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d11e      	bne.n	80096c8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	7d1b      	ldrb	r3, [r3, #20]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d106      	bne.n	80096a0 <lwip_netconn_do_close_internal+0x26c>
 8009692:	4b16      	ldr	r3, [pc, #88]	; (80096ec <lwip_netconn_do_close_internal+0x2b8>)
 8009694:	f240 4241 	movw	r2, #1089	; 0x441
 8009698:	4915      	ldr	r1, [pc, #84]	; (80096f0 <lwip_netconn_do_close_internal+0x2bc>)
 800969a:	4816      	ldr	r0, [pc, #88]	; (80096f4 <lwip_netconn_do_close_internal+0x2c0>)
 800969c:	f00e ff90 	bl	80185c0 <iprintf>
    if (shut_tx) {
 80096a0:	7b7b      	ldrb	r3, [r7, #13]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80096a6:	4914      	ldr	r1, [pc, #80]	; (80096f8 <lwip_netconn_do_close_internal+0x2c4>)
 80096a8:	6938      	ldr	r0, [r7, #16]
 80096aa:	f005 f88f 	bl	800e7cc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80096ae:	2201      	movs	r2, #1
 80096b0:	4912      	ldr	r1, [pc, #72]	; (80096fc <lwip_netconn_do_close_internal+0x2c8>)
 80096b2:	6938      	ldr	r0, [r7, #16]
 80096b4:	f005 f8e6 	bl	800e884 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80096b8:	4911      	ldr	r1, [pc, #68]	; (8009700 <lwip_netconn_do_close_internal+0x2cc>)
 80096ba:	6938      	ldr	r0, [r7, #16]
 80096bc:	f005 f8a8 	bl	800e810 <tcp_err>
    tcp_arg(tpcb, conn);
 80096c0:	6879      	ldr	r1, [r7, #4]
 80096c2:	6938      	ldr	r0, [r7, #16]
 80096c4:	f005 f84e 	bl	800e764 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80096c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d106      	bne.n	80096de <lwip_netconn_do_close_internal+0x2aa>
 80096d0:	4b06      	ldr	r3, [pc, #24]	; (80096ec <lwip_netconn_do_close_internal+0x2b8>)
 80096d2:	f240 424d 	movw	r2, #1101	; 0x44d
 80096d6:	490b      	ldr	r1, [pc, #44]	; (8009704 <lwip_netconn_do_close_internal+0x2d0>)
 80096d8:	4806      	ldr	r0, [pc, #24]	; (80096f4 <lwip_netconn_do_close_internal+0x2c0>)
 80096da:	f00e ff71 	bl	80185c0 <iprintf>
  return err;
 80096de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3718      	adds	r7, #24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	08019ecc 	.word	0x08019ecc
 80096f0:	0801a208 	.word	0x0801a208
 80096f4:	08019f10 	.word	0x08019f10
 80096f8:	08008cad 	.word	0x08008cad
 80096fc:	08008be5 	.word	0x08008be5
 8009700:	08008d55 	.word	0x08008d55
 8009704:	0801a22c 	.word	0x0801a22c

08009708 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	785b      	ldrb	r3, [r3, #1]
 800971a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800971c:	7afb      	ldrb	r3, [r7, #11]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00d      	beq.n	800973e <lwip_netconn_do_delconn+0x36>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800972c:	2b10      	cmp	r3, #16
 800972e:	d006      	beq.n	800973e <lwip_netconn_do_delconn+0x36>
 8009730:	4b60      	ldr	r3, [pc, #384]	; (80098b4 <lwip_netconn_do_delconn+0x1ac>)
 8009732:	f240 425e 	movw	r2, #1118	; 0x45e
 8009736:	4960      	ldr	r1, [pc, #384]	; (80098b8 <lwip_netconn_do_delconn+0x1b0>)
 8009738:	4860      	ldr	r0, [pc, #384]	; (80098bc <lwip_netconn_do_delconn+0x1b4>)
 800973a:	f00e ff41 	bl	80185c0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800973e:	7afb      	ldrb	r3, [r7, #11]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d005      	beq.n	8009750 <lwip_netconn_do_delconn+0x48>
 8009744:	7afb      	ldrb	r3, [r7, #11]
 8009746:	2b02      	cmp	r3, #2
 8009748:	d002      	beq.n	8009750 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800974a:	7afb      	ldrb	r3, [r7, #11]
 800974c:	2b03      	cmp	r3, #3
 800974e:	d109      	bne.n	8009764 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	2b03      	cmp	r3, #3
 8009754:	d10a      	bne.n	800976c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	7f1b      	ldrb	r3, [r3, #28]
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b00      	cmp	r3, #0
 8009762:	d103      	bne.n	800976c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	22fb      	movs	r2, #251	; 0xfb
 8009768:	711a      	strb	r2, [r3, #4]
 800976a:	e097      	b.n	800989c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800976c:	7afb      	ldrb	r3, [r7, #11]
 800976e:	2b03      	cmp	r3, #3
 8009770:	d10d      	bne.n	800978e <lwip_netconn_do_delconn+0x86>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	7f1b      	ldrb	r3, [r3, #28]
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b00      	cmp	r3, #0
 800977e:	d106      	bne.n	800978e <lwip_netconn_do_delconn+0x86>
 8009780:	4b4c      	ldr	r3, [pc, #304]	; (80098b4 <lwip_netconn_do_delconn+0x1ac>)
 8009782:	f240 427a 	movw	r2, #1146	; 0x47a
 8009786:	494e      	ldr	r1, [pc, #312]	; (80098c0 <lwip_netconn_do_delconn+0x1b8>)
 8009788:	484c      	ldr	r0, [pc, #304]	; (80098bc <lwip_netconn_do_delconn+0x1b4>)
 800978a:	f00e ff19 	bl	80185c0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4618      	mov	r0, r3
 800979a:	f7ff fdcd 	bl	8009338 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d05f      	beq.n	8009868 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097b2:	2b10      	cmp	r3, #16
 80097b4:	d00d      	beq.n	80097d2 <lwip_netconn_do_delconn+0xca>
 80097b6:	2b20      	cmp	r3, #32
 80097b8:	d151      	bne.n	800985e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f00a fa18 	bl	8013c00 <udp_remove>
          break;
 80097d0:	e046      	b.n	8009860 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d006      	beq.n	80097ea <lwip_netconn_do_delconn+0xe2>
 80097dc:	4b35      	ldr	r3, [pc, #212]	; (80098b4 <lwip_netconn_do_delconn+0x1ac>)
 80097de:	f240 4294 	movw	r2, #1172	; 0x494
 80097e2:	4938      	ldr	r1, [pc, #224]	; (80098c4 <lwip_netconn_do_delconn+0x1bc>)
 80097e4:	4835      	ldr	r0, [pc, #212]	; (80098bc <lwip_netconn_do_delconn+0x1b4>)
 80097e6:	f00e feeb 	bl	80185c0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2204      	movs	r2, #4
 80097f0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2203      	movs	r2, #3
 80097f6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2100      	movs	r1, #0
 8009806:	4618      	mov	r0, r3
 8009808:	f7ff fe14 	bl	8009434 <lwip_netconn_do_close_internal>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d04b      	beq.n	80098aa <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	785b      	ldrb	r3, [r3, #1]
 8009818:	2b04      	cmp	r3, #4
 800981a:	d006      	beq.n	800982a <lwip_netconn_do_delconn+0x122>
 800981c:	4b25      	ldr	r3, [pc, #148]	; (80098b4 <lwip_netconn_do_delconn+0x1ac>)
 800981e:	f240 429a 	movw	r2, #1178	; 0x49a
 8009822:	4929      	ldr	r1, [pc, #164]	; (80098c8 <lwip_netconn_do_delconn+0x1c0>)
 8009824:	4825      	ldr	r0, [pc, #148]	; (80098bc <lwip_netconn_do_delconn+0x1b4>)
 8009826:	f00e fecb 	bl	80185c0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800982a:	4828      	ldr	r0, [pc, #160]	; (80098cc <lwip_netconn_do_delconn+0x1c4>)
 800982c:	f00e fd89 	bl	8018342 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	330c      	adds	r3, #12
 8009836:	2100      	movs	r1, #0
 8009838:	4618      	mov	r0, r3
 800983a:	f00e fce0 	bl	80181fe <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800983e:	4823      	ldr	r0, [pc, #140]	; (80098cc <lwip_netconn_do_delconn+0x1c4>)
 8009840:	f00e fd70 	bl	8018324 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	785b      	ldrb	r3, [r3, #1]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d02d      	beq.n	80098aa <lwip_netconn_do_delconn+0x1a2>
 800984e:	4b19      	ldr	r3, [pc, #100]	; (80098b4 <lwip_netconn_do_delconn+0x1ac>)
 8009850:	f240 429e 	movw	r2, #1182	; 0x49e
 8009854:	491c      	ldr	r1, [pc, #112]	; (80098c8 <lwip_netconn_do_delconn+0x1c0>)
 8009856:	4819      	ldr	r0, [pc, #100]	; (80098bc <lwip_netconn_do_delconn+0x1b4>)
 8009858:	f00e feb2 	bl	80185c0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800985c:	e025      	b.n	80098aa <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800985e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2200      	movs	r2, #0
 8009866:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986e:	2b00      	cmp	r3, #0
 8009870:	d007      	beq.n	8009882 <lwip_netconn_do_delconn+0x17a>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	6810      	ldr	r0, [r2, #0]
 800987c:	2200      	movs	r2, #0
 800987e:	2100      	movs	r1, #0
 8009880:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009888:	2b00      	cmp	r3, #0
 800988a:	d007      	beq.n	800989c <lwip_netconn_do_delconn+0x194>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	6810      	ldr	r0, [r2, #0]
 8009896:	2200      	movs	r2, #0
 8009898:	2102      	movs	r1, #2
 800989a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	330c      	adds	r3, #12
 80098a2:	4618      	mov	r0, r3
 80098a4:	f00e fcf6 	bl	8018294 <sys_sem_valid>
 80098a8:	e000      	b.n	80098ac <lwip_netconn_do_delconn+0x1a4>
          return;
 80098aa:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	08019ecc 	.word	0x08019ecc
 80098b8:	0801a23c 	.word	0x0801a23c
 80098bc:	08019f10 	.word	0x08019f10
 80098c0:	0801a250 	.word	0x0801a250
 80098c4:	0801a270 	.word	0x0801a270
 80098c8:	0801a28c 	.word	0x0801a28c
 80098cc:	2000d9a8 	.word	0x2000d9a8

080098d0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d025      	beq.n	8009932 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098f0:	2b10      	cmp	r3, #16
 80098f2:	d00e      	beq.n	8009912 <lwip_netconn_do_bind+0x42>
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	d119      	bne.n	800992c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6858      	ldr	r0, [r3, #4]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	6899      	ldr	r1, [r3, #8]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	899b      	ldrh	r3, [r3, #12]
 8009906:	461a      	mov	r2, r3
 8009908:	f00a f864 	bl	80139d4 <udp_bind>
 800990c:	4603      	mov	r3, r0
 800990e:	73fb      	strb	r3, [r7, #15]
        break;
 8009910:	e011      	b.n	8009936 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6858      	ldr	r0, [r3, #4]
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	6899      	ldr	r1, [r3, #8]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	899b      	ldrh	r3, [r3, #12]
 8009920:	461a      	mov	r2, r3
 8009922:	f003 fe6d 	bl	800d600 <tcp_bind>
 8009926:	4603      	mov	r3, r0
 8009928:	73fb      	strb	r3, [r7, #15]
        break;
 800992a:	e004      	b.n	8009936 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800992c:	23fa      	movs	r3, #250	; 0xfa
 800992e:	73fb      	strb	r3, [r7, #15]
        break;
 8009930:	e001      	b.n	8009936 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009932:	23fa      	movs	r3, #250	; 0xfa
 8009934:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	7bfa      	ldrb	r2, [r7, #15]
 800993a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800993c:	bf00      	nop
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d07f      	beq.n	8009a5a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009964:	2b10      	cmp	r3, #16
 8009966:	d175      	bne.n	8009a54 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	785b      	ldrb	r3, [r3, #1]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d165      	bne.n	8009a3e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	7d1b      	ldrb	r3, [r3, #20]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800997e:	23fa      	movs	r3, #250	; 0xfa
 8009980:	72fb      	strb	r3, [r7, #11]
 8009982:	e06c      	b.n	8009a5e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009984:	23ff      	movs	r3, #255	; 0xff
 8009986:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f107 020b 	add.w	r2, r7, #11
 8009992:	7cf9      	ldrb	r1, [r7, #19]
 8009994:	4618      	mov	r0, r3
 8009996:	f003 fefd 	bl	800d794 <tcp_listen_with_backlog_and_err>
 800999a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d05d      	beq.n	8009a5e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3310      	adds	r3, #16
 80099a8:	4618      	mov	r0, r3
 80099aa:	f00e fbe2 	bl	8018172 <sys_mbox_valid>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00b      	beq.n	80099cc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	3310      	adds	r3, #16
 80099ba:	4618      	mov	r0, r3
 80099bc:	f00e fb52 	bl	8018064 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	3310      	adds	r3, #16
 80099c6:	4618      	mov	r0, r3
 80099c8:	f00e fbe4 	bl	8018194 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3314      	adds	r3, #20
 80099d6:	4618      	mov	r0, r3
 80099d8:	f00e fbcb 	bl	8018172 <sys_mbox_valid>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d108      	bne.n	80099f4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3314      	adds	r3, #20
 80099e8:	2106      	movs	r1, #6
 80099ea:	4618      	mov	r0, r3
 80099ec:	f00e fb18 	bl	8018020 <sys_mbox_new>
 80099f0:	4603      	mov	r3, r0
 80099f2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80099f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d118      	bne.n	8009a2e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2202      	movs	r2, #2
 8009a02:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4619      	mov	r1, r3
 8009a18:	4610      	mov	r0, r2
 8009a1a:	f004 fea3 	bl	800e764 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	4912      	ldr	r1, [pc, #72]	; (8009a70 <lwip_netconn_do_listen+0x12c>)
 8009a26:	4618      	mov	r0, r3
 8009a28:	f004 ff14 	bl	800e854 <tcp_accept>
 8009a2c:	e017      	b.n	8009a5e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f003 fc94 	bl	800d35c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	605a      	str	r2, [r3, #4]
 8009a3c:	e00f      	b.n	8009a5e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	785b      	ldrb	r3, [r3, #1]
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d102      	bne.n	8009a4e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	72fb      	strb	r3, [r7, #11]
 8009a4c:	e007      	b.n	8009a5e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009a4e:	23f5      	movs	r3, #245	; 0xf5
 8009a50:	72fb      	strb	r3, [r7, #11]
 8009a52:	e004      	b.n	8009a5e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009a54:	23f0      	movs	r3, #240	; 0xf0
 8009a56:	72fb      	strb	r3, [r7, #11]
 8009a58:	e001      	b.n	8009a5e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009a5a:	23f5      	movs	r3, #245	; 0xf5
 8009a5c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009a5e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009a66:	bf00      	nop
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	08008f51 	.word	0x08008f51

08009a74 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	2200      	movs	r2, #0
 8009a84:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d022      	beq.n	8009ad6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a9a:	2b10      	cmp	r3, #16
 8009a9c:	d11b      	bne.n	8009ad6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aaa:	d202      	bcs.n	8009ab2 <lwip_netconn_do_recv+0x3e>
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	e001      	b.n	8009ab6 <lwip_netconn_do_recv+0x42>
 8009ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ab6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	89fa      	ldrh	r2, [r7, #14]
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f003 ff6a 	bl	800d99c <tcp_recved>
        remaining -= recved;
 8009ac8:	89fb      	ldrh	r3, [r7, #14]
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1e6      	bne.n	8009aa4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009ad6:	bf00      	nop
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009aec:	2300      	movs	r3, #0
 8009aee:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d106      	bne.n	8009b04 <lwip_netconn_do_writemore+0x24>
 8009af6:	4b96      	ldr	r3, [pc, #600]	; (8009d50 <lwip_netconn_do_writemore+0x270>)
 8009af8:	f240 6273 	movw	r2, #1651	; 0x673
 8009afc:	4995      	ldr	r1, [pc, #596]	; (8009d54 <lwip_netconn_do_writemore+0x274>)
 8009afe:	4896      	ldr	r0, [pc, #600]	; (8009d58 <lwip_netconn_do_writemore+0x278>)
 8009b00:	f00e fd5e 	bl	80185c0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	785b      	ldrb	r3, [r3, #1]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d006      	beq.n	8009b1a <lwip_netconn_do_writemore+0x3a>
 8009b0c:	4b90      	ldr	r3, [pc, #576]	; (8009d50 <lwip_netconn_do_writemore+0x270>)
 8009b0e:	f240 6274 	movw	r2, #1652	; 0x674
 8009b12:	4992      	ldr	r1, [pc, #584]	; (8009d5c <lwip_netconn_do_writemore+0x27c>)
 8009b14:	4890      	ldr	r0, [pc, #576]	; (8009d58 <lwip_netconn_do_writemore+0x278>)
 8009b16:	f00e fd53 	bl	80185c0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d106      	bne.n	8009b30 <lwip_netconn_do_writemore+0x50>
 8009b22:	4b8b      	ldr	r3, [pc, #556]	; (8009d50 <lwip_netconn_do_writemore+0x270>)
 8009b24:	f240 6275 	movw	r2, #1653	; 0x675
 8009b28:	498d      	ldr	r1, [pc, #564]	; (8009d60 <lwip_netconn_do_writemore+0x280>)
 8009b2a:	488b      	ldr	r0, [pc, #556]	; (8009d58 <lwip_netconn_do_writemore+0x278>)
 8009b2c:	f00e fd48 	bl	80185c0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d106      	bne.n	8009b46 <lwip_netconn_do_writemore+0x66>
 8009b38:	4b85      	ldr	r3, [pc, #532]	; (8009d50 <lwip_netconn_do_writemore+0x270>)
 8009b3a:	f240 6276 	movw	r2, #1654	; 0x676
 8009b3e:	4989      	ldr	r1, [pc, #548]	; (8009d64 <lwip_netconn_do_writemore+0x284>)
 8009b40:	4885      	ldr	r0, [pc, #532]	; (8009d58 <lwip_netconn_do_writemore+0x278>)
 8009b42:	f00e fd3d 	bl	80185c0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	699a      	ldr	r2, [r3, #24]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d306      	bcc.n	8009b64 <lwip_netconn_do_writemore+0x84>
 8009b56:	4b7e      	ldr	r3, [pc, #504]	; (8009d50 <lwip_netconn_do_writemore+0x270>)
 8009b58:	f240 6277 	movw	r2, #1655	; 0x677
 8009b5c:	4982      	ldr	r1, [pc, #520]	; (8009d68 <lwip_netconn_do_writemore+0x288>)
 8009b5e:	487e      	ldr	r0, [pc, #504]	; (8009d58 <lwip_netconn_do_writemore+0x278>)
 8009b60:	f00e fd2e 	bl	80185c0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a1b      	ldr	r3, [r3, #32]
 8009b68:	899b      	ldrh	r3, [r3, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d106      	bne.n	8009b7c <lwip_netconn_do_writemore+0x9c>
 8009b6e:	4b78      	ldr	r3, [pc, #480]	; (8009d50 <lwip_netconn_do_writemore+0x270>)
 8009b70:	f240 6279 	movw	r2, #1657	; 0x679
 8009b74:	497d      	ldr	r1, [pc, #500]	; (8009d6c <lwip_netconn_do_writemore+0x28c>)
 8009b76:	4878      	ldr	r0, [pc, #480]	; (8009d58 <lwip_netconn_do_writemore+0x278>)
 8009b78:	f00e fd22 	bl	80185c0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a1b      	ldr	r3, [r3, #32]
 8009b80:	7f1b      	ldrb	r3, [r3, #28]
 8009b82:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	7f1b      	ldrb	r3, [r3, #28]
 8009b88:	f003 0302 	and.w	r3, r3, #2
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d104      	bne.n	8009b9a <lwip_netconn_do_writemore+0xba>
 8009b90:	7ebb      	ldrb	r3, [r7, #26]
 8009b92:	f003 0304 	and.w	r3, r3, #4
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <lwip_netconn_do_writemore+0xbe>
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e000      	b.n	8009ba0 <lwip_netconn_do_writemore+0xc0>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a1b      	ldr	r3, [r3, #32]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bcc:	d307      	bcc.n	8009bde <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009bce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009bd2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009bd4:	7ebb      	ldrb	r3, [r7, #26]
 8009bd6:	f043 0302 	orr.w	r3, r3, #2
 8009bda:	76bb      	strb	r3, [r7, #26]
 8009bdc:	e001      	b.n	8009be2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009bea:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009bec:	89fa      	ldrh	r2, [r7, #14]
 8009bee:	8bbb      	ldrh	r3, [r7, #28]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d216      	bcs.n	8009c22 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009bf4:	89fb      	ldrh	r3, [r7, #14]
 8009bf6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009bf8:	7e3b      	ldrb	r3, [r7, #24]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00d      	beq.n	8009c1a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009bfe:	8bbb      	ldrh	r3, [r7, #28]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10e      	bne.n	8009c22 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a1b      	ldr	r3, [r3, #32]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d102      	bne.n	8009c14 <lwip_netconn_do_writemore+0x134>
 8009c0e:	f06f 0306 	mvn.w	r3, #6
 8009c12:	e000      	b.n	8009c16 <lwip_netconn_do_writemore+0x136>
 8009c14:	2300      	movs	r3, #0
 8009c16:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009c18:	e07d      	b.n	8009d16 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009c1a:	7ebb      	ldrb	r3, [r7, #26]
 8009c1c:	f043 0302 	orr.w	r3, r3, #2
 8009c20:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	691a      	ldr	r2, [r3, #16]
 8009c28:	8bbb      	ldrh	r3, [r7, #28]
 8009c2a:	441a      	add	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a1b      	ldr	r3, [r3, #32]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d906      	bls.n	8009c46 <lwip_netconn_do_writemore+0x166>
 8009c38:	4b45      	ldr	r3, [pc, #276]	; (8009d50 <lwip_netconn_do_writemore+0x270>)
 8009c3a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8009c3e:	494c      	ldr	r1, [pc, #304]	; (8009d70 <lwip_netconn_do_writemore+0x290>)
 8009c40:	4845      	ldr	r0, [pc, #276]	; (8009d58 <lwip_netconn_do_writemore+0x278>)
 8009c42:	f00e fcbd 	bl	80185c0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009c46:	8bbb      	ldrh	r3, [r7, #28]
 8009c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d103      	bne.n	8009c58 <lwip_netconn_do_writemore+0x178>
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c56:	d209      	bcs.n	8009c6c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009c5c:	8bba      	ldrh	r2, [r7, #28]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d10b      	bne.n	8009c7a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	899b      	ldrh	r3, [r3, #12]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d906      	bls.n	8009c7a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009c70:	7ebb      	ldrb	r3, [r7, #26]
 8009c72:	f043 0302 	orr.w	r3, r3, #2
 8009c76:	76bb      	strb	r3, [r7, #26]
 8009c78:	e001      	b.n	8009c7e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6858      	ldr	r0, [r3, #4]
 8009c82:	7ebb      	ldrb	r3, [r7, #26]
 8009c84:	8bba      	ldrh	r2, [r7, #28]
 8009c86:	6979      	ldr	r1, [r7, #20]
 8009c88:	f007 fcae 	bl	80115e8 <tcp_write>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009c90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d12c      	bne.n	8009cf2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a1b      	ldr	r3, [r3, #32]
 8009c9c:	6999      	ldr	r1, [r3, #24]
 8009c9e:	8bba      	ldrh	r2, [r7, #28]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a1b      	ldr	r3, [r3, #32]
 8009ca4:	440a      	add	r2, r1
 8009ca6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a1b      	ldr	r3, [r3, #32]
 8009cac:	6919      	ldr	r1, [r3, #16]
 8009cae:	8bba      	ldrh	r2, [r7, #28]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
 8009cb4:	440a      	add	r2, r1
 8009cb6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a1b      	ldr	r3, [r3, #32]
 8009cbc:	691a      	ldr	r2, [r3, #16]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d113      	bne.n	8009cf2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	899a      	ldrh	r2, [r3, #12]
 8009cd0:	3a01      	subs	r2, #1
 8009cd2:	b292      	uxth	r2, r2
 8009cd4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	899b      	ldrh	r3, [r3, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d008      	beq.n	8009cf2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	689a      	ldr	r2, [r3, #8]
 8009ce6:	3208      	adds	r2, #8
 8009ce8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009cf2:	7e7b      	ldrb	r3, [r7, #25]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d004      	beq.n	8009d02 <lwip_netconn_do_writemore+0x222>
 8009cf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f43f af50 	beq.w	8009ba2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009d02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d004      	beq.n	8009d14 <lwip_netconn_do_writemore+0x234>
 8009d0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d12:	d146      	bne.n	8009da2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009d14:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009d16:	7e3b      	ldrb	r3, [r7, #24]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d02b      	beq.n	8009d74 <lwip_netconn_do_writemore+0x294>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	699a      	ldr	r2, [r3, #24]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	695b      	ldr	r3, [r3, #20]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d223      	bcs.n	8009d74 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d005      	beq.n	8009d40 <lwip_netconn_do_writemore+0x260>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2103      	movs	r1, #3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	7f1b      	ldrb	r3, [r3, #28]
 8009d44:	f043 0310 	orr.w	r3, r3, #16
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	771a      	strb	r2, [r3, #28]
 8009d4e:	e028      	b.n	8009da2 <lwip_netconn_do_writemore+0x2c2>
 8009d50:	08019ecc 	.word	0x08019ecc
 8009d54:	0801a024 	.word	0x0801a024
 8009d58:	08019f10 	.word	0x08019f10
 8009d5c:	0801a32c 	.word	0x0801a32c
 8009d60:	0801a034 	.word	0x0801a034
 8009d64:	0801a34c 	.word	0x0801a34c
 8009d68:	0801a364 	.word	0x0801a364
 8009d6c:	0801a3a4 	.word	0x0801a3a4
 8009d70:	0801a3cc 	.word	0x0801a3cc
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d7c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009d80:	d305      	bcc.n	8009d8e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009d8a:	2b04      	cmp	r3, #4
 8009d8c:	d909      	bls.n	8009da2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d005      	beq.n	8009da2 <lwip_netconn_do_writemore+0x2c2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2103      	movs	r1, #3
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009da2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d11d      	bne.n	8009de6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	699a      	ldr	r2, [r3, #24]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a1b      	ldr	r3, [r3, #32]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d002      	beq.n	8009dc0 <lwip_netconn_do_writemore+0x2e0>
 8009dba:	7e3b      	ldrb	r3, [r7, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f008 f9f7 	bl	80121bc <tcp_output>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009dd2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009dd6:	f113 0f04 	cmn.w	r3, #4
 8009dda:	d12c      	bne.n	8009e36 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009ddc:	7b3b      	ldrb	r3, [r7, #12]
 8009dde:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009de0:	2301      	movs	r3, #1
 8009de2:	76fb      	strb	r3, [r7, #27]
 8009de4:	e027      	b.n	8009e36 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009de6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dee:	d120      	bne.n	8009e32 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f008 f9e1 	bl	80121bc <tcp_output>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009dfe:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009e02:	f113 0f04 	cmn.w	r3, #4
 8009e06:	d104      	bne.n	8009e12 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009e08:	7b7b      	ldrb	r3, [r7, #13]
 8009e0a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	76fb      	strb	r3, [r7, #27]
 8009e10:	e011      	b.n	8009e36 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009e12:	7e3b      	ldrb	r3, [r7, #24]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00e      	beq.n	8009e36 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a1b      	ldr	r3, [r3, #32]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d102      	bne.n	8009e28 <lwip_netconn_do_writemore+0x348>
 8009e22:	f06f 0306 	mvn.w	r3, #6
 8009e26:	e000      	b.n	8009e2a <lwip_netconn_do_writemore+0x34a>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	76fb      	strb	r3, [r7, #27]
 8009e30:	e001      	b.n	8009e36 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009e32:	2301      	movs	r3, #1
 8009e34:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009e36:	7efb      	ldrb	r3, [r7, #27]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d015      	beq.n	8009e68 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	330c      	adds	r3, #12
 8009e44:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	7ffa      	ldrb	r2, [r7, #31]
 8009e4c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009e5a:	78fb      	ldrb	r3, [r7, #3]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d006      	beq.n	8009e6e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009e60:	68b8      	ldr	r0, [r7, #8]
 8009e62:	f00e f9fd 	bl	8018260 <sys_sem_signal>
 8009e66:	e002      	b.n	8009e6e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009e68:	f04f 33ff 	mov.w	r3, #4294967295
 8009e6c:	e000      	b.n	8009e70 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3720      	adds	r7, #32
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fe fd1c 	bl	80088c6 <netconn_err>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d166      	bne.n	8009f68 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ea4:	2b10      	cmp	r3, #16
 8009ea6:	d15d      	bne.n	8009f64 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	785b      	ldrb	r3, [r3, #1]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d002      	beq.n	8009eb8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009eb2:	23fb      	movs	r3, #251	; 0xfb
 8009eb4:	73fb      	strb	r3, [r7, #15]
 8009eb6:	e057      	b.n	8009f68 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d04d      	beq.n	8009f5e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6a1b      	ldr	r3, [r3, #32]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d006      	beq.n	8009ee2 <lwip_netconn_do_write+0x6a>
 8009ed4:	4b28      	ldr	r3, [pc, #160]	; (8009f78 <lwip_netconn_do_write+0x100>)
 8009ed6:	f240 7223 	movw	r2, #1827	; 0x723
 8009eda:	4928      	ldr	r1, [pc, #160]	; (8009f7c <lwip_netconn_do_write+0x104>)
 8009edc:	4828      	ldr	r0, [pc, #160]	; (8009f80 <lwip_netconn_do_write+0x108>)
 8009ede:	f00e fb6f 	bl	80185c0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d106      	bne.n	8009ef8 <lwip_netconn_do_write+0x80>
 8009eea:	4b23      	ldr	r3, [pc, #140]	; (8009f78 <lwip_netconn_do_write+0x100>)
 8009eec:	f240 7224 	movw	r2, #1828	; 0x724
 8009ef0:	4924      	ldr	r1, [pc, #144]	; (8009f84 <lwip_netconn_do_write+0x10c>)
 8009ef2:	4823      	ldr	r0, [pc, #140]	; (8009f80 <lwip_netconn_do_write+0x108>)
 8009ef4:	f00e fb64 	bl	80185c0 <iprintf>
        msg->conn->current_msg = msg;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2100      	movs	r1, #0
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff fdea 	bl	8009ae0 <lwip_netconn_do_writemore>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d02e      	beq.n	8009f70 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	785b      	ldrb	r3, [r3, #1]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d006      	beq.n	8009f2a <lwip_netconn_do_write+0xb2>
 8009f1c:	4b16      	ldr	r3, [pc, #88]	; (8009f78 <lwip_netconn_do_write+0x100>)
 8009f1e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009f22:	4919      	ldr	r1, [pc, #100]	; (8009f88 <lwip_netconn_do_write+0x110>)
 8009f24:	4816      	ldr	r0, [pc, #88]	; (8009f80 <lwip_netconn_do_write+0x108>)
 8009f26:	f00e fb4b 	bl	80185c0 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009f2a:	4818      	ldr	r0, [pc, #96]	; (8009f8c <lwip_netconn_do_write+0x114>)
 8009f2c:	f00e fa09 	bl	8018342 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	330c      	adds	r3, #12
 8009f36:	2100      	movs	r1, #0
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f00e f960 	bl	80181fe <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009f3e:	4813      	ldr	r0, [pc, #76]	; (8009f8c <lwip_netconn_do_write+0x114>)
 8009f40:	f00e f9f0 	bl	8018324 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	785b      	ldrb	r3, [r3, #1]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d110      	bne.n	8009f70 <lwip_netconn_do_write+0xf8>
 8009f4e:	4b0a      	ldr	r3, [pc, #40]	; (8009f78 <lwip_netconn_do_write+0x100>)
 8009f50:	f240 722c 	movw	r2, #1836	; 0x72c
 8009f54:	490c      	ldr	r1, [pc, #48]	; (8009f88 <lwip_netconn_do_write+0x110>)
 8009f56:	480a      	ldr	r0, [pc, #40]	; (8009f80 <lwip_netconn_do_write+0x108>)
 8009f58:	f00e fb32 	bl	80185c0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009f5c:	e008      	b.n	8009f70 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009f5e:	23f5      	movs	r3, #245	; 0xf5
 8009f60:	73fb      	strb	r3, [r7, #15]
 8009f62:	e001      	b.n	8009f68 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009f64:	23fa      	movs	r3, #250	; 0xfa
 8009f66:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	7bfa      	ldrb	r2, [r7, #15]
 8009f6c:	711a      	strb	r2, [r3, #4]
 8009f6e:	e000      	b.n	8009f72 <lwip_netconn_do_write+0xfa>
        return;
 8009f70:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	08019ecc 	.word	0x08019ecc
 8009f7c:	0801a270 	.word	0x0801a270
 8009f80:	08019f10 	.word	0x08019f10
 8009f84:	0801a3f8 	.word	0x0801a3f8
 8009f88:	0801a28c 	.word	0x0801a28c
 8009f8c:	2000d9a8 	.word	0x2000d9a8

08009f90 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d069      	beq.n	800a082 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009fb8:	2b10      	cmp	r3, #16
 8009fba:	d162      	bne.n	800a082 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009fc0:	2b03      	cmp	r3, #3
 8009fc2:	d002      	beq.n	8009fca <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009fc4:	7afb      	ldrb	r3, [r7, #11]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d05b      	beq.n	800a082 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009fca:	7afb      	ldrb	r3, [r7, #11]
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	d103      	bne.n	8009fd8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	22f5      	movs	r2, #245	; 0xf5
 8009fd4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009fd6:	e059      	b.n	800a08c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009fd8:	7afb      	ldrb	r3, [r7, #11]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d103      	bne.n	8009fe6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	22fb      	movs	r2, #251	; 0xfb
 8009fe2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009fe4:	e052      	b.n	800a08c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	7a1b      	ldrb	r3, [r3, #8]
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d004      	beq.n	8009ffc <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7ff f99e 	bl	8009338 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d006      	beq.n	800a014 <lwip_netconn_do_close+0x84>
 800a006:	4b23      	ldr	r3, [pc, #140]	; (800a094 <lwip_netconn_do_close+0x104>)
 800a008:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a00c:	4922      	ldr	r1, [pc, #136]	; (800a098 <lwip_netconn_do_close+0x108>)
 800a00e:	4823      	ldr	r0, [pc, #140]	; (800a09c <lwip_netconn_do_close+0x10c>)
 800a010:	f00e fad6 	bl	80185c0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2204      	movs	r2, #4
 800a01a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2100      	movs	r1, #0
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7ff fa02 	bl	8009434 <lwip_netconn_do_close_internal>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d029      	beq.n	800a08a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	785b      	ldrb	r3, [r3, #1]
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	d006      	beq.n	800a04e <lwip_netconn_do_close+0xbe>
 800a040:	4b14      	ldr	r3, [pc, #80]	; (800a094 <lwip_netconn_do_close+0x104>)
 800a042:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a046:	4916      	ldr	r1, [pc, #88]	; (800a0a0 <lwip_netconn_do_close+0x110>)
 800a048:	4814      	ldr	r0, [pc, #80]	; (800a09c <lwip_netconn_do_close+0x10c>)
 800a04a:	f00e fab9 	bl	80185c0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a04e:	4815      	ldr	r0, [pc, #84]	; (800a0a4 <lwip_netconn_do_close+0x114>)
 800a050:	f00e f977 	bl	8018342 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	330c      	adds	r3, #12
 800a05a:	2100      	movs	r1, #0
 800a05c:	4618      	mov	r0, r3
 800a05e:	f00e f8ce 	bl	80181fe <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a062:	4810      	ldr	r0, [pc, #64]	; (800a0a4 <lwip_netconn_do_close+0x114>)
 800a064:	f00e f95e 	bl	8018324 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	785b      	ldrb	r3, [r3, #1]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00b      	beq.n	800a08a <lwip_netconn_do_close+0xfa>
 800a072:	4b08      	ldr	r3, [pc, #32]	; (800a094 <lwip_netconn_do_close+0x104>)
 800a074:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a078:	4909      	ldr	r1, [pc, #36]	; (800a0a0 <lwip_netconn_do_close+0x110>)
 800a07a:	4808      	ldr	r0, [pc, #32]	; (800a09c <lwip_netconn_do_close+0x10c>)
 800a07c:	f00e faa0 	bl	80185c0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a080:	e003      	b.n	800a08a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	22f5      	movs	r2, #245	; 0xf5
 800a086:	711a      	strb	r2, [r3, #4]
 800a088:	e000      	b.n	800a08c <lwip_netconn_do_close+0xfc>
      return;
 800a08a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	08019ecc 	.word	0x08019ecc
 800a098:	0801a270 	.word	0x0801a270
 800a09c:	08019f10 	.word	0x08019f10
 800a0a0:	0801a28c 	.word	0x0801a28c
 800a0a4:	2000d9a8 	.word	0x2000d9a8

0800a0a8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d013      	beq.n	800a0de <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00b      	beq.n	800a0d6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f002 fc90 	bl	800c9e8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	605a      	str	r2, [r3, #4]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685a      	ldr	r2, [r3, #4]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a0d6:	6879      	ldr	r1, [r7, #4]
 800a0d8:	2006      	movs	r0, #6
 800a0da:	f001 fdd5 	bl	800bc88 <memp_free>
  }
}
 800a0de:	bf00      	nop
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d108      	bne.n	800a10c <netbuf_data+0x24>
 800a0fa:	4b1b      	ldr	r3, [pc, #108]	; (800a168 <netbuf_data+0x80>)
 800a0fc:	22c6      	movs	r2, #198	; 0xc6
 800a0fe:	491b      	ldr	r1, [pc, #108]	; (800a16c <netbuf_data+0x84>)
 800a100:	481b      	ldr	r0, [pc, #108]	; (800a170 <netbuf_data+0x88>)
 800a102:	f00e fa5d 	bl	80185c0 <iprintf>
 800a106:	f06f 030f 	mvn.w	r3, #15
 800a10a:	e029      	b.n	800a160 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d108      	bne.n	800a124 <netbuf_data+0x3c>
 800a112:	4b15      	ldr	r3, [pc, #84]	; (800a168 <netbuf_data+0x80>)
 800a114:	22c7      	movs	r2, #199	; 0xc7
 800a116:	4917      	ldr	r1, [pc, #92]	; (800a174 <netbuf_data+0x8c>)
 800a118:	4815      	ldr	r0, [pc, #84]	; (800a170 <netbuf_data+0x88>)
 800a11a:	f00e fa51 	bl	80185c0 <iprintf>
 800a11e:	f06f 030f 	mvn.w	r3, #15
 800a122:	e01d      	b.n	800a160 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d108      	bne.n	800a13c <netbuf_data+0x54>
 800a12a:	4b0f      	ldr	r3, [pc, #60]	; (800a168 <netbuf_data+0x80>)
 800a12c:	22c8      	movs	r2, #200	; 0xc8
 800a12e:	4912      	ldr	r1, [pc, #72]	; (800a178 <netbuf_data+0x90>)
 800a130:	480f      	ldr	r0, [pc, #60]	; (800a170 <netbuf_data+0x88>)
 800a132:	f00e fa45 	bl	80185c0 <iprintf>
 800a136:	f06f 030f 	mvn.w	r3, #15
 800a13a:	e011      	b.n	800a160 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d102      	bne.n	800a14a <netbuf_data+0x62>
    return ERR_BUF;
 800a144:	f06f 0301 	mvn.w	r3, #1
 800a148:	e00a      	b.n	800a160 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	895a      	ldrh	r2, [r3, #10]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	0801a424 	.word	0x0801a424
 800a16c:	0801a52c 	.word	0x0801a52c
 800a170:	0801a474 	.word	0x0801a474
 800a174:	0801a548 	.word	0x0801a548
 800a178:	0801a568 	.word	0x0801a568

0800a17c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d108      	bne.n	800a19c <netbuf_next+0x20>
 800a18a:	4b11      	ldr	r3, [pc, #68]	; (800a1d0 <netbuf_next+0x54>)
 800a18c:	22e0      	movs	r2, #224	; 0xe0
 800a18e:	4911      	ldr	r1, [pc, #68]	; (800a1d4 <netbuf_next+0x58>)
 800a190:	4811      	ldr	r0, [pc, #68]	; (800a1d8 <netbuf_next+0x5c>)
 800a192:	f00e fa15 	bl	80185c0 <iprintf>
 800a196:	f04f 33ff 	mov.w	r3, #4294967295
 800a19a:	e014      	b.n	800a1c6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d102      	bne.n	800a1ac <netbuf_next+0x30>
    return -1;
 800a1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1aa:	e00c      	b.n	800a1c6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <netbuf_next+0x48>
    return 1;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e000      	b.n	800a1c6 <netbuf_next+0x4a>
  }
  return 0;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	0801a424 	.word	0x0801a424
 800a1d4:	0801a584 	.word	0x0801a584
 800a1d8:	0801a474 	.word	0x0801a474

0800a1dc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a1e6:	f009 f8a1 	bl	801332c <sys_timeouts_sleeptime>
 800a1ea:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f2:	d10b      	bne.n	800a20c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a1f4:	4813      	ldr	r0, [pc, #76]	; (800a244 <tcpip_timeouts_mbox_fetch+0x68>)
 800a1f6:	f00e f8a4 	bl	8018342 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f00d ff5c 	bl	80180bc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a204:	480f      	ldr	r0, [pc, #60]	; (800a244 <tcpip_timeouts_mbox_fetch+0x68>)
 800a206:	f00e f88d 	bl	8018324 <sys_mutex_lock>
    return;
 800a20a:	e018      	b.n	800a23e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d102      	bne.n	800a218 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a212:	f009 f851 	bl	80132b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a216:	e7e6      	b.n	800a1e6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a218:	480a      	ldr	r0, [pc, #40]	; (800a244 <tcpip_timeouts_mbox_fetch+0x68>)
 800a21a:	f00e f892 	bl	8018342 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f00d ff4a 	bl	80180bc <sys_arch_mbox_fetch>
 800a228:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a22a:	4806      	ldr	r0, [pc, #24]	; (800a244 <tcpip_timeouts_mbox_fetch+0x68>)
 800a22c:	f00e f87a 	bl	8018324 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a236:	d102      	bne.n	800a23e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a238:	f009 f83e 	bl	80132b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a23c:	e7d3      	b.n	800a1e6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	2000d9a8 	.word	0x2000d9a8

0800a248 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a250:	4810      	ldr	r0, [pc, #64]	; (800a294 <tcpip_thread+0x4c>)
 800a252:	f00e f867 	bl	8018324 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a256:	4b10      	ldr	r3, [pc, #64]	; (800a298 <tcpip_thread+0x50>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d005      	beq.n	800a26a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a25e:	4b0e      	ldr	r3, [pc, #56]	; (800a298 <tcpip_thread+0x50>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a0e      	ldr	r2, [pc, #56]	; (800a29c <tcpip_thread+0x54>)
 800a264:	6812      	ldr	r2, [r2, #0]
 800a266:	4610      	mov	r0, r2
 800a268:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a26a:	f107 030c 	add.w	r3, r7, #12
 800a26e:	4619      	mov	r1, r3
 800a270:	480b      	ldr	r0, [pc, #44]	; (800a2a0 <tcpip_thread+0x58>)
 800a272:	f7ff ffb3 	bl	800a1dc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d106      	bne.n	800a28a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a27c:	4b09      	ldr	r3, [pc, #36]	; (800a2a4 <tcpip_thread+0x5c>)
 800a27e:	2291      	movs	r2, #145	; 0x91
 800a280:	4909      	ldr	r1, [pc, #36]	; (800a2a8 <tcpip_thread+0x60>)
 800a282:	480a      	ldr	r0, [pc, #40]	; (800a2ac <tcpip_thread+0x64>)
 800a284:	f00e f99c 	bl	80185c0 <iprintf>
      continue;
 800a288:	e003      	b.n	800a292 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f000 f80f 	bl	800a2b0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a292:	e7ea      	b.n	800a26a <tcpip_thread+0x22>
 800a294:	2000d9a8 	.word	0x2000d9a8
 800a298:	2000d99c 	.word	0x2000d99c
 800a29c:	2000d9a0 	.word	0x2000d9a0
 800a2a0:	2000d9a4 	.word	0x2000d9a4
 800a2a4:	0801a5bc 	.word	0x0801a5bc
 800a2a8:	0801a5ec 	.word	0x0801a5ec
 800a2ac:	0801a60c 	.word	0x0801a60c

0800a2b0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d026      	beq.n	800a30e <tcpip_thread_handle_msg+0x5e>
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	dc2b      	bgt.n	800a31c <tcpip_thread_handle_msg+0x6c>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <tcpip_thread_handle_msg+0x1e>
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d015      	beq.n	800a2f8 <tcpip_thread_handle_msg+0x48>
 800a2cc:	e026      	b.n	800a31c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	6850      	ldr	r0, [r2, #4]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	6892      	ldr	r2, [r2, #8]
 800a2da:	4611      	mov	r1, r2
 800a2dc:	4798      	blx	r3
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d004      	beq.n	800a2ee <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f002 fb7d 	bl	800c9e8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	2009      	movs	r0, #9
 800a2f2:	f001 fcc9 	bl	800bc88 <memp_free>
      break;
 800a2f6:	e018      	b.n	800a32a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	6892      	ldr	r2, [r2, #8]
 800a300:	4610      	mov	r0, r2
 800a302:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a304:	6879      	ldr	r1, [r7, #4]
 800a306:	2008      	movs	r0, #8
 800a308:	f001 fcbe 	bl	800bc88 <memp_free>
      break;
 800a30c:	e00d      	b.n	800a32a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	6892      	ldr	r2, [r2, #8]
 800a316:	4610      	mov	r0, r2
 800a318:	4798      	blx	r3
      break;
 800a31a:	e006      	b.n	800a32a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a31c:	4b05      	ldr	r3, [pc, #20]	; (800a334 <tcpip_thread_handle_msg+0x84>)
 800a31e:	22cf      	movs	r2, #207	; 0xcf
 800a320:	4905      	ldr	r1, [pc, #20]	; (800a338 <tcpip_thread_handle_msg+0x88>)
 800a322:	4806      	ldr	r0, [pc, #24]	; (800a33c <tcpip_thread_handle_msg+0x8c>)
 800a324:	f00e f94c 	bl	80185c0 <iprintf>
      break;
 800a328:	bf00      	nop
  }
}
 800a32a:	bf00      	nop
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	0801a5bc 	.word	0x0801a5bc
 800a338:	0801a5ec 	.word	0x0801a5ec
 800a33c:	0801a60c 	.word	0x0801a60c

0800a340 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a34c:	481a      	ldr	r0, [pc, #104]	; (800a3b8 <tcpip_inpkt+0x78>)
 800a34e:	f00d ff10 	bl	8018172 <sys_mbox_valid>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d105      	bne.n	800a364 <tcpip_inpkt+0x24>
 800a358:	4b18      	ldr	r3, [pc, #96]	; (800a3bc <tcpip_inpkt+0x7c>)
 800a35a:	22fc      	movs	r2, #252	; 0xfc
 800a35c:	4918      	ldr	r1, [pc, #96]	; (800a3c0 <tcpip_inpkt+0x80>)
 800a35e:	4819      	ldr	r0, [pc, #100]	; (800a3c4 <tcpip_inpkt+0x84>)
 800a360:	f00e f92e 	bl	80185c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a364:	2009      	movs	r0, #9
 800a366:	f001 fc19 	bl	800bb9c <memp_malloc>
 800a36a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d102      	bne.n	800a378 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a372:	f04f 33ff 	mov.w	r3, #4294967295
 800a376:	e01a      	b.n	800a3ae <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2200      	movs	r2, #0
 800a37c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a390:	6979      	ldr	r1, [r7, #20]
 800a392:	4809      	ldr	r0, [pc, #36]	; (800a3b8 <tcpip_inpkt+0x78>)
 800a394:	f00d fe78 	bl	8018088 <sys_mbox_trypost>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d006      	beq.n	800a3ac <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a39e:	6979      	ldr	r1, [r7, #20]
 800a3a0:	2009      	movs	r0, #9
 800a3a2:	f001 fc71 	bl	800bc88 <memp_free>
    return ERR_MEM;
 800a3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3aa:	e000      	b.n	800a3ae <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a3ac:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3718      	adds	r7, #24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	2000d9a4 	.word	0x2000d9a4
 800a3bc:	0801a5bc 	.word	0x0801a5bc
 800a3c0:	0801a634 	.word	0x0801a634
 800a3c4:	0801a60c 	.word	0x0801a60c

0800a3c8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a3d8:	f003 0318 	and.w	r3, r3, #24
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d006      	beq.n	800a3ee <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a3e0:	4a08      	ldr	r2, [pc, #32]	; (800a404 <tcpip_input+0x3c>)
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff ffab 	bl	800a340 <tcpip_inpkt>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	e005      	b.n	800a3fa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a3ee:	4a06      	ldr	r2, [pc, #24]	; (800a408 <tcpip_input+0x40>)
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff ffa4 	bl	800a340 <tcpip_inpkt>
 800a3f8:	4603      	mov	r3, r0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	08017e75 	.word	0x08017e75
 800a408:	08016d41 	.word	0x08016d41

0800a40c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a416:	4819      	ldr	r0, [pc, #100]	; (800a47c <tcpip_try_callback+0x70>)
 800a418:	f00d feab 	bl	8018172 <sys_mbox_valid>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d106      	bne.n	800a430 <tcpip_try_callback+0x24>
 800a422:	4b17      	ldr	r3, [pc, #92]	; (800a480 <tcpip_try_callback+0x74>)
 800a424:	f240 125d 	movw	r2, #349	; 0x15d
 800a428:	4916      	ldr	r1, [pc, #88]	; (800a484 <tcpip_try_callback+0x78>)
 800a42a:	4817      	ldr	r0, [pc, #92]	; (800a488 <tcpip_try_callback+0x7c>)
 800a42c:	f00e f8c8 	bl	80185c0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a430:	2008      	movs	r0, #8
 800a432:	f001 fbb3 	bl	800bb9c <memp_malloc>
 800a436:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d102      	bne.n	800a444 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a43e:	f04f 33ff 	mov.w	r3, #4294967295
 800a442:	e017      	b.n	800a474 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2201      	movs	r2, #1
 800a448:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a456:	68f9      	ldr	r1, [r7, #12]
 800a458:	4808      	ldr	r0, [pc, #32]	; (800a47c <tcpip_try_callback+0x70>)
 800a45a:	f00d fe15 	bl	8018088 <sys_mbox_trypost>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d006      	beq.n	800a472 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a464:	68f9      	ldr	r1, [r7, #12]
 800a466:	2008      	movs	r0, #8
 800a468:	f001 fc0e 	bl	800bc88 <memp_free>
    return ERR_MEM;
 800a46c:	f04f 33ff 	mov.w	r3, #4294967295
 800a470:	e000      	b.n	800a474 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	2000d9a4 	.word	0x2000d9a4
 800a480:	0801a5bc 	.word	0x0801a5bc
 800a484:	0801a634 	.word	0x0801a634
 800a488:	0801a60c 	.word	0x0801a60c

0800a48c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a498:	4806      	ldr	r0, [pc, #24]	; (800a4b4 <tcpip_send_msg_wait_sem+0x28>)
 800a49a:	f00d ff43 	bl	8018324 <sys_mutex_lock>
  fn(apimsg);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	68b8      	ldr	r0, [r7, #8]
 800a4a2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a4a4:	4803      	ldr	r0, [pc, #12]	; (800a4b4 <tcpip_send_msg_wait_sem+0x28>)
 800a4a6:	f00d ff4c 	bl	8018342 <sys_mutex_unlock>
  return ERR_OK;
 800a4aa:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	2000d9a8 	.word	0x2000d9a8

0800a4b8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af02      	add	r7, sp, #8
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a4c2:	f000 fec1 	bl	800b248 <lwip_init>

  tcpip_init_done = initfunc;
 800a4c6:	4a17      	ldr	r2, [pc, #92]	; (800a524 <tcpip_init+0x6c>)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a4cc:	4a16      	ldr	r2, [pc, #88]	; (800a528 <tcpip_init+0x70>)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a4d2:	2106      	movs	r1, #6
 800a4d4:	4815      	ldr	r0, [pc, #84]	; (800a52c <tcpip_init+0x74>)
 800a4d6:	f00d fda3 	bl	8018020 <sys_mbox_new>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d006      	beq.n	800a4ee <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a4e0:	4b13      	ldr	r3, [pc, #76]	; (800a530 <tcpip_init+0x78>)
 800a4e2:	f240 2261 	movw	r2, #609	; 0x261
 800a4e6:	4913      	ldr	r1, [pc, #76]	; (800a534 <tcpip_init+0x7c>)
 800a4e8:	4813      	ldr	r0, [pc, #76]	; (800a538 <tcpip_init+0x80>)
 800a4ea:	f00e f869 	bl	80185c0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a4ee:	4813      	ldr	r0, [pc, #76]	; (800a53c <tcpip_init+0x84>)
 800a4f0:	f00d fefc 	bl	80182ec <sys_mutex_new>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d006      	beq.n	800a508 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a4fa:	4b0d      	ldr	r3, [pc, #52]	; (800a530 <tcpip_init+0x78>)
 800a4fc:	f240 2265 	movw	r2, #613	; 0x265
 800a500:	490f      	ldr	r1, [pc, #60]	; (800a540 <tcpip_init+0x88>)
 800a502:	480d      	ldr	r0, [pc, #52]	; (800a538 <tcpip_init+0x80>)
 800a504:	f00e f85c 	bl	80185c0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a508:	2300      	movs	r3, #0
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a510:	2200      	movs	r2, #0
 800a512:	490c      	ldr	r1, [pc, #48]	; (800a544 <tcpip_init+0x8c>)
 800a514:	480c      	ldr	r0, [pc, #48]	; (800a548 <tcpip_init+0x90>)
 800a516:	f00d ff21 	bl	801835c <sys_thread_new>
}
 800a51a:	bf00      	nop
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	2000d99c 	.word	0x2000d99c
 800a528:	2000d9a0 	.word	0x2000d9a0
 800a52c:	2000d9a4 	.word	0x2000d9a4
 800a530:	0801a5bc 	.word	0x0801a5bc
 800a534:	0801a644 	.word	0x0801a644
 800a538:	0801a60c 	.word	0x0801a60c
 800a53c:	2000d9a8 	.word	0x2000d9a8
 800a540:	0801a668 	.word	0x0801a668
 800a544:	0800a249 	.word	0x0800a249
 800a548:	0801a68c 	.word	0x0801a68c

0800a54c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d002      	beq.n	800a562 <fs_open+0x16>
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d102      	bne.n	800a568 <fs_open+0x1c>
    return ERR_ARG;
 800a562:	f06f 030f 	mvn.w	r3, #15
 800a566:	e028      	b.n	800a5ba <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a568:	4b16      	ldr	r3, [pc, #88]	; (800a5c4 <fs_open+0x78>)
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	e020      	b.n	800a5b0 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	4619      	mov	r1, r3
 800a574:	6838      	ldr	r0, [r7, #0]
 800a576:	f7f5 fe3b 	bl	80001f0 <strcmp>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d114      	bne.n	800a5aa <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	689a      	ldr	r2, [r3, #8]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	68da      	ldr	r2, [r3, #12]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	68da      	ldr	r2, [r3, #12]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	7c1a      	ldrb	r2, [r3, #16]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	e007      	b.n	800a5ba <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1db      	bne.n	800a56e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a5b6:	f06f 0305 	mvn.w	r3, #5
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	08027728 	.word	0x08027728

0800a5c8 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	1ad3      	subs	r3, r2, r3
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	370c      	adds	r7, #12
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b082      	sub	sp, #8
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a602:	222c      	movs	r2, #44	; 0x2c
 800a604:	2100      	movs	r1, #0
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f00e f879 	bl	80186fe <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a61a:	202c      	movs	r0, #44	; 0x2c
 800a61c:	f001 f91a 	bl	800b854 <mem_malloc>
 800a620:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <http_state_alloc+0x1a>
    http_state_init(ret);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f7ff ffe6 	bl	800a5fa <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a62e:	687b      	ldr	r3, [r7, #4]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d007      	beq.n	800a658 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	695b      	ldr	r3, [r3, #20]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7ff ffbb 	bl	800a5c8 <fs_close>
    hs->handle = NULL;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a1b      	ldr	r3, [r3, #32]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d007      	beq.n	800a670 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a1b      	ldr	r3, [r3, #32]
 800a664:	4618      	mov	r0, r3
 800a666:	f002 f9bf 	bl	800c9e8 <pbuf_free>
    hs->req = NULL;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a670:	bf00      	nop
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d005      	beq.n	800a692 <http_state_free+0x1a>
    http_state_eof(hs);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff ffd6 	bl	800a638 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 ff47 	bl	800b520 <mem_free>
  }
}
 800a692:	bf00      	nop
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
	...

0800a69c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d106      	bne.n	800a6be <http_write+0x22>
 800a6b0:	4b2c      	ldr	r3, [pc, #176]	; (800a764 <http_write+0xc8>)
 800a6b2:	f240 2219 	movw	r2, #537	; 0x219
 800a6b6:	492c      	ldr	r1, [pc, #176]	; (800a768 <http_write+0xcc>)
 800a6b8:	482c      	ldr	r0, [pc, #176]	; (800a76c <http_write+0xd0>)
 800a6ba:	f00d ff81 	bl	80185c0 <iprintf>
  len = *length;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	881b      	ldrh	r3, [r3, #0]
 800a6c2:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a6c4:	8afb      	ldrh	r3, [r7, #22]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d101      	bne.n	800a6ce <http_write+0x32>
    return ERR_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	e045      	b.n	800a75a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a6d4:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a6d6:	8aba      	ldrh	r2, [r7, #20]
 800a6d8:	8afb      	ldrh	r3, [r7, #22]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d201      	bcs.n	800a6e2 <http_write+0x46>
    len = max_len;
 800a6de:	8abb      	ldrh	r3, [r7, #20]
 800a6e0:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6e6:	005b      	lsls	r3, r3, #1
 800a6e8:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800a6ea:	8afa      	ldrh	r2, [r7, #22]
 800a6ec:	8abb      	ldrh	r3, [r7, #20]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d901      	bls.n	800a6f6 <http_write+0x5a>
    len = max_len;
 800a6f2:	8abb      	ldrh	r3, [r7, #20]
 800a6f4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800a6f6:	78fb      	ldrb	r3, [r7, #3]
 800a6f8:	8afa      	ldrh	r2, [r7, #22]
 800a6fa:	68b9      	ldr	r1, [r7, #8]
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f006 ff73 	bl	80115e8 <tcp_write>
 800a702:	4603      	mov	r3, r0
 800a704:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a706:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70e:	d10f      	bne.n	800a730 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a716:	2b00      	cmp	r3, #0
 800a718:	d004      	beq.n	800a724 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800a720:	2b08      	cmp	r3, #8
 800a722:	d902      	bls.n	800a72a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800a724:	2301      	movs	r3, #1
 800a726:	82fb      	strh	r3, [r7, #22]
 800a728:	e002      	b.n	800a730 <http_write+0x94>
      } else {
        len /= 2;
 800a72a:	8afb      	ldrh	r3, [r7, #22]
 800a72c:	085b      	lsrs	r3, r3, #1
 800a72e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a730:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a738:	d102      	bne.n	800a740 <http_write+0xa4>
 800a73a:	8afb      	ldrh	r3, [r7, #22]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d8da      	bhi.n	800a6f6 <http_write+0x5a>

  if (err == ERR_OK) {
 800a740:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d103      	bne.n	800a750 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	8afa      	ldrh	r2, [r7, #22]
 800a74c:	801a      	strh	r2, [r3, #0]
 800a74e:	e002      	b.n	800a756 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800a756:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3718      	adds	r7, #24
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	0801a6dc 	.word	0x0801a6dc
 800a768:	0801a714 	.word	0x0801a714
 800a76c:	0801a724 	.word	0x0801a724

0800a770 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	4613      	mov	r3, r2
 800a77c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800a77e:	2100      	movs	r1, #0
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f003 ffef 	bl	800e764 <tcp_arg>
  altcp_recv(pcb, NULL);
 800a786:	2100      	movs	r1, #0
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f003 fffd 	bl	800e788 <tcp_recv>
  altcp_err(pcb, NULL);
 800a78e:	2100      	movs	r1, #0
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f004 f83d 	bl	800e810 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a796:	2200      	movs	r2, #0
 800a798:	2100      	movs	r1, #0
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f004 f872 	bl	800e884 <tcp_poll>
  altcp_sent(pcb, NULL);
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f004 f812 	bl	800e7cc <tcp_sent>
  if (hs != NULL) {
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d002      	beq.n	800a7b4 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800a7ae:	68b8      	ldr	r0, [r7, #8]
 800a7b0:	f7ff ff62 	bl	800a678 <http_state_free>
  }

  if (abort_conn) {
 800a7b4:	79fb      	ldrb	r3, [r7, #7]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d004      	beq.n	800a7c4 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f002 ff14 	bl	800d5e8 <tcp_abort>
    return ERR_OK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	e00f      	b.n	800a7e4 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f002 fdc9 	bl	800d35c <tcp_close>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a7ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d004      	beq.n	800a7e0 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a7d6:	2204      	movs	r2, #4
 800a7d8:	4904      	ldr	r1, [pc, #16]	; (800a7ec <http_close_or_abort_conn+0x7c>)
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f004 f852 	bl	800e884 <tcp_poll>
  }
  return err;
 800a7e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3718      	adds	r7, #24
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	0800aeb3 	.word	0x0800aeb3

0800a7f0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	6839      	ldr	r1, [r7, #0]
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f7ff ffb6 	bl	800a770 <http_close_or_abort_conn>
 800a804:	4603      	mov	r3, r0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b082      	sub	sp, #8
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a818:	6839      	ldr	r1, [r7, #0]
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7ff ffe8 	bl	800a7f0 <http_close_conn>
  }
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d105      	bne.n	800a846 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7ff ffe6 	bl	800a80e <http_eof>
    return 0;
 800a842:	2300      	movs	r3, #0
 800a844:	e016      	b.n	800a874 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7ff fec6 	bl	800a5dc <fs_bytes_left>
 800a850:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	dc05      	bgt.n	800a864 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7ff ffd7 	bl	800a80e <http_eof>
    return 0;
 800a860:	2300      	movs	r3, #0
 800a862:	e007      	b.n	800a874 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a864:	4b05      	ldr	r3, [pc, #20]	; (800a87c <http_check_eof+0x54>)
 800a866:	f240 429d 	movw	r2, #1181	; 0x49d
 800a86a:	4905      	ldr	r1, [pc, #20]	; (800a880 <http_check_eof+0x58>)
 800a86c:	4805      	ldr	r0, [pc, #20]	; (800a884 <http_check_eof+0x5c>)
 800a86e:	f00d fea7 	bl	80185c0 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a872:	2301      	movs	r3, #1
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	0801a6dc 	.word	0x0801a6dc
 800a880:	0801a74c 	.word	0x0801a74c
 800a884:	0801a724 	.word	0x0801a724

0800a888 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d803      	bhi.n	800a8aa <http_send_data_nonssi+0x22>
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	e001      	b.n	800a8ae <http_send_data_nonssi+0x26>
 800a8aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8ae:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	6999      	ldr	r1, [r3, #24]
 800a8b4:	f107 020c 	add.w	r2, r7, #12
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7ff feee 	bl	800a69c <http_write>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a8c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10d      	bne.n	800a8e8 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	699b      	ldr	r3, [r3, #24]
 800a8d4:	89ba      	ldrh	r2, [r7, #12]
 800a8d6:	441a      	add	r2, r3
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	89ba      	ldrh	r2, [r7, #12]
 800a8e2:	1a9a      	subs	r2, r3, r2
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b084      	sub	sp, #16
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <http_send+0x18>
    return 0;
 800a906:	2300      	movs	r3, #0
 800a908:	e025      	b.n	800a956 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d108      	bne.n	800a924 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800a912:	6839      	ldr	r1, [r7, #0]
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f7ff ff87 	bl	800a828 <http_check_eof>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <http_send+0x32>
      return 0;
 800a920:	2300      	movs	r3, #0
 800a922:	e018      	b.n	800a956 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f7ff ffae 	bl	800a888 <http_send_data_nonssi>
 800a92c:	4603      	mov	r3, r0
 800a92e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10d      	bne.n	800a954 <http_send+0x62>
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7ff fe4d 	bl	800a5dc <fs_bytes_left>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	dc05      	bgt.n	800a954 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7ff ff5f 	bl	800a80e <http_eof>
    return 0;
 800a950:	2300      	movs	r3, #0
 800a952:	e000      	b.n	800a956 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800a954:	7bfb      	ldrb	r3, [r7, #15]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	4a1c      	ldr	r2, [pc, #112]	; (800a9e0 <http_get_404_file+0x80>)
 800a96e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4619      	mov	r1, r3
 800a978:	4610      	mov	r0, r2
 800a97a:	f7ff fde7 	bl	800a54c <fs_open>
 800a97e:	4603      	mov	r3, r0
 800a980:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d024      	beq.n	800a9d4 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	4a15      	ldr	r2, [pc, #84]	; (800a9e4 <http_get_404_file+0x84>)
 800a98e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4619      	mov	r1, r3
 800a998:	4610      	mov	r0, r2
 800a99a:	f7ff fdd7 	bl	800a54c <fs_open>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a9a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d014      	beq.n	800a9d4 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	4a0e      	ldr	r2, [pc, #56]	; (800a9e8 <http_get_404_file+0x88>)
 800a9ae:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	4610      	mov	r0, r2
 800a9ba:	f7ff fdc7 	bl	800a54c <fs_open>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800a9c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d004      	beq.n	800a9d4 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	601a      	str	r2, [r3, #0]
        return NULL;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	e000      	b.n	800a9d6 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800a9d4:	687b      	ldr	r3, [r7, #4]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	0801a784 	.word	0x0801a784
 800a9e4:	0801a790 	.word	0x0801a790
 800a9e8:	0801a79c 	.word	0x0801a79c

0800a9ec <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08e      	sub	sp, #56	; 0x38
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d106      	bne.n	800aa10 <http_parse_request+0x24>
 800aa02:	4b65      	ldr	r3, [pc, #404]	; (800ab98 <http_parse_request+0x1ac>)
 800aa04:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800aa08:	4964      	ldr	r1, [pc, #400]	; (800ab9c <http_parse_request+0x1b0>)
 800aa0a:	4865      	ldr	r0, [pc, #404]	; (800aba0 <http_parse_request+0x1b4>)
 800aa0c:	f00d fdd8 	bl	80185c0 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d106      	bne.n	800aa24 <http_parse_request+0x38>
 800aa16:	4b60      	ldr	r3, [pc, #384]	; (800ab98 <http_parse_request+0x1ac>)
 800aa18:	f240 72af 	movw	r2, #1967	; 0x7af
 800aa1c:	4961      	ldr	r1, [pc, #388]	; (800aba4 <http_parse_request+0x1b8>)
 800aa1e:	4860      	ldr	r0, [pc, #384]	; (800aba0 <http_parse_request+0x1b4>)
 800aa20:	f00d fdce 	bl	80185c0 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	695b      	ldr	r3, [r3, #20]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d103      	bne.n	800aa34 <http_parse_request+0x48>
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800aa34:	f06f 0307 	mvn.w	r3, #7
 800aa38:	e0a9      	b.n	800ab8e <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	6a1b      	ldr	r3, [r3, #32]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d103      	bne.n	800aa4a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa46:	621a      	str	r2, [r3, #32]
 800aa48:	e005      	b.n	800aa56 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa50:	4618      	mov	r0, r3
 800aa52:	f002 f897 	bl	800cb84 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800aa56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa58:	f002 f86c 	bl	800cb34 <pbuf_ref>

  if (hs->req->next != NULL) {
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	6a1b      	ldr	r3, [r3, #32]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d012      	beq.n	800aa8c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	6a1b      	ldr	r3, [r3, #32]
 800aa6a:	891b      	ldrh	r3, [r3, #8]
 800aa6c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800aa70:	4293      	cmp	r3, r2
 800aa72:	bf28      	it	cs
 800aa74:	4613      	movcs	r3, r2
 800aa76:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	6a18      	ldr	r0, [r3, #32]
 800aa7c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800aa7e:	2300      	movs	r3, #0
 800aa80:	4949      	ldr	r1, [pc, #292]	; (800aba8 <http_parse_request+0x1bc>)
 800aa82:	f002 f9b7 	bl	800cdf4 <pbuf_copy_partial>
    data = httpd_req_buf;
 800aa86:	4b48      	ldr	r3, [pc, #288]	; (800aba8 <http_parse_request+0x1bc>)
 800aa88:	637b      	str	r3, [r7, #52]	; 0x34
 800aa8a:	e005      	b.n	800aa98 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	895b      	ldrh	r3, [r3, #10]
 800aa96:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800aa98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aa9a:	2b06      	cmp	r3, #6
 800aa9c:	d962      	bls.n	800ab64 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800aa9e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	4942      	ldr	r1, [pc, #264]	; (800abac <http_parse_request+0x1c0>)
 800aaa4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aaa6:	f000 fb99 	bl	800b1dc <lwip_strnstr>
 800aaaa:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d058      	beq.n	800ab64 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800aab6:	2204      	movs	r2, #4
 800aab8:	493d      	ldr	r1, [pc, #244]	; (800abb0 <http_parse_request+0x1c4>)
 800aaba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aabc:	f00d fe4f 	bl	801875e <strncmp>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d116      	bne.n	800aaf4 <http_parse_request+0x108>
        sp1 = data + 3;
 800aac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac8:	3303      	adds	r3, #3
 800aaca:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	1c5a      	adds	r2, r3, #1
 800aad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	3301      	adds	r3, #1
 800aae0:	8b7a      	ldrh	r2, [r7, #26]
 800aae2:	4934      	ldr	r1, [pc, #208]	; (800abb4 <http_parse_request+0x1c8>)
 800aae4:	4618      	mov	r0, r3
 800aae6:	f000 fb79 	bl	800b1dc <lwip_strnstr>
 800aaea:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800aaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d111      	bne.n	800ab16 <http_parse_request+0x12a>
 800aaf2:	e006      	b.n	800ab02 <http_parse_request+0x116>
        data[4] = 0;
 800aaf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	2200      	movs	r2, #0
 800aafa:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800aafc:	f06f 030f 	mvn.w	r3, #15
 800ab00:	e045      	b.n	800ab8e <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	3301      	adds	r3, #1
 800ab06:	8b7a      	ldrh	r2, [r7, #26]
 800ab08:	4928      	ldr	r1, [pc, #160]	; (800abac <http_parse_request+0x1c0>)
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 fb66 	bl	800b1dc <lwip_strnstr>
 800ab10:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800ab12:	2301      	movs	r3, #1
 800ab14:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	3301      	adds	r3, #1
 800ab1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d01e      	beq.n	800ab64 <http_parse_request+0x178>
 800ab26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d91a      	bls.n	800ab64 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800ab2e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ab30:	461a      	mov	r2, r3
 800ab32:	4921      	ldr	r1, [pc, #132]	; (800abb8 <http_parse_request+0x1cc>)
 800ab34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab36:	f000 fb51 	bl	800b1dc <lwip_strnstr>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d011      	beq.n	800ab64 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	3301      	adds	r3, #1
 800ab44:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800ab4c:	8b3b      	ldrh	r3, [r7, #24]
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	4413      	add	r3, r2
 800ab52:	2200      	movs	r2, #0
 800ab54:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800ab56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab58:	6979      	ldr	r1, [r7, #20]
 800ab5a:	68b8      	ldr	r0, [r7, #8]
 800ab5c:	f000 f82e 	bl	800abbc <http_find_file>
 800ab60:	4603      	mov	r3, r0
 800ab62:	e014      	b.n	800ab8e <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	6a1b      	ldr	r3, [r3, #32]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f001 ffcb 	bl	800cb04 <pbuf_clen>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	891b      	ldrh	r3, [r3, #8]
 800ab78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab7c:	d205      	bcs.n	800ab8a <http_parse_request+0x19e>
 800ab7e:	8a7b      	ldrh	r3, [r7, #18]
 800ab80:	2b05      	cmp	r3, #5
 800ab82:	d802      	bhi.n	800ab8a <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800ab84:	f06f 0304 	mvn.w	r3, #4
 800ab88:	e001      	b.n	800ab8e <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800ab8a:	f06f 030f 	mvn.w	r3, #15
  }
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3738      	adds	r7, #56	; 0x38
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	0801a6dc 	.word	0x0801a6dc
 800ab9c:	0801a7a8 	.word	0x0801a7a8
 800aba0:	0801a724 	.word	0x0801a724
 800aba4:	0801a7b4 	.word	0x0801a7b4
 800aba8:	2000d9ac 	.word	0x2000d9ac
 800abac:	0801a7c0 	.word	0x0801a7c0
 800abb0:	0801a7c4 	.word	0x0801a7c4
 800abb4:	0801a7cc 	.word	0x0801a7cc
 800abb8:	0801a7d0 	.word	0x0801a7d0

0800abbc <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b092      	sub	sp, #72	; 0x48
 800abc0:	af02      	add	r7, sp, #8
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800abc8:	2300      	movs	r3, #0
 800abca:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800abcc:	2300      	movs	r3, #0
 800abce:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	4618      	mov	r0, r3
 800abda:	f7f5 fb13 	bl	8000204 <strlen>
 800abde:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d06b      	beq.n	800acbe <http_find_file+0x102>
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abea:	3b01      	subs	r3, #1
 800abec:	4413      	add	r3, r2
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	2b2f      	cmp	r3, #47	; 0x2f
 800abf2:	d164      	bne.n	800acbe <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800abf4:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800abf6:	4a53      	ldr	r2, [pc, #332]	; (800ad44 <http_find_file+0x188>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d102      	bne.n	800ac02 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800abfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d15d      	bne.n	800acbe <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800ac02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac04:	3b01      	subs	r3, #1
 800ac06:	2b3f      	cmp	r3, #63	; 0x3f
 800ac08:	bf28      	it	cs
 800ac0a:	233f      	movcs	r3, #63	; 0x3f
 800ac0c:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00a      	beq.n	800ac2a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac18:	4619      	mov	r1, r3
 800ac1a:	484a      	ldr	r0, [pc, #296]	; (800ad44 <http_find_file+0x188>)
 800ac1c:	f00d fed0 	bl	80189c0 <memcpy>
      http_uri_buf[copy_len] = 0;
 800ac20:	4a48      	ldr	r2, [pc, #288]	; (800ad44 <http_find_file+0x188>)
 800ac22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac24:	4413      	add	r3, r2
 800ac26:	2200      	movs	r2, #0
 800ac28:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac2e:	e043      	b.n	800acb8 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d028      	beq.n	800ac88 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800ac36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac38:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800ac3c:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d01e      	beq.n	800ac82 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800ac44:	4a40      	ldr	r2, [pc, #256]	; (800ad48 <http_find_file+0x18c>)
 800ac46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7f5 fad9 	bl	8000204 <strlen>
 800ac52:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800ac54:	69fa      	ldr	r2, [r7, #28]
 800ac56:	6a3b      	ldr	r3, [r7, #32]
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	bf28      	it	cs
 800ac5c:	4613      	movcs	r3, r2
 800ac5e:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	4a38      	ldr	r2, [pc, #224]	; (800ad44 <http_find_file+0x188>)
 800ac64:	1898      	adds	r0, r3, r2
 800ac66:	4a38      	ldr	r2, [pc, #224]	; (800ad48 <http_find_file+0x18c>)
 800ac68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac6a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac6e:	69ba      	ldr	r2, [r7, #24]
 800ac70:	4619      	mov	r1, r3
 800ac72:	f00d fea5 	bl	80189c0 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800ac76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	4a31      	ldr	r2, [pc, #196]	; (800ad44 <http_find_file+0x188>)
 800ac7e:	2100      	movs	r1, #0
 800ac80:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800ac82:	4b30      	ldr	r3, [pc, #192]	; (800ad44 <http_find_file+0x188>)
 800ac84:	633b      	str	r3, [r7, #48]	; 0x30
 800ac86:	e004      	b.n	800ac92 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800ac88:	4a2f      	ldr	r2, [pc, #188]	; (800ad48 <http_find_file+0x18c>)
 800ac8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac90:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff fc58 	bl	800a54c <fs_open>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800aca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d104      	bne.n	800acb2 <http_find_file+0xf6>
        uri = file_name;
 800aca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acaa:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800acb0:	e005      	b.n	800acbe <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800acb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb4:	3301      	adds	r3, #1
 800acb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acba:	2b04      	cmp	r3, #4
 800acbc:	d9b8      	bls.n	800ac30 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d124      	bne.n	800ad0e <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	213f      	movs	r1, #63	; 0x3f
 800acc8:	4618      	mov	r0, r3
 800acca:	f00d fd3b 	bl	8018744 <strchr>
 800acce:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800acd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d005      	beq.n	800ace2 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800acd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd8:	2200      	movs	r2, #0
 800acda:	701a      	strb	r2, [r3, #0]
      params++;
 800acdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acde:	3301      	adds	r3, #1
 800ace0:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	4611      	mov	r1, r2
 800ace8:	4618      	mov	r0, r3
 800acea:	f7ff fc2f 	bl	800a54c <fs_open>
 800acee:	4603      	mov	r3, r0
 800acf0:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800acf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d102      	bne.n	800ad00 <http_find_file+0x144>
      file = &hs->file_handle;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	63bb      	str	r3, [r7, #56]	; 0x38
 800acfe:	e006      	b.n	800ad0e <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800ad00:	f107 0308 	add.w	r3, r7, #8
 800ad04:	4619      	mov	r1, r3
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7ff fe2a 	bl	800a960 <http_get_404_file>
 800ad0c:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d106      	bne.n	800ad22 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800ad14:	f107 0308 	add.w	r3, r7, #8
 800ad18:	4619      	mov	r1, r3
 800ad1a:	68f8      	ldr	r0, [r7, #12]
 800ad1c:	f7ff fe20 	bl	800a960 <http_get_404_file>
 800ad20:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad26:	9301      	str	r3, [sp, #4]
 800ad28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f000 f809 	bl	800ad4c <http_init_file>
 800ad3a:	4603      	mov	r3, r0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3740      	adds	r7, #64	; 0x40
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	2000ddac 	.word	0x2000ddac
 800ad48:	0802773c 	.word	0x0802773c

0800ad4c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d05c      	beq.n	800ae1a <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d106      	bne.n	800ad76 <http_init_file+0x2a>
 800ad68:	4b35      	ldr	r3, [pc, #212]	; (800ae40 <http_init_file+0xf4>)
 800ad6a:	f640 120b 	movw	r2, #2315	; 0x90b
 800ad6e:	4935      	ldr	r1, [pc, #212]	; (800ae44 <http_init_file+0xf8>)
 800ad70:	4835      	ldr	r0, [pc, #212]	; (800ae48 <http_init_file+0xfc>)
 800ad72:	f00d fc25 	bl	80185c0 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	da06      	bge.n	800ad9a <http_init_file+0x4e>
 800ad8c:	4b2c      	ldr	r3, [pc, #176]	; (800ae40 <http_init_file+0xf4>)
 800ad8e:	f640 1234 	movw	r2, #2356	; 0x934
 800ad92:	492e      	ldr	r1, [pc, #184]	; (800ae4c <http_init_file+0x100>)
 800ad94:	482c      	ldr	r0, [pc, #176]	; (800ae48 <http_init_file+0xfc>)
 800ad96:	f00d fc13 	bl	80185c0 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	695b      	ldr	r3, [r3, #20]
 800adb0:	7c1b      	ldrb	r3, [r3, #16]
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d106      	bne.n	800adc8 <http_init_file+0x7c>
 800adba:	4b21      	ldr	r3, [pc, #132]	; (800ae40 <http_init_file+0xf4>)
 800adbc:	f640 1243 	movw	r2, #2371	; 0x943
 800adc0:	4923      	ldr	r1, [pc, #140]	; (800ae50 <http_init_file+0x104>)
 800adc2:	4821      	ldr	r0, [pc, #132]	; (800ae48 <http_init_file+0xfc>)
 800adc4:	f00d fbfc 	bl	80185c0 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d032      	beq.n	800ae34 <http_init_file+0xe8>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	7c1b      	ldrb	r3, [r3, #16]
 800add4:	f003 0301 	and.w	r3, r3, #1
 800add8:	2b00      	cmp	r3, #0
 800adda:	d02b      	beq.n	800ae34 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6998      	ldr	r0, [r3, #24]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade4:	461a      	mov	r2, r3
 800ade6:	491b      	ldr	r1, [pc, #108]	; (800ae54 <http_init_file+0x108>)
 800ade8:	f000 f9f8 	bl	800b1dc <lwip_strnstr>
 800adec:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d01f      	beq.n	800ae34 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	1d1a      	adds	r2, r3, #4
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	699a      	ldr	r2, [r3, #24]
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	441a      	add	r2, r3
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	1ad2      	subs	r2, r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	625a      	str	r2, [r3, #36]	; 0x24
 800ae18:	e00c      	b.n	800ae34 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3718      	adds	r7, #24
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	0801a6dc 	.word	0x0801a6dc
 800ae44:	0801a7d8 	.word	0x0801a7d8
 800ae48:	0801a724 	.word	0x0801a724
 800ae4c:	0801a7ec 	.word	0x0801a7ec
 800ae50:	0801a80c 	.word	0x0801a80c
 800ae54:	0801a7d0 	.word	0x0801a7d0

0800ae58 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	460b      	mov	r3, r1
 800ae62:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d002      	beq.n	800ae74 <http_err+0x1c>
    http_state_free(hs);
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f7ff fc02 	bl	800a678 <http_state_free>
  }
}
 800ae74:	bf00      	nop
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	4613      	mov	r3, r2
 800ae88:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d101      	bne.n	800ae98 <http_sent+0x1c>
    return ERR_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	e008      	b.n	800aeaa <http_sent+0x2e>
  }

  hs->retries = 0;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800aea0:	6979      	ldr	r1, [r7, #20]
 800aea2:	68b8      	ldr	r0, [r7, #8]
 800aea4:	f7ff fd25 	bl	800a8f2 <http_send>

  return ERR_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3718      	adds	r7, #24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d107      	bne.n	800aed6 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800aec6:	2100      	movs	r1, #0
 800aec8:	6838      	ldr	r0, [r7, #0]
 800aeca:	f7ff fc91 	bl	800a7f0 <http_close_conn>
 800aece:	4603      	mov	r3, r0
 800aed0:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	e021      	b.n	800af1a <http_poll+0x68>
  } else {
    hs->retries++;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aedc:	3301      	adds	r3, #1
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeec:	2b04      	cmp	r3, #4
 800aeee:	d105      	bne.n	800aefc <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800aef0:	68f9      	ldr	r1, [r7, #12]
 800aef2:	6838      	ldr	r0, [r7, #0]
 800aef4:	f7ff fc7c 	bl	800a7f0 <http_close_conn>
      return ERR_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	e00e      	b.n	800af1a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	695b      	ldr	r3, [r3, #20]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d009      	beq.n	800af18 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800af04:	68f9      	ldr	r1, [r7, #12]
 800af06:	6838      	ldr	r0, [r7, #0]
 800af08:	f7ff fcf3 	bl	800a8f2 <http_send>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d002      	beq.n	800af18 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800af12:	6838      	ldr	r0, [r7, #0]
 800af14:	f007 f952 	bl	80121bc <tcp_output>
      }
    }
  }

  return ERR_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
	...

0800af24 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b086      	sub	sp, #24
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800af36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d105      	bne.n	800af4a <http_recv+0x26>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <http_recv+0x26>
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d111      	bne.n	800af6e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d008      	beq.n	800af62 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	891b      	ldrh	r3, [r3, #8]
 800af54:	4619      	mov	r1, r3
 800af56:	68b8      	ldr	r0, [r7, #8]
 800af58:	f002 fd20 	bl	800d99c <tcp_recved>
      pbuf_free(p);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f001 fd43 	bl	800c9e8 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800af62:	6979      	ldr	r1, [r7, #20]
 800af64:	68b8      	ldr	r0, [r7, #8]
 800af66:	f7ff fc43 	bl	800a7f0 <http_close_conn>
    return ERR_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	e055      	b.n	800b01a <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	891b      	ldrh	r3, [r3, #8]
 800af72:	4619      	mov	r1, r3
 800af74:	68b8      	ldr	r0, [r7, #8]
 800af76:	f002 fd11 	bl	800d99c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	695b      	ldr	r3, [r3, #20]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d147      	bne.n	800b012 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	6979      	ldr	r1, [r7, #20]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7ff fd30 	bl	800a9ec <http_parse_request>
 800af8c:	4603      	mov	r3, r0
 800af8e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800af90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d015      	beq.n	800afc4 <http_recv+0xa0>
 800af98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af9c:	f113 0f05 	cmn.w	r3, #5
 800afa0:	d010      	beq.n	800afc4 <http_recv+0xa0>
 800afa2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afa6:	f113 0f10 	cmn.w	r3, #16
 800afaa:	d00b      	beq.n	800afc4 <http_recv+0xa0>
 800afac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afb0:	f113 0f08 	cmn.w	r3, #8
 800afb4:	d006      	beq.n	800afc4 <http_recv+0xa0>
 800afb6:	4b1b      	ldr	r3, [pc, #108]	; (800b024 <http_recv+0x100>)
 800afb8:	f640 2204 	movw	r2, #2564	; 0xa04
 800afbc:	491a      	ldr	r1, [pc, #104]	; (800b028 <http_recv+0x104>)
 800afbe:	481b      	ldr	r0, [pc, #108]	; (800b02c <http_recv+0x108>)
 800afc0:	f00d fafe 	bl	80185c0 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800afc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afc8:	f113 0f05 	cmn.w	r3, #5
 800afcc:	d00b      	beq.n	800afe6 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d007      	beq.n	800afe6 <http_recv+0xc2>
          pbuf_free(hs->req);
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	4618      	mov	r0, r3
 800afdc:	f001 fd04 	bl	800c9e8 <pbuf_free>
          hs->req = NULL;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	2200      	movs	r2, #0
 800afe4:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f001 fcfe 	bl	800c9e8 <pbuf_free>
      if (parsed == ERR_OK) {
 800afec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d104      	bne.n	800affe <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800aff4:	6979      	ldr	r1, [r7, #20]
 800aff6:	68b8      	ldr	r0, [r7, #8]
 800aff8:	f7ff fc7b 	bl	800a8f2 <http_send>
 800affc:	e00c      	b.n	800b018 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800affe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b002:	f113 0f10 	cmn.w	r3, #16
 800b006:	d107      	bne.n	800b018 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b008:	6979      	ldr	r1, [r7, #20]
 800b00a:	68b8      	ldr	r0, [r7, #8]
 800b00c:	f7ff fbf0 	bl	800a7f0 <http_close_conn>
 800b010:	e002      	b.n	800b018 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f001 fce8 	bl	800c9e8 <pbuf_free>
    }
  }
  return ERR_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3718      	adds	r7, #24
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	0801a6dc 	.word	0x0801a6dc
 800b028:	0801a838 	.word	0x0801a838
 800b02c:	0801a724 	.word	0x0801a724

0800b030 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	4613      	mov	r3, r2
 800b03c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b03e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d102      	bne.n	800b04c <http_accept+0x1c>
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d102      	bne.n	800b052 <http_accept+0x22>
    return ERR_VAL;
 800b04c:	f06f 0305 	mvn.w	r3, #5
 800b050:	e025      	b.n	800b09e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b052:	2101      	movs	r1, #1
 800b054:	68b8      	ldr	r0, [r7, #8]
 800b056:	f003 f985 	bl	800e364 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b05a:	f7ff fadb 	bl	800a614 <http_state_alloc>
 800b05e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d102      	bne.n	800b06c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b066:	f04f 33ff 	mov.w	r3, #4294967295
 800b06a:	e018      	b.n	800b09e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b072:	6979      	ldr	r1, [r7, #20]
 800b074:	68b8      	ldr	r0, [r7, #8]
 800b076:	f003 fb75 	bl	800e764 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b07a:	490b      	ldr	r1, [pc, #44]	; (800b0a8 <http_accept+0x78>)
 800b07c:	68b8      	ldr	r0, [r7, #8]
 800b07e:	f003 fb83 	bl	800e788 <tcp_recv>
  altcp_err(pcb, http_err);
 800b082:	490a      	ldr	r1, [pc, #40]	; (800b0ac <http_accept+0x7c>)
 800b084:	68b8      	ldr	r0, [r7, #8]
 800b086:	f003 fbc3 	bl	800e810 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b08a:	2204      	movs	r2, #4
 800b08c:	4908      	ldr	r1, [pc, #32]	; (800b0b0 <http_accept+0x80>)
 800b08e:	68b8      	ldr	r0, [r7, #8]
 800b090:	f003 fbf8 	bl	800e884 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b094:	4907      	ldr	r1, [pc, #28]	; (800b0b4 <http_accept+0x84>)
 800b096:	68b8      	ldr	r0, [r7, #8]
 800b098:	f003 fb98 	bl	800e7cc <tcp_sent>

  return ERR_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3718      	adds	r7, #24
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	0800af25 	.word	0x0800af25
 800b0ac:	0800ae59 	.word	0x0800ae59
 800b0b0:	0800aeb3 	.word	0x0800aeb3
 800b0b4:	0800ae7d 	.word	0x0800ae7d

0800b0b8 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d029      	beq.n	800b11e <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b0ca:	2101      	movs	r1, #1
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f003 f949 	bl	800e364 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b0d2:	887b      	ldrh	r3, [r7, #2]
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	4914      	ldr	r1, [pc, #80]	; (800b128 <httpd_init_pcb+0x70>)
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f002 fa91 	bl	800d600 <tcp_bind>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b0e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d006      	beq.n	800b0f8 <httpd_init_pcb+0x40>
 800b0ea:	4b10      	ldr	r3, [pc, #64]	; (800b12c <httpd_init_pcb+0x74>)
 800b0ec:	f640 2257 	movw	r2, #2647	; 0xa57
 800b0f0:	490f      	ldr	r1, [pc, #60]	; (800b130 <httpd_init_pcb+0x78>)
 800b0f2:	4810      	ldr	r0, [pc, #64]	; (800b134 <httpd_init_pcb+0x7c>)
 800b0f4:	f00d fa64 	bl	80185c0 <iprintf>
    pcb = altcp_listen(pcb);
 800b0f8:	21ff      	movs	r1, #255	; 0xff
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f002 fb38 	bl	800d770 <tcp_listen_with_backlog>
 800b100:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d106      	bne.n	800b116 <httpd_init_pcb+0x5e>
 800b108:	4b08      	ldr	r3, [pc, #32]	; (800b12c <httpd_init_pcb+0x74>)
 800b10a:	f640 2259 	movw	r2, #2649	; 0xa59
 800b10e:	490a      	ldr	r1, [pc, #40]	; (800b138 <httpd_init_pcb+0x80>)
 800b110:	4808      	ldr	r0, [pc, #32]	; (800b134 <httpd_init_pcb+0x7c>)
 800b112:	f00d fa55 	bl	80185c0 <iprintf>
    altcp_accept(pcb, http_accept);
 800b116:	4909      	ldr	r1, [pc, #36]	; (800b13c <httpd_init_pcb+0x84>)
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f003 fb9b 	bl	800e854 <tcp_accept>
  }
}
 800b11e:	bf00      	nop
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	08027884 	.word	0x08027884
 800b12c:	0801a6dc 	.word	0x0801a6dc
 800b130:	0801a864 	.word	0x0801a864
 800b134:	0801a724 	.word	0x0801a724
 800b138:	0801a880 	.word	0x0801a880
 800b13c:	0800b031 	.word	0x0800b031

0800b140 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b146:	202e      	movs	r0, #46	; 0x2e
 800b148:	f003 fafe 	bl	800e748 <tcp_new_ip_type>
 800b14c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d106      	bne.n	800b162 <httpd_init+0x22>
 800b154:	4b07      	ldr	r3, [pc, #28]	; (800b174 <httpd_init+0x34>)
 800b156:	f640 2272 	movw	r2, #2674	; 0xa72
 800b15a:	4907      	ldr	r1, [pc, #28]	; (800b178 <httpd_init+0x38>)
 800b15c:	4807      	ldr	r0, [pc, #28]	; (800b17c <httpd_init+0x3c>)
 800b15e:	f00d fa2f 	bl	80185c0 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b162:	2150      	movs	r1, #80	; 0x50
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff ffa7 	bl	800b0b8 <httpd_init_pcb>
}
 800b16a:	bf00      	nop
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	0801a6dc 	.word	0x0801a6dc
 800b178:	0801a8a0 	.word	0x0801a8a0
 800b17c:	0801a724 	.word	0x0801a724

0800b180 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	4603      	mov	r3, r0
 800b188:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b18a:	88fb      	ldrh	r3, [r7, #6]
 800b18c:	021b      	lsls	r3, r3, #8
 800b18e:	b21a      	sxth	r2, r3
 800b190:	88fb      	ldrh	r3, [r7, #6]
 800b192:	0a1b      	lsrs	r3, r3, #8
 800b194:	b29b      	uxth	r3, r3
 800b196:	b21b      	sxth	r3, r3
 800b198:	4313      	orrs	r3, r2
 800b19a:	b21b      	sxth	r3, r3
 800b19c:	b29b      	uxth	r3, r3
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b083      	sub	sp, #12
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	061a      	lsls	r2, r3, #24
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	021b      	lsls	r3, r3, #8
 800b1ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1be:	431a      	orrs	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	0a1b      	lsrs	r3, r3, #8
 800b1c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b1c8:	431a      	orrs	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	0e1b      	lsrs	r3, r3, #24
 800b1ce:	4313      	orrs	r3, r2
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b086      	sub	sp, #24
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	60b9      	str	r1, [r7, #8]
 800b1e6:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800b1e8:	68b8      	ldr	r0, [r7, #8]
 800b1ea:	f7f5 f80b 	bl	8000204 <strlen>
 800b1ee:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	e022      	b.n	800b240 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	617b      	str	r3, [r7, #20]
 800b1fe:	e012      	b.n	800b226 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	781a      	ldrb	r2, [r3, #0]
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d109      	bne.n	800b220 <lwip_strnstr+0x44>
 800b20c:	693a      	ldr	r2, [r7, #16]
 800b20e:	68b9      	ldr	r1, [r7, #8]
 800b210:	6978      	ldr	r0, [r7, #20]
 800b212:	f00d faa4 	bl	801875e <strncmp>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d101      	bne.n	800b220 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	e00f      	b.n	800b240 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	3301      	adds	r3, #1
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d007      	beq.n	800b23e <lwip_strnstr+0x62>
 800b22e:	697a      	ldr	r2, [r7, #20]
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	441a      	add	r2, r3
 800b234:	68f9      	ldr	r1, [r7, #12]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	440b      	add	r3, r1
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d9e0      	bls.n	800b200 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3718      	adds	r7, #24
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b252:	f00d f83d 	bl	80182d0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b256:	f000 f8d5 	bl	800b404 <mem_init>
  memp_init();
 800b25a:	f000 fc31 	bl	800bac0 <memp_init>
  pbuf_init();
  netif_init();
 800b25e:	f000 fd3d 	bl	800bcdc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b262:	f008 f89b 	bl	801339c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b266:	f001 fe69 	bl	800cf3c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b26a:	f007 ffdd 	bl	8013228 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b26e:	bf00      	nop
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
	...

0800b278 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	4603      	mov	r3, r0
 800b280:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b282:	4b05      	ldr	r3, [pc, #20]	; (800b298 <ptr_to_mem+0x20>)
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	88fb      	ldrh	r3, [r7, #6]
 800b288:	4413      	add	r3, r2
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	370c      	adds	r7, #12
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	2000e458 	.word	0x2000e458

0800b29c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b2a4:	4b05      	ldr	r3, [pc, #20]	; (800b2bc <mem_to_ptr+0x20>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	b29b      	uxth	r3, r3
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	370c      	adds	r7, #12
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	2000e458 	.word	0x2000e458

0800b2c0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b2c0:	b590      	push	{r4, r7, lr}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b2c8:	4b45      	ldr	r3, [pc, #276]	; (800b3e0 <plug_holes+0x120>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d206      	bcs.n	800b2e0 <plug_holes+0x20>
 800b2d2:	4b44      	ldr	r3, [pc, #272]	; (800b3e4 <plug_holes+0x124>)
 800b2d4:	f240 12df 	movw	r2, #479	; 0x1df
 800b2d8:	4943      	ldr	r1, [pc, #268]	; (800b3e8 <plug_holes+0x128>)
 800b2da:	4844      	ldr	r0, [pc, #272]	; (800b3ec <plug_holes+0x12c>)
 800b2dc:	f00d f970 	bl	80185c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b2e0:	4b43      	ldr	r3, [pc, #268]	; (800b3f0 <plug_holes+0x130>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d306      	bcc.n	800b2f8 <plug_holes+0x38>
 800b2ea:	4b3e      	ldr	r3, [pc, #248]	; (800b3e4 <plug_holes+0x124>)
 800b2ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b2f0:	4940      	ldr	r1, [pc, #256]	; (800b3f4 <plug_holes+0x134>)
 800b2f2:	483e      	ldr	r0, [pc, #248]	; (800b3ec <plug_holes+0x12c>)
 800b2f4:	f00d f964 	bl	80185c0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	791b      	ldrb	r3, [r3, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d006      	beq.n	800b30e <plug_holes+0x4e>
 800b300:	4b38      	ldr	r3, [pc, #224]	; (800b3e4 <plug_holes+0x124>)
 800b302:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b306:	493c      	ldr	r1, [pc, #240]	; (800b3f8 <plug_holes+0x138>)
 800b308:	4838      	ldr	r0, [pc, #224]	; (800b3ec <plug_holes+0x12c>)
 800b30a:	f00d f959 	bl	80185c0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	881b      	ldrh	r3, [r3, #0]
 800b312:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b316:	d906      	bls.n	800b326 <plug_holes+0x66>
 800b318:	4b32      	ldr	r3, [pc, #200]	; (800b3e4 <plug_holes+0x124>)
 800b31a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b31e:	4937      	ldr	r1, [pc, #220]	; (800b3fc <plug_holes+0x13c>)
 800b320:	4832      	ldr	r0, [pc, #200]	; (800b3ec <plug_holes+0x12c>)
 800b322:	f00d f94d 	bl	80185c0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	881b      	ldrh	r3, [r3, #0]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7ff ffa4 	bl	800b278 <ptr_to_mem>
 800b330:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	429a      	cmp	r2, r3
 800b338:	d024      	beq.n	800b384 <plug_holes+0xc4>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	791b      	ldrb	r3, [r3, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d120      	bne.n	800b384 <plug_holes+0xc4>
 800b342:	4b2b      	ldr	r3, [pc, #172]	; (800b3f0 <plug_holes+0x130>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d01b      	beq.n	800b384 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b34c:	4b2c      	ldr	r3, [pc, #176]	; (800b400 <plug_holes+0x140>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	429a      	cmp	r2, r3
 800b354:	d102      	bne.n	800b35c <plug_holes+0x9c>
      lfree = mem;
 800b356:	4a2a      	ldr	r2, [pc, #168]	; (800b400 <plug_holes+0x140>)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	881a      	ldrh	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	881b      	ldrh	r3, [r3, #0]
 800b368:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b36c:	d00a      	beq.n	800b384 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	881b      	ldrh	r3, [r3, #0]
 800b372:	4618      	mov	r0, r3
 800b374:	f7ff ff80 	bl	800b278 <ptr_to_mem>
 800b378:	4604      	mov	r4, r0
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff ff8e 	bl	800b29c <mem_to_ptr>
 800b380:	4603      	mov	r3, r0
 800b382:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	885b      	ldrh	r3, [r3, #2]
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff ff75 	bl	800b278 <ptr_to_mem>
 800b38e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	429a      	cmp	r2, r3
 800b396:	d01f      	beq.n	800b3d8 <plug_holes+0x118>
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	791b      	ldrb	r3, [r3, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d11b      	bne.n	800b3d8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b3a0:	4b17      	ldr	r3, [pc, #92]	; (800b400 <plug_holes+0x140>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d102      	bne.n	800b3b0 <plug_holes+0xf0>
      lfree = pmem;
 800b3aa:	4a15      	ldr	r2, [pc, #84]	; (800b400 <plug_holes+0x140>)
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	881a      	ldrh	r2, [r3, #0]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	881b      	ldrh	r3, [r3, #0]
 800b3bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b3c0:	d00a      	beq.n	800b3d8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	881b      	ldrh	r3, [r3, #0]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7ff ff56 	bl	800b278 <ptr_to_mem>
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	68b8      	ldr	r0, [r7, #8]
 800b3d0:	f7ff ff64 	bl	800b29c <mem_to_ptr>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b3d8:	bf00      	nop
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd90      	pop	{r4, r7, pc}
 800b3e0:	2000e458 	.word	0x2000e458
 800b3e4:	0801a8bc 	.word	0x0801a8bc
 800b3e8:	0801a8ec 	.word	0x0801a8ec
 800b3ec:	0801a904 	.word	0x0801a904
 800b3f0:	2000e45c 	.word	0x2000e45c
 800b3f4:	0801a92c 	.word	0x0801a92c
 800b3f8:	0801a948 	.word	0x0801a948
 800b3fc:	0801a964 	.word	0x0801a964
 800b400:	2000e464 	.word	0x2000e464

0800b404 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b40a:	4b1f      	ldr	r3, [pc, #124]	; (800b488 <mem_init+0x84>)
 800b40c:	3303      	adds	r3, #3
 800b40e:	f023 0303 	bic.w	r3, r3, #3
 800b412:	461a      	mov	r2, r3
 800b414:	4b1d      	ldr	r3, [pc, #116]	; (800b48c <mem_init+0x88>)
 800b416:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b418:	4b1c      	ldr	r3, [pc, #112]	; (800b48c <mem_init+0x88>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b424:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b432:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b436:	f7ff ff1f 	bl	800b278 <ptr_to_mem>
 800b43a:	4603      	mov	r3, r0
 800b43c:	4a14      	ldr	r2, [pc, #80]	; (800b490 <mem_init+0x8c>)
 800b43e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b440:	4b13      	ldr	r3, [pc, #76]	; (800b490 <mem_init+0x8c>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2201      	movs	r2, #1
 800b446:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b448:	4b11      	ldr	r3, [pc, #68]	; (800b490 <mem_init+0x8c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b450:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b452:	4b0f      	ldr	r3, [pc, #60]	; (800b490 <mem_init+0x8c>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b45a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b45c:	4b0b      	ldr	r3, [pc, #44]	; (800b48c <mem_init+0x88>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a0c      	ldr	r2, [pc, #48]	; (800b494 <mem_init+0x90>)
 800b462:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b464:	480c      	ldr	r0, [pc, #48]	; (800b498 <mem_init+0x94>)
 800b466:	f00c ff41 	bl	80182ec <sys_mutex_new>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d006      	beq.n	800b47e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b470:	4b0a      	ldr	r3, [pc, #40]	; (800b49c <mem_init+0x98>)
 800b472:	f240 221f 	movw	r2, #543	; 0x21f
 800b476:	490a      	ldr	r1, [pc, #40]	; (800b4a0 <mem_init+0x9c>)
 800b478:	480a      	ldr	r0, [pc, #40]	; (800b4a4 <mem_init+0xa0>)
 800b47a:	f00d f8a1 	bl	80185c0 <iprintf>
  }
}
 800b47e:	bf00      	nop
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	2000de04 	.word	0x2000de04
 800b48c:	2000e458 	.word	0x2000e458
 800b490:	2000e45c 	.word	0x2000e45c
 800b494:	2000e464 	.word	0x2000e464
 800b498:	2000e460 	.word	0x2000e460
 800b49c:	0801a8bc 	.word	0x0801a8bc
 800b4a0:	0801a990 	.word	0x0801a990
 800b4a4:	0801a904 	.word	0x0801a904

0800b4a8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7ff fef3 	bl	800b29c <mem_to_ptr>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	881b      	ldrh	r3, [r3, #0]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7ff feda 	bl	800b278 <ptr_to_mem>
 800b4c4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	885b      	ldrh	r3, [r3, #2]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7ff fed4 	bl	800b278 <ptr_to_mem>
 800b4d0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	881b      	ldrh	r3, [r3, #0]
 800b4d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4da:	d818      	bhi.n	800b50e <mem_link_valid+0x66>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	885b      	ldrh	r3, [r3, #2]
 800b4e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4e4:	d813      	bhi.n	800b50e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b4ea:	8afa      	ldrh	r2, [r7, #22]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d004      	beq.n	800b4fa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	881b      	ldrh	r3, [r3, #0]
 800b4f4:	8afa      	ldrh	r2, [r7, #22]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d109      	bne.n	800b50e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b4fa:	4b08      	ldr	r3, [pc, #32]	; (800b51c <mem_link_valid+0x74>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	429a      	cmp	r2, r3
 800b502:	d006      	beq.n	800b512 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	885b      	ldrh	r3, [r3, #2]
 800b508:	8afa      	ldrh	r2, [r7, #22]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d001      	beq.n	800b512 <mem_link_valid+0x6a>
    return 0;
 800b50e:	2300      	movs	r3, #0
 800b510:	e000      	b.n	800b514 <mem_link_valid+0x6c>
  }
  return 1;
 800b512:	2301      	movs	r3, #1
}
 800b514:	4618      	mov	r0, r3
 800b516:	3718      	adds	r7, #24
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	2000e45c 	.word	0x2000e45c

0800b520 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b088      	sub	sp, #32
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d070      	beq.n	800b610 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f003 0303 	and.w	r3, r3, #3
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00d      	beq.n	800b554 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b538:	4b37      	ldr	r3, [pc, #220]	; (800b618 <mem_free+0xf8>)
 800b53a:	f240 2273 	movw	r2, #627	; 0x273
 800b53e:	4937      	ldr	r1, [pc, #220]	; (800b61c <mem_free+0xfc>)
 800b540:	4837      	ldr	r0, [pc, #220]	; (800b620 <mem_free+0x100>)
 800b542:	f00d f83d 	bl	80185c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b546:	f00c ff2f 	bl	80183a8 <sys_arch_protect>
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f00c ff39 	bl	80183c4 <sys_arch_unprotect>
    return;
 800b552:	e05e      	b.n	800b612 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	3b08      	subs	r3, #8
 800b558:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b55a:	4b32      	ldr	r3, [pc, #200]	; (800b624 <mem_free+0x104>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	69fa      	ldr	r2, [r7, #28]
 800b560:	429a      	cmp	r2, r3
 800b562:	d306      	bcc.n	800b572 <mem_free+0x52>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f103 020c 	add.w	r2, r3, #12
 800b56a:	4b2f      	ldr	r3, [pc, #188]	; (800b628 <mem_free+0x108>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d90d      	bls.n	800b58e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b572:	4b29      	ldr	r3, [pc, #164]	; (800b618 <mem_free+0xf8>)
 800b574:	f240 227f 	movw	r2, #639	; 0x27f
 800b578:	492c      	ldr	r1, [pc, #176]	; (800b62c <mem_free+0x10c>)
 800b57a:	4829      	ldr	r0, [pc, #164]	; (800b620 <mem_free+0x100>)
 800b57c:	f00d f820 	bl	80185c0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b580:	f00c ff12 	bl	80183a8 <sys_arch_protect>
 800b584:	6138      	str	r0, [r7, #16]
 800b586:	6938      	ldr	r0, [r7, #16]
 800b588:	f00c ff1c 	bl	80183c4 <sys_arch_unprotect>
    return;
 800b58c:	e041      	b.n	800b612 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b58e:	4828      	ldr	r0, [pc, #160]	; (800b630 <mem_free+0x110>)
 800b590:	f00c fec8 	bl	8018324 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	791b      	ldrb	r3, [r3, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d110      	bne.n	800b5be <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b59c:	4b1e      	ldr	r3, [pc, #120]	; (800b618 <mem_free+0xf8>)
 800b59e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b5a2:	4924      	ldr	r1, [pc, #144]	; (800b634 <mem_free+0x114>)
 800b5a4:	481e      	ldr	r0, [pc, #120]	; (800b620 <mem_free+0x100>)
 800b5a6:	f00d f80b 	bl	80185c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b5aa:	4821      	ldr	r0, [pc, #132]	; (800b630 <mem_free+0x110>)
 800b5ac:	f00c fec9 	bl	8018342 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b5b0:	f00c fefa 	bl	80183a8 <sys_arch_protect>
 800b5b4:	6178      	str	r0, [r7, #20]
 800b5b6:	6978      	ldr	r0, [r7, #20]
 800b5b8:	f00c ff04 	bl	80183c4 <sys_arch_unprotect>
    return;
 800b5bc:	e029      	b.n	800b612 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b5be:	69f8      	ldr	r0, [r7, #28]
 800b5c0:	f7ff ff72 	bl	800b4a8 <mem_link_valid>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d110      	bne.n	800b5ec <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b5ca:	4b13      	ldr	r3, [pc, #76]	; (800b618 <mem_free+0xf8>)
 800b5cc:	f240 2295 	movw	r2, #661	; 0x295
 800b5d0:	4919      	ldr	r1, [pc, #100]	; (800b638 <mem_free+0x118>)
 800b5d2:	4813      	ldr	r0, [pc, #76]	; (800b620 <mem_free+0x100>)
 800b5d4:	f00c fff4 	bl	80185c0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b5d8:	4815      	ldr	r0, [pc, #84]	; (800b630 <mem_free+0x110>)
 800b5da:	f00c feb2 	bl	8018342 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b5de:	f00c fee3 	bl	80183a8 <sys_arch_protect>
 800b5e2:	61b8      	str	r0, [r7, #24]
 800b5e4:	69b8      	ldr	r0, [r7, #24]
 800b5e6:	f00c feed 	bl	80183c4 <sys_arch_unprotect>
    return;
 800b5ea:	e012      	b.n	800b612 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b5f2:	4b12      	ldr	r3, [pc, #72]	; (800b63c <mem_free+0x11c>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	69fa      	ldr	r2, [r7, #28]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d202      	bcs.n	800b602 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b5fc:	4a0f      	ldr	r2, [pc, #60]	; (800b63c <mem_free+0x11c>)
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b602:	69f8      	ldr	r0, [r7, #28]
 800b604:	f7ff fe5c 	bl	800b2c0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b608:	4809      	ldr	r0, [pc, #36]	; (800b630 <mem_free+0x110>)
 800b60a:	f00c fe9a 	bl	8018342 <sys_mutex_unlock>
 800b60e:	e000      	b.n	800b612 <mem_free+0xf2>
    return;
 800b610:	bf00      	nop
}
 800b612:	3720      	adds	r7, #32
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	0801a8bc 	.word	0x0801a8bc
 800b61c:	0801a9ac 	.word	0x0801a9ac
 800b620:	0801a904 	.word	0x0801a904
 800b624:	2000e458 	.word	0x2000e458
 800b628:	2000e45c 	.word	0x2000e45c
 800b62c:	0801a9d0 	.word	0x0801a9d0
 800b630:	2000e460 	.word	0x2000e460
 800b634:	0801a9ec 	.word	0x0801a9ec
 800b638:	0801aa14 	.word	0x0801aa14
 800b63c:	2000e464 	.word	0x2000e464

0800b640 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	460b      	mov	r3, r1
 800b64a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b64c:	887b      	ldrh	r3, [r7, #2]
 800b64e:	3303      	adds	r3, #3
 800b650:	b29b      	uxth	r3, r3
 800b652:	f023 0303 	bic.w	r3, r3, #3
 800b656:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b658:	8bfb      	ldrh	r3, [r7, #30]
 800b65a:	2b0b      	cmp	r3, #11
 800b65c:	d801      	bhi.n	800b662 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b65e:	230c      	movs	r3, #12
 800b660:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b662:	8bfb      	ldrh	r3, [r7, #30]
 800b664:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b668:	d803      	bhi.n	800b672 <mem_trim+0x32>
 800b66a:	8bfa      	ldrh	r2, [r7, #30]
 800b66c:	887b      	ldrh	r3, [r7, #2]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d201      	bcs.n	800b676 <mem_trim+0x36>
    return NULL;
 800b672:	2300      	movs	r3, #0
 800b674:	e0d8      	b.n	800b828 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b676:	4b6e      	ldr	r3, [pc, #440]	; (800b830 <mem_trim+0x1f0>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d304      	bcc.n	800b68a <mem_trim+0x4a>
 800b680:	4b6c      	ldr	r3, [pc, #432]	; (800b834 <mem_trim+0x1f4>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	429a      	cmp	r2, r3
 800b688:	d306      	bcc.n	800b698 <mem_trim+0x58>
 800b68a:	4b6b      	ldr	r3, [pc, #428]	; (800b838 <mem_trim+0x1f8>)
 800b68c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b690:	496a      	ldr	r1, [pc, #424]	; (800b83c <mem_trim+0x1fc>)
 800b692:	486b      	ldr	r0, [pc, #428]	; (800b840 <mem_trim+0x200>)
 800b694:	f00c ff94 	bl	80185c0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b698:	4b65      	ldr	r3, [pc, #404]	; (800b830 <mem_trim+0x1f0>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d304      	bcc.n	800b6ac <mem_trim+0x6c>
 800b6a2:	4b64      	ldr	r3, [pc, #400]	; (800b834 <mem_trim+0x1f4>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d307      	bcc.n	800b6bc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b6ac:	f00c fe7c 	bl	80183a8 <sys_arch_protect>
 800b6b0:	60b8      	str	r0, [r7, #8]
 800b6b2:	68b8      	ldr	r0, [r7, #8]
 800b6b4:	f00c fe86 	bl	80183c4 <sys_arch_unprotect>
    return rmem;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	e0b5      	b.n	800b828 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3b08      	subs	r3, #8
 800b6c0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b6c2:	69b8      	ldr	r0, [r7, #24]
 800b6c4:	f7ff fdea 	bl	800b29c <mem_to_ptr>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	881a      	ldrh	r2, [r3, #0]
 800b6d0:	8afb      	ldrh	r3, [r7, #22]
 800b6d2:	1ad3      	subs	r3, r2, r3
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	3b08      	subs	r3, #8
 800b6d8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b6da:	8bfa      	ldrh	r2, [r7, #30]
 800b6dc:	8abb      	ldrh	r3, [r7, #20]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d906      	bls.n	800b6f0 <mem_trim+0xb0>
 800b6e2:	4b55      	ldr	r3, [pc, #340]	; (800b838 <mem_trim+0x1f8>)
 800b6e4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b6e8:	4956      	ldr	r1, [pc, #344]	; (800b844 <mem_trim+0x204>)
 800b6ea:	4855      	ldr	r0, [pc, #340]	; (800b840 <mem_trim+0x200>)
 800b6ec:	f00c ff68 	bl	80185c0 <iprintf>
  if (newsize > size) {
 800b6f0:	8bfa      	ldrh	r2, [r7, #30]
 800b6f2:	8abb      	ldrh	r3, [r7, #20]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d901      	bls.n	800b6fc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	e095      	b.n	800b828 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b6fc:	8bfa      	ldrh	r2, [r7, #30]
 800b6fe:	8abb      	ldrh	r3, [r7, #20]
 800b700:	429a      	cmp	r2, r3
 800b702:	d101      	bne.n	800b708 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	e08f      	b.n	800b828 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b708:	484f      	ldr	r0, [pc, #316]	; (800b848 <mem_trim+0x208>)
 800b70a:	f00c fe0b 	bl	8018324 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	881b      	ldrh	r3, [r3, #0]
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff fdb0 	bl	800b278 <ptr_to_mem>
 800b718:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	791b      	ldrb	r3, [r3, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d13f      	bne.n	800b7a2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	881b      	ldrh	r3, [r3, #0]
 800b726:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b72a:	d106      	bne.n	800b73a <mem_trim+0xfa>
 800b72c:	4b42      	ldr	r3, [pc, #264]	; (800b838 <mem_trim+0x1f8>)
 800b72e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b732:	4946      	ldr	r1, [pc, #280]	; (800b84c <mem_trim+0x20c>)
 800b734:	4842      	ldr	r0, [pc, #264]	; (800b840 <mem_trim+0x200>)
 800b736:	f00c ff43 	bl	80185c0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	881b      	ldrh	r3, [r3, #0]
 800b73e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b740:	8afa      	ldrh	r2, [r7, #22]
 800b742:	8bfb      	ldrh	r3, [r7, #30]
 800b744:	4413      	add	r3, r2
 800b746:	b29b      	uxth	r3, r3
 800b748:	3308      	adds	r3, #8
 800b74a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b74c:	4b40      	ldr	r3, [pc, #256]	; (800b850 <mem_trim+0x210>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	693a      	ldr	r2, [r7, #16]
 800b752:	429a      	cmp	r2, r3
 800b754:	d106      	bne.n	800b764 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b756:	89fb      	ldrh	r3, [r7, #14]
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff fd8d 	bl	800b278 <ptr_to_mem>
 800b75e:	4603      	mov	r3, r0
 800b760:	4a3b      	ldr	r2, [pc, #236]	; (800b850 <mem_trim+0x210>)
 800b762:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b764:	89fb      	ldrh	r3, [r7, #14]
 800b766:	4618      	mov	r0, r3
 800b768:	f7ff fd86 	bl	800b278 <ptr_to_mem>
 800b76c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	2200      	movs	r2, #0
 800b772:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	89ba      	ldrh	r2, [r7, #12]
 800b778:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	8afa      	ldrh	r2, [r7, #22]
 800b77e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	89fa      	ldrh	r2, [r7, #14]
 800b784:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	881b      	ldrh	r3, [r3, #0]
 800b78a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b78e:	d047      	beq.n	800b820 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	881b      	ldrh	r3, [r3, #0]
 800b794:	4618      	mov	r0, r3
 800b796:	f7ff fd6f 	bl	800b278 <ptr_to_mem>
 800b79a:	4602      	mov	r2, r0
 800b79c:	89fb      	ldrh	r3, [r7, #14]
 800b79e:	8053      	strh	r3, [r2, #2]
 800b7a0:	e03e      	b.n	800b820 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b7a2:	8bfb      	ldrh	r3, [r7, #30]
 800b7a4:	f103 0214 	add.w	r2, r3, #20
 800b7a8:	8abb      	ldrh	r3, [r7, #20]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d838      	bhi.n	800b820 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b7ae:	8afa      	ldrh	r2, [r7, #22]
 800b7b0:	8bfb      	ldrh	r3, [r7, #30]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	3308      	adds	r3, #8
 800b7b8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	881b      	ldrh	r3, [r3, #0]
 800b7be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b7c2:	d106      	bne.n	800b7d2 <mem_trim+0x192>
 800b7c4:	4b1c      	ldr	r3, [pc, #112]	; (800b838 <mem_trim+0x1f8>)
 800b7c6:	f240 3216 	movw	r2, #790	; 0x316
 800b7ca:	4920      	ldr	r1, [pc, #128]	; (800b84c <mem_trim+0x20c>)
 800b7cc:	481c      	ldr	r0, [pc, #112]	; (800b840 <mem_trim+0x200>)
 800b7ce:	f00c fef7 	bl	80185c0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b7d2:	89fb      	ldrh	r3, [r7, #14]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7ff fd4f 	bl	800b278 <ptr_to_mem>
 800b7da:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b7dc:	4b1c      	ldr	r3, [pc, #112]	; (800b850 <mem_trim+0x210>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d202      	bcs.n	800b7ec <mem_trim+0x1ac>
      lfree = mem2;
 800b7e6:	4a1a      	ldr	r2, [pc, #104]	; (800b850 <mem_trim+0x210>)
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	881a      	ldrh	r2, [r3, #0]
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	8afa      	ldrh	r2, [r7, #22]
 800b7fe:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	89fa      	ldrh	r2, [r7, #14]
 800b804:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	881b      	ldrh	r3, [r3, #0]
 800b80a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b80e:	d007      	beq.n	800b820 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	881b      	ldrh	r3, [r3, #0]
 800b814:	4618      	mov	r0, r3
 800b816:	f7ff fd2f 	bl	800b278 <ptr_to_mem>
 800b81a:	4602      	mov	r2, r0
 800b81c:	89fb      	ldrh	r3, [r7, #14]
 800b81e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b820:	4809      	ldr	r0, [pc, #36]	; (800b848 <mem_trim+0x208>)
 800b822:	f00c fd8e 	bl	8018342 <sys_mutex_unlock>
  return rmem;
 800b826:	687b      	ldr	r3, [r7, #4]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3720      	adds	r7, #32
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	2000e458 	.word	0x2000e458
 800b834:	2000e45c 	.word	0x2000e45c
 800b838:	0801a8bc 	.word	0x0801a8bc
 800b83c:	0801aa48 	.word	0x0801aa48
 800b840:	0801a904 	.word	0x0801a904
 800b844:	0801aa60 	.word	0x0801aa60
 800b848:	2000e460 	.word	0x2000e460
 800b84c:	0801aa80 	.word	0x0801aa80
 800b850:	2000e464 	.word	0x2000e464

0800b854 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b088      	sub	sp, #32
 800b858:	af00      	add	r7, sp, #0
 800b85a:	4603      	mov	r3, r0
 800b85c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b85e:	88fb      	ldrh	r3, [r7, #6]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <mem_malloc+0x14>
    return NULL;
 800b864:	2300      	movs	r3, #0
 800b866:	e0e2      	b.n	800ba2e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b868:	88fb      	ldrh	r3, [r7, #6]
 800b86a:	3303      	adds	r3, #3
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	f023 0303 	bic.w	r3, r3, #3
 800b872:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b874:	8bbb      	ldrh	r3, [r7, #28]
 800b876:	2b0b      	cmp	r3, #11
 800b878:	d801      	bhi.n	800b87e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b87a:	230c      	movs	r3, #12
 800b87c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b87e:	8bbb      	ldrh	r3, [r7, #28]
 800b880:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b884:	d803      	bhi.n	800b88e <mem_malloc+0x3a>
 800b886:	8bba      	ldrh	r2, [r7, #28]
 800b888:	88fb      	ldrh	r3, [r7, #6]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d201      	bcs.n	800b892 <mem_malloc+0x3e>
    return NULL;
 800b88e:	2300      	movs	r3, #0
 800b890:	e0cd      	b.n	800ba2e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b892:	4869      	ldr	r0, [pc, #420]	; (800ba38 <mem_malloc+0x1e4>)
 800b894:	f00c fd46 	bl	8018324 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b898:	4b68      	ldr	r3, [pc, #416]	; (800ba3c <mem_malloc+0x1e8>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7ff fcfd 	bl	800b29c <mem_to_ptr>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	83fb      	strh	r3, [r7, #30]
 800b8a6:	e0b7      	b.n	800ba18 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b8a8:	8bfb      	ldrh	r3, [r7, #30]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7ff fce4 	bl	800b278 <ptr_to_mem>
 800b8b0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	791b      	ldrb	r3, [r3, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f040 80a7 	bne.w	800ba0a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	881b      	ldrh	r3, [r3, #0]
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	8bfb      	ldrh	r3, [r7, #30]
 800b8c4:	1ad3      	subs	r3, r2, r3
 800b8c6:	f1a3 0208 	sub.w	r2, r3, #8
 800b8ca:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	f0c0 809c 	bcc.w	800ba0a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	881b      	ldrh	r3, [r3, #0]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	8bfb      	ldrh	r3, [r7, #30]
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	f1a3 0208 	sub.w	r2, r3, #8
 800b8e0:	8bbb      	ldrh	r3, [r7, #28]
 800b8e2:	3314      	adds	r3, #20
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d333      	bcc.n	800b950 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b8e8:	8bfa      	ldrh	r2, [r7, #30]
 800b8ea:	8bbb      	ldrh	r3, [r7, #28]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	3308      	adds	r3, #8
 800b8f2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b8f4:	8a7b      	ldrh	r3, [r7, #18]
 800b8f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8fa:	d106      	bne.n	800b90a <mem_malloc+0xb6>
 800b8fc:	4b50      	ldr	r3, [pc, #320]	; (800ba40 <mem_malloc+0x1ec>)
 800b8fe:	f240 3287 	movw	r2, #903	; 0x387
 800b902:	4950      	ldr	r1, [pc, #320]	; (800ba44 <mem_malloc+0x1f0>)
 800b904:	4850      	ldr	r0, [pc, #320]	; (800ba48 <mem_malloc+0x1f4>)
 800b906:	f00c fe5b 	bl	80185c0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b90a:	8a7b      	ldrh	r3, [r7, #18]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff fcb3 	bl	800b278 <ptr_to_mem>
 800b912:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	881a      	ldrh	r2, [r3, #0]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	8bfa      	ldrh	r2, [r7, #30]
 800b926:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	8a7a      	ldrh	r2, [r7, #18]
 800b92c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2201      	movs	r2, #1
 800b932:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	881b      	ldrh	r3, [r3, #0]
 800b938:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b93c:	d00b      	beq.n	800b956 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	881b      	ldrh	r3, [r3, #0]
 800b942:	4618      	mov	r0, r3
 800b944:	f7ff fc98 	bl	800b278 <ptr_to_mem>
 800b948:	4602      	mov	r2, r0
 800b94a:	8a7b      	ldrh	r3, [r7, #18]
 800b94c:	8053      	strh	r3, [r2, #2]
 800b94e:	e002      	b.n	800b956 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	2201      	movs	r2, #1
 800b954:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b956:	4b39      	ldr	r3, [pc, #228]	; (800ba3c <mem_malloc+0x1e8>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	697a      	ldr	r2, [r7, #20]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d127      	bne.n	800b9b0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b960:	4b36      	ldr	r3, [pc, #216]	; (800ba3c <mem_malloc+0x1e8>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b966:	e005      	b.n	800b974 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	881b      	ldrh	r3, [r3, #0]
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7ff fc83 	bl	800b278 <ptr_to_mem>
 800b972:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	791b      	ldrb	r3, [r3, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d004      	beq.n	800b986 <mem_malloc+0x132>
 800b97c:	4b33      	ldr	r3, [pc, #204]	; (800ba4c <mem_malloc+0x1f8>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	69ba      	ldr	r2, [r7, #24]
 800b982:	429a      	cmp	r2, r3
 800b984:	d1f0      	bne.n	800b968 <mem_malloc+0x114>
          }
          lfree = cur;
 800b986:	4a2d      	ldr	r2, [pc, #180]	; (800ba3c <mem_malloc+0x1e8>)
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b98c:	4b2b      	ldr	r3, [pc, #172]	; (800ba3c <mem_malloc+0x1e8>)
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	4b2e      	ldr	r3, [pc, #184]	; (800ba4c <mem_malloc+0x1f8>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	429a      	cmp	r2, r3
 800b996:	d00b      	beq.n	800b9b0 <mem_malloc+0x15c>
 800b998:	4b28      	ldr	r3, [pc, #160]	; (800ba3c <mem_malloc+0x1e8>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	791b      	ldrb	r3, [r3, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d006      	beq.n	800b9b0 <mem_malloc+0x15c>
 800b9a2:	4b27      	ldr	r3, [pc, #156]	; (800ba40 <mem_malloc+0x1ec>)
 800b9a4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b9a8:	4929      	ldr	r1, [pc, #164]	; (800ba50 <mem_malloc+0x1fc>)
 800b9aa:	4827      	ldr	r0, [pc, #156]	; (800ba48 <mem_malloc+0x1f4>)
 800b9ac:	f00c fe08 	bl	80185c0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b9b0:	4821      	ldr	r0, [pc, #132]	; (800ba38 <mem_malloc+0x1e4>)
 800b9b2:	f00c fcc6 	bl	8018342 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b9b6:	8bba      	ldrh	r2, [r7, #28]
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	3308      	adds	r3, #8
 800b9be:	4a23      	ldr	r2, [pc, #140]	; (800ba4c <mem_malloc+0x1f8>)
 800b9c0:	6812      	ldr	r2, [r2, #0]
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d906      	bls.n	800b9d4 <mem_malloc+0x180>
 800b9c6:	4b1e      	ldr	r3, [pc, #120]	; (800ba40 <mem_malloc+0x1ec>)
 800b9c8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b9cc:	4921      	ldr	r1, [pc, #132]	; (800ba54 <mem_malloc+0x200>)
 800b9ce:	481e      	ldr	r0, [pc, #120]	; (800ba48 <mem_malloc+0x1f4>)
 800b9d0:	f00c fdf6 	bl	80185c0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	f003 0303 	and.w	r3, r3, #3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d006      	beq.n	800b9ec <mem_malloc+0x198>
 800b9de:	4b18      	ldr	r3, [pc, #96]	; (800ba40 <mem_malloc+0x1ec>)
 800b9e0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b9e4:	491c      	ldr	r1, [pc, #112]	; (800ba58 <mem_malloc+0x204>)
 800b9e6:	4818      	ldr	r0, [pc, #96]	; (800ba48 <mem_malloc+0x1f4>)
 800b9e8:	f00c fdea 	bl	80185c0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	f003 0303 	and.w	r3, r3, #3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d006      	beq.n	800ba04 <mem_malloc+0x1b0>
 800b9f6:	4b12      	ldr	r3, [pc, #72]	; (800ba40 <mem_malloc+0x1ec>)
 800b9f8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b9fc:	4917      	ldr	r1, [pc, #92]	; (800ba5c <mem_malloc+0x208>)
 800b9fe:	4812      	ldr	r0, [pc, #72]	; (800ba48 <mem_malloc+0x1f4>)
 800ba00:	f00c fdde 	bl	80185c0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	3308      	adds	r3, #8
 800ba08:	e011      	b.n	800ba2e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ba0a:	8bfb      	ldrh	r3, [r7, #30]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7ff fc33 	bl	800b278 <ptr_to_mem>
 800ba12:	4603      	mov	r3, r0
 800ba14:	881b      	ldrh	r3, [r3, #0]
 800ba16:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ba18:	8bfa      	ldrh	r2, [r7, #30]
 800ba1a:	8bbb      	ldrh	r3, [r7, #28]
 800ba1c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ba20:	429a      	cmp	r2, r3
 800ba22:	f4ff af41 	bcc.w	800b8a8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ba26:	4804      	ldr	r0, [pc, #16]	; (800ba38 <mem_malloc+0x1e4>)
 800ba28:	f00c fc8b 	bl	8018342 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3720      	adds	r7, #32
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	2000e460 	.word	0x2000e460
 800ba3c:	2000e464 	.word	0x2000e464
 800ba40:	0801a8bc 	.word	0x0801a8bc
 800ba44:	0801aa80 	.word	0x0801aa80
 800ba48:	0801a904 	.word	0x0801a904
 800ba4c:	2000e45c 	.word	0x2000e45c
 800ba50:	0801aa94 	.word	0x0801aa94
 800ba54:	0801aab0 	.word	0x0801aab0
 800ba58:	0801aae0 	.word	0x0801aae0
 800ba5c:	0801ab10 	.word	0x0801ab10

0800ba60 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	3303      	adds	r3, #3
 800ba76:	f023 0303 	bic.w	r3, r3, #3
 800ba7a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	60fb      	str	r3, [r7, #12]
 800ba80:	e011      	b.n	800baa6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	881b      	ldrh	r3, [r3, #0]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	3301      	adds	r3, #1
 800baa4:	60fb      	str	r3, [r7, #12]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	885b      	ldrh	r3, [r3, #2]
 800baaa:	461a      	mov	r2, r3
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	4293      	cmp	r3, r2
 800bab0:	dbe7      	blt.n	800ba82 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bab2:	bf00      	nop
 800bab4:	bf00      	nop
 800bab6:	3714      	adds	r7, #20
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bac6:	2300      	movs	r3, #0
 800bac8:	80fb      	strh	r3, [r7, #6]
 800baca:	e009      	b.n	800bae0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bacc:	88fb      	ldrh	r3, [r7, #6]
 800bace:	4a08      	ldr	r2, [pc, #32]	; (800baf0 <memp_init+0x30>)
 800bad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7ff ffc3 	bl	800ba60 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bada:	88fb      	ldrh	r3, [r7, #6]
 800badc:	3301      	adds	r3, #1
 800bade:	80fb      	strh	r3, [r7, #6]
 800bae0:	88fb      	ldrh	r3, [r7, #6]
 800bae2:	2b0c      	cmp	r3, #12
 800bae4:	d9f2      	bls.n	800bacc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bae6:	bf00      	nop
 800bae8:	bf00      	nop
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	08027800 	.word	0x08027800

0800baf4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bafc:	f00c fc54 	bl	80183a8 <sys_arch_protect>
 800bb00:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d015      	beq.n	800bb3c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	6812      	ldr	r2, [r2, #0]
 800bb18:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	f003 0303 	and.w	r3, r3, #3
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d006      	beq.n	800bb32 <do_memp_malloc_pool+0x3e>
 800bb24:	4b09      	ldr	r3, [pc, #36]	; (800bb4c <do_memp_malloc_pool+0x58>)
 800bb26:	f44f 728c 	mov.w	r2, #280	; 0x118
 800bb2a:	4909      	ldr	r1, [pc, #36]	; (800bb50 <do_memp_malloc_pool+0x5c>)
 800bb2c:	4809      	ldr	r0, [pc, #36]	; (800bb54 <do_memp_malloc_pool+0x60>)
 800bb2e:	f00c fd47 	bl	80185c0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f00c fc46 	bl	80183c4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	e003      	b.n	800bb44 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f00c fc41 	bl	80183c4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	0801ab34 	.word	0x0801ab34
 800bb50:	0801ab64 	.word	0x0801ab64
 800bb54:	0801ab88 	.word	0x0801ab88

0800bb58 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d106      	bne.n	800bb74 <memp_malloc_pool+0x1c>
 800bb66:	4b0a      	ldr	r3, [pc, #40]	; (800bb90 <memp_malloc_pool+0x38>)
 800bb68:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800bb6c:	4909      	ldr	r1, [pc, #36]	; (800bb94 <memp_malloc_pool+0x3c>)
 800bb6e:	480a      	ldr	r0, [pc, #40]	; (800bb98 <memp_malloc_pool+0x40>)
 800bb70:	f00c fd26 	bl	80185c0 <iprintf>
  if (desc == NULL) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d101      	bne.n	800bb7e <memp_malloc_pool+0x26>
    return NULL;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	e003      	b.n	800bb86 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7ff ffb8 	bl	800baf4 <do_memp_malloc_pool>
 800bb84:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	0801ab34 	.word	0x0801ab34
 800bb94:	0801abb0 	.word	0x0801abb0
 800bb98:	0801ab88 	.word	0x0801ab88

0800bb9c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	4603      	mov	r3, r0
 800bba4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bba6:	79fb      	ldrb	r3, [r7, #7]
 800bba8:	2b0c      	cmp	r3, #12
 800bbaa:	d908      	bls.n	800bbbe <memp_malloc+0x22>
 800bbac:	4b0a      	ldr	r3, [pc, #40]	; (800bbd8 <memp_malloc+0x3c>)
 800bbae:	f240 1257 	movw	r2, #343	; 0x157
 800bbb2:	490a      	ldr	r1, [pc, #40]	; (800bbdc <memp_malloc+0x40>)
 800bbb4:	480a      	ldr	r0, [pc, #40]	; (800bbe0 <memp_malloc+0x44>)
 800bbb6:	f00c fd03 	bl	80185c0 <iprintf>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	e008      	b.n	800bbd0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bbbe:	79fb      	ldrb	r3, [r7, #7]
 800bbc0:	4a08      	ldr	r2, [pc, #32]	; (800bbe4 <memp_malloc+0x48>)
 800bbc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7ff ff94 	bl	800baf4 <do_memp_malloc_pool>
 800bbcc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bbce:	68fb      	ldr	r3, [r7, #12]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	0801ab34 	.word	0x0801ab34
 800bbdc:	0801abc4 	.word	0x0801abc4
 800bbe0:	0801ab88 	.word	0x0801ab88
 800bbe4:	08027800 	.word	0x08027800

0800bbe8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	f003 0303 	and.w	r3, r3, #3
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d006      	beq.n	800bc0a <do_memp_free_pool+0x22>
 800bbfc:	4b0d      	ldr	r3, [pc, #52]	; (800bc34 <do_memp_free_pool+0x4c>)
 800bbfe:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800bc02:	490d      	ldr	r1, [pc, #52]	; (800bc38 <do_memp_free_pool+0x50>)
 800bc04:	480d      	ldr	r0, [pc, #52]	; (800bc3c <do_memp_free_pool+0x54>)
 800bc06:	f00c fcdb 	bl	80185c0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bc0e:	f00c fbcb 	bl	80183a8 <sys_arch_protect>
 800bc12:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800bc26:	68b8      	ldr	r0, [r7, #8]
 800bc28:	f00c fbcc 	bl	80183c4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bc2c:	bf00      	nop
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	0801ab34 	.word	0x0801ab34
 800bc38:	0801abe4 	.word	0x0801abe4
 800bc3c:	0801ab88 	.word	0x0801ab88

0800bc40 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d106      	bne.n	800bc5e <memp_free_pool+0x1e>
 800bc50:	4b0a      	ldr	r3, [pc, #40]	; (800bc7c <memp_free_pool+0x3c>)
 800bc52:	f240 1295 	movw	r2, #405	; 0x195
 800bc56:	490a      	ldr	r1, [pc, #40]	; (800bc80 <memp_free_pool+0x40>)
 800bc58:	480a      	ldr	r0, [pc, #40]	; (800bc84 <memp_free_pool+0x44>)
 800bc5a:	f00c fcb1 	bl	80185c0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d007      	beq.n	800bc74 <memp_free_pool+0x34>
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d004      	beq.n	800bc74 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800bc6a:	6839      	ldr	r1, [r7, #0]
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7ff ffbb 	bl	800bbe8 <do_memp_free_pool>
 800bc72:	e000      	b.n	800bc76 <memp_free_pool+0x36>
    return;
 800bc74:	bf00      	nop
}
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	0801ab34 	.word	0x0801ab34
 800bc80:	0801abb0 	.word	0x0801abb0
 800bc84:	0801ab88 	.word	0x0801ab88

0800bc88 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	6039      	str	r1, [r7, #0]
 800bc92:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bc94:	79fb      	ldrb	r3, [r7, #7]
 800bc96:	2b0c      	cmp	r3, #12
 800bc98:	d907      	bls.n	800bcaa <memp_free+0x22>
 800bc9a:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <memp_free+0x44>)
 800bc9c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800bca0:	490b      	ldr	r1, [pc, #44]	; (800bcd0 <memp_free+0x48>)
 800bca2:	480c      	ldr	r0, [pc, #48]	; (800bcd4 <memp_free+0x4c>)
 800bca4:	f00c fc8c 	bl	80185c0 <iprintf>
 800bca8:	e00c      	b.n	800bcc4 <memp_free+0x3c>

  if (mem == NULL) {
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d008      	beq.n	800bcc2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bcb0:	79fb      	ldrb	r3, [r7, #7]
 800bcb2:	4a09      	ldr	r2, [pc, #36]	; (800bcd8 <memp_free+0x50>)
 800bcb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcb8:	6839      	ldr	r1, [r7, #0]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7ff ff94 	bl	800bbe8 <do_memp_free_pool>
 800bcc0:	e000      	b.n	800bcc4 <memp_free+0x3c>
    return;
 800bcc2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	0801ab34 	.word	0x0801ab34
 800bcd0:	0801ac04 	.word	0x0801ac04
 800bcd4:	0801ab88 	.word	0x0801ab88
 800bcd8:	08027800 	.word	0x08027800

0800bcdc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bce0:	bf00      	nop
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
	...

0800bcec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d108      	bne.n	800bd12 <netif_add+0x26>
 800bd00:	4b5b      	ldr	r3, [pc, #364]	; (800be70 <netif_add+0x184>)
 800bd02:	f240 1227 	movw	r2, #295	; 0x127
 800bd06:	495b      	ldr	r1, [pc, #364]	; (800be74 <netif_add+0x188>)
 800bd08:	485b      	ldr	r0, [pc, #364]	; (800be78 <netif_add+0x18c>)
 800bd0a:	f00c fc59 	bl	80185c0 <iprintf>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	e0a9      	b.n	800be66 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d108      	bne.n	800bd2a <netif_add+0x3e>
 800bd18:	4b55      	ldr	r3, [pc, #340]	; (800be70 <netif_add+0x184>)
 800bd1a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bd1e:	4957      	ldr	r1, [pc, #348]	; (800be7c <netif_add+0x190>)
 800bd20:	4855      	ldr	r0, [pc, #340]	; (800be78 <netif_add+0x18c>)
 800bd22:	f00c fc4d 	bl	80185c0 <iprintf>
 800bd26:	2300      	movs	r3, #0
 800bd28:	e09d      	b.n	800be66 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d101      	bne.n	800bd34 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bd30:	4b53      	ldr	r3, [pc, #332]	; (800be80 <netif_add+0x194>)
 800bd32:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bd3a:	4b51      	ldr	r3, [pc, #324]	; (800be80 <netif_add+0x194>)
 800bd3c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d101      	bne.n	800bd48 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bd44:	4b4e      	ldr	r3, [pc, #312]	; (800be80 <netif_add+0x194>)
 800bd46:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2200      	movs	r2, #0
 800bd58:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	4a49      	ldr	r2, [pc, #292]	; (800be84 <netif_add+0x198>)
 800bd5e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2200      	movs	r2, #0
 800bd64:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	3324      	adds	r3, #36	; 0x24
 800bd72:	2204      	movs	r2, #4
 800bd74:	2100      	movs	r1, #0
 800bd76:	4618      	mov	r0, r3
 800bd78:	f00c fcc1 	bl	80186fe <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6a3a      	ldr	r2, [r7, #32]
 800bd86:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800bd88:	4b3f      	ldr	r3, [pc, #252]	; (800be88 <netif_add+0x19c>)
 800bd8a:	781a      	ldrb	r2, [r3, #0]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd96:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	68b9      	ldr	r1, [r7, #8]
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f000 f914 	bl	800bfcc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	4798      	blx	r3
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d001      	beq.n	800bdb4 <netif_add+0xc8>
    return NULL;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	e058      	b.n	800be66 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bdba:	2bff      	cmp	r3, #255	; 0xff
 800bdbc:	d103      	bne.n	800bdc6 <netif_add+0xda>
        netif->num = 0;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bdca:	4b30      	ldr	r3, [pc, #192]	; (800be8c <netif_add+0x1a0>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	617b      	str	r3, [r7, #20]
 800bdd0:	e02b      	b.n	800be2a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bdd2:	697a      	ldr	r2, [r7, #20]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d106      	bne.n	800bde8 <netif_add+0xfc>
 800bdda:	4b25      	ldr	r3, [pc, #148]	; (800be70 <netif_add+0x184>)
 800bddc:	f240 128b 	movw	r2, #395	; 0x18b
 800bde0:	492b      	ldr	r1, [pc, #172]	; (800be90 <netif_add+0x1a4>)
 800bde2:	4825      	ldr	r0, [pc, #148]	; (800be78 <netif_add+0x18c>)
 800bde4:	f00c fbec 	bl	80185c0 <iprintf>
        num_netifs++;
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	3301      	adds	r3, #1
 800bdec:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	2bff      	cmp	r3, #255	; 0xff
 800bdf2:	dd06      	ble.n	800be02 <netif_add+0x116>
 800bdf4:	4b1e      	ldr	r3, [pc, #120]	; (800be70 <netif_add+0x184>)
 800bdf6:	f240 128d 	movw	r2, #397	; 0x18d
 800bdfa:	4926      	ldr	r1, [pc, #152]	; (800be94 <netif_add+0x1a8>)
 800bdfc:	481e      	ldr	r0, [pc, #120]	; (800be78 <netif_add+0x18c>)
 800bdfe:	f00c fbdf 	bl	80185c0 <iprintf>
        if (netif2->num == netif->num) {
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be0e:	429a      	cmp	r2, r3
 800be10:	d108      	bne.n	800be24 <netif_add+0x138>
          netif->num++;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be18:	3301      	adds	r3, #1
 800be1a:	b2da      	uxtb	r2, r3
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800be22:	e005      	b.n	800be30 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	617b      	str	r3, [r7, #20]
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1d0      	bne.n	800bdd2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1be      	bne.n	800bdb4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be3c:	2bfe      	cmp	r3, #254	; 0xfe
 800be3e:	d103      	bne.n	800be48 <netif_add+0x15c>
    netif_num = 0;
 800be40:	4b11      	ldr	r3, [pc, #68]	; (800be88 <netif_add+0x19c>)
 800be42:	2200      	movs	r2, #0
 800be44:	701a      	strb	r2, [r3, #0]
 800be46:	e006      	b.n	800be56 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be4e:	3301      	adds	r3, #1
 800be50:	b2da      	uxtb	r2, r3
 800be52:	4b0d      	ldr	r3, [pc, #52]	; (800be88 <netif_add+0x19c>)
 800be54:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800be56:	4b0d      	ldr	r3, [pc, #52]	; (800be8c <netif_add+0x1a0>)
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800be5e:	4a0b      	ldr	r2, [pc, #44]	; (800be8c <netif_add+0x1a0>)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800be64:	68fb      	ldr	r3, [r7, #12]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	0801ac20 	.word	0x0801ac20
 800be74:	0801acb4 	.word	0x0801acb4
 800be78:	0801ac70 	.word	0x0801ac70
 800be7c:	0801acd0 	.word	0x0801acd0
 800be80:	08027884 	.word	0x08027884
 800be84:	0800c2af 	.word	0x0800c2af
 800be88:	2001155c 	.word	0x2001155c
 800be8c:	20011554 	.word	0x20011554
 800be90:	0801acf4 	.word	0x0801acf4
 800be94:	0801ad08 	.word	0x0801ad08

0800be98 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bea2:	6839      	ldr	r1, [r7, #0]
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f002 fe93 	bl	800ebd0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800beaa:	6839      	ldr	r1, [r7, #0]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f007 ff0d 	bl	8013ccc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800beb2:	bf00      	nop
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
	...

0800bebc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b086      	sub	sp, #24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d106      	bne.n	800bedc <netif_do_set_ipaddr+0x20>
 800bece:	4b1d      	ldr	r3, [pc, #116]	; (800bf44 <netif_do_set_ipaddr+0x88>)
 800bed0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800bed4:	491c      	ldr	r1, [pc, #112]	; (800bf48 <netif_do_set_ipaddr+0x8c>)
 800bed6:	481d      	ldr	r0, [pc, #116]	; (800bf4c <netif_do_set_ipaddr+0x90>)
 800bed8:	f00c fb72 	bl	80185c0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d106      	bne.n	800bef0 <netif_do_set_ipaddr+0x34>
 800bee2:	4b18      	ldr	r3, [pc, #96]	; (800bf44 <netif_do_set_ipaddr+0x88>)
 800bee4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800bee8:	4917      	ldr	r1, [pc, #92]	; (800bf48 <netif_do_set_ipaddr+0x8c>)
 800beea:	4818      	ldr	r0, [pc, #96]	; (800bf4c <netif_do_set_ipaddr+0x90>)
 800beec:	f00c fb68 	bl	80185c0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	3304      	adds	r3, #4
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	429a      	cmp	r2, r3
 800befc:	d01c      	beq.n	800bf38 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	3304      	adds	r3, #4
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bf0e:	f107 0314 	add.w	r3, r7, #20
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f7ff ffbf 	bl	800be98 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d002      	beq.n	800bf26 <netif_do_set_ipaddr+0x6a>
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	e000      	b.n	800bf28 <netif_do_set_ipaddr+0x6c>
 800bf26:	2300      	movs	r3, #0
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bf2c:	2101      	movs	r1, #1
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 f8d2 	bl	800c0d8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bf34:	2301      	movs	r3, #1
 800bf36:	e000      	b.n	800bf3a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3718      	adds	r7, #24
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	0801ac20 	.word	0x0801ac20
 800bf48:	0801ad38 	.word	0x0801ad38
 800bf4c:	0801ac70 	.word	0x0801ac70

0800bf50 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	3308      	adds	r3, #8
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d00a      	beq.n	800bf80 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d002      	beq.n	800bf76 <netif_do_set_netmask+0x26>
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	e000      	b.n	800bf78 <netif_do_set_netmask+0x28>
 800bf76:	2300      	movs	r3, #0
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	e000      	b.n	800bf82 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3714      	adds	r7, #20
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr

0800bf8e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bf8e:	b480      	push	{r7}
 800bf90:	b085      	sub	sp, #20
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	60f8      	str	r0, [r7, #12]
 800bf96:	60b9      	str	r1, [r7, #8]
 800bf98:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	330c      	adds	r3, #12
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d00a      	beq.n	800bfbe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d002      	beq.n	800bfb4 <netif_do_set_gw+0x26>
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	e000      	b.n	800bfb6 <netif_do_set_gw+0x28>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e000      	b.n	800bfc0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800bfbe:	2300      	movs	r3, #0
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b088      	sub	sp, #32
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
 800bfd8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d101      	bne.n	800bfec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bfe8:	4b1c      	ldr	r3, [pc, #112]	; (800c05c <netif_set_addr+0x90>)
 800bfea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d101      	bne.n	800bff6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800bff2:	4b1a      	ldr	r3, [pc, #104]	; (800c05c <netif_set_addr+0x90>)
 800bff4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d101      	bne.n	800c000 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bffc:	4b17      	ldr	r3, [pc, #92]	; (800c05c <netif_set_addr+0x90>)
 800bffe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d003      	beq.n	800c00e <netif_set_addr+0x42>
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d101      	bne.n	800c012 <netif_set_addr+0x46>
 800c00e:	2301      	movs	r3, #1
 800c010:	e000      	b.n	800c014 <netif_set_addr+0x48>
 800c012:	2300      	movs	r3, #0
 800c014:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d006      	beq.n	800c02a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c01c:	f107 0310 	add.w	r3, r7, #16
 800c020:	461a      	mov	r2, r3
 800c022:	68b9      	ldr	r1, [r7, #8]
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f7ff ff49 	bl	800bebc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c02a:	69fa      	ldr	r2, [r7, #28]
 800c02c:	6879      	ldr	r1, [r7, #4]
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f7ff ff8e 	bl	800bf50 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c034:	69ba      	ldr	r2, [r7, #24]
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f7ff ffa8 	bl	800bf8e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d106      	bne.n	800c052 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c044:	f107 0310 	add.w	r3, r7, #16
 800c048:	461a      	mov	r2, r3
 800c04a:	68b9      	ldr	r1, [r7, #8]
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f7ff ff35 	bl	800bebc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c052:	bf00      	nop
 800c054:	3720      	adds	r7, #32
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	08027884 	.word	0x08027884

0800c060 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c068:	4a04      	ldr	r2, [pc, #16]	; (800c07c <netif_set_default+0x1c>)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c06e:	bf00      	nop
 800c070:	370c      	adds	r7, #12
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	20011558 	.word	0x20011558

0800c080 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d107      	bne.n	800c09e <netif_set_up+0x1e>
 800c08e:	4b0f      	ldr	r3, [pc, #60]	; (800c0cc <netif_set_up+0x4c>)
 800c090:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c094:	490e      	ldr	r1, [pc, #56]	; (800c0d0 <netif_set_up+0x50>)
 800c096:	480f      	ldr	r0, [pc, #60]	; (800c0d4 <netif_set_up+0x54>)
 800c098:	f00c fa92 	bl	80185c0 <iprintf>
 800c09c:	e013      	b.n	800c0c6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c0a4:	f003 0301 	and.w	r3, r3, #1
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10c      	bne.n	800c0c6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c0b2:	f043 0301 	orr.w	r3, r3, #1
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c0be:	2103      	movs	r1, #3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f809 	bl	800c0d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	0801ac20 	.word	0x0801ac20
 800c0d0:	0801ada8 	.word	0x0801ada8
 800c0d4:	0801ac70 	.word	0x0801ac70

0800c0d8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d106      	bne.n	800c0f8 <netif_issue_reports+0x20>
 800c0ea:	4b18      	ldr	r3, [pc, #96]	; (800c14c <netif_issue_reports+0x74>)
 800c0ec:	f240 326d 	movw	r2, #877	; 0x36d
 800c0f0:	4917      	ldr	r1, [pc, #92]	; (800c150 <netif_issue_reports+0x78>)
 800c0f2:	4818      	ldr	r0, [pc, #96]	; (800c154 <netif_issue_reports+0x7c>)
 800c0f4:	f00c fa64 	bl	80185c0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c0fe:	f003 0304 	and.w	r3, r3, #4
 800c102:	2b00      	cmp	r3, #0
 800c104:	d01e      	beq.n	800c144 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c10c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c110:	2b00      	cmp	r3, #0
 800c112:	d017      	beq.n	800c144 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c114:	78fb      	ldrb	r3, [r7, #3]
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d013      	beq.n	800c146 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	3304      	adds	r3, #4
 800c122:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00e      	beq.n	800c146 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c12e:	f003 0308 	and.w	r3, r3, #8
 800c132:	2b00      	cmp	r3, #0
 800c134:	d007      	beq.n	800c146 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	3304      	adds	r3, #4
 800c13a:	4619      	mov	r1, r3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f00a fbc5 	bl	80168cc <etharp_request>
 800c142:	e000      	b.n	800c146 <netif_issue_reports+0x6e>
    return;
 800c144:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c146:	3708      	adds	r7, #8
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	0801ac20 	.word	0x0801ac20
 800c150:	0801adc4 	.word	0x0801adc4
 800c154:	0801ac70 	.word	0x0801ac70

0800c158 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d107      	bne.n	800c176 <netif_set_down+0x1e>
 800c166:	4b12      	ldr	r3, [pc, #72]	; (800c1b0 <netif_set_down+0x58>)
 800c168:	f240 329b 	movw	r2, #923	; 0x39b
 800c16c:	4911      	ldr	r1, [pc, #68]	; (800c1b4 <netif_set_down+0x5c>)
 800c16e:	4812      	ldr	r0, [pc, #72]	; (800c1b8 <netif_set_down+0x60>)
 800c170:	f00c fa26 	bl	80185c0 <iprintf>
 800c174:	e019      	b.n	800c1aa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c17c:	f003 0301 	and.w	r3, r3, #1
 800c180:	2b00      	cmp	r3, #0
 800c182:	d012      	beq.n	800c1aa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c18a:	f023 0301 	bic.w	r3, r3, #1
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c19c:	f003 0308 	and.w	r3, r3, #8
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f009 ff4b 	bl	8016040 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	0801ac20 	.word	0x0801ac20
 800c1b4:	0801ade8 	.word	0x0801ade8
 800c1b8:	0801ac70 	.word	0x0801ac70

0800c1bc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d107      	bne.n	800c1da <netif_set_link_up+0x1e>
 800c1ca:	4b15      	ldr	r3, [pc, #84]	; (800c220 <netif_set_link_up+0x64>)
 800c1cc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c1d0:	4914      	ldr	r1, [pc, #80]	; (800c224 <netif_set_link_up+0x68>)
 800c1d2:	4815      	ldr	r0, [pc, #84]	; (800c228 <netif_set_link_up+0x6c>)
 800c1d4:	f00c f9f4 	bl	80185c0 <iprintf>
 800c1d8:	e01e      	b.n	800c218 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c1e0:	f003 0304 	and.w	r3, r3, #4
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d117      	bne.n	800c218 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c1ee:	f043 0304 	orr.w	r3, r3, #4
 800c1f2:	b2da      	uxtb	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f008 f990 	bl	8014520 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c200:	2103      	movs	r1, #3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7ff ff68 	bl	800c0d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	69db      	ldr	r3, [r3, #28]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d003      	beq.n	800c218 <netif_set_link_up+0x5c>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	69db      	ldr	r3, [r3, #28]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c218:	3708      	adds	r7, #8
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	0801ac20 	.word	0x0801ac20
 800c224:	0801ae08 	.word	0x0801ae08
 800c228:	0801ac70 	.word	0x0801ac70

0800c22c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d107      	bne.n	800c24a <netif_set_link_down+0x1e>
 800c23a:	4b11      	ldr	r3, [pc, #68]	; (800c280 <netif_set_link_down+0x54>)
 800c23c:	f240 4206 	movw	r2, #1030	; 0x406
 800c240:	4910      	ldr	r1, [pc, #64]	; (800c284 <netif_set_link_down+0x58>)
 800c242:	4811      	ldr	r0, [pc, #68]	; (800c288 <netif_set_link_down+0x5c>)
 800c244:	f00c f9bc 	bl	80185c0 <iprintf>
 800c248:	e017      	b.n	800c27a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c250:	f003 0304 	and.w	r3, r3, #4
 800c254:	2b00      	cmp	r3, #0
 800c256:	d010      	beq.n	800c27a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c25e:	f023 0304 	bic.w	r3, r3, #4
 800c262:	b2da      	uxtb	r2, r3
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	69db      	ldr	r3, [r3, #28]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d003      	beq.n	800c27a <netif_set_link_down+0x4e>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	69db      	ldr	r3, [r3, #28]
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	0801ac20 	.word	0x0801ac20
 800c284:	0801ae2c 	.word	0x0801ae2c
 800c288:	0801ac70 	.word	0x0801ac70

0800c28c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d002      	beq.n	800c2a2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	683a      	ldr	r2, [r7, #0]
 800c2a0:	61da      	str	r2, [r3, #28]
  }
}
 800c2a2:	bf00      	nop
 800c2a4:	370c      	adds	r7, #12
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	b085      	sub	sp, #20
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	60f8      	str	r0, [r7, #12]
 800c2b6:	60b9      	str	r1, [r7, #8]
 800c2b8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c2ba:	f06f 030b 	mvn.w	r3, #11
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3714      	adds	r7, #20
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
	...

0800c2cc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b085      	sub	sp, #20
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c2d6:	79fb      	ldrb	r3, [r7, #7]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d013      	beq.n	800c304 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c2dc:	4b0d      	ldr	r3, [pc, #52]	; (800c314 <netif_get_by_index+0x48>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	60fb      	str	r3, [r7, #12]
 800c2e2:	e00c      	b.n	800c2fe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	79fa      	ldrb	r2, [r7, #7]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d101      	bne.n	800c2f8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	e006      	b.n	800c306 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	60fb      	str	r3, [r7, #12]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1ef      	bne.n	800c2e4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3714      	adds	r7, #20
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	20011554 	.word	0x20011554

0800c318 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c31e:	f00c f843 	bl	80183a8 <sys_arch_protect>
 800c322:	6038      	str	r0, [r7, #0]
 800c324:	4b0d      	ldr	r3, [pc, #52]	; (800c35c <pbuf_free_ooseq+0x44>)
 800c326:	2200      	movs	r2, #0
 800c328:	701a      	strb	r2, [r3, #0]
 800c32a:	6838      	ldr	r0, [r7, #0]
 800c32c:	f00c f84a 	bl	80183c4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c330:	4b0b      	ldr	r3, [pc, #44]	; (800c360 <pbuf_free_ooseq+0x48>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	607b      	str	r3, [r7, #4]
 800c336:	e00a      	b.n	800c34e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d003      	beq.n	800c348 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f002 fc83 	bl	800ec4c <tcp_free_ooseq>
      return;
 800c346:	e005      	b.n	800c354 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	607b      	str	r3, [r7, #4]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d1f1      	bne.n	800c338 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	2001155d 	.word	0x2001155d
 800c360:	2001156c 	.word	0x2001156c

0800c364 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c36c:	f7ff ffd4 	bl	800c318 <pbuf_free_ooseq>
}
 800c370:	bf00      	nop
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c37e:	f00c f813 	bl	80183a8 <sys_arch_protect>
 800c382:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c384:	4b0f      	ldr	r3, [pc, #60]	; (800c3c4 <pbuf_pool_is_empty+0x4c>)
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c38a:	4b0e      	ldr	r3, [pc, #56]	; (800c3c4 <pbuf_pool_is_empty+0x4c>)
 800c38c:	2201      	movs	r2, #1
 800c38e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f00c f817 	bl	80183c4 <sys_arch_unprotect>

  if (!queued) {
 800c396:	78fb      	ldrb	r3, [r7, #3]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10f      	bne.n	800c3bc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c39c:	2100      	movs	r1, #0
 800c39e:	480a      	ldr	r0, [pc, #40]	; (800c3c8 <pbuf_pool_is_empty+0x50>)
 800c3a0:	f7fe f834 	bl	800a40c <tcpip_try_callback>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d008      	beq.n	800c3bc <pbuf_pool_is_empty+0x44>
 800c3aa:	f00b fffd 	bl	80183a8 <sys_arch_protect>
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	4b04      	ldr	r3, [pc, #16]	; (800c3c4 <pbuf_pool_is_empty+0x4c>)
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	701a      	strb	r2, [r3, #0]
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f00c f804 	bl	80183c4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	2001155d 	.word	0x2001155d
 800c3c8:	0800c365 	.word	0x0800c365

0800c3cc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	4611      	mov	r1, r2
 800c3d8:	461a      	mov	r2, r3
 800c3da:	460b      	mov	r3, r1
 800c3dc:	80fb      	strh	r3, [r7, #6]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	68ba      	ldr	r2, [r7, #8]
 800c3ec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	88fa      	ldrh	r2, [r7, #6]
 800c3f2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	88ba      	ldrh	r2, [r7, #4]
 800c3f8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c3fa:	8b3b      	ldrh	r3, [r7, #24]
 800c3fc:	b2da      	uxtb	r2, r3
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	7f3a      	ldrb	r2, [r7, #28]
 800c406:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2201      	movs	r2, #1
 800c40c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2200      	movs	r2, #0
 800c412:	73da      	strb	r2, [r3, #15]
}
 800c414:	bf00      	nop
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b08c      	sub	sp, #48	; 0x30
 800c424:	af02      	add	r7, sp, #8
 800c426:	4603      	mov	r3, r0
 800c428:	71fb      	strb	r3, [r7, #7]
 800c42a:	460b      	mov	r3, r1
 800c42c:	80bb      	strh	r3, [r7, #4]
 800c42e:	4613      	mov	r3, r2
 800c430:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c432:	79fb      	ldrb	r3, [r7, #7]
 800c434:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c436:	887b      	ldrh	r3, [r7, #2]
 800c438:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c43c:	d07f      	beq.n	800c53e <pbuf_alloc+0x11e>
 800c43e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c442:	f300 80c8 	bgt.w	800c5d6 <pbuf_alloc+0x1b6>
 800c446:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c44a:	d010      	beq.n	800c46e <pbuf_alloc+0x4e>
 800c44c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c450:	f300 80c1 	bgt.w	800c5d6 <pbuf_alloc+0x1b6>
 800c454:	2b01      	cmp	r3, #1
 800c456:	d002      	beq.n	800c45e <pbuf_alloc+0x3e>
 800c458:	2b41      	cmp	r3, #65	; 0x41
 800c45a:	f040 80bc 	bne.w	800c5d6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c45e:	887a      	ldrh	r2, [r7, #2]
 800c460:	88bb      	ldrh	r3, [r7, #4]
 800c462:	4619      	mov	r1, r3
 800c464:	2000      	movs	r0, #0
 800c466:	f000 f8d1 	bl	800c60c <pbuf_alloc_reference>
 800c46a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c46c:	e0bd      	b.n	800c5ea <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c46e:	2300      	movs	r3, #0
 800c470:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c472:	2300      	movs	r3, #0
 800c474:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c476:	88bb      	ldrh	r3, [r7, #4]
 800c478:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c47a:	200c      	movs	r0, #12
 800c47c:	f7ff fb8e 	bl	800bb9c <memp_malloc>
 800c480:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d109      	bne.n	800c49c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c488:	f7ff ff76 	bl	800c378 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d002      	beq.n	800c498 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c492:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c494:	f000 faa8 	bl	800c9e8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c498:	2300      	movs	r3, #0
 800c49a:	e0a7      	b.n	800c5ec <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c49c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c49e:	3303      	adds	r3, #3
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	f023 0303 	bic.w	r3, r3, #3
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	8b7a      	ldrh	r2, [r7, #26]
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	bf28      	it	cs
 800c4b4:	4613      	movcs	r3, r2
 800c4b6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c4b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4ba:	3310      	adds	r3, #16
 800c4bc:	693a      	ldr	r2, [r7, #16]
 800c4be:	4413      	add	r3, r2
 800c4c0:	3303      	adds	r3, #3
 800c4c2:	f023 0303 	bic.w	r3, r3, #3
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	89f9      	ldrh	r1, [r7, #14]
 800c4ca:	8b7a      	ldrh	r2, [r7, #26]
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	9301      	str	r3, [sp, #4]
 800c4d0:	887b      	ldrh	r3, [r7, #2]
 800c4d2:	9300      	str	r3, [sp, #0]
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	4601      	mov	r1, r0
 800c4d8:	6938      	ldr	r0, [r7, #16]
 800c4da:	f7ff ff77 	bl	800c3cc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	f003 0303 	and.w	r3, r3, #3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d006      	beq.n	800c4f8 <pbuf_alloc+0xd8>
 800c4ea:	4b42      	ldr	r3, [pc, #264]	; (800c5f4 <pbuf_alloc+0x1d4>)
 800c4ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4f0:	4941      	ldr	r1, [pc, #260]	; (800c5f8 <pbuf_alloc+0x1d8>)
 800c4f2:	4842      	ldr	r0, [pc, #264]	; (800c5fc <pbuf_alloc+0x1dc>)
 800c4f4:	f00c f864 	bl	80185c0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c4f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4fa:	3303      	adds	r3, #3
 800c4fc:	f023 0303 	bic.w	r3, r3, #3
 800c500:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c504:	d106      	bne.n	800c514 <pbuf_alloc+0xf4>
 800c506:	4b3b      	ldr	r3, [pc, #236]	; (800c5f4 <pbuf_alloc+0x1d4>)
 800c508:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c50c:	493c      	ldr	r1, [pc, #240]	; (800c600 <pbuf_alloc+0x1e0>)
 800c50e:	483b      	ldr	r0, [pc, #236]	; (800c5fc <pbuf_alloc+0x1dc>)
 800c510:	f00c f856 	bl	80185c0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c516:	2b00      	cmp	r3, #0
 800c518:	d102      	bne.n	800c520 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	627b      	str	r3, [r7, #36]	; 0x24
 800c51e:	e002      	b.n	800c526 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	693a      	ldr	r2, [r7, #16]
 800c524:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c52a:	8b7a      	ldrh	r2, [r7, #26]
 800c52c:	89fb      	ldrh	r3, [r7, #14]
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c532:	2300      	movs	r3, #0
 800c534:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c536:	8b7b      	ldrh	r3, [r7, #26]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d19e      	bne.n	800c47a <pbuf_alloc+0x5a>
      break;
 800c53c:	e055      	b.n	800c5ea <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c53e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c540:	3303      	adds	r3, #3
 800c542:	b29b      	uxth	r3, r3
 800c544:	f023 0303 	bic.w	r3, r3, #3
 800c548:	b29a      	uxth	r2, r3
 800c54a:	88bb      	ldrh	r3, [r7, #4]
 800c54c:	3303      	adds	r3, #3
 800c54e:	b29b      	uxth	r3, r3
 800c550:	f023 0303 	bic.w	r3, r3, #3
 800c554:	b29b      	uxth	r3, r3
 800c556:	4413      	add	r3, r2
 800c558:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c55a:	8b3b      	ldrh	r3, [r7, #24]
 800c55c:	3310      	adds	r3, #16
 800c55e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c560:	8b3a      	ldrh	r2, [r7, #24]
 800c562:	88bb      	ldrh	r3, [r7, #4]
 800c564:	3303      	adds	r3, #3
 800c566:	f023 0303 	bic.w	r3, r3, #3
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d306      	bcc.n	800c57c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c56e:	8afa      	ldrh	r2, [r7, #22]
 800c570:	88bb      	ldrh	r3, [r7, #4]
 800c572:	3303      	adds	r3, #3
 800c574:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c578:	429a      	cmp	r2, r3
 800c57a:	d201      	bcs.n	800c580 <pbuf_alloc+0x160>
        return NULL;
 800c57c:	2300      	movs	r3, #0
 800c57e:	e035      	b.n	800c5ec <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c580:	8afb      	ldrh	r3, [r7, #22]
 800c582:	4618      	mov	r0, r3
 800c584:	f7ff f966 	bl	800b854 <mem_malloc>
 800c588:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d101      	bne.n	800c594 <pbuf_alloc+0x174>
        return NULL;
 800c590:	2300      	movs	r3, #0
 800c592:	e02b      	b.n	800c5ec <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c594:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c596:	3310      	adds	r3, #16
 800c598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c59a:	4413      	add	r3, r2
 800c59c:	3303      	adds	r3, #3
 800c59e:	f023 0303 	bic.w	r3, r3, #3
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	88b9      	ldrh	r1, [r7, #4]
 800c5a6:	88ba      	ldrh	r2, [r7, #4]
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	9301      	str	r3, [sp, #4]
 800c5ac:	887b      	ldrh	r3, [r7, #2]
 800c5ae:	9300      	str	r3, [sp, #0]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	4601      	mov	r1, r0
 800c5b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5b6:	f7ff ff09 	bl	800c3cc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5bc:	685b      	ldr	r3, [r3, #4]
 800c5be:	f003 0303 	and.w	r3, r3, #3
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d010      	beq.n	800c5e8 <pbuf_alloc+0x1c8>
 800c5c6:	4b0b      	ldr	r3, [pc, #44]	; (800c5f4 <pbuf_alloc+0x1d4>)
 800c5c8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c5cc:	490d      	ldr	r1, [pc, #52]	; (800c604 <pbuf_alloc+0x1e4>)
 800c5ce:	480b      	ldr	r0, [pc, #44]	; (800c5fc <pbuf_alloc+0x1dc>)
 800c5d0:	f00b fff6 	bl	80185c0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c5d4:	e008      	b.n	800c5e8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c5d6:	4b07      	ldr	r3, [pc, #28]	; (800c5f4 <pbuf_alloc+0x1d4>)
 800c5d8:	f240 1227 	movw	r2, #295	; 0x127
 800c5dc:	490a      	ldr	r1, [pc, #40]	; (800c608 <pbuf_alloc+0x1e8>)
 800c5de:	4807      	ldr	r0, [pc, #28]	; (800c5fc <pbuf_alloc+0x1dc>)
 800c5e0:	f00b ffee 	bl	80185c0 <iprintf>
      return NULL;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	e001      	b.n	800c5ec <pbuf_alloc+0x1cc>
      break;
 800c5e8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3728      	adds	r7, #40	; 0x28
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	0801ae50 	.word	0x0801ae50
 800c5f8:	0801ae80 	.word	0x0801ae80
 800c5fc:	0801aeb0 	.word	0x0801aeb0
 800c600:	0801aed8 	.word	0x0801aed8
 800c604:	0801af0c 	.word	0x0801af0c
 800c608:	0801af38 	.word	0x0801af38

0800c60c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b086      	sub	sp, #24
 800c610:	af02      	add	r7, sp, #8
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	460b      	mov	r3, r1
 800c616:	807b      	strh	r3, [r7, #2]
 800c618:	4613      	mov	r3, r2
 800c61a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c61c:	883b      	ldrh	r3, [r7, #0]
 800c61e:	2b41      	cmp	r3, #65	; 0x41
 800c620:	d009      	beq.n	800c636 <pbuf_alloc_reference+0x2a>
 800c622:	883b      	ldrh	r3, [r7, #0]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d006      	beq.n	800c636 <pbuf_alloc_reference+0x2a>
 800c628:	4b0f      	ldr	r3, [pc, #60]	; (800c668 <pbuf_alloc_reference+0x5c>)
 800c62a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c62e:	490f      	ldr	r1, [pc, #60]	; (800c66c <pbuf_alloc_reference+0x60>)
 800c630:	480f      	ldr	r0, [pc, #60]	; (800c670 <pbuf_alloc_reference+0x64>)
 800c632:	f00b ffc5 	bl	80185c0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c636:	200b      	movs	r0, #11
 800c638:	f7ff fab0 	bl	800bb9c <memp_malloc>
 800c63c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c644:	2300      	movs	r3, #0
 800c646:	e00b      	b.n	800c660 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c648:	8879      	ldrh	r1, [r7, #2]
 800c64a:	887a      	ldrh	r2, [r7, #2]
 800c64c:	2300      	movs	r3, #0
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	883b      	ldrh	r3, [r7, #0]
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	460b      	mov	r3, r1
 800c656:	6879      	ldr	r1, [r7, #4]
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	f7ff feb7 	bl	800c3cc <pbuf_init_alloced_pbuf>
  return p;
 800c65e:	68fb      	ldr	r3, [r7, #12]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	0801ae50 	.word	0x0801ae50
 800c66c:	0801af54 	.word	0x0801af54
 800c670:	0801aeb0 	.word	0x0801aeb0

0800c674 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b088      	sub	sp, #32
 800c678:	af02      	add	r7, sp, #8
 800c67a:	607b      	str	r3, [r7, #4]
 800c67c:	4603      	mov	r3, r0
 800c67e:	73fb      	strb	r3, [r7, #15]
 800c680:	460b      	mov	r3, r1
 800c682:	81bb      	strh	r3, [r7, #12]
 800c684:	4613      	mov	r3, r2
 800c686:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c688:	7bfb      	ldrb	r3, [r7, #15]
 800c68a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c68c:	8a7b      	ldrh	r3, [r7, #18]
 800c68e:	3303      	adds	r3, #3
 800c690:	f023 0203 	bic.w	r2, r3, #3
 800c694:	89bb      	ldrh	r3, [r7, #12]
 800c696:	441a      	add	r2, r3
 800c698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d901      	bls.n	800c6a2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	e018      	b.n	800c6d4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d007      	beq.n	800c6b8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c6a8:	8a7b      	ldrh	r3, [r7, #18]
 800c6aa:	3303      	adds	r3, #3
 800c6ac:	f023 0303 	bic.w	r3, r3, #3
 800c6b0:	6a3a      	ldr	r2, [r7, #32]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	617b      	str	r3, [r7, #20]
 800c6b6:	e001      	b.n	800c6bc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	89b9      	ldrh	r1, [r7, #12]
 800c6c0:	89ba      	ldrh	r2, [r7, #12]
 800c6c2:	2302      	movs	r3, #2
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	897b      	ldrh	r3, [r7, #10]
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	6979      	ldr	r1, [r7, #20]
 800c6ce:	f7ff fe7d 	bl	800c3cc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c6d2:	687b      	ldr	r3, [r7, #4]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3718      	adds	r7, #24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d106      	bne.n	800c6fc <pbuf_realloc+0x20>
 800c6ee:	4b3a      	ldr	r3, [pc, #232]	; (800c7d8 <pbuf_realloc+0xfc>)
 800c6f0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c6f4:	4939      	ldr	r1, [pc, #228]	; (800c7dc <pbuf_realloc+0x100>)
 800c6f6:	483a      	ldr	r0, [pc, #232]	; (800c7e0 <pbuf_realloc+0x104>)
 800c6f8:	f00b ff62 	bl	80185c0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	891b      	ldrh	r3, [r3, #8]
 800c700:	887a      	ldrh	r2, [r7, #2]
 800c702:	429a      	cmp	r2, r3
 800c704:	d263      	bcs.n	800c7ce <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	891a      	ldrh	r2, [r3, #8]
 800c70a:	887b      	ldrh	r3, [r7, #2]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c710:	887b      	ldrh	r3, [r7, #2]
 800c712:	817b      	strh	r3, [r7, #10]
  q = p;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c718:	e018      	b.n	800c74c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	895b      	ldrh	r3, [r3, #10]
 800c71e:	897a      	ldrh	r2, [r7, #10]
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	891a      	ldrh	r2, [r3, #8]
 800c728:	893b      	ldrh	r3, [r7, #8]
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d106      	bne.n	800c74c <pbuf_realloc+0x70>
 800c73e:	4b26      	ldr	r3, [pc, #152]	; (800c7d8 <pbuf_realloc+0xfc>)
 800c740:	f240 12af 	movw	r2, #431	; 0x1af
 800c744:	4927      	ldr	r1, [pc, #156]	; (800c7e4 <pbuf_realloc+0x108>)
 800c746:	4826      	ldr	r0, [pc, #152]	; (800c7e0 <pbuf_realloc+0x104>)
 800c748:	f00b ff3a 	bl	80185c0 <iprintf>
  while (rem_len > q->len) {
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	895b      	ldrh	r3, [r3, #10]
 800c750:	897a      	ldrh	r2, [r7, #10]
 800c752:	429a      	cmp	r2, r3
 800c754:	d8e1      	bhi.n	800c71a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	7b1b      	ldrb	r3, [r3, #12]
 800c75a:	f003 030f 	and.w	r3, r3, #15
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d121      	bne.n	800c7a6 <pbuf_realloc+0xca>
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	895b      	ldrh	r3, [r3, #10]
 800c766:	897a      	ldrh	r2, [r7, #10]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d01c      	beq.n	800c7a6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	7b5b      	ldrb	r3, [r3, #13]
 800c770:	f003 0302 	and.w	r3, r3, #2
 800c774:	2b00      	cmp	r3, #0
 800c776:	d116      	bne.n	800c7a6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	b29a      	uxth	r2, r3
 800c782:	897b      	ldrh	r3, [r7, #10]
 800c784:	4413      	add	r3, r2
 800c786:	b29b      	uxth	r3, r3
 800c788:	4619      	mov	r1, r3
 800c78a:	68f8      	ldr	r0, [r7, #12]
 800c78c:	f7fe ff58 	bl	800b640 <mem_trim>
 800c790:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d106      	bne.n	800c7a6 <pbuf_realloc+0xca>
 800c798:	4b0f      	ldr	r3, [pc, #60]	; (800c7d8 <pbuf_realloc+0xfc>)
 800c79a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c79e:	4912      	ldr	r1, [pc, #72]	; (800c7e8 <pbuf_realloc+0x10c>)
 800c7a0:	480f      	ldr	r0, [pc, #60]	; (800c7e0 <pbuf_realloc+0x104>)
 800c7a2:	f00b ff0d 	bl	80185c0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	897a      	ldrh	r2, [r7, #10]
 800c7aa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	895a      	ldrh	r2, [r3, #10]
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d004      	beq.n	800c7c6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f000 f911 	bl	800c9e8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	601a      	str	r2, [r3, #0]
 800c7cc:	e000      	b.n	800c7d0 <pbuf_realloc+0xf4>
    return;
 800c7ce:	bf00      	nop

}
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	0801ae50 	.word	0x0801ae50
 800c7dc:	0801af68 	.word	0x0801af68
 800c7e0:	0801aeb0 	.word	0x0801aeb0
 800c7e4:	0801af80 	.word	0x0801af80
 800c7e8:	0801af98 	.word	0x0801af98

0800c7ec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d106      	bne.n	800c80e <pbuf_add_header_impl+0x22>
 800c800:	4b2b      	ldr	r3, [pc, #172]	; (800c8b0 <pbuf_add_header_impl+0xc4>)
 800c802:	f240 12df 	movw	r2, #479	; 0x1df
 800c806:	492b      	ldr	r1, [pc, #172]	; (800c8b4 <pbuf_add_header_impl+0xc8>)
 800c808:	482b      	ldr	r0, [pc, #172]	; (800c8b8 <pbuf_add_header_impl+0xcc>)
 800c80a:	f00b fed9 	bl	80185c0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d003      	beq.n	800c81c <pbuf_add_header_impl+0x30>
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c81a:	d301      	bcc.n	800c820 <pbuf_add_header_impl+0x34>
    return 1;
 800c81c:	2301      	movs	r3, #1
 800c81e:	e043      	b.n	800c8a8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d101      	bne.n	800c82a <pbuf_add_header_impl+0x3e>
    return 0;
 800c826:	2300      	movs	r3, #0
 800c828:	e03e      	b.n	800c8a8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	891a      	ldrh	r2, [r3, #8]
 800c832:	8a7b      	ldrh	r3, [r7, #18]
 800c834:	4413      	add	r3, r2
 800c836:	b29b      	uxth	r3, r3
 800c838:	8a7a      	ldrh	r2, [r7, #18]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d901      	bls.n	800c842 <pbuf_add_header_impl+0x56>
    return 1;
 800c83e:	2301      	movs	r3, #1
 800c840:	e032      	b.n	800c8a8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	7b1b      	ldrb	r3, [r3, #12]
 800c846:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c848:	8a3b      	ldrh	r3, [r7, #16]
 800c84a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00c      	beq.n	800c86c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	425b      	negs	r3, r3
 800c85a:	4413      	add	r3, r2
 800c85c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3310      	adds	r3, #16
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	429a      	cmp	r2, r3
 800c866:	d20d      	bcs.n	800c884 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c868:	2301      	movs	r3, #1
 800c86a:	e01d      	b.n	800c8a8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c86c:	79fb      	ldrb	r3, [r7, #7]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d006      	beq.n	800c880 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	685a      	ldr	r2, [r3, #4]
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	425b      	negs	r3, r3
 800c87a:	4413      	add	r3, r2
 800c87c:	617b      	str	r3, [r7, #20]
 800c87e:	e001      	b.n	800c884 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c880:	2301      	movs	r3, #1
 800c882:	e011      	b.n	800c8a8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	697a      	ldr	r2, [r7, #20]
 800c888:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	895a      	ldrh	r2, [r3, #10]
 800c88e:	8a7b      	ldrh	r3, [r7, #18]
 800c890:	4413      	add	r3, r2
 800c892:	b29a      	uxth	r2, r3
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	891a      	ldrh	r2, [r3, #8]
 800c89c:	8a7b      	ldrh	r3, [r7, #18]
 800c89e:	4413      	add	r3, r2
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	811a      	strh	r2, [r3, #8]


  return 0;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3718      	adds	r7, #24
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	0801ae50 	.word	0x0801ae50
 800c8b4:	0801afb4 	.word	0x0801afb4
 800c8b8:	0801aeb0 	.word	0x0801aeb0

0800c8bc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	6839      	ldr	r1, [r7, #0]
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f7ff ff8e 	bl	800c7ec <pbuf_add_header_impl>
 800c8d0:	4603      	mov	r3, r0
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3708      	adds	r7, #8
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
	...

0800c8dc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d106      	bne.n	800c8fa <pbuf_remove_header+0x1e>
 800c8ec:	4b20      	ldr	r3, [pc, #128]	; (800c970 <pbuf_remove_header+0x94>)
 800c8ee:	f240 224b 	movw	r2, #587	; 0x24b
 800c8f2:	4920      	ldr	r1, [pc, #128]	; (800c974 <pbuf_remove_header+0x98>)
 800c8f4:	4820      	ldr	r0, [pc, #128]	; (800c978 <pbuf_remove_header+0x9c>)
 800c8f6:	f00b fe63 	bl	80185c0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d003      	beq.n	800c908 <pbuf_remove_header+0x2c>
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c906:	d301      	bcc.n	800c90c <pbuf_remove_header+0x30>
    return 1;
 800c908:	2301      	movs	r3, #1
 800c90a:	e02c      	b.n	800c966 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <pbuf_remove_header+0x3a>
    return 0;
 800c912:	2300      	movs	r3, #0
 800c914:	e027      	b.n	800c966 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	895b      	ldrh	r3, [r3, #10]
 800c91e:	89fa      	ldrh	r2, [r7, #14]
 800c920:	429a      	cmp	r2, r3
 800c922:	d908      	bls.n	800c936 <pbuf_remove_header+0x5a>
 800c924:	4b12      	ldr	r3, [pc, #72]	; (800c970 <pbuf_remove_header+0x94>)
 800c926:	f240 2255 	movw	r2, #597	; 0x255
 800c92a:	4914      	ldr	r1, [pc, #80]	; (800c97c <pbuf_remove_header+0xa0>)
 800c92c:	4812      	ldr	r0, [pc, #72]	; (800c978 <pbuf_remove_header+0x9c>)
 800c92e:	f00b fe47 	bl	80185c0 <iprintf>
 800c932:	2301      	movs	r3, #1
 800c934:	e017      	b.n	800c966 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	441a      	add	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	895a      	ldrh	r2, [r3, #10]
 800c94c:	89fb      	ldrh	r3, [r7, #14]
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	b29a      	uxth	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	891a      	ldrh	r2, [r3, #8]
 800c95a:	89fb      	ldrh	r3, [r7, #14]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	b29a      	uxth	r2, r3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	0801ae50 	.word	0x0801ae50
 800c974:	0801afb4 	.word	0x0801afb4
 800c978:	0801aeb0 	.word	0x0801aeb0
 800c97c:	0801afc0 	.word	0x0801afc0

0800c980 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	460b      	mov	r3, r1
 800c98a:	807b      	strh	r3, [r7, #2]
 800c98c:	4613      	mov	r3, r2
 800c98e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c990:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c994:	2b00      	cmp	r3, #0
 800c996:	da08      	bge.n	800c9aa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c998:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c99c:	425b      	negs	r3, r3
 800c99e:	4619      	mov	r1, r3
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f7ff ff9b 	bl	800c8dc <pbuf_remove_header>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	e007      	b.n	800c9ba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c9aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c9ae:	787a      	ldrb	r2, [r7, #1]
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7ff ff1a 	bl	800c7ec <pbuf_add_header_impl>
 800c9b8:	4603      	mov	r3, r0
  }
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c9ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7ff ffd2 	bl	800c980 <pbuf_header_impl>
 800c9dc:	4603      	mov	r3, r0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3708      	adds	r7, #8
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
	...

0800c9e8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b088      	sub	sp, #32
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d10b      	bne.n	800ca0e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d106      	bne.n	800ca0a <pbuf_free+0x22>
 800c9fc:	4b3b      	ldr	r3, [pc, #236]	; (800caec <pbuf_free+0x104>)
 800c9fe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ca02:	493b      	ldr	r1, [pc, #236]	; (800caf0 <pbuf_free+0x108>)
 800ca04:	483b      	ldr	r0, [pc, #236]	; (800caf4 <pbuf_free+0x10c>)
 800ca06:	f00b fddb 	bl	80185c0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	e069      	b.n	800cae2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ca12:	e062      	b.n	800cada <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ca14:	f00b fcc8 	bl	80183a8 <sys_arch_protect>
 800ca18:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	7b9b      	ldrb	r3, [r3, #14]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d106      	bne.n	800ca30 <pbuf_free+0x48>
 800ca22:	4b32      	ldr	r3, [pc, #200]	; (800caec <pbuf_free+0x104>)
 800ca24:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ca28:	4933      	ldr	r1, [pc, #204]	; (800caf8 <pbuf_free+0x110>)
 800ca2a:	4832      	ldr	r0, [pc, #200]	; (800caf4 <pbuf_free+0x10c>)
 800ca2c:	f00b fdc8 	bl	80185c0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	7b9b      	ldrb	r3, [r3, #14]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	739a      	strb	r2, [r3, #14]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	7b9b      	ldrb	r3, [r3, #14]
 800ca40:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ca42:	69b8      	ldr	r0, [r7, #24]
 800ca44:	f00b fcbe 	bl	80183c4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d143      	bne.n	800cad6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	7b1b      	ldrb	r3, [r3, #12]
 800ca58:	f003 030f 	and.w	r3, r3, #15
 800ca5c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	7b5b      	ldrb	r3, [r3, #13]
 800ca62:	f003 0302 	and.w	r3, r3, #2
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d011      	beq.n	800ca8e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d106      	bne.n	800ca84 <pbuf_free+0x9c>
 800ca76:	4b1d      	ldr	r3, [pc, #116]	; (800caec <pbuf_free+0x104>)
 800ca78:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ca7c:	491f      	ldr	r1, [pc, #124]	; (800cafc <pbuf_free+0x114>)
 800ca7e:	481d      	ldr	r0, [pc, #116]	; (800caf4 <pbuf_free+0x10c>)
 800ca80:	f00b fd9e 	bl	80185c0 <iprintf>
        pc->custom_free_function(p);
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	4798      	blx	r3
 800ca8c:	e01d      	b.n	800caca <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d104      	bne.n	800ca9e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	200c      	movs	r0, #12
 800ca98:	f7ff f8f6 	bl	800bc88 <memp_free>
 800ca9c:	e015      	b.n	800caca <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ca9e:	7bfb      	ldrb	r3, [r7, #15]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d104      	bne.n	800caae <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800caa4:	6879      	ldr	r1, [r7, #4]
 800caa6:	200b      	movs	r0, #11
 800caa8:	f7ff f8ee 	bl	800bc88 <memp_free>
 800caac:	e00d      	b.n	800caca <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800caae:	7bfb      	ldrb	r3, [r7, #15]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d103      	bne.n	800cabc <pbuf_free+0xd4>
          mem_free(p);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f7fe fd33 	bl	800b520 <mem_free>
 800caba:	e006      	b.n	800caca <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cabc:	4b0b      	ldr	r3, [pc, #44]	; (800caec <pbuf_free+0x104>)
 800cabe:	f240 320f 	movw	r2, #783	; 0x30f
 800cac2:	490f      	ldr	r1, [pc, #60]	; (800cb00 <pbuf_free+0x118>)
 800cac4:	480b      	ldr	r0, [pc, #44]	; (800caf4 <pbuf_free+0x10c>)
 800cac6:	f00b fd7b 	bl	80185c0 <iprintf>
        }
      }
      count++;
 800caca:	7ffb      	ldrb	r3, [r7, #31]
 800cacc:	3301      	adds	r3, #1
 800cace:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	607b      	str	r3, [r7, #4]
 800cad4:	e001      	b.n	800cada <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cad6:	2300      	movs	r3, #0
 800cad8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d199      	bne.n	800ca14 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cae0:	7ffb      	ldrb	r3, [r7, #31]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3720      	adds	r7, #32
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	0801ae50 	.word	0x0801ae50
 800caf0:	0801afb4 	.word	0x0801afb4
 800caf4:	0801aeb0 	.word	0x0801aeb0
 800caf8:	0801afe0 	.word	0x0801afe0
 800cafc:	0801aff8 	.word	0x0801aff8
 800cb00:	0801b01c 	.word	0x0801b01c

0800cb04 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cb10:	e005      	b.n	800cb1e <pbuf_clen+0x1a>
    ++len;
 800cb12:	89fb      	ldrh	r3, [r7, #14]
 800cb14:	3301      	adds	r3, #1
 800cb16:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1f6      	bne.n	800cb12 <pbuf_clen+0xe>
  }
  return len;
 800cb24:	89fb      	ldrh	r3, [r7, #14]
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3714      	adds	r7, #20
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
	...

0800cb34 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d016      	beq.n	800cb70 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cb42:	f00b fc31 	bl	80183a8 <sys_arch_protect>
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	7b9b      	ldrb	r3, [r3, #14]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	739a      	strb	r2, [r3, #14]
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f00b fc35 	bl	80183c4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	7b9b      	ldrb	r3, [r3, #14]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d106      	bne.n	800cb70 <pbuf_ref+0x3c>
 800cb62:	4b05      	ldr	r3, [pc, #20]	; (800cb78 <pbuf_ref+0x44>)
 800cb64:	f240 3242 	movw	r2, #834	; 0x342
 800cb68:	4904      	ldr	r1, [pc, #16]	; (800cb7c <pbuf_ref+0x48>)
 800cb6a:	4805      	ldr	r0, [pc, #20]	; (800cb80 <pbuf_ref+0x4c>)
 800cb6c:	f00b fd28 	bl	80185c0 <iprintf>
  }
}
 800cb70:	bf00      	nop
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	0801ae50 	.word	0x0801ae50
 800cb7c:	0801b030 	.word	0x0801b030
 800cb80:	0801aeb0 	.word	0x0801aeb0

0800cb84 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <pbuf_cat+0x16>
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d107      	bne.n	800cbaa <pbuf_cat+0x26>
 800cb9a:	4b20      	ldr	r3, [pc, #128]	; (800cc1c <pbuf_cat+0x98>)
 800cb9c:	f240 3259 	movw	r2, #857	; 0x359
 800cba0:	491f      	ldr	r1, [pc, #124]	; (800cc20 <pbuf_cat+0x9c>)
 800cba2:	4820      	ldr	r0, [pc, #128]	; (800cc24 <pbuf_cat+0xa0>)
 800cba4:	f00b fd0c 	bl	80185c0 <iprintf>
 800cba8:	e034      	b.n	800cc14 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	60fb      	str	r3, [r7, #12]
 800cbae:	e00a      	b.n	800cbc6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	891a      	ldrh	r2, [r3, #8]
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	891b      	ldrh	r3, [r3, #8]
 800cbb8:	4413      	add	r3, r2
 800cbba:	b29a      	uxth	r2, r3
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	60fb      	str	r3, [r7, #12]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1f0      	bne.n	800cbb0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	891a      	ldrh	r2, [r3, #8]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	895b      	ldrh	r3, [r3, #10]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d006      	beq.n	800cbe8 <pbuf_cat+0x64>
 800cbda:	4b10      	ldr	r3, [pc, #64]	; (800cc1c <pbuf_cat+0x98>)
 800cbdc:	f240 3262 	movw	r2, #866	; 0x362
 800cbe0:	4911      	ldr	r1, [pc, #68]	; (800cc28 <pbuf_cat+0xa4>)
 800cbe2:	4810      	ldr	r0, [pc, #64]	; (800cc24 <pbuf_cat+0xa0>)
 800cbe4:	f00b fcec 	bl	80185c0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d006      	beq.n	800cbfe <pbuf_cat+0x7a>
 800cbf0:	4b0a      	ldr	r3, [pc, #40]	; (800cc1c <pbuf_cat+0x98>)
 800cbf2:	f240 3263 	movw	r2, #867	; 0x363
 800cbf6:	490d      	ldr	r1, [pc, #52]	; (800cc2c <pbuf_cat+0xa8>)
 800cbf8:	480a      	ldr	r0, [pc, #40]	; (800cc24 <pbuf_cat+0xa0>)
 800cbfa:	f00b fce1 	bl	80185c0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	891a      	ldrh	r2, [r3, #8]
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	891b      	ldrh	r3, [r3, #8]
 800cc06:	4413      	add	r3, r2
 800cc08:	b29a      	uxth	r2, r3
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	0801ae50 	.word	0x0801ae50
 800cc20:	0801b044 	.word	0x0801b044
 800cc24:	0801aeb0 	.word	0x0801aeb0
 800cc28:	0801b07c 	.word	0x0801b07c
 800cc2c:	0801b0ac 	.word	0x0801b0ac

0800cc30 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7ff ffa1 	bl	800cb84 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800cc42:	6838      	ldr	r0, [r7, #0]
 800cc44:	f7ff ff76 	bl	800cb34 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800cc48:	bf00      	nop
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b086      	sub	sp, #24
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	617b      	str	r3, [r7, #20]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d008      	beq.n	800cc7a <pbuf_copy+0x2a>
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d005      	beq.n	800cc7a <pbuf_copy+0x2a>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	891a      	ldrh	r2, [r3, #8]
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	891b      	ldrh	r3, [r3, #8]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d209      	bcs.n	800cc8e <pbuf_copy+0x3e>
 800cc7a:	4b57      	ldr	r3, [pc, #348]	; (800cdd8 <pbuf_copy+0x188>)
 800cc7c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800cc80:	4956      	ldr	r1, [pc, #344]	; (800cddc <pbuf_copy+0x18c>)
 800cc82:	4857      	ldr	r0, [pc, #348]	; (800cde0 <pbuf_copy+0x190>)
 800cc84:	f00b fc9c 	bl	80185c0 <iprintf>
 800cc88:	f06f 030f 	mvn.w	r3, #15
 800cc8c:	e09f      	b.n	800cdce <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	895b      	ldrh	r3, [r3, #10]
 800cc92:	461a      	mov	r2, r3
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	1ad2      	subs	r2, r2, r3
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	895b      	ldrh	r3, [r3, #10]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	1acb      	subs	r3, r1, r3
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d306      	bcc.n	800ccb4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	895b      	ldrh	r3, [r3, #10]
 800ccaa:	461a      	mov	r2, r3
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	1ad3      	subs	r3, r2, r3
 800ccb0:	60fb      	str	r3, [r7, #12]
 800ccb2:	e005      	b.n	800ccc0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	895b      	ldrh	r3, [r3, #10]
 800ccb8:	461a      	mov	r2, r3
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	1ad3      	subs	r3, r2, r3
 800ccbe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	685a      	ldr	r2, [r3, #4]
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	18d0      	adds	r0, r2, r3
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	685a      	ldr	r2, [r3, #4]
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	4413      	add	r3, r2
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	f00b fe74 	bl	80189c0 <memcpy>
    offset_to += len;
 800ccd8:	697a      	ldr	r2, [r7, #20]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	4413      	add	r3, r2
 800ccde:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800cce0:	693a      	ldr	r2, [r7, #16]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	4413      	add	r3, r2
 800cce6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	895b      	ldrh	r3, [r3, #10]
 800ccec:	461a      	mov	r2, r3
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d906      	bls.n	800cd02 <pbuf_copy+0xb2>
 800ccf4:	4b38      	ldr	r3, [pc, #224]	; (800cdd8 <pbuf_copy+0x188>)
 800ccf6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ccfa:	493a      	ldr	r1, [pc, #232]	; (800cde4 <pbuf_copy+0x194>)
 800ccfc:	4838      	ldr	r0, [pc, #224]	; (800cde0 <pbuf_copy+0x190>)
 800ccfe:	f00b fc5f 	bl	80185c0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	895b      	ldrh	r3, [r3, #10]
 800cd06:	461a      	mov	r2, r3
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d906      	bls.n	800cd1c <pbuf_copy+0xcc>
 800cd0e:	4b32      	ldr	r3, [pc, #200]	; (800cdd8 <pbuf_copy+0x188>)
 800cd10:	f240 32da 	movw	r2, #986	; 0x3da
 800cd14:	4934      	ldr	r1, [pc, #208]	; (800cde8 <pbuf_copy+0x198>)
 800cd16:	4832      	ldr	r0, [pc, #200]	; (800cde0 <pbuf_copy+0x190>)
 800cd18:	f00b fc52 	bl	80185c0 <iprintf>
    if (offset_from >= p_from->len) {
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	895b      	ldrh	r3, [r3, #10]
 800cd20:	461a      	mov	r2, r3
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d304      	bcc.n	800cd32 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	895b      	ldrh	r3, [r3, #10]
 800cd36:	461a      	mov	r2, r3
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d114      	bne.n	800cd68 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d10c      	bne.n	800cd68 <pbuf_copy+0x118>
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d009      	beq.n	800cd68 <pbuf_copy+0x118>
 800cd54:	4b20      	ldr	r3, [pc, #128]	; (800cdd8 <pbuf_copy+0x188>)
 800cd56:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800cd5a:	4924      	ldr	r1, [pc, #144]	; (800cdec <pbuf_copy+0x19c>)
 800cd5c:	4820      	ldr	r0, [pc, #128]	; (800cde0 <pbuf_copy+0x190>)
 800cd5e:	f00b fc2f 	bl	80185c0 <iprintf>
 800cd62:	f06f 030f 	mvn.w	r3, #15
 800cd66:	e032      	b.n	800cdce <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d013      	beq.n	800cd96 <pbuf_copy+0x146>
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	895a      	ldrh	r2, [r3, #10]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	891b      	ldrh	r3, [r3, #8]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d10d      	bne.n	800cd96 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d009      	beq.n	800cd96 <pbuf_copy+0x146>
 800cd82:	4b15      	ldr	r3, [pc, #84]	; (800cdd8 <pbuf_copy+0x188>)
 800cd84:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800cd88:	4919      	ldr	r1, [pc, #100]	; (800cdf0 <pbuf_copy+0x1a0>)
 800cd8a:	4815      	ldr	r0, [pc, #84]	; (800cde0 <pbuf_copy+0x190>)
 800cd8c:	f00b fc18 	bl	80185c0 <iprintf>
 800cd90:	f06f 0305 	mvn.w	r3, #5
 800cd94:	e01b      	b.n	800cdce <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d013      	beq.n	800cdc4 <pbuf_copy+0x174>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	895a      	ldrh	r2, [r3, #10]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	891b      	ldrh	r3, [r3, #8]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d10d      	bne.n	800cdc4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d009      	beq.n	800cdc4 <pbuf_copy+0x174>
 800cdb0:	4b09      	ldr	r3, [pc, #36]	; (800cdd8 <pbuf_copy+0x188>)
 800cdb2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cdb6:	490e      	ldr	r1, [pc, #56]	; (800cdf0 <pbuf_copy+0x1a0>)
 800cdb8:	4809      	ldr	r0, [pc, #36]	; (800cde0 <pbuf_copy+0x190>)
 800cdba:	f00b fc01 	bl	80185c0 <iprintf>
 800cdbe:	f06f 0305 	mvn.w	r3, #5
 800cdc2:	e004      	b.n	800cdce <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f47f af61 	bne.w	800cc8e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3718      	adds	r7, #24
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	0801ae50 	.word	0x0801ae50
 800cddc:	0801b0f8 	.word	0x0801b0f8
 800cde0:	0801aeb0 	.word	0x0801aeb0
 800cde4:	0801b128 	.word	0x0801b128
 800cde8:	0801b140 	.word	0x0801b140
 800cdec:	0801b15c 	.word	0x0801b15c
 800cdf0:	0801b16c 	.word	0x0801b16c

0800cdf4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b088      	sub	sp, #32
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	4611      	mov	r1, r2
 800ce00:	461a      	mov	r2, r3
 800ce02:	460b      	mov	r3, r1
 800ce04:	80fb      	strh	r3, [r7, #6]
 800ce06:	4613      	mov	r3, r2
 800ce08:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d108      	bne.n	800ce2a <pbuf_copy_partial+0x36>
 800ce18:	4b2b      	ldr	r3, [pc, #172]	; (800cec8 <pbuf_copy_partial+0xd4>)
 800ce1a:	f240 420a 	movw	r2, #1034	; 0x40a
 800ce1e:	492b      	ldr	r1, [pc, #172]	; (800cecc <pbuf_copy_partial+0xd8>)
 800ce20:	482b      	ldr	r0, [pc, #172]	; (800ced0 <pbuf_copy_partial+0xdc>)
 800ce22:	f00b fbcd 	bl	80185c0 <iprintf>
 800ce26:	2300      	movs	r3, #0
 800ce28:	e04a      	b.n	800cec0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d108      	bne.n	800ce42 <pbuf_copy_partial+0x4e>
 800ce30:	4b25      	ldr	r3, [pc, #148]	; (800cec8 <pbuf_copy_partial+0xd4>)
 800ce32:	f240 420b 	movw	r2, #1035	; 0x40b
 800ce36:	4927      	ldr	r1, [pc, #156]	; (800ced4 <pbuf_copy_partial+0xe0>)
 800ce38:	4825      	ldr	r0, [pc, #148]	; (800ced0 <pbuf_copy_partial+0xdc>)
 800ce3a:	f00b fbc1 	bl	80185c0 <iprintf>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	e03e      	b.n	800cec0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	61fb      	str	r3, [r7, #28]
 800ce46:	e034      	b.n	800ceb2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ce48:	88bb      	ldrh	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00a      	beq.n	800ce64 <pbuf_copy_partial+0x70>
 800ce4e:	69fb      	ldr	r3, [r7, #28]
 800ce50:	895b      	ldrh	r3, [r3, #10]
 800ce52:	88ba      	ldrh	r2, [r7, #4]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d305      	bcc.n	800ce64 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	895b      	ldrh	r3, [r3, #10]
 800ce5c:	88ba      	ldrh	r2, [r7, #4]
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	80bb      	strh	r3, [r7, #4]
 800ce62:	e023      	b.n	800ceac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	895a      	ldrh	r2, [r3, #10]
 800ce68:	88bb      	ldrh	r3, [r7, #4]
 800ce6a:	1ad3      	subs	r3, r2, r3
 800ce6c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ce6e:	8b3a      	ldrh	r2, [r7, #24]
 800ce70:	88fb      	ldrh	r3, [r7, #6]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d901      	bls.n	800ce7a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ce76:	88fb      	ldrh	r3, [r7, #6]
 800ce78:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ce7a:	8b7b      	ldrh	r3, [r7, #26]
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	18d0      	adds	r0, r2, r3
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	685a      	ldr	r2, [r3, #4]
 800ce84:	88bb      	ldrh	r3, [r7, #4]
 800ce86:	4413      	add	r3, r2
 800ce88:	8b3a      	ldrh	r2, [r7, #24]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	f00b fd98 	bl	80189c0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ce90:	8afa      	ldrh	r2, [r7, #22]
 800ce92:	8b3b      	ldrh	r3, [r7, #24]
 800ce94:	4413      	add	r3, r2
 800ce96:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ce98:	8b7a      	ldrh	r2, [r7, #26]
 800ce9a:	8b3b      	ldrh	r3, [r7, #24]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cea0:	88fa      	ldrh	r2, [r7, #6]
 800cea2:	8b3b      	ldrh	r3, [r7, #24]
 800cea4:	1ad3      	subs	r3, r2, r3
 800cea6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	61fb      	str	r3, [r7, #28]
 800ceb2:	88fb      	ldrh	r3, [r7, #6]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d002      	beq.n	800cebe <pbuf_copy_partial+0xca>
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1c4      	bne.n	800ce48 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800cebe:	8afb      	ldrh	r3, [r7, #22]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3720      	adds	r7, #32
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	0801ae50 	.word	0x0801ae50
 800cecc:	0801b198 	.word	0x0801b198
 800ced0:	0801aeb0 	.word	0x0801aeb0
 800ced4:	0801b1b8 	.word	0x0801b1b8

0800ced8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	4603      	mov	r3, r0
 800cee0:	603a      	str	r2, [r7, #0]
 800cee2:	71fb      	strb	r3, [r7, #7]
 800cee4:	460b      	mov	r3, r1
 800cee6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	8919      	ldrh	r1, [r3, #8]
 800ceec:	88ba      	ldrh	r2, [r7, #4]
 800ceee:	79fb      	ldrb	r3, [r7, #7]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7ff fa95 	bl	800c420 <pbuf_alloc>
 800cef6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d101      	bne.n	800cf02 <pbuf_clone+0x2a>
    return NULL;
 800cefe:	2300      	movs	r3, #0
 800cf00:	e011      	b.n	800cf26 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cf02:	6839      	ldr	r1, [r7, #0]
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	f7ff fea3 	bl	800cc50 <pbuf_copy>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cf0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d006      	beq.n	800cf24 <pbuf_clone+0x4c>
 800cf16:	4b06      	ldr	r3, [pc, #24]	; (800cf30 <pbuf_clone+0x58>)
 800cf18:	f240 5224 	movw	r2, #1316	; 0x524
 800cf1c:	4905      	ldr	r1, [pc, #20]	; (800cf34 <pbuf_clone+0x5c>)
 800cf1e:	4806      	ldr	r0, [pc, #24]	; (800cf38 <pbuf_clone+0x60>)
 800cf20:	f00b fb4e 	bl	80185c0 <iprintf>
  return q;
 800cf24:	68fb      	ldr	r3, [r7, #12]
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	0801ae50 	.word	0x0801ae50
 800cf34:	0801b2c4 	.word	0x0801b2c4
 800cf38:	0801aeb0 	.word	0x0801aeb0

0800cf3c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cf40:	f00b fa50 	bl	80183e4 <rand>
 800cf44:	4603      	mov	r3, r0
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	4b01      	ldr	r3, [pc, #4]	; (800cf5c <tcp_init+0x20>)
 800cf56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cf58:	bf00      	nop
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	20000024 	.word	0x20000024

0800cf60 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	7d1b      	ldrb	r3, [r3, #20]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d105      	bne.n	800cf7c <tcp_free+0x1c>
 800cf70:	4b06      	ldr	r3, [pc, #24]	; (800cf8c <tcp_free+0x2c>)
 800cf72:	22d4      	movs	r2, #212	; 0xd4
 800cf74:	4906      	ldr	r1, [pc, #24]	; (800cf90 <tcp_free+0x30>)
 800cf76:	4807      	ldr	r0, [pc, #28]	; (800cf94 <tcp_free+0x34>)
 800cf78:	f00b fb22 	bl	80185c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cf7c:	6879      	ldr	r1, [r7, #4]
 800cf7e:	2001      	movs	r0, #1
 800cf80:	f7fe fe82 	bl	800bc88 <memp_free>
}
 800cf84:	bf00      	nop
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	0801b350 	.word	0x0801b350
 800cf90:	0801b380 	.word	0x0801b380
 800cf94:	0801b394 	.word	0x0801b394

0800cf98 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	7d1b      	ldrb	r3, [r3, #20]
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d105      	bne.n	800cfb4 <tcp_free_listen+0x1c>
 800cfa8:	4b06      	ldr	r3, [pc, #24]	; (800cfc4 <tcp_free_listen+0x2c>)
 800cfaa:	22df      	movs	r2, #223	; 0xdf
 800cfac:	4906      	ldr	r1, [pc, #24]	; (800cfc8 <tcp_free_listen+0x30>)
 800cfae:	4807      	ldr	r0, [pc, #28]	; (800cfcc <tcp_free_listen+0x34>)
 800cfb0:	f00b fb06 	bl	80185c0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cfb4:	6879      	ldr	r1, [r7, #4]
 800cfb6:	2002      	movs	r0, #2
 800cfb8:	f7fe fe66 	bl	800bc88 <memp_free>
}
 800cfbc:	bf00      	nop
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	0801b350 	.word	0x0801b350
 800cfc8:	0801b3bc 	.word	0x0801b3bc
 800cfcc:	0801b394 	.word	0x0801b394

0800cfd0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cfd4:	f001 f8b8 	bl	800e148 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cfd8:	4b07      	ldr	r3, [pc, #28]	; (800cff8 <tcp_tmr+0x28>)
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	3301      	adds	r3, #1
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	4b05      	ldr	r3, [pc, #20]	; (800cff8 <tcp_tmr+0x28>)
 800cfe2:	701a      	strb	r2, [r3, #0]
 800cfe4:	4b04      	ldr	r3, [pc, #16]	; (800cff8 <tcp_tmr+0x28>)
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	f003 0301 	and.w	r3, r3, #1
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d001      	beq.n	800cff4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cff0:	f000 fd6a 	bl	800dac8 <tcp_slowtmr>
  }
}
 800cff4:	bf00      	nop
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	20011575 	.word	0x20011575

0800cffc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d105      	bne.n	800d018 <tcp_remove_listener+0x1c>
 800d00c:	4b0d      	ldr	r3, [pc, #52]	; (800d044 <tcp_remove_listener+0x48>)
 800d00e:	22ff      	movs	r2, #255	; 0xff
 800d010:	490d      	ldr	r1, [pc, #52]	; (800d048 <tcp_remove_listener+0x4c>)
 800d012:	480e      	ldr	r0, [pc, #56]	; (800d04c <tcp_remove_listener+0x50>)
 800d014:	f00b fad4 	bl	80185c0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	60fb      	str	r3, [r7, #12]
 800d01c:	e00a      	b.n	800d034 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d022:	683a      	ldr	r2, [r7, #0]
 800d024:	429a      	cmp	r2, r3
 800d026:	d102      	bne.n	800d02e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2200      	movs	r2, #0
 800d02c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	60fb      	str	r3, [r7, #12]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1f1      	bne.n	800d01e <tcp_remove_listener+0x22>
    }
  }
}
 800d03a:	bf00      	nop
 800d03c:	bf00      	nop
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	0801b350 	.word	0x0801b350
 800d048:	0801b3d8 	.word	0x0801b3d8
 800d04c:	0801b394 	.word	0x0801b394

0800d050 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d106      	bne.n	800d06c <tcp_listen_closed+0x1c>
 800d05e:	4b14      	ldr	r3, [pc, #80]	; (800d0b0 <tcp_listen_closed+0x60>)
 800d060:	f240 1211 	movw	r2, #273	; 0x111
 800d064:	4913      	ldr	r1, [pc, #76]	; (800d0b4 <tcp_listen_closed+0x64>)
 800d066:	4814      	ldr	r0, [pc, #80]	; (800d0b8 <tcp_listen_closed+0x68>)
 800d068:	f00b faaa 	bl	80185c0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	7d1b      	ldrb	r3, [r3, #20]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d006      	beq.n	800d082 <tcp_listen_closed+0x32>
 800d074:	4b0e      	ldr	r3, [pc, #56]	; (800d0b0 <tcp_listen_closed+0x60>)
 800d076:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d07a:	4910      	ldr	r1, [pc, #64]	; (800d0bc <tcp_listen_closed+0x6c>)
 800d07c:	480e      	ldr	r0, [pc, #56]	; (800d0b8 <tcp_listen_closed+0x68>)
 800d07e:	f00b fa9f 	bl	80185c0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d082:	2301      	movs	r3, #1
 800d084:	60fb      	str	r3, [r7, #12]
 800d086:	e00b      	b.n	800d0a0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d088:	4a0d      	ldr	r2, [pc, #52]	; (800d0c0 <tcp_listen_closed+0x70>)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	6879      	ldr	r1, [r7, #4]
 800d094:	4618      	mov	r0, r3
 800d096:	f7ff ffb1 	bl	800cffc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	3301      	adds	r3, #1
 800d09e:	60fb      	str	r3, [r7, #12]
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2b03      	cmp	r3, #3
 800d0a4:	d9f0      	bls.n	800d088 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d0a6:	bf00      	nop
 800d0a8:	bf00      	nop
 800d0aa:	3710      	adds	r7, #16
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	0801b350 	.word	0x0801b350
 800d0b4:	0801b400 	.word	0x0801b400
 800d0b8:	0801b394 	.word	0x0801b394
 800d0bc:	0801b40c 	.word	0x0801b40c
 800d0c0:	0802784c 	.word	0x0802784c

0800d0c4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d0c4:	b5b0      	push	{r4, r5, r7, lr}
 800d0c6:	b088      	sub	sp, #32
 800d0c8:	af04      	add	r7, sp, #16
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d106      	bne.n	800d0e4 <tcp_close_shutdown+0x20>
 800d0d6:	4b63      	ldr	r3, [pc, #396]	; (800d264 <tcp_close_shutdown+0x1a0>)
 800d0d8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d0dc:	4962      	ldr	r1, [pc, #392]	; (800d268 <tcp_close_shutdown+0x1a4>)
 800d0de:	4863      	ldr	r0, [pc, #396]	; (800d26c <tcp_close_shutdown+0x1a8>)
 800d0e0:	f00b fa6e 	bl	80185c0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d0e4:	78fb      	ldrb	r3, [r7, #3]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d066      	beq.n	800d1b8 <tcp_close_shutdown+0xf4>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	7d1b      	ldrb	r3, [r3, #20]
 800d0ee:	2b04      	cmp	r3, #4
 800d0f0:	d003      	beq.n	800d0fa <tcp_close_shutdown+0x36>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	7d1b      	ldrb	r3, [r3, #20]
 800d0f6:	2b07      	cmp	r3, #7
 800d0f8:	d15e      	bne.n	800d1b8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d104      	bne.n	800d10c <tcp_close_shutdown+0x48>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d106:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d10a:	d055      	beq.n	800d1b8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	8b5b      	ldrh	r3, [r3, #26]
 800d110:	f003 0310 	and.w	r3, r3, #16
 800d114:	2b00      	cmp	r3, #0
 800d116:	d106      	bne.n	800d126 <tcp_close_shutdown+0x62>
 800d118:	4b52      	ldr	r3, [pc, #328]	; (800d264 <tcp_close_shutdown+0x1a0>)
 800d11a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d11e:	4954      	ldr	r1, [pc, #336]	; (800d270 <tcp_close_shutdown+0x1ac>)
 800d120:	4852      	ldr	r0, [pc, #328]	; (800d26c <tcp_close_shutdown+0x1a8>)
 800d122:	f00b fa4d 	bl	80185c0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d12e:	687d      	ldr	r5, [r7, #4]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	3304      	adds	r3, #4
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	8ad2      	ldrh	r2, [r2, #22]
 800d138:	6879      	ldr	r1, [r7, #4]
 800d13a:	8b09      	ldrh	r1, [r1, #24]
 800d13c:	9102      	str	r1, [sp, #8]
 800d13e:	9201      	str	r2, [sp, #4]
 800d140:	9300      	str	r3, [sp, #0]
 800d142:	462b      	mov	r3, r5
 800d144:	4622      	mov	r2, r4
 800d146:	4601      	mov	r1, r0
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f005 fdeb 	bl	8012d24 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f001 fbc8 	bl	800e8e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d154:	4b47      	ldr	r3, [pc, #284]	; (800d274 <tcp_close_shutdown+0x1b0>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d105      	bne.n	800d16a <tcp_close_shutdown+0xa6>
 800d15e:	4b45      	ldr	r3, [pc, #276]	; (800d274 <tcp_close_shutdown+0x1b0>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	4a43      	ldr	r2, [pc, #268]	; (800d274 <tcp_close_shutdown+0x1b0>)
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	e013      	b.n	800d192 <tcp_close_shutdown+0xce>
 800d16a:	4b42      	ldr	r3, [pc, #264]	; (800d274 <tcp_close_shutdown+0x1b0>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	60fb      	str	r3, [r7, #12]
 800d170:	e00c      	b.n	800d18c <tcp_close_shutdown+0xc8>
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	68db      	ldr	r3, [r3, #12]
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d104      	bne.n	800d186 <tcp_close_shutdown+0xc2>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	68da      	ldr	r2, [r3, #12]
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	60da      	str	r2, [r3, #12]
 800d184:	e005      	b.n	800d192 <tcp_close_shutdown+0xce>
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	60fb      	str	r3, [r7, #12]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d1ef      	bne.n	800d172 <tcp_close_shutdown+0xae>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2200      	movs	r2, #0
 800d196:	60da      	str	r2, [r3, #12]
 800d198:	4b37      	ldr	r3, [pc, #220]	; (800d278 <tcp_close_shutdown+0x1b4>)
 800d19a:	2201      	movs	r2, #1
 800d19c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d19e:	4b37      	ldr	r3, [pc, #220]	; (800d27c <tcp_close_shutdown+0x1b8>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d102      	bne.n	800d1ae <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d1a8:	f004 f860 	bl	801126c <tcp_trigger_input_pcb_close>
 800d1ac:	e002      	b.n	800d1b4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f7ff fed6 	bl	800cf60 <tcp_free>
      }
      return ERR_OK;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	e050      	b.n	800d25a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	7d1b      	ldrb	r3, [r3, #20]
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	d03b      	beq.n	800d238 <tcp_close_shutdown+0x174>
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	dc44      	bgt.n	800d24e <tcp_close_shutdown+0x18a>
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d002      	beq.n	800d1ce <tcp_close_shutdown+0x10a>
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d02a      	beq.n	800d222 <tcp_close_shutdown+0x15e>
 800d1cc:	e03f      	b.n	800d24e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	8adb      	ldrh	r3, [r3, #22]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d021      	beq.n	800d21a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d1d6:	4b2a      	ldr	r3, [pc, #168]	; (800d280 <tcp_close_shutdown+0x1bc>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d105      	bne.n	800d1ec <tcp_close_shutdown+0x128>
 800d1e0:	4b27      	ldr	r3, [pc, #156]	; (800d280 <tcp_close_shutdown+0x1bc>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	4a26      	ldr	r2, [pc, #152]	; (800d280 <tcp_close_shutdown+0x1bc>)
 800d1e8:	6013      	str	r3, [r2, #0]
 800d1ea:	e013      	b.n	800d214 <tcp_close_shutdown+0x150>
 800d1ec:	4b24      	ldr	r3, [pc, #144]	; (800d280 <tcp_close_shutdown+0x1bc>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	60bb      	str	r3, [r7, #8]
 800d1f2:	e00c      	b.n	800d20e <tcp_close_shutdown+0x14a>
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d104      	bne.n	800d208 <tcp_close_shutdown+0x144>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	68da      	ldr	r2, [r3, #12]
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	60da      	str	r2, [r3, #12]
 800d206:	e005      	b.n	800d214 <tcp_close_shutdown+0x150>
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	60bb      	str	r3, [r7, #8]
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d1ef      	bne.n	800d1f4 <tcp_close_shutdown+0x130>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f7ff fea0 	bl	800cf60 <tcp_free>
      break;
 800d220:	e01a      	b.n	800d258 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f7ff ff14 	bl	800d050 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d228:	6879      	ldr	r1, [r7, #4]
 800d22a:	4816      	ldr	r0, [pc, #88]	; (800d284 <tcp_close_shutdown+0x1c0>)
 800d22c:	f001 fbaa 	bl	800e984 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7ff feb1 	bl	800cf98 <tcp_free_listen>
      break;
 800d236:	e00f      	b.n	800d258 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d238:	6879      	ldr	r1, [r7, #4]
 800d23a:	480e      	ldr	r0, [pc, #56]	; (800d274 <tcp_close_shutdown+0x1b0>)
 800d23c:	f001 fba2 	bl	800e984 <tcp_pcb_remove>
 800d240:	4b0d      	ldr	r3, [pc, #52]	; (800d278 <tcp_close_shutdown+0x1b4>)
 800d242:	2201      	movs	r2, #1
 800d244:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff fe8a 	bl	800cf60 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d24c:	e004      	b.n	800d258 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 f81a 	bl	800d288 <tcp_close_shutdown_fin>
 800d254:	4603      	mov	r3, r0
 800d256:	e000      	b.n	800d25a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bdb0      	pop	{r4, r5, r7, pc}
 800d262:	bf00      	nop
 800d264:	0801b350 	.word	0x0801b350
 800d268:	0801b424 	.word	0x0801b424
 800d26c:	0801b394 	.word	0x0801b394
 800d270:	0801b444 	.word	0x0801b444
 800d274:	2001156c 	.word	0x2001156c
 800d278:	20011574 	.word	0x20011574
 800d27c:	200115ac 	.word	0x200115ac
 800d280:	20011564 	.word	0x20011564
 800d284:	20011568 	.word	0x20011568

0800d288 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d106      	bne.n	800d2a4 <tcp_close_shutdown_fin+0x1c>
 800d296:	4b2e      	ldr	r3, [pc, #184]	; (800d350 <tcp_close_shutdown_fin+0xc8>)
 800d298:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d29c:	492d      	ldr	r1, [pc, #180]	; (800d354 <tcp_close_shutdown_fin+0xcc>)
 800d29e:	482e      	ldr	r0, [pc, #184]	; (800d358 <tcp_close_shutdown_fin+0xd0>)
 800d2a0:	f00b f98e 	bl	80185c0 <iprintf>

  switch (pcb->state) {
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	7d1b      	ldrb	r3, [r3, #20]
 800d2a8:	2b07      	cmp	r3, #7
 800d2aa:	d020      	beq.n	800d2ee <tcp_close_shutdown_fin+0x66>
 800d2ac:	2b07      	cmp	r3, #7
 800d2ae:	dc2b      	bgt.n	800d308 <tcp_close_shutdown_fin+0x80>
 800d2b0:	2b03      	cmp	r3, #3
 800d2b2:	d002      	beq.n	800d2ba <tcp_close_shutdown_fin+0x32>
 800d2b4:	2b04      	cmp	r3, #4
 800d2b6:	d00d      	beq.n	800d2d4 <tcp_close_shutdown_fin+0x4c>
 800d2b8:	e026      	b.n	800d308 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f004 fe40 	bl	8011f40 <tcp_send_fin>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d2c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d11f      	bne.n	800d30c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2205      	movs	r2, #5
 800d2d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d2d2:	e01b      	b.n	800d30c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f004 fe33 	bl	8011f40 <tcp_send_fin>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d2de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d114      	bne.n	800d310 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2205      	movs	r2, #5
 800d2ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d2ec:	e010      	b.n	800d310 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f004 fe26 	bl	8011f40 <tcp_send_fin>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d2f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d109      	bne.n	800d314 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2209      	movs	r2, #9
 800d304:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d306:	e005      	b.n	800d314 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	e01c      	b.n	800d346 <tcp_close_shutdown_fin+0xbe>
      break;
 800d30c:	bf00      	nop
 800d30e:	e002      	b.n	800d316 <tcp_close_shutdown_fin+0x8e>
      break;
 800d310:	bf00      	nop
 800d312:	e000      	b.n	800d316 <tcp_close_shutdown_fin+0x8e>
      break;
 800d314:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d103      	bne.n	800d326 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f004 ff4c 	bl	80121bc <tcp_output>
 800d324:	e00d      	b.n	800d342 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d32a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d32e:	d108      	bne.n	800d342 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	8b5b      	ldrh	r3, [r3, #26]
 800d334:	f043 0308 	orr.w	r3, r3, #8
 800d338:	b29a      	uxth	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d33e:	2300      	movs	r3, #0
 800d340:	e001      	b.n	800d346 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d342:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d346:	4618      	mov	r0, r3
 800d348:	3710      	adds	r7, #16
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	0801b350 	.word	0x0801b350
 800d354:	0801b400 	.word	0x0801b400
 800d358:	0801b394 	.word	0x0801b394

0800d35c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d109      	bne.n	800d37e <tcp_close+0x22>
 800d36a:	4b0f      	ldr	r3, [pc, #60]	; (800d3a8 <tcp_close+0x4c>)
 800d36c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d370:	490e      	ldr	r1, [pc, #56]	; (800d3ac <tcp_close+0x50>)
 800d372:	480f      	ldr	r0, [pc, #60]	; (800d3b0 <tcp_close+0x54>)
 800d374:	f00b f924 	bl	80185c0 <iprintf>
 800d378:	f06f 030f 	mvn.w	r3, #15
 800d37c:	e00f      	b.n	800d39e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	7d1b      	ldrb	r3, [r3, #20]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d006      	beq.n	800d394 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	8b5b      	ldrh	r3, [r3, #26]
 800d38a:	f043 0310 	orr.w	r3, r3, #16
 800d38e:	b29a      	uxth	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d394:	2101      	movs	r1, #1
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7ff fe94 	bl	800d0c4 <tcp_close_shutdown>
 800d39c:	4603      	mov	r3, r0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	0801b350 	.word	0x0801b350
 800d3ac:	0801b460 	.word	0x0801b460
 800d3b0:	0801b394 	.word	0x0801b394

0800d3b4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d109      	bne.n	800d3da <tcp_shutdown+0x26>
 800d3c6:	4b26      	ldr	r3, [pc, #152]	; (800d460 <tcp_shutdown+0xac>)
 800d3c8:	f240 2207 	movw	r2, #519	; 0x207
 800d3cc:	4925      	ldr	r1, [pc, #148]	; (800d464 <tcp_shutdown+0xb0>)
 800d3ce:	4826      	ldr	r0, [pc, #152]	; (800d468 <tcp_shutdown+0xb4>)
 800d3d0:	f00b f8f6 	bl	80185c0 <iprintf>
 800d3d4:	f06f 030f 	mvn.w	r3, #15
 800d3d8:	e03d      	b.n	800d456 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	7d1b      	ldrb	r3, [r3, #20]
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d102      	bne.n	800d3e8 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d3e2:	f06f 030a 	mvn.w	r3, #10
 800d3e6:	e036      	b.n	800d456 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d01b      	beq.n	800d426 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	8b5b      	ldrh	r3, [r3, #26]
 800d3f2:	f043 0310 	orr.w	r3, r3, #16
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d005      	beq.n	800d40e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d402:	2101      	movs	r1, #1
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f7ff fe5d 	bl	800d0c4 <tcp_close_shutdown>
 800d40a:	4603      	mov	r3, r0
 800d40c:	e023      	b.n	800d456 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d412:	2b00      	cmp	r3, #0
 800d414:	d007      	beq.n	800d426 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7ff fae4 	bl	800c9e8 <pbuf_free>
      pcb->refused_data = NULL;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2200      	movs	r2, #0
 800d424:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d013      	beq.n	800d454 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	7d1b      	ldrb	r3, [r3, #20]
 800d430:	2b04      	cmp	r3, #4
 800d432:	dc02      	bgt.n	800d43a <tcp_shutdown+0x86>
 800d434:	2b03      	cmp	r3, #3
 800d436:	da02      	bge.n	800d43e <tcp_shutdown+0x8a>
 800d438:	e009      	b.n	800d44e <tcp_shutdown+0x9a>
 800d43a:	2b07      	cmp	r3, #7
 800d43c:	d107      	bne.n	800d44e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	b2db      	uxtb	r3, r3
 800d442:	4619      	mov	r1, r3
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f7ff fe3d 	bl	800d0c4 <tcp_close_shutdown>
 800d44a:	4603      	mov	r3, r0
 800d44c:	e003      	b.n	800d456 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d44e:	f06f 030a 	mvn.w	r3, #10
 800d452:	e000      	b.n	800d456 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d454:	2300      	movs	r3, #0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	0801b350 	.word	0x0801b350
 800d464:	0801b478 	.word	0x0801b478
 800d468:	0801b394 	.word	0x0801b394

0800d46c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b08e      	sub	sp, #56	; 0x38
 800d470:	af04      	add	r7, sp, #16
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d107      	bne.n	800d48c <tcp_abandon+0x20>
 800d47c:	4b52      	ldr	r3, [pc, #328]	; (800d5c8 <tcp_abandon+0x15c>)
 800d47e:	f240 223d 	movw	r2, #573	; 0x23d
 800d482:	4952      	ldr	r1, [pc, #328]	; (800d5cc <tcp_abandon+0x160>)
 800d484:	4852      	ldr	r0, [pc, #328]	; (800d5d0 <tcp_abandon+0x164>)
 800d486:	f00b f89b 	bl	80185c0 <iprintf>
 800d48a:	e099      	b.n	800d5c0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	7d1b      	ldrb	r3, [r3, #20]
 800d490:	2b01      	cmp	r3, #1
 800d492:	d106      	bne.n	800d4a2 <tcp_abandon+0x36>
 800d494:	4b4c      	ldr	r3, [pc, #304]	; (800d5c8 <tcp_abandon+0x15c>)
 800d496:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d49a:	494e      	ldr	r1, [pc, #312]	; (800d5d4 <tcp_abandon+0x168>)
 800d49c:	484c      	ldr	r0, [pc, #304]	; (800d5d0 <tcp_abandon+0x164>)
 800d49e:	f00b f88f 	bl	80185c0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	7d1b      	ldrb	r3, [r3, #20]
 800d4a6:	2b0a      	cmp	r3, #10
 800d4a8:	d107      	bne.n	800d4ba <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d4aa:	6879      	ldr	r1, [r7, #4]
 800d4ac:	484a      	ldr	r0, [pc, #296]	; (800d5d8 <tcp_abandon+0x16c>)
 800d4ae:	f001 fa69 	bl	800e984 <tcp_pcb_remove>
    tcp_free(pcb);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff fd54 	bl	800cf60 <tcp_free>
 800d4b8:	e082      	b.n	800d5c0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4c6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4cc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4d4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	691b      	ldr	r3, [r3, #16]
 800d4da:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	7d1b      	ldrb	r3, [r3, #20]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d126      	bne.n	800d532 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	8adb      	ldrh	r3, [r3, #22]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d02e      	beq.n	800d54a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d4ec:	4b3b      	ldr	r3, [pc, #236]	; (800d5dc <tcp_abandon+0x170>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d105      	bne.n	800d502 <tcp_abandon+0x96>
 800d4f6:	4b39      	ldr	r3, [pc, #228]	; (800d5dc <tcp_abandon+0x170>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	4a37      	ldr	r2, [pc, #220]	; (800d5dc <tcp_abandon+0x170>)
 800d4fe:	6013      	str	r3, [r2, #0]
 800d500:	e013      	b.n	800d52a <tcp_abandon+0xbe>
 800d502:	4b36      	ldr	r3, [pc, #216]	; (800d5dc <tcp_abandon+0x170>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	61fb      	str	r3, [r7, #28]
 800d508:	e00c      	b.n	800d524 <tcp_abandon+0xb8>
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	68db      	ldr	r3, [r3, #12]
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	429a      	cmp	r2, r3
 800d512:	d104      	bne.n	800d51e <tcp_abandon+0xb2>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	68da      	ldr	r2, [r3, #12]
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	60da      	str	r2, [r3, #12]
 800d51c:	e005      	b.n	800d52a <tcp_abandon+0xbe>
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	61fb      	str	r3, [r7, #28]
 800d524:	69fb      	ldr	r3, [r7, #28]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1ef      	bne.n	800d50a <tcp_abandon+0x9e>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	60da      	str	r2, [r3, #12]
 800d530:	e00b      	b.n	800d54a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	8adb      	ldrh	r3, [r3, #22]
 800d53a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d53c:	6879      	ldr	r1, [r7, #4]
 800d53e:	4828      	ldr	r0, [pc, #160]	; (800d5e0 <tcp_abandon+0x174>)
 800d540:	f001 fa20 	bl	800e984 <tcp_pcb_remove>
 800d544:	4b27      	ldr	r3, [pc, #156]	; (800d5e4 <tcp_abandon+0x178>)
 800d546:	2201      	movs	r2, #1
 800d548:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d004      	beq.n	800d55c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d556:	4618      	mov	r0, r3
 800d558:	f000 fed6 	bl	800e308 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d560:	2b00      	cmp	r3, #0
 800d562:	d004      	beq.n	800d56e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d568:	4618      	mov	r0, r3
 800d56a:	f000 fecd 	bl	800e308 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d572:	2b00      	cmp	r3, #0
 800d574:	d004      	beq.n	800d580 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d57a:	4618      	mov	r0, r3
 800d57c:	f000 fec4 	bl	800e308 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d582:	2b00      	cmp	r3, #0
 800d584:	d00e      	beq.n	800d5a4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d586:	6879      	ldr	r1, [r7, #4]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	3304      	adds	r3, #4
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	8b12      	ldrh	r2, [r2, #24]
 800d590:	9202      	str	r2, [sp, #8]
 800d592:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d594:	9201      	str	r2, [sp, #4]
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	460b      	mov	r3, r1
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	69b9      	ldr	r1, [r7, #24]
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f005 fbc0 	bl	8012d24 <tcp_rst>
    }
    last_state = pcb->state;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	7d1b      	ldrb	r3, [r3, #20]
 800d5a8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f7ff fcd8 	bl	800cf60 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d004      	beq.n	800d5c0 <tcp_abandon+0x154>
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	f06f 010c 	mvn.w	r1, #12
 800d5bc:	68f8      	ldr	r0, [r7, #12]
 800d5be:	4798      	blx	r3
  }
}
 800d5c0:	3728      	adds	r7, #40	; 0x28
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	0801b350 	.word	0x0801b350
 800d5cc:	0801b494 	.word	0x0801b494
 800d5d0:	0801b394 	.word	0x0801b394
 800d5d4:	0801b4b0 	.word	0x0801b4b0
 800d5d8:	20011570 	.word	0x20011570
 800d5dc:	20011564 	.word	0x20011564
 800d5e0:	2001156c 	.word	0x2001156c
 800d5e4:	20011574 	.word	0x20011574

0800d5e8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d5f0:	2101      	movs	r1, #1
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7ff ff3a 	bl	800d46c <tcp_abandon>
}
 800d5f8:	bf00      	nop
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b088      	sub	sp, #32
 800d604:	af00      	add	r7, sp, #0
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	4613      	mov	r3, r2
 800d60c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d60e:	2304      	movs	r3, #4
 800d610:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d101      	bne.n	800d61c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d618:	4b3e      	ldr	r3, [pc, #248]	; (800d714 <tcp_bind+0x114>)
 800d61a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d109      	bne.n	800d636 <tcp_bind+0x36>
 800d622:	4b3d      	ldr	r3, [pc, #244]	; (800d718 <tcp_bind+0x118>)
 800d624:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d628:	493c      	ldr	r1, [pc, #240]	; (800d71c <tcp_bind+0x11c>)
 800d62a:	483d      	ldr	r0, [pc, #244]	; (800d720 <tcp_bind+0x120>)
 800d62c:	f00a ffc8 	bl	80185c0 <iprintf>
 800d630:	f06f 030f 	mvn.w	r3, #15
 800d634:	e06a      	b.n	800d70c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	7d1b      	ldrb	r3, [r3, #20]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d009      	beq.n	800d652 <tcp_bind+0x52>
 800d63e:	4b36      	ldr	r3, [pc, #216]	; (800d718 <tcp_bind+0x118>)
 800d640:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d644:	4937      	ldr	r1, [pc, #220]	; (800d724 <tcp_bind+0x124>)
 800d646:	4836      	ldr	r0, [pc, #216]	; (800d720 <tcp_bind+0x120>)
 800d648:	f00a ffba 	bl	80185c0 <iprintf>
 800d64c:	f06f 0305 	mvn.w	r3, #5
 800d650:	e05c      	b.n	800d70c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d652:	88fb      	ldrh	r3, [r7, #6]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d109      	bne.n	800d66c <tcp_bind+0x6c>
    port = tcp_new_port();
 800d658:	f000 f9f0 	bl	800da3c <tcp_new_port>
 800d65c:	4603      	mov	r3, r0
 800d65e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d660:	88fb      	ldrh	r3, [r7, #6]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d135      	bne.n	800d6d2 <tcp_bind+0xd2>
      return ERR_BUF;
 800d666:	f06f 0301 	mvn.w	r3, #1
 800d66a:	e04f      	b.n	800d70c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d66c:	2300      	movs	r3, #0
 800d66e:	61fb      	str	r3, [r7, #28]
 800d670:	e02b      	b.n	800d6ca <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d672:	4a2d      	ldr	r2, [pc, #180]	; (800d728 <tcp_bind+0x128>)
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	61bb      	str	r3, [r7, #24]
 800d67e:	e01e      	b.n	800d6be <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	8adb      	ldrh	r3, [r3, #22]
 800d684:	88fa      	ldrh	r2, [r7, #6]
 800d686:	429a      	cmp	r2, r3
 800d688:	d116      	bne.n	800d6b8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d68a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d010      	beq.n	800d6b2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00c      	beq.n	800d6b2 <tcp_bind+0xb2>
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d009      	beq.n	800d6b2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d005      	beq.n	800d6b2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d102      	bne.n	800d6b8 <tcp_bind+0xb8>
              return ERR_USE;
 800d6b2:	f06f 0307 	mvn.w	r3, #7
 800d6b6:	e029      	b.n	800d70c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	68db      	ldr	r3, [r3, #12]
 800d6bc:	61bb      	str	r3, [r7, #24]
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1dd      	bne.n	800d680 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	61fb      	str	r3, [r7, #28]
 800d6ca:	69fa      	ldr	r2, [r7, #28]
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	dbcf      	blt.n	800d672 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d00c      	beq.n	800d6f2 <tcp_bind+0xf2>
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d008      	beq.n	800d6f2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d002      	beq.n	800d6ec <tcp_bind+0xec>
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	e000      	b.n	800d6ee <tcp_bind+0xee>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	88fa      	ldrh	r2, [r7, #6]
 800d6f6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d6f8:	4b0c      	ldr	r3, [pc, #48]	; (800d72c <tcp_bind+0x12c>)
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	60da      	str	r2, [r3, #12]
 800d700:	4a0a      	ldr	r2, [pc, #40]	; (800d72c <tcp_bind+0x12c>)
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	6013      	str	r3, [r2, #0]
 800d706:	f005 fccf 	bl	80130a8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d70a:	2300      	movs	r3, #0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3720      	adds	r7, #32
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	08027884 	.word	0x08027884
 800d718:	0801b350 	.word	0x0801b350
 800d71c:	0801b4e4 	.word	0x0801b4e4
 800d720:	0801b394 	.word	0x0801b394
 800d724:	0801b4fc 	.word	0x0801b4fc
 800d728:	0802784c 	.word	0x0802784c
 800d72c:	20011564 	.word	0x20011564

0800d730 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	4613      	mov	r3, r2
 800d73c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d106      	bne.n	800d752 <tcp_accept_null+0x22>
 800d744:	4b07      	ldr	r3, [pc, #28]	; (800d764 <tcp_accept_null+0x34>)
 800d746:	f240 320f 	movw	r2, #783	; 0x30f
 800d74a:	4907      	ldr	r1, [pc, #28]	; (800d768 <tcp_accept_null+0x38>)
 800d74c:	4807      	ldr	r0, [pc, #28]	; (800d76c <tcp_accept_null+0x3c>)
 800d74e:	f00a ff37 	bl	80185c0 <iprintf>

  tcp_abort(pcb);
 800d752:	68b8      	ldr	r0, [r7, #8]
 800d754:	f7ff ff48 	bl	800d5e8 <tcp_abort>

  return ERR_ABRT;
 800d758:	f06f 030c 	mvn.w	r3, #12
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3710      	adds	r7, #16
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	0801b350 	.word	0x0801b350
 800d768:	0801b524 	.word	0x0801b524
 800d76c:	0801b394 	.word	0x0801b394

0800d770 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	460b      	mov	r3, r1
 800d77a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800d77c:	78fb      	ldrb	r3, [r7, #3]
 800d77e:	2200      	movs	r2, #0
 800d780:	4619      	mov	r1, r3
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 f806 	bl	800d794 <tcp_listen_with_backlog_and_err>
 800d788:	4603      	mov	r3, r0
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3708      	adds	r7, #8
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
	...

0800d794 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b088      	sub	sp, #32
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	460b      	mov	r3, r1
 800d79e:	607a      	str	r2, [r7, #4]
 800d7a0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d109      	bne.n	800d7c0 <tcp_listen_with_backlog_and_err+0x2c>
 800d7ac:	4b47      	ldr	r3, [pc, #284]	; (800d8cc <tcp_listen_with_backlog_and_err+0x138>)
 800d7ae:	f240 3259 	movw	r2, #857	; 0x359
 800d7b2:	4947      	ldr	r1, [pc, #284]	; (800d8d0 <tcp_listen_with_backlog_and_err+0x13c>)
 800d7b4:	4847      	ldr	r0, [pc, #284]	; (800d8d4 <tcp_listen_with_backlog_and_err+0x140>)
 800d7b6:	f00a ff03 	bl	80185c0 <iprintf>
 800d7ba:	23f0      	movs	r3, #240	; 0xf0
 800d7bc:	76fb      	strb	r3, [r7, #27]
 800d7be:	e079      	b.n	800d8b4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	7d1b      	ldrb	r3, [r3, #20]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d009      	beq.n	800d7dc <tcp_listen_with_backlog_and_err+0x48>
 800d7c8:	4b40      	ldr	r3, [pc, #256]	; (800d8cc <tcp_listen_with_backlog_and_err+0x138>)
 800d7ca:	f240 325a 	movw	r2, #858	; 0x35a
 800d7ce:	4942      	ldr	r1, [pc, #264]	; (800d8d8 <tcp_listen_with_backlog_and_err+0x144>)
 800d7d0:	4840      	ldr	r0, [pc, #256]	; (800d8d4 <tcp_listen_with_backlog_and_err+0x140>)
 800d7d2:	f00a fef5 	bl	80185c0 <iprintf>
 800d7d6:	23f1      	movs	r3, #241	; 0xf1
 800d7d8:	76fb      	strb	r3, [r7, #27]
 800d7da:	e06b      	b.n	800d8b4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	7d1b      	ldrb	r3, [r3, #20]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d104      	bne.n	800d7ee <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d7e8:	23f7      	movs	r3, #247	; 0xf7
 800d7ea:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d7ec:	e062      	b.n	800d8b4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d7ee:	2002      	movs	r0, #2
 800d7f0:	f7fe f9d4 	bl	800bb9c <memp_malloc>
 800d7f4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d102      	bne.n	800d802 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d7fc:	23ff      	movs	r3, #255	; 0xff
 800d7fe:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d800:	e058      	b.n	800d8b4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	691a      	ldr	r2, [r3, #16]
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	8ada      	ldrh	r2, [r3, #22]
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	2201      	movs	r2, #1
 800d816:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	7d5a      	ldrb	r2, [r3, #21]
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	7a5a      	ldrb	r2, [r3, #9]
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	2200      	movs	r2, #0
 800d82c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	7ada      	ldrb	r2, [r3, #11]
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	7a9a      	ldrb	r2, [r3, #10]
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681a      	ldr	r2, [r3, #0]
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	8adb      	ldrh	r3, [r3, #22]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d021      	beq.n	800d892 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d84e:	4b23      	ldr	r3, [pc, #140]	; (800d8dc <tcp_listen_with_backlog_and_err+0x148>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68fa      	ldr	r2, [r7, #12]
 800d854:	429a      	cmp	r2, r3
 800d856:	d105      	bne.n	800d864 <tcp_listen_with_backlog_and_err+0xd0>
 800d858:	4b20      	ldr	r3, [pc, #128]	; (800d8dc <tcp_listen_with_backlog_and_err+0x148>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	4a1f      	ldr	r2, [pc, #124]	; (800d8dc <tcp_listen_with_backlog_and_err+0x148>)
 800d860:	6013      	str	r3, [r2, #0]
 800d862:	e013      	b.n	800d88c <tcp_listen_with_backlog_and_err+0xf8>
 800d864:	4b1d      	ldr	r3, [pc, #116]	; (800d8dc <tcp_listen_with_backlog_and_err+0x148>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	617b      	str	r3, [r7, #20]
 800d86a:	e00c      	b.n	800d886 <tcp_listen_with_backlog_and_err+0xf2>
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	429a      	cmp	r2, r3
 800d874:	d104      	bne.n	800d880 <tcp_listen_with_backlog_and_err+0xec>
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	68da      	ldr	r2, [r3, #12]
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	60da      	str	r2, [r3, #12]
 800d87e:	e005      	b.n	800d88c <tcp_listen_with_backlog_and_err+0xf8>
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	68db      	ldr	r3, [r3, #12]
 800d884:	617b      	str	r3, [r7, #20]
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1ef      	bne.n	800d86c <tcp_listen_with_backlog_and_err+0xd8>
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2200      	movs	r2, #0
 800d890:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d892:	68f8      	ldr	r0, [r7, #12]
 800d894:	f7ff fb64 	bl	800cf60 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	4a11      	ldr	r2, [pc, #68]	; (800d8e0 <tcp_listen_with_backlog_and_err+0x14c>)
 800d89c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d89e:	4b11      	ldr	r3, [pc, #68]	; (800d8e4 <tcp_listen_with_backlog_and_err+0x150>)
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	60da      	str	r2, [r3, #12]
 800d8a6:	4a0f      	ldr	r2, [pc, #60]	; (800d8e4 <tcp_listen_with_backlog_and_err+0x150>)
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	6013      	str	r3, [r2, #0]
 800d8ac:	f005 fbfc 	bl	80130a8 <tcp_timer_needed>
  res = ERR_OK;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d002      	beq.n	800d8c0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	7efa      	ldrb	r2, [r7, #27]
 800d8be:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d8c0:	69fb      	ldr	r3, [r7, #28]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3720      	adds	r7, #32
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop
 800d8cc:	0801b350 	.word	0x0801b350
 800d8d0:	0801b544 	.word	0x0801b544
 800d8d4:	0801b394 	.word	0x0801b394
 800d8d8:	0801b574 	.word	0x0801b574
 800d8dc:	20011564 	.word	0x20011564
 800d8e0:	0800d731 	.word	0x0800d731
 800d8e4:	20011568 	.word	0x20011568

0800d8e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d106      	bne.n	800d904 <tcp_update_rcv_ann_wnd+0x1c>
 800d8f6:	4b25      	ldr	r3, [pc, #148]	; (800d98c <tcp_update_rcv_ann_wnd+0xa4>)
 800d8f8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d8fc:	4924      	ldr	r1, [pc, #144]	; (800d990 <tcp_update_rcv_ann_wnd+0xa8>)
 800d8fe:	4825      	ldr	r0, [pc, #148]	; (800d994 <tcp_update_rcv_ann_wnd+0xac>)
 800d900:	f00a fe5e 	bl	80185c0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d908:	687a      	ldr	r2, [r7, #4]
 800d90a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d90c:	4413      	add	r3, r2
 800d90e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d918:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d91c:	bf28      	it	cs
 800d91e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d922:	b292      	uxth	r2, r2
 800d924:	4413      	add	r3, r2
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	db08      	blt.n	800d940 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	1ad3      	subs	r3, r2, r3
 800d93e:	e020      	b.n	800d982 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	dd03      	ble.n	800d956 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d954:	e014      	b.n	800d980 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95e:	1ad3      	subs	r3, r2, r3
 800d960:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d968:	d306      	bcc.n	800d978 <tcp_update_rcv_ann_wnd+0x90>
 800d96a:	4b08      	ldr	r3, [pc, #32]	; (800d98c <tcp_update_rcv_ann_wnd+0xa4>)
 800d96c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d970:	4909      	ldr	r1, [pc, #36]	; (800d998 <tcp_update_rcv_ann_wnd+0xb0>)
 800d972:	4808      	ldr	r0, [pc, #32]	; (800d994 <tcp_update_rcv_ann_wnd+0xac>)
 800d974:	f00a fe24 	bl	80185c0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d980:	2300      	movs	r3, #0
  }
}
 800d982:	4618      	mov	r0, r3
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	0801b350 	.word	0x0801b350
 800d990:	0801b5ac 	.word	0x0801b5ac
 800d994:	0801b394 	.word	0x0801b394
 800d998:	0801b5d0 	.word	0x0801b5d0

0800d99c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d107      	bne.n	800d9be <tcp_recved+0x22>
 800d9ae:	4b1f      	ldr	r3, [pc, #124]	; (800da2c <tcp_recved+0x90>)
 800d9b0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d9b4:	491e      	ldr	r1, [pc, #120]	; (800da30 <tcp_recved+0x94>)
 800d9b6:	481f      	ldr	r0, [pc, #124]	; (800da34 <tcp_recved+0x98>)
 800d9b8:	f00a fe02 	bl	80185c0 <iprintf>
 800d9bc:	e032      	b.n	800da24 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	7d1b      	ldrb	r3, [r3, #20]
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d106      	bne.n	800d9d4 <tcp_recved+0x38>
 800d9c6:	4b19      	ldr	r3, [pc, #100]	; (800da2c <tcp_recved+0x90>)
 800d9c8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d9cc:	491a      	ldr	r1, [pc, #104]	; (800da38 <tcp_recved+0x9c>)
 800d9ce:	4819      	ldr	r0, [pc, #100]	; (800da34 <tcp_recved+0x98>)
 800d9d0:	f00a fdf6 	bl	80185c0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d9d8:	887b      	ldrh	r3, [r7, #2]
 800d9da:	4413      	add	r3, r2
 800d9dc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d9de:	89fb      	ldrh	r3, [r7, #14]
 800d9e0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d9e4:	d804      	bhi.n	800d9f0 <tcp_recved+0x54>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9ea:	89fa      	ldrh	r2, [r7, #14]
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d204      	bcs.n	800d9fa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d9f6:	851a      	strh	r2, [r3, #40]	; 0x28
 800d9f8:	e002      	b.n	800da00 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	89fa      	ldrh	r2, [r7, #14]
 800d9fe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f7ff ff71 	bl	800d8e8 <tcp_update_rcv_ann_wnd>
 800da06:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800da0e:	d309      	bcc.n	800da24 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	8b5b      	ldrh	r3, [r3, #26]
 800da14:	f043 0302 	orr.w	r3, r3, #2
 800da18:	b29a      	uxth	r2, r3
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f004 fbcc 	bl	80121bc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	0801b350 	.word	0x0801b350
 800da30:	0801b5ec 	.word	0x0801b5ec
 800da34:	0801b394 	.word	0x0801b394
 800da38:	0801b604 	.word	0x0801b604

0800da3c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800da42:	2300      	movs	r3, #0
 800da44:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800da46:	4b1e      	ldr	r3, [pc, #120]	; (800dac0 <tcp_new_port+0x84>)
 800da48:	881b      	ldrh	r3, [r3, #0]
 800da4a:	3301      	adds	r3, #1
 800da4c:	b29a      	uxth	r2, r3
 800da4e:	4b1c      	ldr	r3, [pc, #112]	; (800dac0 <tcp_new_port+0x84>)
 800da50:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800da52:	4b1b      	ldr	r3, [pc, #108]	; (800dac0 <tcp_new_port+0x84>)
 800da54:	881b      	ldrh	r3, [r3, #0]
 800da56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d103      	bne.n	800da66 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800da5e:	4b18      	ldr	r3, [pc, #96]	; (800dac0 <tcp_new_port+0x84>)
 800da60:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800da64:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800da66:	2300      	movs	r3, #0
 800da68:	71fb      	strb	r3, [r7, #7]
 800da6a:	e01e      	b.n	800daaa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800da6c:	79fb      	ldrb	r3, [r7, #7]
 800da6e:	4a15      	ldr	r2, [pc, #84]	; (800dac4 <tcp_new_port+0x88>)
 800da70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	603b      	str	r3, [r7, #0]
 800da78:	e011      	b.n	800da9e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	8ada      	ldrh	r2, [r3, #22]
 800da7e:	4b10      	ldr	r3, [pc, #64]	; (800dac0 <tcp_new_port+0x84>)
 800da80:	881b      	ldrh	r3, [r3, #0]
 800da82:	429a      	cmp	r2, r3
 800da84:	d108      	bne.n	800da98 <tcp_new_port+0x5c>
        n++;
 800da86:	88bb      	ldrh	r3, [r7, #4]
 800da88:	3301      	adds	r3, #1
 800da8a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800da8c:	88bb      	ldrh	r3, [r7, #4]
 800da8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da92:	d3d8      	bcc.n	800da46 <tcp_new_port+0xa>
          return 0;
 800da94:	2300      	movs	r3, #0
 800da96:	e00d      	b.n	800dab4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	603b      	str	r3, [r7, #0]
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d1ea      	bne.n	800da7a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800daa4:	79fb      	ldrb	r3, [r7, #7]
 800daa6:	3301      	adds	r3, #1
 800daa8:	71fb      	strb	r3, [r7, #7]
 800daaa:	79fb      	ldrb	r3, [r7, #7]
 800daac:	2b03      	cmp	r3, #3
 800daae:	d9dd      	bls.n	800da6c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800dab0:	4b03      	ldr	r3, [pc, #12]	; (800dac0 <tcp_new_port+0x84>)
 800dab2:	881b      	ldrh	r3, [r3, #0]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	370c      	adds	r7, #12
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr
 800dac0:	20000024 	.word	0x20000024
 800dac4:	0802784c 	.word	0x0802784c

0800dac8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dac8:	b5b0      	push	{r4, r5, r7, lr}
 800daca:	b090      	sub	sp, #64	; 0x40
 800dacc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dace:	2300      	movs	r3, #0
 800dad0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dad4:	4b94      	ldr	r3, [pc, #592]	; (800dd28 <tcp_slowtmr+0x260>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	3301      	adds	r3, #1
 800dada:	4a93      	ldr	r2, [pc, #588]	; (800dd28 <tcp_slowtmr+0x260>)
 800dadc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dade:	4b93      	ldr	r3, [pc, #588]	; (800dd2c <tcp_slowtmr+0x264>)
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	3301      	adds	r3, #1
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	4b91      	ldr	r3, [pc, #580]	; (800dd2c <tcp_slowtmr+0x264>)
 800dae8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800daea:	2300      	movs	r3, #0
 800daec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800daee:	4b90      	ldr	r3, [pc, #576]	; (800dd30 <tcp_slowtmr+0x268>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800daf4:	e29f      	b.n	800e036 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800daf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf8:	7d1b      	ldrb	r3, [r3, #20]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <tcp_slowtmr+0x44>
 800dafe:	4b8d      	ldr	r3, [pc, #564]	; (800dd34 <tcp_slowtmr+0x26c>)
 800db00:	f240 42be 	movw	r2, #1214	; 0x4be
 800db04:	498c      	ldr	r1, [pc, #560]	; (800dd38 <tcp_slowtmr+0x270>)
 800db06:	488d      	ldr	r0, [pc, #564]	; (800dd3c <tcp_slowtmr+0x274>)
 800db08:	f00a fd5a 	bl	80185c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800db0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0e:	7d1b      	ldrb	r3, [r3, #20]
 800db10:	2b01      	cmp	r3, #1
 800db12:	d106      	bne.n	800db22 <tcp_slowtmr+0x5a>
 800db14:	4b87      	ldr	r3, [pc, #540]	; (800dd34 <tcp_slowtmr+0x26c>)
 800db16:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800db1a:	4989      	ldr	r1, [pc, #548]	; (800dd40 <tcp_slowtmr+0x278>)
 800db1c:	4887      	ldr	r0, [pc, #540]	; (800dd3c <tcp_slowtmr+0x274>)
 800db1e:	f00a fd4f 	bl	80185c0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800db22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db24:	7d1b      	ldrb	r3, [r3, #20]
 800db26:	2b0a      	cmp	r3, #10
 800db28:	d106      	bne.n	800db38 <tcp_slowtmr+0x70>
 800db2a:	4b82      	ldr	r3, [pc, #520]	; (800dd34 <tcp_slowtmr+0x26c>)
 800db2c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800db30:	4984      	ldr	r1, [pc, #528]	; (800dd44 <tcp_slowtmr+0x27c>)
 800db32:	4882      	ldr	r0, [pc, #520]	; (800dd3c <tcp_slowtmr+0x274>)
 800db34:	f00a fd44 	bl	80185c0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800db38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3a:	7f9a      	ldrb	r2, [r3, #30]
 800db3c:	4b7b      	ldr	r3, [pc, #492]	; (800dd2c <tcp_slowtmr+0x264>)
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	429a      	cmp	r2, r3
 800db42:	d105      	bne.n	800db50 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800db44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800db48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800db4e:	e272      	b.n	800e036 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800db50:	4b76      	ldr	r3, [pc, #472]	; (800dd2c <tcp_slowtmr+0x264>)
 800db52:	781a      	ldrb	r2, [r3, #0]
 800db54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db56:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800db58:	2300      	movs	r3, #0
 800db5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800db5e:	2300      	movs	r3, #0
 800db60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800db64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db66:	7d1b      	ldrb	r3, [r3, #20]
 800db68:	2b02      	cmp	r3, #2
 800db6a:	d10a      	bne.n	800db82 <tcp_slowtmr+0xba>
 800db6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db72:	2b05      	cmp	r3, #5
 800db74:	d905      	bls.n	800db82 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800db76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db7a:	3301      	adds	r3, #1
 800db7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db80:	e11e      	b.n	800ddc0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800db82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db88:	2b0b      	cmp	r3, #11
 800db8a:	d905      	bls.n	800db98 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800db8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db90:	3301      	adds	r3, #1
 800db92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db96:	e113      	b.n	800ddc0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800db98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d075      	beq.n	800dc8e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d006      	beq.n	800dbb8 <tcp_slowtmr+0xf0>
 800dbaa:	4b62      	ldr	r3, [pc, #392]	; (800dd34 <tcp_slowtmr+0x26c>)
 800dbac:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dbb0:	4965      	ldr	r1, [pc, #404]	; (800dd48 <tcp_slowtmr+0x280>)
 800dbb2:	4862      	ldr	r0, [pc, #392]	; (800dd3c <tcp_slowtmr+0x274>)
 800dbb4:	f00a fd04 	bl	80185c0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d106      	bne.n	800dbce <tcp_slowtmr+0x106>
 800dbc0:	4b5c      	ldr	r3, [pc, #368]	; (800dd34 <tcp_slowtmr+0x26c>)
 800dbc2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dbc6:	4961      	ldr	r1, [pc, #388]	; (800dd4c <tcp_slowtmr+0x284>)
 800dbc8:	485c      	ldr	r0, [pc, #368]	; (800dd3c <tcp_slowtmr+0x274>)
 800dbca:	f00a fcf9 	bl	80185c0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dbd4:	2b0b      	cmp	r3, #11
 800dbd6:	d905      	bls.n	800dbe4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800dbd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbdc:	3301      	adds	r3, #1
 800dbde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dbe2:	e0ed      	b.n	800ddc0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dbea:	3b01      	subs	r3, #1
 800dbec:	4a58      	ldr	r2, [pc, #352]	; (800dd50 <tcp_slowtmr+0x288>)
 800dbee:	5cd3      	ldrb	r3, [r2, r3]
 800dbf0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dbf8:	7c7a      	ldrb	r2, [r7, #17]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d907      	bls.n	800dc0e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800dbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dc04:	3301      	adds	r3, #1
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800dc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dc14:	7c7a      	ldrb	r2, [r7, #17]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	f200 80d2 	bhi.w	800ddc0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800dc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d108      	bne.n	800dc3c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dc2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc2c:	f005 f96e 	bl	8012f0c <tcp_zero_window_probe>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d014      	beq.n	800dc60 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800dc36:	2300      	movs	r3, #0
 800dc38:	623b      	str	r3, [r7, #32]
 800dc3a:	e011      	b.n	800dc60 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc42:	4619      	mov	r1, r3
 800dc44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc46:	f004 f833 	bl	8011cb0 <tcp_split_unsent_seg>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d107      	bne.n	800dc60 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800dc50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc52:	f004 fab3 	bl	80121bc <tcp_output>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d101      	bne.n	800dc60 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800dc60:	6a3b      	ldr	r3, [r7, #32]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	f000 80ac 	beq.w	800ddc0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800dc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dc76:	2b06      	cmp	r3, #6
 800dc78:	f200 80a2 	bhi.w	800ddc0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800dc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dc82:	3301      	adds	r3, #1
 800dc84:	b2da      	uxtb	r2, r3
 800dc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800dc8c:	e098      	b.n	800ddc0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800dc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	db0f      	blt.n	800dcb8 <tcp_slowtmr+0x1f0>
 800dc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dc9e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d008      	beq.n	800dcb8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800dca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	3301      	adds	r3, #1
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	b21a      	sxth	r2, r3
 800dcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800dcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800dcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	db7b      	blt.n	800ddc0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800dcc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcca:	f004 fd6b 	bl	80127a4 <tcp_rexmit_rto_prepare>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d007      	beq.n	800dce4 <tcp_slowtmr+0x21c>
 800dcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d171      	bne.n	800ddc0 <tcp_slowtmr+0x2f8>
 800dcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d06d      	beq.n	800ddc0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800dce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce6:	7d1b      	ldrb	r3, [r3, #20]
 800dce8:	2b02      	cmp	r3, #2
 800dcea:	d03a      	beq.n	800dd62 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800dcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcf2:	2b0c      	cmp	r3, #12
 800dcf4:	bf28      	it	cs
 800dcf6:	230c      	movcs	r3, #12
 800dcf8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800dcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dd00:	10db      	asrs	r3, r3, #3
 800dd02:	b21b      	sxth	r3, r3
 800dd04:	461a      	mov	r2, r3
 800dd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dd0c:	4413      	add	r3, r2
 800dd0e:	7efa      	ldrb	r2, [r7, #27]
 800dd10:	4910      	ldr	r1, [pc, #64]	; (800dd54 <tcp_slowtmr+0x28c>)
 800dd12:	5c8a      	ldrb	r2, [r1, r2]
 800dd14:	4093      	lsls	r3, r2
 800dd16:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	dc1a      	bgt.n	800dd58 <tcp_slowtmr+0x290>
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	b21a      	sxth	r2, r3
 800dd26:	e019      	b.n	800dd5c <tcp_slowtmr+0x294>
 800dd28:	20011560 	.word	0x20011560
 800dd2c:	20011576 	.word	0x20011576
 800dd30:	2001156c 	.word	0x2001156c
 800dd34:	0801b350 	.word	0x0801b350
 800dd38:	0801b694 	.word	0x0801b694
 800dd3c:	0801b394 	.word	0x0801b394
 800dd40:	0801b6c0 	.word	0x0801b6c0
 800dd44:	0801b6ec 	.word	0x0801b6ec
 800dd48:	0801b71c 	.word	0x0801b71c
 800dd4c:	0801b750 	.word	0x0801b750
 800dd50:	08027844 	.word	0x08027844
 800dd54:	08027834 	.word	0x08027834
 800dd58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800dd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd64:	2200      	movs	r2, #0
 800dd66:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800dd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dd74:	4293      	cmp	r3, r2
 800dd76:	bf28      	it	cs
 800dd78:	4613      	movcs	r3, r2
 800dd7a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800dd7c:	8a7b      	ldrh	r3, [r7, #18]
 800dd7e:	085b      	lsrs	r3, r3, #1
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800dd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd92:	005b      	lsls	r3, r3, #1
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d206      	bcs.n	800dda8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800dd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd9e:	005b      	lsls	r3, r3, #1
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800dda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddaa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ddac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ddb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ddba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ddbc:	f004 fd62 	bl	8012884 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ddc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc2:	7d1b      	ldrb	r3, [r3, #20]
 800ddc4:	2b06      	cmp	r3, #6
 800ddc6:	d111      	bne.n	800ddec <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ddc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddca:	8b5b      	ldrh	r3, [r3, #26]
 800ddcc:	f003 0310 	and.w	r3, r3, #16
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00b      	beq.n	800ddec <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ddd4:	4b9d      	ldr	r3, [pc, #628]	; (800e04c <tcp_slowtmr+0x584>)
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddda:	6a1b      	ldr	r3, [r3, #32]
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	2b28      	cmp	r3, #40	; 0x28
 800dde0:	d904      	bls.n	800ddec <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800dde2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dde6:	3301      	adds	r3, #1
 800dde8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ddec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddee:	7a5b      	ldrb	r3, [r3, #9]
 800ddf0:	f003 0308 	and.w	r3, r3, #8
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d04c      	beq.n	800de92 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ddf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ddfc:	2b04      	cmp	r3, #4
 800ddfe:	d003      	beq.n	800de08 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800de00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de02:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800de04:	2b07      	cmp	r3, #7
 800de06:	d144      	bne.n	800de92 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800de08:	4b90      	ldr	r3, [pc, #576]	; (800e04c <tcp_slowtmr+0x584>)
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0e:	6a1b      	ldr	r3, [r3, #32]
 800de10:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800de12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800de18:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800de1c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800de20:	498b      	ldr	r1, [pc, #556]	; (800e050 <tcp_slowtmr+0x588>)
 800de22:	fba1 1303 	umull	r1, r3, r1, r3
 800de26:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800de28:	429a      	cmp	r2, r3
 800de2a:	d90a      	bls.n	800de42 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800de2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de30:	3301      	adds	r3, #1
 800de32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800de36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de3a:	3301      	adds	r3, #1
 800de3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800de40:	e027      	b.n	800de92 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800de42:	4b82      	ldr	r3, [pc, #520]	; (800e04c <tcp_slowtmr+0x584>)
 800de44:	681a      	ldr	r2, [r3, #0]
 800de46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de48:	6a1b      	ldr	r3, [r3, #32]
 800de4a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800de4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800de52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de54:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800de58:	4618      	mov	r0, r3
 800de5a:	4b7e      	ldr	r3, [pc, #504]	; (800e054 <tcp_slowtmr+0x58c>)
 800de5c:	fb00 f303 	mul.w	r3, r0, r3
 800de60:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800de62:	497b      	ldr	r1, [pc, #492]	; (800e050 <tcp_slowtmr+0x588>)
 800de64:	fba1 1303 	umull	r1, r3, r1, r3
 800de68:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d911      	bls.n	800de92 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800de6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de70:	f005 f80c 	bl	8012e8c <tcp_keepalive>
 800de74:	4603      	mov	r3, r0
 800de76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800de7a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d107      	bne.n	800de92 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800de82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de84:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800de88:	3301      	adds	r3, #1
 800de8a:	b2da      	uxtb	r2, r3
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800de92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de96:	2b00      	cmp	r3, #0
 800de98:	d011      	beq.n	800debe <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800de9a:	4b6c      	ldr	r3, [pc, #432]	; (800e04c <tcp_slowtmr+0x584>)
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea0:	6a1b      	ldr	r3, [r3, #32]
 800dea2:	1ad2      	subs	r2, r2, r3
 800dea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800deaa:	4619      	mov	r1, r3
 800deac:	460b      	mov	r3, r1
 800deae:	005b      	lsls	r3, r3, #1
 800deb0:	440b      	add	r3, r1
 800deb2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d302      	bcc.n	800debe <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800deb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800deba:	f000 fec7 	bl	800ec4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec0:	7d1b      	ldrb	r3, [r3, #20]
 800dec2:	2b03      	cmp	r3, #3
 800dec4:	d10b      	bne.n	800dede <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dec6:	4b61      	ldr	r3, [pc, #388]	; (800e04c <tcp_slowtmr+0x584>)
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800decc:	6a1b      	ldr	r3, [r3, #32]
 800dece:	1ad3      	subs	r3, r2, r3
 800ded0:	2b28      	cmp	r3, #40	; 0x28
 800ded2:	d904      	bls.n	800dede <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ded4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ded8:	3301      	adds	r3, #1
 800deda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800dede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee0:	7d1b      	ldrb	r3, [r3, #20]
 800dee2:	2b09      	cmp	r3, #9
 800dee4:	d10b      	bne.n	800defe <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dee6:	4b59      	ldr	r3, [pc, #356]	; (800e04c <tcp_slowtmr+0x584>)
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deec:	6a1b      	ldr	r3, [r3, #32]
 800deee:	1ad3      	subs	r3, r2, r3
 800def0:	2bf0      	cmp	r3, #240	; 0xf0
 800def2:	d904      	bls.n	800defe <tcp_slowtmr+0x436>
        ++pcb_remove;
 800def4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800def8:	3301      	adds	r3, #1
 800defa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800defe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df02:	2b00      	cmp	r3, #0
 800df04:	d060      	beq.n	800dfc8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800df06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df0c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800df0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df10:	f000 fce8 	bl	800e8e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800df14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df16:	2b00      	cmp	r3, #0
 800df18:	d010      	beq.n	800df3c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800df1a:	4b4f      	ldr	r3, [pc, #316]	; (800e058 <tcp_slowtmr+0x590>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df20:	429a      	cmp	r2, r3
 800df22:	d106      	bne.n	800df32 <tcp_slowtmr+0x46a>
 800df24:	4b4d      	ldr	r3, [pc, #308]	; (800e05c <tcp_slowtmr+0x594>)
 800df26:	f240 526d 	movw	r2, #1389	; 0x56d
 800df2a:	494d      	ldr	r1, [pc, #308]	; (800e060 <tcp_slowtmr+0x598>)
 800df2c:	484d      	ldr	r0, [pc, #308]	; (800e064 <tcp_slowtmr+0x59c>)
 800df2e:	f00a fb47 	bl	80185c0 <iprintf>
        prev->next = pcb->next;
 800df32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df34:	68da      	ldr	r2, [r3, #12]
 800df36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df38:	60da      	str	r2, [r3, #12]
 800df3a:	e00f      	b.n	800df5c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800df3c:	4b46      	ldr	r3, [pc, #280]	; (800e058 <tcp_slowtmr+0x590>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df42:	429a      	cmp	r2, r3
 800df44:	d006      	beq.n	800df54 <tcp_slowtmr+0x48c>
 800df46:	4b45      	ldr	r3, [pc, #276]	; (800e05c <tcp_slowtmr+0x594>)
 800df48:	f240 5271 	movw	r2, #1393	; 0x571
 800df4c:	4946      	ldr	r1, [pc, #280]	; (800e068 <tcp_slowtmr+0x5a0>)
 800df4e:	4845      	ldr	r0, [pc, #276]	; (800e064 <tcp_slowtmr+0x59c>)
 800df50:	f00a fb36 	bl	80185c0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800df54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	4a3f      	ldr	r2, [pc, #252]	; (800e058 <tcp_slowtmr+0x590>)
 800df5a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800df5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df60:	2b00      	cmp	r3, #0
 800df62:	d013      	beq.n	800df8c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800df64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df66:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800df68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800df6c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800df6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df70:	3304      	adds	r3, #4
 800df72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df74:	8ad2      	ldrh	r2, [r2, #22]
 800df76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df78:	8b09      	ldrh	r1, [r1, #24]
 800df7a:	9102      	str	r1, [sp, #8]
 800df7c:	9201      	str	r2, [sp, #4]
 800df7e:	9300      	str	r3, [sp, #0]
 800df80:	462b      	mov	r3, r5
 800df82:	4622      	mov	r2, r4
 800df84:	4601      	mov	r1, r0
 800df86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df88:	f004 fecc 	bl	8012d24 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800df8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8e:	691b      	ldr	r3, [r3, #16]
 800df90:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800df92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df94:	7d1b      	ldrb	r3, [r3, #20]
 800df96:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800df98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800df9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dfa2:	6838      	ldr	r0, [r7, #0]
 800dfa4:	f7fe ffdc 	bl	800cf60 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800dfa8:	4b30      	ldr	r3, [pc, #192]	; (800e06c <tcp_slowtmr+0x5a4>)
 800dfaa:	2200      	movs	r2, #0
 800dfac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d004      	beq.n	800dfbe <tcp_slowtmr+0x4f6>
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f06f 010c 	mvn.w	r1, #12
 800dfba:	68b8      	ldr	r0, [r7, #8]
 800dfbc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800dfbe:	4b2b      	ldr	r3, [pc, #172]	; (800e06c <tcp_slowtmr+0x5a4>)
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d037      	beq.n	800e036 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800dfc6:	e590      	b.n	800daea <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800dfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800dfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd4:	7f1b      	ldrb	r3, [r3, #28]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfdc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800dfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe0:	7f1a      	ldrb	r2, [r3, #28]
 800dfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe4:	7f5b      	ldrb	r3, [r3, #29]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d325      	bcc.n	800e036 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800dfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfec:	2200      	movs	r2, #0
 800dfee:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800dff0:	4b1e      	ldr	r3, [pc, #120]	; (800e06c <tcp_slowtmr+0x5a4>)
 800dff2:	2200      	movs	r2, #0
 800dff4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800dff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00b      	beq.n	800e018 <tcp_slowtmr+0x550>
 800e000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e008:	6912      	ldr	r2, [r2, #16]
 800e00a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e00c:	4610      	mov	r0, r2
 800e00e:	4798      	blx	r3
 800e010:	4603      	mov	r3, r0
 800e012:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e016:	e002      	b.n	800e01e <tcp_slowtmr+0x556>
 800e018:	2300      	movs	r3, #0
 800e01a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e01e:	4b13      	ldr	r3, [pc, #76]	; (800e06c <tcp_slowtmr+0x5a4>)
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d000      	beq.n	800e028 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e026:	e560      	b.n	800daea <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e028:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d102      	bne.n	800e036 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e032:	f004 f8c3 	bl	80121bc <tcp_output>
  while (pcb != NULL) {
 800e036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f47f ad5c 	bne.w	800daf6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e03e:	2300      	movs	r3, #0
 800e040:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e042:	4b0b      	ldr	r3, [pc, #44]	; (800e070 <tcp_slowtmr+0x5a8>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e048:	e067      	b.n	800e11a <tcp_slowtmr+0x652>
 800e04a:	bf00      	nop
 800e04c:	20011560 	.word	0x20011560
 800e050:	10624dd3 	.word	0x10624dd3
 800e054:	000124f8 	.word	0x000124f8
 800e058:	2001156c 	.word	0x2001156c
 800e05c:	0801b350 	.word	0x0801b350
 800e060:	0801b788 	.word	0x0801b788
 800e064:	0801b394 	.word	0x0801b394
 800e068:	0801b7b4 	.word	0x0801b7b4
 800e06c:	20011574 	.word	0x20011574
 800e070:	20011570 	.word	0x20011570
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	7d1b      	ldrb	r3, [r3, #20]
 800e078:	2b0a      	cmp	r3, #10
 800e07a:	d006      	beq.n	800e08a <tcp_slowtmr+0x5c2>
 800e07c:	4b2b      	ldr	r3, [pc, #172]	; (800e12c <tcp_slowtmr+0x664>)
 800e07e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e082:	492b      	ldr	r1, [pc, #172]	; (800e130 <tcp_slowtmr+0x668>)
 800e084:	482b      	ldr	r0, [pc, #172]	; (800e134 <tcp_slowtmr+0x66c>)
 800e086:	f00a fa9b 	bl	80185c0 <iprintf>
    pcb_remove = 0;
 800e08a:	2300      	movs	r3, #0
 800e08c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e090:	4b29      	ldr	r3, [pc, #164]	; (800e138 <tcp_slowtmr+0x670>)
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e096:	6a1b      	ldr	r3, [r3, #32]
 800e098:	1ad3      	subs	r3, r2, r3
 800e09a:	2bf0      	cmp	r3, #240	; 0xf0
 800e09c:	d904      	bls.n	800e0a8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e09e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e0a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d02f      	beq.n	800e110 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e0b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0b2:	f000 fc17 	bl	800e8e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d010      	beq.n	800e0de <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e0bc:	4b1f      	ldr	r3, [pc, #124]	; (800e13c <tcp_slowtmr+0x674>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d106      	bne.n	800e0d4 <tcp_slowtmr+0x60c>
 800e0c6:	4b19      	ldr	r3, [pc, #100]	; (800e12c <tcp_slowtmr+0x664>)
 800e0c8:	f240 52af 	movw	r2, #1455	; 0x5af
 800e0cc:	491c      	ldr	r1, [pc, #112]	; (800e140 <tcp_slowtmr+0x678>)
 800e0ce:	4819      	ldr	r0, [pc, #100]	; (800e134 <tcp_slowtmr+0x66c>)
 800e0d0:	f00a fa76 	bl	80185c0 <iprintf>
        prev->next = pcb->next;
 800e0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d6:	68da      	ldr	r2, [r3, #12]
 800e0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0da:	60da      	str	r2, [r3, #12]
 800e0dc:	e00f      	b.n	800e0fe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e0de:	4b17      	ldr	r3, [pc, #92]	; (800e13c <tcp_slowtmr+0x674>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d006      	beq.n	800e0f6 <tcp_slowtmr+0x62e>
 800e0e8:	4b10      	ldr	r3, [pc, #64]	; (800e12c <tcp_slowtmr+0x664>)
 800e0ea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e0ee:	4915      	ldr	r1, [pc, #84]	; (800e144 <tcp_slowtmr+0x67c>)
 800e0f0:	4810      	ldr	r0, [pc, #64]	; (800e134 <tcp_slowtmr+0x66c>)
 800e0f2:	f00a fa65 	bl	80185c0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f8:	68db      	ldr	r3, [r3, #12]
 800e0fa:	4a10      	ldr	r2, [pc, #64]	; (800e13c <tcp_slowtmr+0x674>)
 800e0fc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e100:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e108:	69f8      	ldr	r0, [r7, #28]
 800e10a:	f7fe ff29 	bl	800cf60 <tcp_free>
 800e10e:	e004      	b.n	800e11a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e112:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d1a9      	bne.n	800e074 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e120:	bf00      	nop
 800e122:	bf00      	nop
 800e124:	3730      	adds	r7, #48	; 0x30
 800e126:	46bd      	mov	sp, r7
 800e128:	bdb0      	pop	{r4, r5, r7, pc}
 800e12a:	bf00      	nop
 800e12c:	0801b350 	.word	0x0801b350
 800e130:	0801b7e0 	.word	0x0801b7e0
 800e134:	0801b394 	.word	0x0801b394
 800e138:	20011560 	.word	0x20011560
 800e13c:	20011570 	.word	0x20011570
 800e140:	0801b810 	.word	0x0801b810
 800e144:	0801b838 	.word	0x0801b838

0800e148 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e14e:	4b2d      	ldr	r3, [pc, #180]	; (800e204 <tcp_fasttmr+0xbc>)
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	3301      	adds	r3, #1
 800e154:	b2da      	uxtb	r2, r3
 800e156:	4b2b      	ldr	r3, [pc, #172]	; (800e204 <tcp_fasttmr+0xbc>)
 800e158:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e15a:	4b2b      	ldr	r3, [pc, #172]	; (800e208 <tcp_fasttmr+0xc0>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e160:	e048      	b.n	800e1f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	7f9a      	ldrb	r2, [r3, #30]
 800e166:	4b27      	ldr	r3, [pc, #156]	; (800e204 <tcp_fasttmr+0xbc>)
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d03f      	beq.n	800e1ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e16e:	4b25      	ldr	r3, [pc, #148]	; (800e204 <tcp_fasttmr+0xbc>)
 800e170:	781a      	ldrb	r2, [r3, #0]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	8b5b      	ldrh	r3, [r3, #26]
 800e17a:	f003 0301 	and.w	r3, r3, #1
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d010      	beq.n	800e1a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	8b5b      	ldrh	r3, [r3, #26]
 800e186:	f043 0302 	orr.w	r3, r3, #2
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f004 f813 	bl	80121bc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	8b5b      	ldrh	r3, [r3, #26]
 800e19a:	f023 0303 	bic.w	r3, r3, #3
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	8b5b      	ldrh	r3, [r3, #26]
 800e1a8:	f003 0308 	and.w	r3, r3, #8
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d009      	beq.n	800e1c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	8b5b      	ldrh	r3, [r3, #26]
 800e1b4:	f023 0308 	bic.w	r3, r3, #8
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff f862 	bl	800d288 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00a      	beq.n	800e1e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e1d2:	4b0e      	ldr	r3, [pc, #56]	; (800e20c <tcp_fasttmr+0xc4>)
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f000 f819 	bl	800e210 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e1de:	4b0b      	ldr	r3, [pc, #44]	; (800e20c <tcp_fasttmr+0xc4>)
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d000      	beq.n	800e1e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e1e6:	e7b8      	b.n	800e15a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	607b      	str	r3, [r7, #4]
 800e1ec:	e002      	b.n	800e1f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1b3      	bne.n	800e162 <tcp_fasttmr+0x1a>
    }
  }
}
 800e1fa:	bf00      	nop
 800e1fc:	bf00      	nop
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	20011576 	.word	0x20011576
 800e208:	2001156c 	.word	0x2001156c
 800e20c:	20011574 	.word	0x20011574

0800e210 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e210:	b590      	push	{r4, r7, lr}
 800e212:	b085      	sub	sp, #20
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d109      	bne.n	800e232 <tcp_process_refused_data+0x22>
 800e21e:	4b37      	ldr	r3, [pc, #220]	; (800e2fc <tcp_process_refused_data+0xec>)
 800e220:	f240 6209 	movw	r2, #1545	; 0x609
 800e224:	4936      	ldr	r1, [pc, #216]	; (800e300 <tcp_process_refused_data+0xf0>)
 800e226:	4837      	ldr	r0, [pc, #220]	; (800e304 <tcp_process_refused_data+0xf4>)
 800e228:	f00a f9ca 	bl	80185c0 <iprintf>
 800e22c:	f06f 030f 	mvn.w	r3, #15
 800e230:	e060      	b.n	800e2f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e236:	7b5b      	ldrb	r3, [r3, #13]
 800e238:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e23e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2200      	movs	r2, #0
 800e244:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00b      	beq.n	800e268 <tcp_process_refused_data+0x58>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6918      	ldr	r0, [r3, #16]
 800e25a:	2300      	movs	r3, #0
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	6879      	ldr	r1, [r7, #4]
 800e260:	47a0      	blx	r4
 800e262:	4603      	mov	r3, r0
 800e264:	73fb      	strb	r3, [r7, #15]
 800e266:	e007      	b.n	800e278 <tcp_process_refused_data+0x68>
 800e268:	2300      	movs	r3, #0
 800e26a:	68ba      	ldr	r2, [r7, #8]
 800e26c:	6879      	ldr	r1, [r7, #4]
 800e26e:	2000      	movs	r0, #0
 800e270:	f000 f8c2 	bl	800e3f8 <tcp_recv_null>
 800e274:	4603      	mov	r3, r0
 800e276:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d12a      	bne.n	800e2d6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e280:	7bbb      	ldrb	r3, [r7, #14]
 800e282:	f003 0320 	and.w	r3, r3, #32
 800e286:	2b00      	cmp	r3, #0
 800e288:	d033      	beq.n	800e2f2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e28e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e292:	d005      	beq.n	800e2a0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e298:	3301      	adds	r3, #1
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00b      	beq.n	800e2c2 <tcp_process_refused_data+0xb2>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6918      	ldr	r0, [r3, #16]
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	6879      	ldr	r1, [r7, #4]
 800e2ba:	47a0      	blx	r4
 800e2bc:	4603      	mov	r3, r0
 800e2be:	73fb      	strb	r3, [r7, #15]
 800e2c0:	e001      	b.n	800e2c6 <tcp_process_refused_data+0xb6>
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e2c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2ca:	f113 0f0d 	cmn.w	r3, #13
 800e2ce:	d110      	bne.n	800e2f2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e2d0:	f06f 030c 	mvn.w	r3, #12
 800e2d4:	e00e      	b.n	800e2f4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e2d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2da:	f113 0f0d 	cmn.w	r3, #13
 800e2de:	d102      	bne.n	800e2e6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e2e0:	f06f 030c 	mvn.w	r3, #12
 800e2e4:	e006      	b.n	800e2f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	68ba      	ldr	r2, [r7, #8]
 800e2ea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e2ec:	f06f 0304 	mvn.w	r3, #4
 800e2f0:	e000      	b.n	800e2f4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e2f2:	2300      	movs	r3, #0
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3714      	adds	r7, #20
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd90      	pop	{r4, r7, pc}
 800e2fc:	0801b350 	.word	0x0801b350
 800e300:	0801b860 	.word	0x0801b860
 800e304:	0801b394 	.word	0x0801b394

0800e308 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e310:	e007      	b.n	800e322 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 f80a 	bl	800e332 <tcp_seg_free>
    seg = next;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1f4      	bne.n	800e312 <tcp_segs_free+0xa>
  }
}
 800e328:	bf00      	nop
 800e32a:	bf00      	nop
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}

0800e332 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e332:	b580      	push	{r7, lr}
 800e334:	b082      	sub	sp, #8
 800e336:	af00      	add	r7, sp, #0
 800e338:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d00c      	beq.n	800e35a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d004      	beq.n	800e352 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7fe fb4b 	bl	800c9e8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e352:	6879      	ldr	r1, [r7, #4]
 800e354:	2003      	movs	r0, #3
 800e356:	f7fd fc97 	bl	800bc88 <memp_free>
  }
}
 800e35a:	bf00      	nop
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
	...

0800e364 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	460b      	mov	r3, r1
 800e36e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d107      	bne.n	800e386 <tcp_setprio+0x22>
 800e376:	4b07      	ldr	r3, [pc, #28]	; (800e394 <tcp_setprio+0x30>)
 800e378:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800e37c:	4906      	ldr	r1, [pc, #24]	; (800e398 <tcp_setprio+0x34>)
 800e37e:	4807      	ldr	r0, [pc, #28]	; (800e39c <tcp_setprio+0x38>)
 800e380:	f00a f91e 	bl	80185c0 <iprintf>
 800e384:	e002      	b.n	800e38c <tcp_setprio+0x28>

  pcb->prio = prio;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	78fa      	ldrb	r2, [r7, #3]
 800e38a:	755a      	strb	r2, [r3, #21]
}
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	0801b350 	.word	0x0801b350
 800e398:	0801b888 	.word	0x0801b888
 800e39c:	0801b394 	.word	0x0801b394

0800e3a0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d106      	bne.n	800e3bc <tcp_seg_copy+0x1c>
 800e3ae:	4b0f      	ldr	r3, [pc, #60]	; (800e3ec <tcp_seg_copy+0x4c>)
 800e3b0:	f240 6282 	movw	r2, #1666	; 0x682
 800e3b4:	490e      	ldr	r1, [pc, #56]	; (800e3f0 <tcp_seg_copy+0x50>)
 800e3b6:	480f      	ldr	r0, [pc, #60]	; (800e3f4 <tcp_seg_copy+0x54>)
 800e3b8:	f00a f902 	bl	80185c0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e3bc:	2003      	movs	r0, #3
 800e3be:	f7fd fbed 	bl	800bb9c <memp_malloc>
 800e3c2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d101      	bne.n	800e3ce <tcp_seg_copy+0x2e>
    return NULL;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	e00a      	b.n	800e3e4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e3ce:	2210      	movs	r2, #16
 800e3d0:	6879      	ldr	r1, [r7, #4]
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	f00a faf4 	bl	80189c0 <memcpy>
  pbuf_ref(cseg->p);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7fe fba9 	bl	800cb34 <pbuf_ref>
  return cseg;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	0801b350 	.word	0x0801b350
 800e3f0:	0801b8a4 	.word	0x0801b8a4
 800e3f4:	0801b394 	.word	0x0801b394

0800e3f8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
 800e404:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d109      	bne.n	800e420 <tcp_recv_null+0x28>
 800e40c:	4b12      	ldr	r3, [pc, #72]	; (800e458 <tcp_recv_null+0x60>)
 800e40e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e412:	4912      	ldr	r1, [pc, #72]	; (800e45c <tcp_recv_null+0x64>)
 800e414:	4812      	ldr	r0, [pc, #72]	; (800e460 <tcp_recv_null+0x68>)
 800e416:	f00a f8d3 	bl	80185c0 <iprintf>
 800e41a:	f06f 030f 	mvn.w	r3, #15
 800e41e:	e016      	b.n	800e44e <tcp_recv_null+0x56>

  if (p != NULL) {
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d009      	beq.n	800e43a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	891b      	ldrh	r3, [r3, #8]
 800e42a:	4619      	mov	r1, r3
 800e42c:	68b8      	ldr	r0, [r7, #8]
 800e42e:	f7ff fab5 	bl	800d99c <tcp_recved>
    pbuf_free(p);
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7fe fad8 	bl	800c9e8 <pbuf_free>
 800e438:	e008      	b.n	800e44c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e43a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d104      	bne.n	800e44c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e442:	68b8      	ldr	r0, [r7, #8]
 800e444:	f7fe ff8a 	bl	800d35c <tcp_close>
 800e448:	4603      	mov	r3, r0
 800e44a:	e000      	b.n	800e44e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	0801b350 	.word	0x0801b350
 800e45c:	0801b8c0 	.word	0x0801b8c0
 800e460:	0801b394 	.word	0x0801b394

0800e464 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b086      	sub	sp, #24
 800e468:	af00      	add	r7, sp, #0
 800e46a:	4603      	mov	r3, r0
 800e46c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e46e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e472:	2b00      	cmp	r3, #0
 800e474:	db01      	blt.n	800e47a <tcp_kill_prio+0x16>
 800e476:	79fb      	ldrb	r3, [r7, #7]
 800e478:	e000      	b.n	800e47c <tcp_kill_prio+0x18>
 800e47a:	237f      	movs	r3, #127	; 0x7f
 800e47c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e47e:	7afb      	ldrb	r3, [r7, #11]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d034      	beq.n	800e4ee <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e484:	7afb      	ldrb	r3, [r7, #11]
 800e486:	3b01      	subs	r3, #1
 800e488:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e48a:	2300      	movs	r3, #0
 800e48c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e48e:	2300      	movs	r3, #0
 800e490:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e492:	4b19      	ldr	r3, [pc, #100]	; (800e4f8 <tcp_kill_prio+0x94>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	617b      	str	r3, [r7, #20]
 800e498:	e01f      	b.n	800e4da <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	7d5b      	ldrb	r3, [r3, #21]
 800e49e:	7afa      	ldrb	r2, [r7, #11]
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d80c      	bhi.n	800e4be <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e4a8:	7afa      	ldrb	r2, [r7, #11]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d112      	bne.n	800e4d4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e4ae:	4b13      	ldr	r3, [pc, #76]	; (800e4fc <tcp_kill_prio+0x98>)
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	6a1b      	ldr	r3, [r3, #32]
 800e4b6:	1ad3      	subs	r3, r2, r3
 800e4b8:	68fa      	ldr	r2, [r7, #12]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d80a      	bhi.n	800e4d4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e4be:	4b0f      	ldr	r3, [pc, #60]	; (800e4fc <tcp_kill_prio+0x98>)
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	6a1b      	ldr	r3, [r3, #32]
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	7d5b      	ldrb	r3, [r3, #21]
 800e4d2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	617b      	str	r3, [r7, #20]
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d1dc      	bne.n	800e49a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d004      	beq.n	800e4f0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e4e6:	6938      	ldr	r0, [r7, #16]
 800e4e8:	f7ff f87e 	bl	800d5e8 <tcp_abort>
 800e4ec:	e000      	b.n	800e4f0 <tcp_kill_prio+0x8c>
    return;
 800e4ee:	bf00      	nop
  }
}
 800e4f0:	3718      	adds	r7, #24
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	2001156c 	.word	0x2001156c
 800e4fc:	20011560 	.word	0x20011560

0800e500 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b086      	sub	sp, #24
 800e504:	af00      	add	r7, sp, #0
 800e506:	4603      	mov	r3, r0
 800e508:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e50a:	79fb      	ldrb	r3, [r7, #7]
 800e50c:	2b08      	cmp	r3, #8
 800e50e:	d009      	beq.n	800e524 <tcp_kill_state+0x24>
 800e510:	79fb      	ldrb	r3, [r7, #7]
 800e512:	2b09      	cmp	r3, #9
 800e514:	d006      	beq.n	800e524 <tcp_kill_state+0x24>
 800e516:	4b1a      	ldr	r3, [pc, #104]	; (800e580 <tcp_kill_state+0x80>)
 800e518:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e51c:	4919      	ldr	r1, [pc, #100]	; (800e584 <tcp_kill_state+0x84>)
 800e51e:	481a      	ldr	r0, [pc, #104]	; (800e588 <tcp_kill_state+0x88>)
 800e520:	f00a f84e 	bl	80185c0 <iprintf>

  inactivity = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e528:	2300      	movs	r3, #0
 800e52a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e52c:	4b17      	ldr	r3, [pc, #92]	; (800e58c <tcp_kill_state+0x8c>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	617b      	str	r3, [r7, #20]
 800e532:	e017      	b.n	800e564 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	7d1b      	ldrb	r3, [r3, #20]
 800e538:	79fa      	ldrb	r2, [r7, #7]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d10f      	bne.n	800e55e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e53e:	4b14      	ldr	r3, [pc, #80]	; (800e590 <tcp_kill_state+0x90>)
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	6a1b      	ldr	r3, [r3, #32]
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d807      	bhi.n	800e55e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e54e:	4b10      	ldr	r3, [pc, #64]	; (800e590 <tcp_kill_state+0x90>)
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	6a1b      	ldr	r3, [r3, #32]
 800e556:	1ad3      	subs	r3, r2, r3
 800e558:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	617b      	str	r3, [r7, #20]
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d1e4      	bne.n	800e534 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d003      	beq.n	800e578 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e570:	2100      	movs	r1, #0
 800e572:	6938      	ldr	r0, [r7, #16]
 800e574:	f7fe ff7a 	bl	800d46c <tcp_abandon>
  }
}
 800e578:	bf00      	nop
 800e57a:	3718      	adds	r7, #24
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	0801b350 	.word	0x0801b350
 800e584:	0801b8dc 	.word	0x0801b8dc
 800e588:	0801b394 	.word	0x0801b394
 800e58c:	2001156c 	.word	0x2001156c
 800e590:	20011560 	.word	0x20011560

0800e594 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e59a:	2300      	movs	r3, #0
 800e59c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5a2:	4b12      	ldr	r3, [pc, #72]	; (800e5ec <tcp_kill_timewait+0x58>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	60fb      	str	r3, [r7, #12]
 800e5a8:	e012      	b.n	800e5d0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e5aa:	4b11      	ldr	r3, [pc, #68]	; (800e5f0 <tcp_kill_timewait+0x5c>)
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6a1b      	ldr	r3, [r3, #32]
 800e5b2:	1ad3      	subs	r3, r2, r3
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d807      	bhi.n	800e5ca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e5ba:	4b0d      	ldr	r3, [pc, #52]	; (800e5f0 <tcp_kill_timewait+0x5c>)
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6a1b      	ldr	r3, [r3, #32]
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	60fb      	str	r3, [r7, #12]
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d1e9      	bne.n	800e5aa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d002      	beq.n	800e5e2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e5dc:	68b8      	ldr	r0, [r7, #8]
 800e5de:	f7ff f803 	bl	800d5e8 <tcp_abort>
  }
}
 800e5e2:	bf00      	nop
 800e5e4:	3710      	adds	r7, #16
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	20011570 	.word	0x20011570
 800e5f0:	20011560 	.word	0x20011560

0800e5f4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e5fa:	4b10      	ldr	r3, [pc, #64]	; (800e63c <tcp_handle_closepend+0x48>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e600:	e014      	b.n	800e62c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	8b5b      	ldrh	r3, [r3, #26]
 800e60c:	f003 0308 	and.w	r3, r3, #8
 800e610:	2b00      	cmp	r3, #0
 800e612:	d009      	beq.n	800e628 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	8b5b      	ldrh	r3, [r3, #26]
 800e618:	f023 0308 	bic.w	r3, r3, #8
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f7fe fe30 	bl	800d288 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1e7      	bne.n	800e602 <tcp_handle_closepend+0xe>
  }
}
 800e632:	bf00      	nop
 800e634:	bf00      	nop
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	2001156c 	.word	0x2001156c

0800e640 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	4603      	mov	r3, r0
 800e648:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e64a:	2001      	movs	r0, #1
 800e64c:	f7fd faa6 	bl	800bb9c <memp_malloc>
 800e650:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d126      	bne.n	800e6a6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e658:	f7ff ffcc 	bl	800e5f4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e65c:	f7ff ff9a 	bl	800e594 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e660:	2001      	movs	r0, #1
 800e662:	f7fd fa9b 	bl	800bb9c <memp_malloc>
 800e666:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d11b      	bne.n	800e6a6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e66e:	2009      	movs	r0, #9
 800e670:	f7ff ff46 	bl	800e500 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e674:	2001      	movs	r0, #1
 800e676:	f7fd fa91 	bl	800bb9c <memp_malloc>
 800e67a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d111      	bne.n	800e6a6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e682:	2008      	movs	r0, #8
 800e684:	f7ff ff3c 	bl	800e500 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e688:	2001      	movs	r0, #1
 800e68a:	f7fd fa87 	bl	800bb9c <memp_malloc>
 800e68e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d107      	bne.n	800e6a6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e696:	79fb      	ldrb	r3, [r7, #7]
 800e698:	4618      	mov	r0, r3
 800e69a:	f7ff fee3 	bl	800e464 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e69e:	2001      	movs	r0, #1
 800e6a0:	f7fd fa7c 	bl	800bb9c <memp_malloc>
 800e6a4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d03f      	beq.n	800e72c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e6ac:	229c      	movs	r2, #156	; 0x9c
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	f00a f824 	bl	80186fe <memset>
    pcb->prio = prio;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	79fa      	ldrb	r2, [r7, #7]
 800e6ba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e6c2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e6cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	22ff      	movs	r2, #255	; 0xff
 800e6da:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e6e2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2206      	movs	r2, #6
 800e6e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2206      	movs	r2, #6
 800e6f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6f8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e702:	4b0d      	ldr	r3, [pc, #52]	; (800e738 <tcp_alloc+0xf8>)
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e70a:	4b0c      	ldr	r3, [pc, #48]	; (800e73c <tcp_alloc+0xfc>)
 800e70c:	781a      	ldrb	r2, [r3, #0]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e718:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	4a08      	ldr	r2, [pc, #32]	; (800e740 <tcp_alloc+0x100>)
 800e720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	4a07      	ldr	r2, [pc, #28]	; (800e744 <tcp_alloc+0x104>)
 800e728:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e72c:	68fb      	ldr	r3, [r7, #12]
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3710      	adds	r7, #16
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	20011560 	.word	0x20011560
 800e73c:	20011576 	.word	0x20011576
 800e740:	0800e3f9 	.word	0x0800e3f9
 800e744:	006ddd00 	.word	0x006ddd00

0800e748 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b084      	sub	sp, #16
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	4603      	mov	r3, r0
 800e750:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e752:	2040      	movs	r0, #64	; 0x40
 800e754:	f7ff ff74 	bl	800e640 <tcp_alloc>
 800e758:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e75a:	68fb      	ldr	r3, [r7, #12]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3710      	adds	r7, #16
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d002      	beq.n	800e77a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	683a      	ldr	r2, [r7, #0]
 800e778:	611a      	str	r2, [r3, #16]
  }
}
 800e77a:	bf00      	nop
 800e77c:	370c      	adds	r7, #12
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
	...

0800e788 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00e      	beq.n	800e7b6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	7d1b      	ldrb	r3, [r3, #20]
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d106      	bne.n	800e7ae <tcp_recv+0x26>
 800e7a0:	4b07      	ldr	r3, [pc, #28]	; (800e7c0 <tcp_recv+0x38>)
 800e7a2:	f240 72df 	movw	r2, #2015	; 0x7df
 800e7a6:	4907      	ldr	r1, [pc, #28]	; (800e7c4 <tcp_recv+0x3c>)
 800e7a8:	4807      	ldr	r0, [pc, #28]	; (800e7c8 <tcp_recv+0x40>)
 800e7aa:	f009 ff09 	bl	80185c0 <iprintf>
    pcb->recv = recv;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	683a      	ldr	r2, [r7, #0]
 800e7b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e7b6:	bf00      	nop
 800e7b8:	3708      	adds	r7, #8
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	0801b350 	.word	0x0801b350
 800e7c4:	0801b8ec 	.word	0x0801b8ec
 800e7c8:	0801b394 	.word	0x0801b394

0800e7cc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d00e      	beq.n	800e7fa <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	7d1b      	ldrb	r3, [r3, #20]
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d106      	bne.n	800e7f2 <tcp_sent+0x26>
 800e7e4:	4b07      	ldr	r3, [pc, #28]	; (800e804 <tcp_sent+0x38>)
 800e7e6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e7ea:	4907      	ldr	r1, [pc, #28]	; (800e808 <tcp_sent+0x3c>)
 800e7ec:	4807      	ldr	r0, [pc, #28]	; (800e80c <tcp_sent+0x40>)
 800e7ee:	f009 fee7 	bl	80185c0 <iprintf>
    pcb->sent = sent;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	683a      	ldr	r2, [r7, #0]
 800e7f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e7fa:	bf00      	nop
 800e7fc:	3708      	adds	r7, #8
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	0801b350 	.word	0x0801b350
 800e808:	0801b914 	.word	0x0801b914
 800e80c:	0801b394 	.word	0x0801b394

0800e810 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00e      	beq.n	800e83e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	7d1b      	ldrb	r3, [r3, #20]
 800e824:	2b01      	cmp	r3, #1
 800e826:	d106      	bne.n	800e836 <tcp_err+0x26>
 800e828:	4b07      	ldr	r3, [pc, #28]	; (800e848 <tcp_err+0x38>)
 800e82a:	f640 020d 	movw	r2, #2061	; 0x80d
 800e82e:	4907      	ldr	r1, [pc, #28]	; (800e84c <tcp_err+0x3c>)
 800e830:	4807      	ldr	r0, [pc, #28]	; (800e850 <tcp_err+0x40>)
 800e832:	f009 fec5 	bl	80185c0 <iprintf>
    pcb->errf = err;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	683a      	ldr	r2, [r7, #0]
 800e83a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e83e:	bf00      	nop
 800e840:	3708      	adds	r7, #8
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop
 800e848:	0801b350 	.word	0x0801b350
 800e84c:	0801b93c 	.word	0x0801b93c
 800e850:	0801b394 	.word	0x0801b394

0800e854 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e854:	b480      	push	{r7}
 800e856:	b085      	sub	sp, #20
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d008      	beq.n	800e876 <tcp_accept+0x22>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	7d1b      	ldrb	r3, [r3, #20]
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d104      	bne.n	800e876 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	683a      	ldr	r2, [r7, #0]
 800e874:	619a      	str	r2, [r3, #24]
  }
}
 800e876:	bf00      	nop
 800e878:	3714      	adds	r7, #20
 800e87a:	46bd      	mov	sp, r7
 800e87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e880:	4770      	bx	lr
	...

0800e884 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	4613      	mov	r3, r2
 800e890:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d107      	bne.n	800e8a8 <tcp_poll+0x24>
 800e898:	4b0e      	ldr	r3, [pc, #56]	; (800e8d4 <tcp_poll+0x50>)
 800e89a:	f640 023d 	movw	r2, #2109	; 0x83d
 800e89e:	490e      	ldr	r1, [pc, #56]	; (800e8d8 <tcp_poll+0x54>)
 800e8a0:	480e      	ldr	r0, [pc, #56]	; (800e8dc <tcp_poll+0x58>)
 800e8a2:	f009 fe8d 	bl	80185c0 <iprintf>
 800e8a6:	e011      	b.n	800e8cc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	7d1b      	ldrb	r3, [r3, #20]
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d106      	bne.n	800e8be <tcp_poll+0x3a>
 800e8b0:	4b08      	ldr	r3, [pc, #32]	; (800e8d4 <tcp_poll+0x50>)
 800e8b2:	f640 023e 	movw	r2, #2110	; 0x83e
 800e8b6:	490a      	ldr	r1, [pc, #40]	; (800e8e0 <tcp_poll+0x5c>)
 800e8b8:	4808      	ldr	r0, [pc, #32]	; (800e8dc <tcp_poll+0x58>)
 800e8ba:	f009 fe81 	bl	80185c0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	68ba      	ldr	r2, [r7, #8]
 800e8c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	79fa      	ldrb	r2, [r7, #7]
 800e8ca:	775a      	strb	r2, [r3, #29]
}
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	0801b350 	.word	0x0801b350
 800e8d8:	0801b964 	.word	0x0801b964
 800e8dc:	0801b394 	.word	0x0801b394
 800e8e0:	0801b97c 	.word	0x0801b97c

0800e8e4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d107      	bne.n	800e902 <tcp_pcb_purge+0x1e>
 800e8f2:	4b21      	ldr	r3, [pc, #132]	; (800e978 <tcp_pcb_purge+0x94>)
 800e8f4:	f640 0251 	movw	r2, #2129	; 0x851
 800e8f8:	4920      	ldr	r1, [pc, #128]	; (800e97c <tcp_pcb_purge+0x98>)
 800e8fa:	4821      	ldr	r0, [pc, #132]	; (800e980 <tcp_pcb_purge+0x9c>)
 800e8fc:	f009 fe60 	bl	80185c0 <iprintf>
 800e900:	e037      	b.n	800e972 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	7d1b      	ldrb	r3, [r3, #20]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d033      	beq.n	800e972 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e90e:	2b0a      	cmp	r3, #10
 800e910:	d02f      	beq.n	800e972 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e916:	2b01      	cmp	r3, #1
 800e918:	d02b      	beq.n	800e972 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d007      	beq.n	800e932 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e926:	4618      	mov	r0, r3
 800e928:	f7fe f85e 	bl	800c9e8 <pbuf_free>
      pcb->refused_data = NULL;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e936:	2b00      	cmp	r3, #0
 800e938:	d002      	beq.n	800e940 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 f986 	bl	800ec4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e946:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7ff fcdb 	bl	800e308 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e956:	4618      	mov	r0, r3
 800e958:	f7ff fcd6 	bl	800e308 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2200      	movs	r2, #0
 800e960:	66da      	str	r2, [r3, #108]	; 0x6c
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2200      	movs	r2, #0
 800e96e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e972:	3708      	adds	r7, #8
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	0801b350 	.word	0x0801b350
 800e97c:	0801b99c 	.word	0x0801b99c
 800e980:	0801b394 	.word	0x0801b394

0800e984 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d106      	bne.n	800e9a2 <tcp_pcb_remove+0x1e>
 800e994:	4b3e      	ldr	r3, [pc, #248]	; (800ea90 <tcp_pcb_remove+0x10c>)
 800e996:	f640 0283 	movw	r2, #2179	; 0x883
 800e99a:	493e      	ldr	r1, [pc, #248]	; (800ea94 <tcp_pcb_remove+0x110>)
 800e99c:	483e      	ldr	r0, [pc, #248]	; (800ea98 <tcp_pcb_remove+0x114>)
 800e99e:	f009 fe0f 	bl	80185c0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d106      	bne.n	800e9b6 <tcp_pcb_remove+0x32>
 800e9a8:	4b39      	ldr	r3, [pc, #228]	; (800ea90 <tcp_pcb_remove+0x10c>)
 800e9aa:	f640 0284 	movw	r2, #2180	; 0x884
 800e9ae:	493b      	ldr	r1, [pc, #236]	; (800ea9c <tcp_pcb_remove+0x118>)
 800e9b0:	4839      	ldr	r0, [pc, #228]	; (800ea98 <tcp_pcb_remove+0x114>)
 800e9b2:	f009 fe05 	bl	80185c0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	683a      	ldr	r2, [r7, #0]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d105      	bne.n	800e9cc <tcp_pcb_remove+0x48>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	68da      	ldr	r2, [r3, #12]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	601a      	str	r2, [r3, #0]
 800e9ca:	e013      	b.n	800e9f4 <tcp_pcb_remove+0x70>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	60fb      	str	r3, [r7, #12]
 800e9d2:	e00c      	b.n	800e9ee <tcp_pcb_remove+0x6a>
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	683a      	ldr	r2, [r7, #0]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d104      	bne.n	800e9e8 <tcp_pcb_remove+0x64>
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	68da      	ldr	r2, [r3, #12]
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	60da      	str	r2, [r3, #12]
 800e9e6:	e005      	b.n	800e9f4 <tcp_pcb_remove+0x70>
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	68db      	ldr	r3, [r3, #12]
 800e9ec:	60fb      	str	r3, [r7, #12]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d1ef      	bne.n	800e9d4 <tcp_pcb_remove+0x50>
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e9fa:	6838      	ldr	r0, [r7, #0]
 800e9fc:	f7ff ff72 	bl	800e8e4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	7d1b      	ldrb	r3, [r3, #20]
 800ea04:	2b0a      	cmp	r3, #10
 800ea06:	d013      	beq.n	800ea30 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d00f      	beq.n	800ea30 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	8b5b      	ldrh	r3, [r3, #26]
 800ea14:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d009      	beq.n	800ea30 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	8b5b      	ldrh	r3, [r3, #26]
 800ea20:	f043 0302 	orr.w	r3, r3, #2
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ea2a:	6838      	ldr	r0, [r7, #0]
 800ea2c:	f003 fbc6 	bl	80121bc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	7d1b      	ldrb	r3, [r3, #20]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d020      	beq.n	800ea7a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d006      	beq.n	800ea4e <tcp_pcb_remove+0xca>
 800ea40:	4b13      	ldr	r3, [pc, #76]	; (800ea90 <tcp_pcb_remove+0x10c>)
 800ea42:	f640 0293 	movw	r2, #2195	; 0x893
 800ea46:	4916      	ldr	r1, [pc, #88]	; (800eaa0 <tcp_pcb_remove+0x11c>)
 800ea48:	4813      	ldr	r0, [pc, #76]	; (800ea98 <tcp_pcb_remove+0x114>)
 800ea4a:	f009 fdb9 	bl	80185c0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d006      	beq.n	800ea64 <tcp_pcb_remove+0xe0>
 800ea56:	4b0e      	ldr	r3, [pc, #56]	; (800ea90 <tcp_pcb_remove+0x10c>)
 800ea58:	f640 0294 	movw	r2, #2196	; 0x894
 800ea5c:	4911      	ldr	r1, [pc, #68]	; (800eaa4 <tcp_pcb_remove+0x120>)
 800ea5e:	480e      	ldr	r0, [pc, #56]	; (800ea98 <tcp_pcb_remove+0x114>)
 800ea60:	f009 fdae 	bl	80185c0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d006      	beq.n	800ea7a <tcp_pcb_remove+0xf6>
 800ea6c:	4b08      	ldr	r3, [pc, #32]	; (800ea90 <tcp_pcb_remove+0x10c>)
 800ea6e:	f640 0296 	movw	r2, #2198	; 0x896
 800ea72:	490d      	ldr	r1, [pc, #52]	; (800eaa8 <tcp_pcb_remove+0x124>)
 800ea74:	4808      	ldr	r0, [pc, #32]	; (800ea98 <tcp_pcb_remove+0x114>)
 800ea76:	f009 fda3 	bl	80185c0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	2200      	movs	r2, #0
 800ea84:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ea86:	bf00      	nop
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	0801b350 	.word	0x0801b350
 800ea94:	0801b9b8 	.word	0x0801b9b8
 800ea98:	0801b394 	.word	0x0801b394
 800ea9c:	0801b9d4 	.word	0x0801b9d4
 800eaa0:	0801b9f4 	.word	0x0801b9f4
 800eaa4:	0801ba0c 	.word	0x0801ba0c
 800eaa8:	0801ba28 	.word	0x0801ba28

0800eaac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d106      	bne.n	800eac8 <tcp_next_iss+0x1c>
 800eaba:	4b0a      	ldr	r3, [pc, #40]	; (800eae4 <tcp_next_iss+0x38>)
 800eabc:	f640 02af 	movw	r2, #2223	; 0x8af
 800eac0:	4909      	ldr	r1, [pc, #36]	; (800eae8 <tcp_next_iss+0x3c>)
 800eac2:	480a      	ldr	r0, [pc, #40]	; (800eaec <tcp_next_iss+0x40>)
 800eac4:	f009 fd7c 	bl	80185c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800eac8:	4b09      	ldr	r3, [pc, #36]	; (800eaf0 <tcp_next_iss+0x44>)
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	4b09      	ldr	r3, [pc, #36]	; (800eaf4 <tcp_next_iss+0x48>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	4413      	add	r3, r2
 800ead2:	4a07      	ldr	r2, [pc, #28]	; (800eaf0 <tcp_next_iss+0x44>)
 800ead4:	6013      	str	r3, [r2, #0]
  return iss;
 800ead6:	4b06      	ldr	r3, [pc, #24]	; (800eaf0 <tcp_next_iss+0x44>)
 800ead8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3708      	adds	r7, #8
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	0801b350 	.word	0x0801b350
 800eae8:	0801ba40 	.word	0x0801ba40
 800eaec:	0801b394 	.word	0x0801b394
 800eaf0:	20000028 	.word	0x20000028
 800eaf4:	20011560 	.word	0x20011560

0800eaf8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	4603      	mov	r3, r0
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
 800eb04:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d106      	bne.n	800eb1a <tcp_eff_send_mss_netif+0x22>
 800eb0c:	4b14      	ldr	r3, [pc, #80]	; (800eb60 <tcp_eff_send_mss_netif+0x68>)
 800eb0e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800eb12:	4914      	ldr	r1, [pc, #80]	; (800eb64 <tcp_eff_send_mss_netif+0x6c>)
 800eb14:	4814      	ldr	r0, [pc, #80]	; (800eb68 <tcp_eff_send_mss_netif+0x70>)
 800eb16:	f009 fd53 	bl	80185c0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d101      	bne.n	800eb24 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800eb20:	89fb      	ldrh	r3, [r7, #14]
 800eb22:	e019      	b.n	800eb58 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb28:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800eb2a:	8afb      	ldrh	r3, [r7, #22]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d012      	beq.n	800eb56 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800eb30:	2328      	movs	r3, #40	; 0x28
 800eb32:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800eb34:	8afa      	ldrh	r2, [r7, #22]
 800eb36:	8abb      	ldrh	r3, [r7, #20]
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d904      	bls.n	800eb46 <tcp_eff_send_mss_netif+0x4e>
 800eb3c:	8afa      	ldrh	r2, [r7, #22]
 800eb3e:	8abb      	ldrh	r3, [r7, #20]
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	e000      	b.n	800eb48 <tcp_eff_send_mss_netif+0x50>
 800eb46:	2300      	movs	r3, #0
 800eb48:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800eb4a:	8a7a      	ldrh	r2, [r7, #18]
 800eb4c:	89fb      	ldrh	r3, [r7, #14]
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	bf28      	it	cs
 800eb52:	4613      	movcs	r3, r2
 800eb54:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800eb56:	89fb      	ldrh	r3, [r7, #14]
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3718      	adds	r7, #24
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	0801b350 	.word	0x0801b350
 800eb64:	0801ba5c 	.word	0x0801ba5c
 800eb68:	0801b394 	.word	0x0801b394

0800eb6c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d119      	bne.n	800ebb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800eb80:	4b10      	ldr	r3, [pc, #64]	; (800ebc4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800eb82:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800eb86:	4910      	ldr	r1, [pc, #64]	; (800ebc8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800eb88:	4810      	ldr	r0, [pc, #64]	; (800ebcc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800eb8a:	f009 fd19 	bl	80185c0 <iprintf>

  while (pcb != NULL) {
 800eb8e:	e011      	b.n	800ebb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681a      	ldr	r2, [r3, #0]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d108      	bne.n	800ebae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800eba2:	68f8      	ldr	r0, [r7, #12]
 800eba4:	f7fe fd20 	bl	800d5e8 <tcp_abort>
      pcb = next;
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	60fb      	str	r3, [r7, #12]
 800ebac:	e002      	b.n	800ebb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d1ea      	bne.n	800eb90 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ebba:	bf00      	nop
 800ebbc:	bf00      	nop
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	0801b350 	.word	0x0801b350
 800ebc8:	0801ba84 	.word	0x0801ba84
 800ebcc:	0801b394 	.word	0x0801b394

0800ebd0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d02a      	beq.n	800ec36 <tcp_netif_ip_addr_changed+0x66>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d026      	beq.n	800ec36 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ebe8:	4b15      	ldr	r3, [pc, #84]	; (800ec40 <tcp_netif_ip_addr_changed+0x70>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4619      	mov	r1, r3
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f7ff ffbc 	bl	800eb6c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ebf4:	4b13      	ldr	r3, [pc, #76]	; (800ec44 <tcp_netif_ip_addr_changed+0x74>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7ff ffb6 	bl	800eb6c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d017      	beq.n	800ec36 <tcp_netif_ip_addr_changed+0x66>
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d013      	beq.n	800ec36 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ec0e:	4b0e      	ldr	r3, [pc, #56]	; (800ec48 <tcp_netif_ip_addr_changed+0x78>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	60fb      	str	r3, [r7, #12]
 800ec14:	e00c      	b.n	800ec30 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d103      	bne.n	800ec2a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	60fb      	str	r3, [r7, #12]
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d1ef      	bne.n	800ec16 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ec36:	bf00      	nop
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	2001156c 	.word	0x2001156c
 800ec44:	20011564 	.word	0x20011564
 800ec48:	20011568 	.word	0x20011568

0800ec4c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d007      	beq.n	800ec6c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7ff fb51 	bl	800e308 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ec6c:	bf00      	nop
 800ec6e:	3708      	adds	r7, #8
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ec74:	b590      	push	{r4, r7, lr}
 800ec76:	b08d      	sub	sp, #52	; 0x34
 800ec78:	af04      	add	r7, sp, #16
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d105      	bne.n	800ec90 <tcp_input+0x1c>
 800ec84:	4b9b      	ldr	r3, [pc, #620]	; (800eef4 <tcp_input+0x280>)
 800ec86:	2283      	movs	r2, #131	; 0x83
 800ec88:	499b      	ldr	r1, [pc, #620]	; (800eef8 <tcp_input+0x284>)
 800ec8a:	489c      	ldr	r0, [pc, #624]	; (800eefc <tcp_input+0x288>)
 800ec8c:	f009 fc98 	bl	80185c0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	4a9a      	ldr	r2, [pc, #616]	; (800ef00 <tcp_input+0x28c>)
 800ec96:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	895b      	ldrh	r3, [r3, #10]
 800ec9c:	2b13      	cmp	r3, #19
 800ec9e:	f240 83d1 	bls.w	800f444 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800eca2:	4b98      	ldr	r3, [pc, #608]	; (800ef04 <tcp_input+0x290>)
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	4a97      	ldr	r2, [pc, #604]	; (800ef04 <tcp_input+0x290>)
 800eca8:	6812      	ldr	r2, [r2, #0]
 800ecaa:	4611      	mov	r1, r2
 800ecac:	4618      	mov	r0, r3
 800ecae:	f008 fa61 	bl	8017174 <ip4_addr_isbroadcast_u32>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f040 83c7 	bne.w	800f448 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ecba:	4b92      	ldr	r3, [pc, #584]	; (800ef04 <tcp_input+0x290>)
 800ecbc:	695b      	ldr	r3, [r3, #20]
 800ecbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ecc2:	2be0      	cmp	r3, #224	; 0xe0
 800ecc4:	f000 83c0 	beq.w	800f448 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ecc8:	4b8d      	ldr	r3, [pc, #564]	; (800ef00 <tcp_input+0x28c>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	899b      	ldrh	r3, [r3, #12]
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7fc fa55 	bl	800b180 <lwip_htons>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	0b1b      	lsrs	r3, r3, #12
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ece2:	7cbb      	ldrb	r3, [r7, #18]
 800ece4:	2b13      	cmp	r3, #19
 800ece6:	f240 83b1 	bls.w	800f44c <tcp_input+0x7d8>
 800ecea:	7cbb      	ldrb	r3, [r7, #18]
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	891b      	ldrh	r3, [r3, #8]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	f200 83aa 	bhi.w	800f44c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ecf8:	7cbb      	ldrb	r3, [r7, #18]
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	3b14      	subs	r3, #20
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	4b81      	ldr	r3, [pc, #516]	; (800ef08 <tcp_input+0x294>)
 800ed02:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ed04:	4b81      	ldr	r3, [pc, #516]	; (800ef0c <tcp_input+0x298>)
 800ed06:	2200      	movs	r2, #0
 800ed08:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	895a      	ldrh	r2, [r3, #10]
 800ed0e:	7cbb      	ldrb	r3, [r7, #18]
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d309      	bcc.n	800ed2a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ed16:	4b7c      	ldr	r3, [pc, #496]	; (800ef08 <tcp_input+0x294>)
 800ed18:	881a      	ldrh	r2, [r3, #0]
 800ed1a:	4b7d      	ldr	r3, [pc, #500]	; (800ef10 <tcp_input+0x29c>)
 800ed1c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ed1e:	7cbb      	ldrb	r3, [r7, #18]
 800ed20:	4619      	mov	r1, r3
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7fd fdda 	bl	800c8dc <pbuf_remove_header>
 800ed28:	e04e      	b.n	800edc8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d105      	bne.n	800ed3e <tcp_input+0xca>
 800ed32:	4b70      	ldr	r3, [pc, #448]	; (800eef4 <tcp_input+0x280>)
 800ed34:	22c2      	movs	r2, #194	; 0xc2
 800ed36:	4977      	ldr	r1, [pc, #476]	; (800ef14 <tcp_input+0x2a0>)
 800ed38:	4870      	ldr	r0, [pc, #448]	; (800eefc <tcp_input+0x288>)
 800ed3a:	f009 fc41 	bl	80185c0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ed3e:	2114      	movs	r1, #20
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7fd fdcb 	bl	800c8dc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	895a      	ldrh	r2, [r3, #10]
 800ed4a:	4b71      	ldr	r3, [pc, #452]	; (800ef10 <tcp_input+0x29c>)
 800ed4c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ed4e:	4b6e      	ldr	r3, [pc, #440]	; (800ef08 <tcp_input+0x294>)
 800ed50:	881a      	ldrh	r2, [r3, #0]
 800ed52:	4b6f      	ldr	r3, [pc, #444]	; (800ef10 <tcp_input+0x29c>)
 800ed54:	881b      	ldrh	r3, [r3, #0]
 800ed56:	1ad3      	subs	r3, r2, r3
 800ed58:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ed5a:	4b6d      	ldr	r3, [pc, #436]	; (800ef10 <tcp_input+0x29c>)
 800ed5c:	881b      	ldrh	r3, [r3, #0]
 800ed5e:	4619      	mov	r1, r3
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f7fd fdbb 	bl	800c8dc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	895b      	ldrh	r3, [r3, #10]
 800ed6c:	8a3a      	ldrh	r2, [r7, #16]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	f200 836e 	bhi.w	800f450 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	4a64      	ldr	r2, [pc, #400]	; (800ef0c <tcp_input+0x298>)
 800ed7c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	8a3a      	ldrh	r2, [r7, #16]
 800ed84:	4611      	mov	r1, r2
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7fd fda8 	bl	800c8dc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	891a      	ldrh	r2, [r3, #8]
 800ed90:	8a3b      	ldrh	r3, [r7, #16]
 800ed92:	1ad3      	subs	r3, r2, r3
 800ed94:	b29a      	uxth	r2, r3
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	895b      	ldrh	r3, [r3, #10]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d005      	beq.n	800edae <tcp_input+0x13a>
 800eda2:	4b54      	ldr	r3, [pc, #336]	; (800eef4 <tcp_input+0x280>)
 800eda4:	22df      	movs	r2, #223	; 0xdf
 800eda6:	495c      	ldr	r1, [pc, #368]	; (800ef18 <tcp_input+0x2a4>)
 800eda8:	4854      	ldr	r0, [pc, #336]	; (800eefc <tcp_input+0x288>)
 800edaa:	f009 fc09 	bl	80185c0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	891a      	ldrh	r2, [r3, #8]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	891b      	ldrh	r3, [r3, #8]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d005      	beq.n	800edc8 <tcp_input+0x154>
 800edbc:	4b4d      	ldr	r3, [pc, #308]	; (800eef4 <tcp_input+0x280>)
 800edbe:	22e0      	movs	r2, #224	; 0xe0
 800edc0:	4956      	ldr	r1, [pc, #344]	; (800ef1c <tcp_input+0x2a8>)
 800edc2:	484e      	ldr	r0, [pc, #312]	; (800eefc <tcp_input+0x288>)
 800edc4:	f009 fbfc 	bl	80185c0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800edc8:	4b4d      	ldr	r3, [pc, #308]	; (800ef00 <tcp_input+0x28c>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	881b      	ldrh	r3, [r3, #0]
 800edce:	b29b      	uxth	r3, r3
 800edd0:	4a4b      	ldr	r2, [pc, #300]	; (800ef00 <tcp_input+0x28c>)
 800edd2:	6814      	ldr	r4, [r2, #0]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7fc f9d3 	bl	800b180 <lwip_htons>
 800edda:	4603      	mov	r3, r0
 800eddc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800edde:	4b48      	ldr	r3, [pc, #288]	; (800ef00 <tcp_input+0x28c>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	885b      	ldrh	r3, [r3, #2]
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	4a46      	ldr	r2, [pc, #280]	; (800ef00 <tcp_input+0x28c>)
 800ede8:	6814      	ldr	r4, [r2, #0]
 800edea:	4618      	mov	r0, r3
 800edec:	f7fc f9c8 	bl	800b180 <lwip_htons>
 800edf0:	4603      	mov	r3, r0
 800edf2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800edf4:	4b42      	ldr	r3, [pc, #264]	; (800ef00 <tcp_input+0x28c>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	4a41      	ldr	r2, [pc, #260]	; (800ef00 <tcp_input+0x28c>)
 800edfc:	6814      	ldr	r4, [r2, #0]
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fc f9d3 	bl	800b1aa <lwip_htonl>
 800ee04:	4603      	mov	r3, r0
 800ee06:	6063      	str	r3, [r4, #4]
 800ee08:	6863      	ldr	r3, [r4, #4]
 800ee0a:	4a45      	ldr	r2, [pc, #276]	; (800ef20 <tcp_input+0x2ac>)
 800ee0c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ee0e:	4b3c      	ldr	r3, [pc, #240]	; (800ef00 <tcp_input+0x28c>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	689b      	ldr	r3, [r3, #8]
 800ee14:	4a3a      	ldr	r2, [pc, #232]	; (800ef00 <tcp_input+0x28c>)
 800ee16:	6814      	ldr	r4, [r2, #0]
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7fc f9c6 	bl	800b1aa <lwip_htonl>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	60a3      	str	r3, [r4, #8]
 800ee22:	68a3      	ldr	r3, [r4, #8]
 800ee24:	4a3f      	ldr	r2, [pc, #252]	; (800ef24 <tcp_input+0x2b0>)
 800ee26:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ee28:	4b35      	ldr	r3, [pc, #212]	; (800ef00 <tcp_input+0x28c>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	89db      	ldrh	r3, [r3, #14]
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	4a33      	ldr	r2, [pc, #204]	; (800ef00 <tcp_input+0x28c>)
 800ee32:	6814      	ldr	r4, [r2, #0]
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fc f9a3 	bl	800b180 <lwip_htons>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ee3e:	4b30      	ldr	r3, [pc, #192]	; (800ef00 <tcp_input+0x28c>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	899b      	ldrh	r3, [r3, #12]
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fc f99a 	bl	800b180 <lwip_htons>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee54:	b2da      	uxtb	r2, r3
 800ee56:	4b34      	ldr	r3, [pc, #208]	; (800ef28 <tcp_input+0x2b4>)
 800ee58:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	891a      	ldrh	r2, [r3, #8]
 800ee5e:	4b33      	ldr	r3, [pc, #204]	; (800ef2c <tcp_input+0x2b8>)
 800ee60:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ee62:	4b31      	ldr	r3, [pc, #196]	; (800ef28 <tcp_input+0x2b4>)
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	f003 0303 	and.w	r3, r3, #3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00c      	beq.n	800ee88 <tcp_input+0x214>
    tcplen++;
 800ee6e:	4b2f      	ldr	r3, [pc, #188]	; (800ef2c <tcp_input+0x2b8>)
 800ee70:	881b      	ldrh	r3, [r3, #0]
 800ee72:	3301      	adds	r3, #1
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	4b2d      	ldr	r3, [pc, #180]	; (800ef2c <tcp_input+0x2b8>)
 800ee78:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	891a      	ldrh	r2, [r3, #8]
 800ee7e:	4b2b      	ldr	r3, [pc, #172]	; (800ef2c <tcp_input+0x2b8>)
 800ee80:	881b      	ldrh	r3, [r3, #0]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	f200 82e6 	bhi.w	800f454 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee8c:	4b28      	ldr	r3, [pc, #160]	; (800ef30 <tcp_input+0x2bc>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	61fb      	str	r3, [r7, #28]
 800ee92:	e09d      	b.n	800efd0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	7d1b      	ldrb	r3, [r3, #20]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d105      	bne.n	800eea8 <tcp_input+0x234>
 800ee9c:	4b15      	ldr	r3, [pc, #84]	; (800eef4 <tcp_input+0x280>)
 800ee9e:	22fb      	movs	r2, #251	; 0xfb
 800eea0:	4924      	ldr	r1, [pc, #144]	; (800ef34 <tcp_input+0x2c0>)
 800eea2:	4816      	ldr	r0, [pc, #88]	; (800eefc <tcp_input+0x288>)
 800eea4:	f009 fb8c 	bl	80185c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	7d1b      	ldrb	r3, [r3, #20]
 800eeac:	2b0a      	cmp	r3, #10
 800eeae:	d105      	bne.n	800eebc <tcp_input+0x248>
 800eeb0:	4b10      	ldr	r3, [pc, #64]	; (800eef4 <tcp_input+0x280>)
 800eeb2:	22fc      	movs	r2, #252	; 0xfc
 800eeb4:	4920      	ldr	r1, [pc, #128]	; (800ef38 <tcp_input+0x2c4>)
 800eeb6:	4811      	ldr	r0, [pc, #68]	; (800eefc <tcp_input+0x288>)
 800eeb8:	f009 fb82 	bl	80185c0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800eebc:	69fb      	ldr	r3, [r7, #28]
 800eebe:	7d1b      	ldrb	r3, [r3, #20]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d105      	bne.n	800eed0 <tcp_input+0x25c>
 800eec4:	4b0b      	ldr	r3, [pc, #44]	; (800eef4 <tcp_input+0x280>)
 800eec6:	22fd      	movs	r2, #253	; 0xfd
 800eec8:	491c      	ldr	r1, [pc, #112]	; (800ef3c <tcp_input+0x2c8>)
 800eeca:	480c      	ldr	r0, [pc, #48]	; (800eefc <tcp_input+0x288>)
 800eecc:	f009 fb78 	bl	80185c0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eed0:	69fb      	ldr	r3, [r7, #28]
 800eed2:	7a1b      	ldrb	r3, [r3, #8]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d033      	beq.n	800ef40 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eed8:	69fb      	ldr	r3, [r7, #28]
 800eeda:	7a1a      	ldrb	r2, [r3, #8]
 800eedc:	4b09      	ldr	r3, [pc, #36]	; (800ef04 <tcp_input+0x290>)
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eee4:	3301      	adds	r3, #1
 800eee6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d029      	beq.n	800ef40 <tcp_input+0x2cc>
      prev = pcb;
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	61bb      	str	r3, [r7, #24]
      continue;
 800eef0:	e06b      	b.n	800efca <tcp_input+0x356>
 800eef2:	bf00      	nop
 800eef4:	0801bab8 	.word	0x0801bab8
 800eef8:	0801baec 	.word	0x0801baec
 800eefc:	0801bb04 	.word	0x0801bb04
 800ef00:	20011588 	.word	0x20011588
 800ef04:	2000ddec 	.word	0x2000ddec
 800ef08:	2001158c 	.word	0x2001158c
 800ef0c:	20011590 	.word	0x20011590
 800ef10:	2001158e 	.word	0x2001158e
 800ef14:	0801bb2c 	.word	0x0801bb2c
 800ef18:	0801bb3c 	.word	0x0801bb3c
 800ef1c:	0801bb48 	.word	0x0801bb48
 800ef20:	20011598 	.word	0x20011598
 800ef24:	2001159c 	.word	0x2001159c
 800ef28:	200115a4 	.word	0x200115a4
 800ef2c:	200115a2 	.word	0x200115a2
 800ef30:	2001156c 	.word	0x2001156c
 800ef34:	0801bb68 	.word	0x0801bb68
 800ef38:	0801bb90 	.word	0x0801bb90
 800ef3c:	0801bbbc 	.word	0x0801bbbc
    }

    if (pcb->remote_port == tcphdr->src &&
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	8b1a      	ldrh	r2, [r3, #24]
 800ef44:	4b72      	ldr	r3, [pc, #456]	; (800f110 <tcp_input+0x49c>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	881b      	ldrh	r3, [r3, #0]
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d13a      	bne.n	800efc6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ef50:	69fb      	ldr	r3, [r7, #28]
 800ef52:	8ada      	ldrh	r2, [r3, #22]
 800ef54:	4b6e      	ldr	r3, [pc, #440]	; (800f110 <tcp_input+0x49c>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	885b      	ldrh	r3, [r3, #2]
 800ef5a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d132      	bne.n	800efc6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	685a      	ldr	r2, [r3, #4]
 800ef64:	4b6b      	ldr	r3, [pc, #428]	; (800f114 <tcp_input+0x4a0>)
 800ef66:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d12c      	bne.n	800efc6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ef6c:	69fb      	ldr	r3, [r7, #28]
 800ef6e:	681a      	ldr	r2, [r3, #0]
 800ef70:	4b68      	ldr	r3, [pc, #416]	; (800f114 <tcp_input+0x4a0>)
 800ef72:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d126      	bne.n	800efc6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	69fa      	ldr	r2, [r7, #28]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d106      	bne.n	800ef90 <tcp_input+0x31c>
 800ef82:	4b65      	ldr	r3, [pc, #404]	; (800f118 <tcp_input+0x4a4>)
 800ef84:	f240 120d 	movw	r2, #269	; 0x10d
 800ef88:	4964      	ldr	r1, [pc, #400]	; (800f11c <tcp_input+0x4a8>)
 800ef8a:	4865      	ldr	r0, [pc, #404]	; (800f120 <tcp_input+0x4ac>)
 800ef8c:	f009 fb18 	bl	80185c0 <iprintf>
      if (prev != NULL) {
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d00a      	beq.n	800efac <tcp_input+0x338>
        prev->next = pcb->next;
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	68da      	ldr	r2, [r3, #12]
 800ef9a:	69bb      	ldr	r3, [r7, #24]
 800ef9c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ef9e:	4b61      	ldr	r3, [pc, #388]	; (800f124 <tcp_input+0x4b0>)
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	69fb      	ldr	r3, [r7, #28]
 800efa4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800efa6:	4a5f      	ldr	r2, [pc, #380]	; (800f124 <tcp_input+0x4b0>)
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	69fa      	ldr	r2, [r7, #28]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d111      	bne.n	800efda <tcp_input+0x366>
 800efb6:	4b58      	ldr	r3, [pc, #352]	; (800f118 <tcp_input+0x4a4>)
 800efb8:	f240 1215 	movw	r2, #277	; 0x115
 800efbc:	495a      	ldr	r1, [pc, #360]	; (800f128 <tcp_input+0x4b4>)
 800efbe:	4858      	ldr	r0, [pc, #352]	; (800f120 <tcp_input+0x4ac>)
 800efc0:	f009 fafe 	bl	80185c0 <iprintf>
      break;
 800efc4:	e009      	b.n	800efda <tcp_input+0x366>
    }
    prev = pcb;
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	68db      	ldr	r3, [r3, #12]
 800efce:	61fb      	str	r3, [r7, #28]
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	f47f af5e 	bne.w	800ee94 <tcp_input+0x220>
 800efd8:	e000      	b.n	800efdc <tcp_input+0x368>
      break;
 800efda:	bf00      	nop
  }

  if (pcb == NULL) {
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f040 80aa 	bne.w	800f138 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800efe4:	4b51      	ldr	r3, [pc, #324]	; (800f12c <tcp_input+0x4b8>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	61fb      	str	r3, [r7, #28]
 800efea:	e03f      	b.n	800f06c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800efec:	69fb      	ldr	r3, [r7, #28]
 800efee:	7d1b      	ldrb	r3, [r3, #20]
 800eff0:	2b0a      	cmp	r3, #10
 800eff2:	d006      	beq.n	800f002 <tcp_input+0x38e>
 800eff4:	4b48      	ldr	r3, [pc, #288]	; (800f118 <tcp_input+0x4a4>)
 800eff6:	f240 121f 	movw	r2, #287	; 0x11f
 800effa:	494d      	ldr	r1, [pc, #308]	; (800f130 <tcp_input+0x4bc>)
 800effc:	4848      	ldr	r0, [pc, #288]	; (800f120 <tcp_input+0x4ac>)
 800effe:	f009 fadf 	bl	80185c0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f002:	69fb      	ldr	r3, [r7, #28]
 800f004:	7a1b      	ldrb	r3, [r3, #8]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d009      	beq.n	800f01e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f00a:	69fb      	ldr	r3, [r7, #28]
 800f00c:	7a1a      	ldrb	r2, [r3, #8]
 800f00e:	4b41      	ldr	r3, [pc, #260]	; (800f114 <tcp_input+0x4a0>)
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f016:	3301      	adds	r3, #1
 800f018:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d122      	bne.n	800f064 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	8b1a      	ldrh	r2, [r3, #24]
 800f022:	4b3b      	ldr	r3, [pc, #236]	; (800f110 <tcp_input+0x49c>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	881b      	ldrh	r3, [r3, #0]
 800f028:	b29b      	uxth	r3, r3
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d11b      	bne.n	800f066 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f02e:	69fb      	ldr	r3, [r7, #28]
 800f030:	8ada      	ldrh	r2, [r3, #22]
 800f032:	4b37      	ldr	r3, [pc, #220]	; (800f110 <tcp_input+0x49c>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	885b      	ldrh	r3, [r3, #2]
 800f038:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d113      	bne.n	800f066 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	685a      	ldr	r2, [r3, #4]
 800f042:	4b34      	ldr	r3, [pc, #208]	; (800f114 <tcp_input+0x4a0>)
 800f044:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f046:	429a      	cmp	r2, r3
 800f048:	d10d      	bne.n	800f066 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f04a:	69fb      	ldr	r3, [r7, #28]
 800f04c:	681a      	ldr	r2, [r3, #0]
 800f04e:	4b31      	ldr	r3, [pc, #196]	; (800f114 <tcp_input+0x4a0>)
 800f050:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f052:	429a      	cmp	r2, r3
 800f054:	d107      	bne.n	800f066 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f056:	69f8      	ldr	r0, [r7, #28]
 800f058:	f000 fb56 	bl	800f708 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7fd fcc3 	bl	800c9e8 <pbuf_free>
        return;
 800f062:	e1fd      	b.n	800f460 <tcp_input+0x7ec>
        continue;
 800f064:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	61fb      	str	r3, [r7, #28]
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d1bc      	bne.n	800efec <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f072:	2300      	movs	r3, #0
 800f074:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f076:	4b2f      	ldr	r3, [pc, #188]	; (800f134 <tcp_input+0x4c0>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	617b      	str	r3, [r7, #20]
 800f07c:	e02a      	b.n	800f0d4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	7a1b      	ldrb	r3, [r3, #8]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d00c      	beq.n	800f0a0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	7a1a      	ldrb	r2, [r3, #8]
 800f08a:	4b22      	ldr	r3, [pc, #136]	; (800f114 <tcp_input+0x4a0>)
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f092:	3301      	adds	r3, #1
 800f094:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f096:	429a      	cmp	r2, r3
 800f098:	d002      	beq.n	800f0a0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	61bb      	str	r3, [r7, #24]
        continue;
 800f09e:	e016      	b.n	800f0ce <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	8ada      	ldrh	r2, [r3, #22]
 800f0a4:	4b1a      	ldr	r3, [pc, #104]	; (800f110 <tcp_input+0x49c>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	885b      	ldrh	r3, [r3, #2]
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d10c      	bne.n	800f0ca <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	4b17      	ldr	r3, [pc, #92]	; (800f114 <tcp_input+0x4a0>)
 800f0b6:	695b      	ldr	r3, [r3, #20]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d00f      	beq.n	800f0dc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00d      	beq.n	800f0de <tcp_input+0x46a>
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d009      	beq.n	800f0de <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	617b      	str	r3, [r7, #20]
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1d1      	bne.n	800f07e <tcp_input+0x40a>
 800f0da:	e000      	b.n	800f0de <tcp_input+0x46a>
            break;
 800f0dc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d029      	beq.n	800f138 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f0e4:	69bb      	ldr	r3, [r7, #24]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d00a      	beq.n	800f100 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	68da      	ldr	r2, [r3, #12]
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f0f2:	4b10      	ldr	r3, [pc, #64]	; (800f134 <tcp_input+0x4c0>)
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f0fa:	4a0e      	ldr	r2, [pc, #56]	; (800f134 <tcp_input+0x4c0>)
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f100:	6978      	ldr	r0, [r7, #20]
 800f102:	f000 fa03 	bl	800f50c <tcp_listen_input>
      }
      pbuf_free(p);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f7fd fc6e 	bl	800c9e8 <pbuf_free>
      return;
 800f10c:	e1a8      	b.n	800f460 <tcp_input+0x7ec>
 800f10e:	bf00      	nop
 800f110:	20011588 	.word	0x20011588
 800f114:	2000ddec 	.word	0x2000ddec
 800f118:	0801bab8 	.word	0x0801bab8
 800f11c:	0801bbe4 	.word	0x0801bbe4
 800f120:	0801bb04 	.word	0x0801bb04
 800f124:	2001156c 	.word	0x2001156c
 800f128:	0801bc10 	.word	0x0801bc10
 800f12c:	20011570 	.word	0x20011570
 800f130:	0801bc3c 	.word	0x0801bc3c
 800f134:	20011568 	.word	0x20011568
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f000 8158 	beq.w	800f3f0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f140:	4b95      	ldr	r3, [pc, #596]	; (800f398 <tcp_input+0x724>)
 800f142:	2200      	movs	r2, #0
 800f144:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	891a      	ldrh	r2, [r3, #8]
 800f14a:	4b93      	ldr	r3, [pc, #588]	; (800f398 <tcp_input+0x724>)
 800f14c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f14e:	4a92      	ldr	r2, [pc, #584]	; (800f398 <tcp_input+0x724>)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f154:	4b91      	ldr	r3, [pc, #580]	; (800f39c <tcp_input+0x728>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4a8f      	ldr	r2, [pc, #572]	; (800f398 <tcp_input+0x724>)
 800f15a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f15c:	4b90      	ldr	r3, [pc, #576]	; (800f3a0 <tcp_input+0x72c>)
 800f15e:	2200      	movs	r2, #0
 800f160:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f162:	4b90      	ldr	r3, [pc, #576]	; (800f3a4 <tcp_input+0x730>)
 800f164:	2200      	movs	r2, #0
 800f166:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f168:	4b8f      	ldr	r3, [pc, #572]	; (800f3a8 <tcp_input+0x734>)
 800f16a:	2200      	movs	r2, #0
 800f16c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f16e:	4b8f      	ldr	r3, [pc, #572]	; (800f3ac <tcp_input+0x738>)
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	f003 0308 	and.w	r3, r3, #8
 800f176:	2b00      	cmp	r3, #0
 800f178:	d006      	beq.n	800f188 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	7b5b      	ldrb	r3, [r3, #13]
 800f17e:	f043 0301 	orr.w	r3, r3, #1
 800f182:	b2da      	uxtb	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d017      	beq.n	800f1c0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f190:	69f8      	ldr	r0, [r7, #28]
 800f192:	f7ff f83d 	bl	800e210 <tcp_process_refused_data>
 800f196:	4603      	mov	r3, r0
 800f198:	f113 0f0d 	cmn.w	r3, #13
 800f19c:	d007      	beq.n	800f1ae <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d00c      	beq.n	800f1c0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f1a6:	4b82      	ldr	r3, [pc, #520]	; (800f3b0 <tcp_input+0x73c>)
 800f1a8:	881b      	ldrh	r3, [r3, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d008      	beq.n	800f1c0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	f040 80e3 	bne.w	800f37e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f1b8:	69f8      	ldr	r0, [r7, #28]
 800f1ba:	f003 fe05 	bl	8012dc8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f1be:	e0de      	b.n	800f37e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f1c0:	4a7c      	ldr	r2, [pc, #496]	; (800f3b4 <tcp_input+0x740>)
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f1c6:	69f8      	ldr	r0, [r7, #28]
 800f1c8:	f000 fb18 	bl	800f7fc <tcp_process>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f1d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f1d4:	f113 0f0d 	cmn.w	r3, #13
 800f1d8:	f000 80d3 	beq.w	800f382 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f1dc:	4b71      	ldr	r3, [pc, #452]	; (800f3a4 <tcp_input+0x730>)
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	f003 0308 	and.w	r3, r3, #8
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d015      	beq.n	800f214 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d008      	beq.n	800f204 <tcp_input+0x590>
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1f8:	69fa      	ldr	r2, [r7, #28]
 800f1fa:	6912      	ldr	r2, [r2, #16]
 800f1fc:	f06f 010d 	mvn.w	r1, #13
 800f200:	4610      	mov	r0, r2
 800f202:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f204:	69f9      	ldr	r1, [r7, #28]
 800f206:	486c      	ldr	r0, [pc, #432]	; (800f3b8 <tcp_input+0x744>)
 800f208:	f7ff fbbc 	bl	800e984 <tcp_pcb_remove>
        tcp_free(pcb);
 800f20c:	69f8      	ldr	r0, [r7, #28]
 800f20e:	f7fd fea7 	bl	800cf60 <tcp_free>
 800f212:	e0da      	b.n	800f3ca <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f214:	2300      	movs	r3, #0
 800f216:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f218:	4b63      	ldr	r3, [pc, #396]	; (800f3a8 <tcp_input+0x734>)
 800f21a:	881b      	ldrh	r3, [r3, #0]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d01d      	beq.n	800f25c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f220:	4b61      	ldr	r3, [pc, #388]	; (800f3a8 <tcp_input+0x734>)
 800f222:	881b      	ldrh	r3, [r3, #0]
 800f224:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f226:	69fb      	ldr	r3, [r7, #28]
 800f228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d00a      	beq.n	800f246 <tcp_input+0x5d2>
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f236:	69fa      	ldr	r2, [r7, #28]
 800f238:	6910      	ldr	r0, [r2, #16]
 800f23a:	89fa      	ldrh	r2, [r7, #14]
 800f23c:	69f9      	ldr	r1, [r7, #28]
 800f23e:	4798      	blx	r3
 800f240:	4603      	mov	r3, r0
 800f242:	74fb      	strb	r3, [r7, #19]
 800f244:	e001      	b.n	800f24a <tcp_input+0x5d6>
 800f246:	2300      	movs	r3, #0
 800f248:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f24a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f24e:	f113 0f0d 	cmn.w	r3, #13
 800f252:	f000 8098 	beq.w	800f386 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f256:	4b54      	ldr	r3, [pc, #336]	; (800f3a8 <tcp_input+0x734>)
 800f258:	2200      	movs	r2, #0
 800f25a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f25c:	69f8      	ldr	r0, [r7, #28]
 800f25e:	f000 f915 	bl	800f48c <tcp_input_delayed_close>
 800f262:	4603      	mov	r3, r0
 800f264:	2b00      	cmp	r3, #0
 800f266:	f040 8090 	bne.w	800f38a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f26a:	4b4d      	ldr	r3, [pc, #308]	; (800f3a0 <tcp_input+0x72c>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d041      	beq.n	800f2f6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f272:	69fb      	ldr	r3, [r7, #28]
 800f274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f276:	2b00      	cmp	r3, #0
 800f278:	d006      	beq.n	800f288 <tcp_input+0x614>
 800f27a:	4b50      	ldr	r3, [pc, #320]	; (800f3bc <tcp_input+0x748>)
 800f27c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f280:	494f      	ldr	r1, [pc, #316]	; (800f3c0 <tcp_input+0x74c>)
 800f282:	4850      	ldr	r0, [pc, #320]	; (800f3c4 <tcp_input+0x750>)
 800f284:	f009 f99c 	bl	80185c0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	8b5b      	ldrh	r3, [r3, #26]
 800f28c:	f003 0310 	and.w	r3, r3, #16
 800f290:	2b00      	cmp	r3, #0
 800f292:	d008      	beq.n	800f2a6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f294:	4b42      	ldr	r3, [pc, #264]	; (800f3a0 <tcp_input+0x72c>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fd fba5 	bl	800c9e8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f29e:	69f8      	ldr	r0, [r7, #28]
 800f2a0:	f7fe f9a2 	bl	800d5e8 <tcp_abort>
            goto aborted;
 800f2a4:	e091      	b.n	800f3ca <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f2a6:	69fb      	ldr	r3, [r7, #28]
 800f2a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d00c      	beq.n	800f2ca <tcp_input+0x656>
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	6918      	ldr	r0, [r3, #16]
 800f2ba:	4b39      	ldr	r3, [pc, #228]	; (800f3a0 <tcp_input+0x72c>)
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	2300      	movs	r3, #0
 800f2c0:	69f9      	ldr	r1, [r7, #28]
 800f2c2:	47a0      	blx	r4
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	74fb      	strb	r3, [r7, #19]
 800f2c8:	e008      	b.n	800f2dc <tcp_input+0x668>
 800f2ca:	4b35      	ldr	r3, [pc, #212]	; (800f3a0 <tcp_input+0x72c>)
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	69f9      	ldr	r1, [r7, #28]
 800f2d2:	2000      	movs	r0, #0
 800f2d4:	f7ff f890 	bl	800e3f8 <tcp_recv_null>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f2dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f2e0:	f113 0f0d 	cmn.w	r3, #13
 800f2e4:	d053      	beq.n	800f38e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f2e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d003      	beq.n	800f2f6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f2ee:	4b2c      	ldr	r3, [pc, #176]	; (800f3a0 <tcp_input+0x72c>)
 800f2f0:	681a      	ldr	r2, [r3, #0]
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f2f6:	4b2b      	ldr	r3, [pc, #172]	; (800f3a4 <tcp_input+0x730>)
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	f003 0320 	and.w	r3, r3, #32
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d030      	beq.n	800f364 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f306:	2b00      	cmp	r3, #0
 800f308:	d009      	beq.n	800f31e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f30a:	69fb      	ldr	r3, [r7, #28]
 800f30c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f30e:	7b5a      	ldrb	r2, [r3, #13]
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f314:	f042 0220 	orr.w	r2, r2, #32
 800f318:	b2d2      	uxtb	r2, r2
 800f31a:	735a      	strb	r2, [r3, #13]
 800f31c:	e022      	b.n	800f364 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f322:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f326:	d005      	beq.n	800f334 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f32c:	3301      	adds	r3, #1
 800f32e:	b29a      	uxth	r2, r3
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00b      	beq.n	800f356 <tcp_input+0x6e2>
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	6918      	ldr	r0, [r3, #16]
 800f348:	2300      	movs	r3, #0
 800f34a:	2200      	movs	r2, #0
 800f34c:	69f9      	ldr	r1, [r7, #28]
 800f34e:	47a0      	blx	r4
 800f350:	4603      	mov	r3, r0
 800f352:	74fb      	strb	r3, [r7, #19]
 800f354:	e001      	b.n	800f35a <tcp_input+0x6e6>
 800f356:	2300      	movs	r3, #0
 800f358:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f35a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f35e:	f113 0f0d 	cmn.w	r3, #13
 800f362:	d016      	beq.n	800f392 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f364:	4b13      	ldr	r3, [pc, #76]	; (800f3b4 <tcp_input+0x740>)
 800f366:	2200      	movs	r2, #0
 800f368:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f36a:	69f8      	ldr	r0, [r7, #28]
 800f36c:	f000 f88e 	bl	800f48c <tcp_input_delayed_close>
 800f370:	4603      	mov	r3, r0
 800f372:	2b00      	cmp	r3, #0
 800f374:	d128      	bne.n	800f3c8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f376:	69f8      	ldr	r0, [r7, #28]
 800f378:	f002 ff20 	bl	80121bc <tcp_output>
 800f37c:	e025      	b.n	800f3ca <tcp_input+0x756>
        goto aborted;
 800f37e:	bf00      	nop
 800f380:	e023      	b.n	800f3ca <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f382:	bf00      	nop
 800f384:	e021      	b.n	800f3ca <tcp_input+0x756>
              goto aborted;
 800f386:	bf00      	nop
 800f388:	e01f      	b.n	800f3ca <tcp_input+0x756>
          goto aborted;
 800f38a:	bf00      	nop
 800f38c:	e01d      	b.n	800f3ca <tcp_input+0x756>
            goto aborted;
 800f38e:	bf00      	nop
 800f390:	e01b      	b.n	800f3ca <tcp_input+0x756>
              goto aborted;
 800f392:	bf00      	nop
 800f394:	e019      	b.n	800f3ca <tcp_input+0x756>
 800f396:	bf00      	nop
 800f398:	20011578 	.word	0x20011578
 800f39c:	20011588 	.word	0x20011588
 800f3a0:	200115a8 	.word	0x200115a8
 800f3a4:	200115a5 	.word	0x200115a5
 800f3a8:	200115a0 	.word	0x200115a0
 800f3ac:	200115a4 	.word	0x200115a4
 800f3b0:	200115a2 	.word	0x200115a2
 800f3b4:	200115ac 	.word	0x200115ac
 800f3b8:	2001156c 	.word	0x2001156c
 800f3bc:	0801bab8 	.word	0x0801bab8
 800f3c0:	0801bc6c 	.word	0x0801bc6c
 800f3c4:	0801bb04 	.word	0x0801bb04
          goto aborted;
 800f3c8:	bf00      	nop
    tcp_input_pcb = NULL;
 800f3ca:	4b27      	ldr	r3, [pc, #156]	; (800f468 <tcp_input+0x7f4>)
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f3d0:	4b26      	ldr	r3, [pc, #152]	; (800f46c <tcp_input+0x7f8>)
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f3d6:	4b26      	ldr	r3, [pc, #152]	; (800f470 <tcp_input+0x7fc>)
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d03f      	beq.n	800f45e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f3de:	4b24      	ldr	r3, [pc, #144]	; (800f470 <tcp_input+0x7fc>)
 800f3e0:	685b      	ldr	r3, [r3, #4]
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fd fb00 	bl	800c9e8 <pbuf_free>
      inseg.p = NULL;
 800f3e8:	4b21      	ldr	r3, [pc, #132]	; (800f470 <tcp_input+0x7fc>)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f3ee:	e036      	b.n	800f45e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f3f0:	4b20      	ldr	r3, [pc, #128]	; (800f474 <tcp_input+0x800>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	899b      	ldrh	r3, [r3, #12]
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7fb fec1 	bl	800b180 <lwip_htons>
 800f3fe:	4603      	mov	r3, r0
 800f400:	b2db      	uxtb	r3, r3
 800f402:	f003 0304 	and.w	r3, r3, #4
 800f406:	2b00      	cmp	r3, #0
 800f408:	d118      	bne.n	800f43c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f40a:	4b1b      	ldr	r3, [pc, #108]	; (800f478 <tcp_input+0x804>)
 800f40c:	6819      	ldr	r1, [r3, #0]
 800f40e:	4b1b      	ldr	r3, [pc, #108]	; (800f47c <tcp_input+0x808>)
 800f410:	881b      	ldrh	r3, [r3, #0]
 800f412:	461a      	mov	r2, r3
 800f414:	4b1a      	ldr	r3, [pc, #104]	; (800f480 <tcp_input+0x80c>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f41a:	4b16      	ldr	r3, [pc, #88]	; (800f474 <tcp_input+0x800>)
 800f41c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f41e:	885b      	ldrh	r3, [r3, #2]
 800f420:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f422:	4a14      	ldr	r2, [pc, #80]	; (800f474 <tcp_input+0x800>)
 800f424:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f426:	8812      	ldrh	r2, [r2, #0]
 800f428:	b292      	uxth	r2, r2
 800f42a:	9202      	str	r2, [sp, #8]
 800f42c:	9301      	str	r3, [sp, #4]
 800f42e:	4b15      	ldr	r3, [pc, #84]	; (800f484 <tcp_input+0x810>)
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	4b15      	ldr	r3, [pc, #84]	; (800f488 <tcp_input+0x814>)
 800f434:	4602      	mov	r2, r0
 800f436:	2000      	movs	r0, #0
 800f438:	f003 fc74 	bl	8012d24 <tcp_rst>
    pbuf_free(p);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f7fd fad3 	bl	800c9e8 <pbuf_free>
  return;
 800f442:	e00c      	b.n	800f45e <tcp_input+0x7ea>
    goto dropped;
 800f444:	bf00      	nop
 800f446:	e006      	b.n	800f456 <tcp_input+0x7e2>
    goto dropped;
 800f448:	bf00      	nop
 800f44a:	e004      	b.n	800f456 <tcp_input+0x7e2>
    goto dropped;
 800f44c:	bf00      	nop
 800f44e:	e002      	b.n	800f456 <tcp_input+0x7e2>
      goto dropped;
 800f450:	bf00      	nop
 800f452:	e000      	b.n	800f456 <tcp_input+0x7e2>
      goto dropped;
 800f454:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7fd fac6 	bl	800c9e8 <pbuf_free>
 800f45c:	e000      	b.n	800f460 <tcp_input+0x7ec>
  return;
 800f45e:	bf00      	nop
}
 800f460:	3724      	adds	r7, #36	; 0x24
 800f462:	46bd      	mov	sp, r7
 800f464:	bd90      	pop	{r4, r7, pc}
 800f466:	bf00      	nop
 800f468:	200115ac 	.word	0x200115ac
 800f46c:	200115a8 	.word	0x200115a8
 800f470:	20011578 	.word	0x20011578
 800f474:	20011588 	.word	0x20011588
 800f478:	2001159c 	.word	0x2001159c
 800f47c:	200115a2 	.word	0x200115a2
 800f480:	20011598 	.word	0x20011598
 800f484:	2000ddfc 	.word	0x2000ddfc
 800f488:	2000de00 	.word	0x2000de00

0800f48c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d106      	bne.n	800f4a8 <tcp_input_delayed_close+0x1c>
 800f49a:	4b17      	ldr	r3, [pc, #92]	; (800f4f8 <tcp_input_delayed_close+0x6c>)
 800f49c:	f240 225a 	movw	r2, #602	; 0x25a
 800f4a0:	4916      	ldr	r1, [pc, #88]	; (800f4fc <tcp_input_delayed_close+0x70>)
 800f4a2:	4817      	ldr	r0, [pc, #92]	; (800f500 <tcp_input_delayed_close+0x74>)
 800f4a4:	f009 f88c 	bl	80185c0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f4a8:	4b16      	ldr	r3, [pc, #88]	; (800f504 <tcp_input_delayed_close+0x78>)
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	f003 0310 	and.w	r3, r3, #16
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d01c      	beq.n	800f4ee <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	8b5b      	ldrh	r3, [r3, #26]
 800f4b8:	f003 0310 	and.w	r3, r3, #16
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d10d      	bne.n	800f4dc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d008      	beq.n	800f4dc <tcp_input_delayed_close+0x50>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	6912      	ldr	r2, [r2, #16]
 800f4d4:	f06f 010e 	mvn.w	r1, #14
 800f4d8:	4610      	mov	r0, r2
 800f4da:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f4dc:	6879      	ldr	r1, [r7, #4]
 800f4de:	480a      	ldr	r0, [pc, #40]	; (800f508 <tcp_input_delayed_close+0x7c>)
 800f4e0:	f7ff fa50 	bl	800e984 <tcp_pcb_remove>
    tcp_free(pcb);
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f7fd fd3b 	bl	800cf60 <tcp_free>
    return 1;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	e000      	b.n	800f4f0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f4ee:	2300      	movs	r3, #0
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3708      	adds	r7, #8
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	0801bab8 	.word	0x0801bab8
 800f4fc:	0801bc88 	.word	0x0801bc88
 800f500:	0801bb04 	.word	0x0801bb04
 800f504:	200115a5 	.word	0x200115a5
 800f508:	2001156c 	.word	0x2001156c

0800f50c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f50c:	b590      	push	{r4, r7, lr}
 800f50e:	b08b      	sub	sp, #44	; 0x2c
 800f510:	af04      	add	r7, sp, #16
 800f512:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f514:	4b6f      	ldr	r3, [pc, #444]	; (800f6d4 <tcp_listen_input+0x1c8>)
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	f003 0304 	and.w	r3, r3, #4
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f040 80d2 	bne.w	800f6c6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d106      	bne.n	800f536 <tcp_listen_input+0x2a>
 800f528:	4b6b      	ldr	r3, [pc, #428]	; (800f6d8 <tcp_listen_input+0x1cc>)
 800f52a:	f240 2281 	movw	r2, #641	; 0x281
 800f52e:	496b      	ldr	r1, [pc, #428]	; (800f6dc <tcp_listen_input+0x1d0>)
 800f530:	486b      	ldr	r0, [pc, #428]	; (800f6e0 <tcp_listen_input+0x1d4>)
 800f532:	f009 f845 	bl	80185c0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f536:	4b67      	ldr	r3, [pc, #412]	; (800f6d4 <tcp_listen_input+0x1c8>)
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	f003 0310 	and.w	r3, r3, #16
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d019      	beq.n	800f576 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f542:	4b68      	ldr	r3, [pc, #416]	; (800f6e4 <tcp_listen_input+0x1d8>)
 800f544:	6819      	ldr	r1, [r3, #0]
 800f546:	4b68      	ldr	r3, [pc, #416]	; (800f6e8 <tcp_listen_input+0x1dc>)
 800f548:	881b      	ldrh	r3, [r3, #0]
 800f54a:	461a      	mov	r2, r3
 800f54c:	4b67      	ldr	r3, [pc, #412]	; (800f6ec <tcp_listen_input+0x1e0>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f552:	4b67      	ldr	r3, [pc, #412]	; (800f6f0 <tcp_listen_input+0x1e4>)
 800f554:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f556:	885b      	ldrh	r3, [r3, #2]
 800f558:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f55a:	4a65      	ldr	r2, [pc, #404]	; (800f6f0 <tcp_listen_input+0x1e4>)
 800f55c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f55e:	8812      	ldrh	r2, [r2, #0]
 800f560:	b292      	uxth	r2, r2
 800f562:	9202      	str	r2, [sp, #8]
 800f564:	9301      	str	r3, [sp, #4]
 800f566:	4b63      	ldr	r3, [pc, #396]	; (800f6f4 <tcp_listen_input+0x1e8>)
 800f568:	9300      	str	r3, [sp, #0]
 800f56a:	4b63      	ldr	r3, [pc, #396]	; (800f6f8 <tcp_listen_input+0x1ec>)
 800f56c:	4602      	mov	r2, r0
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f003 fbd8 	bl	8012d24 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f574:	e0a9      	b.n	800f6ca <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f576:	4b57      	ldr	r3, [pc, #348]	; (800f6d4 <tcp_listen_input+0x1c8>)
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	f003 0302 	and.w	r3, r3, #2
 800f57e:	2b00      	cmp	r3, #0
 800f580:	f000 80a3 	beq.w	800f6ca <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	7d5b      	ldrb	r3, [r3, #21]
 800f588:	4618      	mov	r0, r3
 800f58a:	f7ff f859 	bl	800e640 <tcp_alloc>
 800f58e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d111      	bne.n	800f5ba <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	699b      	ldr	r3, [r3, #24]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d00a      	beq.n	800f5b4 <tcp_listen_input+0xa8>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	699b      	ldr	r3, [r3, #24]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	6910      	ldr	r0, [r2, #16]
 800f5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	4798      	blx	r3
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	73bb      	strb	r3, [r7, #14]
      return;
 800f5b2:	e08b      	b.n	800f6cc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f5b4:	23f0      	movs	r3, #240	; 0xf0
 800f5b6:	73bb      	strb	r3, [r7, #14]
      return;
 800f5b8:	e088      	b.n	800f6cc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f5ba:	4b50      	ldr	r3, [pc, #320]	; (800f6fc <tcp_listen_input+0x1f0>)
 800f5bc:	695a      	ldr	r2, [r3, #20]
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f5c2:	4b4e      	ldr	r3, [pc, #312]	; (800f6fc <tcp_listen_input+0x1f0>)
 800f5c4:	691a      	ldr	r2, [r3, #16]
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	8ada      	ldrh	r2, [r3, #22]
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f5d2:	4b47      	ldr	r3, [pc, #284]	; (800f6f0 <tcp_listen_input+0x1e4>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	881b      	ldrh	r3, [r3, #0]
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	2203      	movs	r2, #3
 800f5e2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f5e4:	4b41      	ldr	r3, [pc, #260]	; (800f6ec <tcp_listen_input+0x1e0>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	1c5a      	adds	r2, r3, #1
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f5f6:	6978      	ldr	r0, [r7, #20]
 800f5f8:	f7ff fa58 	bl	800eaac <tcp_next_iss>
 800f5fc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	693a      	ldr	r2, [r7, #16]
 800f602:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	693a      	ldr	r2, [r7, #16]
 800f608:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	693a      	ldr	r2, [r7, #16]
 800f60e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f616:	4b35      	ldr	r3, [pc, #212]	; (800f6ec <tcp_listen_input+0x1e0>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	1e5a      	subs	r2, r3, #1
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	691a      	ldr	r2, [r3, #16]
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	7a5b      	ldrb	r3, [r3, #9]
 800f632:	f003 030c 	and.w	r3, r3, #12
 800f636:	b2da      	uxtb	r2, r3
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	7a1a      	ldrb	r2, [r3, #8]
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f644:	4b2e      	ldr	r3, [pc, #184]	; (800f700 <tcp_listen_input+0x1f4>)
 800f646:	681a      	ldr	r2, [r3, #0]
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	60da      	str	r2, [r3, #12]
 800f64c:	4a2c      	ldr	r2, [pc, #176]	; (800f700 <tcp_listen_input+0x1f4>)
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	6013      	str	r3, [r2, #0]
 800f652:	f003 fd29 	bl	80130a8 <tcp_timer_needed>
 800f656:	4b2b      	ldr	r3, [pc, #172]	; (800f704 <tcp_listen_input+0x1f8>)
 800f658:	2201      	movs	r2, #1
 800f65a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f65c:	6978      	ldr	r0, [r7, #20]
 800f65e:	f001 fd8f 	bl	8011180 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f662:	4b23      	ldr	r3, [pc, #140]	; (800f6f0 <tcp_listen_input+0x1e4>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	89db      	ldrh	r3, [r3, #14]
 800f668:	b29a      	uxth	r2, r3
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	3304      	adds	r3, #4
 800f684:	4618      	mov	r0, r3
 800f686:	f007 fac1 	bl	8016c0c <ip4_route>
 800f68a:	4601      	mov	r1, r0
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	3304      	adds	r3, #4
 800f690:	461a      	mov	r2, r3
 800f692:	4620      	mov	r0, r4
 800f694:	f7ff fa30 	bl	800eaf8 <tcp_eff_send_mss_netif>
 800f698:	4603      	mov	r3, r0
 800f69a:	461a      	mov	r2, r3
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f6a0:	2112      	movs	r1, #18
 800f6a2:	6978      	ldr	r0, [r7, #20]
 800f6a4:	f002 fc9c 	bl	8011fe0 <tcp_enqueue_flags>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f6ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d004      	beq.n	800f6be <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	6978      	ldr	r0, [r7, #20]
 800f6b8:	f7fd fed8 	bl	800d46c <tcp_abandon>
      return;
 800f6bc:	e006      	b.n	800f6cc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f6be:	6978      	ldr	r0, [r7, #20]
 800f6c0:	f002 fd7c 	bl	80121bc <tcp_output>
  return;
 800f6c4:	e001      	b.n	800f6ca <tcp_listen_input+0x1be>
    return;
 800f6c6:	bf00      	nop
 800f6c8:	e000      	b.n	800f6cc <tcp_listen_input+0x1c0>
  return;
 800f6ca:	bf00      	nop
}
 800f6cc:	371c      	adds	r7, #28
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd90      	pop	{r4, r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	200115a4 	.word	0x200115a4
 800f6d8:	0801bab8 	.word	0x0801bab8
 800f6dc:	0801bcb0 	.word	0x0801bcb0
 800f6e0:	0801bb04 	.word	0x0801bb04
 800f6e4:	2001159c 	.word	0x2001159c
 800f6e8:	200115a2 	.word	0x200115a2
 800f6ec:	20011598 	.word	0x20011598
 800f6f0:	20011588 	.word	0x20011588
 800f6f4:	2000ddfc 	.word	0x2000ddfc
 800f6f8:	2000de00 	.word	0x2000de00
 800f6fc:	2000ddec 	.word	0x2000ddec
 800f700:	2001156c 	.word	0x2001156c
 800f704:	20011574 	.word	0x20011574

0800f708 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b086      	sub	sp, #24
 800f70c:	af04      	add	r7, sp, #16
 800f70e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f710:	4b2f      	ldr	r3, [pc, #188]	; (800f7d0 <tcp_timewait_input+0xc8>)
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	f003 0304 	and.w	r3, r3, #4
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d153      	bne.n	800f7c4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d106      	bne.n	800f730 <tcp_timewait_input+0x28>
 800f722:	4b2c      	ldr	r3, [pc, #176]	; (800f7d4 <tcp_timewait_input+0xcc>)
 800f724:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f728:	492b      	ldr	r1, [pc, #172]	; (800f7d8 <tcp_timewait_input+0xd0>)
 800f72a:	482c      	ldr	r0, [pc, #176]	; (800f7dc <tcp_timewait_input+0xd4>)
 800f72c:	f008 ff48 	bl	80185c0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f730:	4b27      	ldr	r3, [pc, #156]	; (800f7d0 <tcp_timewait_input+0xc8>)
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	f003 0302 	and.w	r3, r3, #2
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d02a      	beq.n	800f792 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f73c:	4b28      	ldr	r3, [pc, #160]	; (800f7e0 <tcp_timewait_input+0xd8>)
 800f73e:	681a      	ldr	r2, [r3, #0]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f744:	1ad3      	subs	r3, r2, r3
 800f746:	2b00      	cmp	r3, #0
 800f748:	db2d      	blt.n	800f7a6 <tcp_timewait_input+0x9e>
 800f74a:	4b25      	ldr	r3, [pc, #148]	; (800f7e0 <tcp_timewait_input+0xd8>)
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f752:	6879      	ldr	r1, [r7, #4]
 800f754:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f756:	440b      	add	r3, r1
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	dc23      	bgt.n	800f7a6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f75e:	4b21      	ldr	r3, [pc, #132]	; (800f7e4 <tcp_timewait_input+0xdc>)
 800f760:	6819      	ldr	r1, [r3, #0]
 800f762:	4b21      	ldr	r3, [pc, #132]	; (800f7e8 <tcp_timewait_input+0xe0>)
 800f764:	881b      	ldrh	r3, [r3, #0]
 800f766:	461a      	mov	r2, r3
 800f768:	4b1d      	ldr	r3, [pc, #116]	; (800f7e0 <tcp_timewait_input+0xd8>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f76e:	4b1f      	ldr	r3, [pc, #124]	; (800f7ec <tcp_timewait_input+0xe4>)
 800f770:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f772:	885b      	ldrh	r3, [r3, #2]
 800f774:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f776:	4a1d      	ldr	r2, [pc, #116]	; (800f7ec <tcp_timewait_input+0xe4>)
 800f778:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f77a:	8812      	ldrh	r2, [r2, #0]
 800f77c:	b292      	uxth	r2, r2
 800f77e:	9202      	str	r2, [sp, #8]
 800f780:	9301      	str	r3, [sp, #4]
 800f782:	4b1b      	ldr	r3, [pc, #108]	; (800f7f0 <tcp_timewait_input+0xe8>)
 800f784:	9300      	str	r3, [sp, #0]
 800f786:	4b1b      	ldr	r3, [pc, #108]	; (800f7f4 <tcp_timewait_input+0xec>)
 800f788:	4602      	mov	r2, r0
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f003 faca 	bl	8012d24 <tcp_rst>
      return;
 800f790:	e01b      	b.n	800f7ca <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f792:	4b0f      	ldr	r3, [pc, #60]	; (800f7d0 <tcp_timewait_input+0xc8>)
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	f003 0301 	and.w	r3, r3, #1
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d003      	beq.n	800f7a6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f79e:	4b16      	ldr	r3, [pc, #88]	; (800f7f8 <tcp_timewait_input+0xf0>)
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f7a6:	4b10      	ldr	r3, [pc, #64]	; (800f7e8 <tcp_timewait_input+0xe0>)
 800f7a8:	881b      	ldrh	r3, [r3, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d00c      	beq.n	800f7c8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	8b5b      	ldrh	r3, [r3, #26]
 800f7b2:	f043 0302 	orr.w	r3, r3, #2
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f002 fcfd 	bl	80121bc <tcp_output>
  }
  return;
 800f7c2:	e001      	b.n	800f7c8 <tcp_timewait_input+0xc0>
    return;
 800f7c4:	bf00      	nop
 800f7c6:	e000      	b.n	800f7ca <tcp_timewait_input+0xc2>
  return;
 800f7c8:	bf00      	nop
}
 800f7ca:	3708      	adds	r7, #8
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	200115a4 	.word	0x200115a4
 800f7d4:	0801bab8 	.word	0x0801bab8
 800f7d8:	0801bcd0 	.word	0x0801bcd0
 800f7dc:	0801bb04 	.word	0x0801bb04
 800f7e0:	20011598 	.word	0x20011598
 800f7e4:	2001159c 	.word	0x2001159c
 800f7e8:	200115a2 	.word	0x200115a2
 800f7ec:	20011588 	.word	0x20011588
 800f7f0:	2000ddfc 	.word	0x2000ddfc
 800f7f4:	2000de00 	.word	0x2000de00
 800f7f8:	20011560 	.word	0x20011560

0800f7fc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f7fc:	b590      	push	{r4, r7, lr}
 800f7fe:	b08d      	sub	sp, #52	; 0x34
 800f800:	af04      	add	r7, sp, #16
 800f802:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f804:	2300      	movs	r3, #0
 800f806:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f808:	2300      	movs	r3, #0
 800f80a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d106      	bne.n	800f820 <tcp_process+0x24>
 800f812:	4b9d      	ldr	r3, [pc, #628]	; (800fa88 <tcp_process+0x28c>)
 800f814:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f818:	499c      	ldr	r1, [pc, #624]	; (800fa8c <tcp_process+0x290>)
 800f81a:	489d      	ldr	r0, [pc, #628]	; (800fa90 <tcp_process+0x294>)
 800f81c:	f008 fed0 	bl	80185c0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f820:	4b9c      	ldr	r3, [pc, #624]	; (800fa94 <tcp_process+0x298>)
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	f003 0304 	and.w	r3, r3, #4
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d04e      	beq.n	800f8ca <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	7d1b      	ldrb	r3, [r3, #20]
 800f830:	2b02      	cmp	r3, #2
 800f832:	d108      	bne.n	800f846 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f838:	4b97      	ldr	r3, [pc, #604]	; (800fa98 <tcp_process+0x29c>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d123      	bne.n	800f888 <tcp_process+0x8c>
        acceptable = 1;
 800f840:	2301      	movs	r3, #1
 800f842:	76fb      	strb	r3, [r7, #27]
 800f844:	e020      	b.n	800f888 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f84a:	4b94      	ldr	r3, [pc, #592]	; (800fa9c <tcp_process+0x2a0>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d102      	bne.n	800f858 <tcp_process+0x5c>
        acceptable = 1;
 800f852:	2301      	movs	r3, #1
 800f854:	76fb      	strb	r3, [r7, #27]
 800f856:	e017      	b.n	800f888 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f858:	4b90      	ldr	r3, [pc, #576]	; (800fa9c <tcp_process+0x2a0>)
 800f85a:	681a      	ldr	r2, [r3, #0]
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f860:	1ad3      	subs	r3, r2, r3
 800f862:	2b00      	cmp	r3, #0
 800f864:	db10      	blt.n	800f888 <tcp_process+0x8c>
 800f866:	4b8d      	ldr	r3, [pc, #564]	; (800fa9c <tcp_process+0x2a0>)
 800f868:	681a      	ldr	r2, [r3, #0]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f86e:	6879      	ldr	r1, [r7, #4]
 800f870:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f872:	440b      	add	r3, r1
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	2b00      	cmp	r3, #0
 800f878:	dc06      	bgt.n	800f888 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	8b5b      	ldrh	r3, [r3, #26]
 800f87e:	f043 0302 	orr.w	r3, r3, #2
 800f882:	b29a      	uxth	r2, r3
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f888:	7efb      	ldrb	r3, [r7, #27]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d01b      	beq.n	800f8c6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	7d1b      	ldrb	r3, [r3, #20]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d106      	bne.n	800f8a4 <tcp_process+0xa8>
 800f896:	4b7c      	ldr	r3, [pc, #496]	; (800fa88 <tcp_process+0x28c>)
 800f898:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f89c:	4980      	ldr	r1, [pc, #512]	; (800faa0 <tcp_process+0x2a4>)
 800f89e:	487c      	ldr	r0, [pc, #496]	; (800fa90 <tcp_process+0x294>)
 800f8a0:	f008 fe8e 	bl	80185c0 <iprintf>
      recv_flags |= TF_RESET;
 800f8a4:	4b7f      	ldr	r3, [pc, #508]	; (800faa4 <tcp_process+0x2a8>)
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	f043 0308 	orr.w	r3, r3, #8
 800f8ac:	b2da      	uxtb	r2, r3
 800f8ae:	4b7d      	ldr	r3, [pc, #500]	; (800faa4 <tcp_process+0x2a8>)
 800f8b0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	8b5b      	ldrh	r3, [r3, #26]
 800f8b6:	f023 0301 	bic.w	r3, r3, #1
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f8c0:	f06f 030d 	mvn.w	r3, #13
 800f8c4:	e37a      	b.n	800ffbc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	e378      	b.n	800ffbc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f8ca:	4b72      	ldr	r3, [pc, #456]	; (800fa94 <tcp_process+0x298>)
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	f003 0302 	and.w	r3, r3, #2
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d010      	beq.n	800f8f8 <tcp_process+0xfc>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	7d1b      	ldrb	r3, [r3, #20]
 800f8da:	2b02      	cmp	r3, #2
 800f8dc:	d00c      	beq.n	800f8f8 <tcp_process+0xfc>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	7d1b      	ldrb	r3, [r3, #20]
 800f8e2:	2b03      	cmp	r3, #3
 800f8e4:	d008      	beq.n	800f8f8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	8b5b      	ldrh	r3, [r3, #26]
 800f8ea:	f043 0302 	orr.w	r3, r3, #2
 800f8ee:	b29a      	uxth	r2, r3
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	e361      	b.n	800ffbc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	8b5b      	ldrh	r3, [r3, #26]
 800f8fc:	f003 0310 	and.w	r3, r3, #16
 800f900:	2b00      	cmp	r3, #0
 800f902:	d103      	bne.n	800f90c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f904:	4b68      	ldr	r3, [pc, #416]	; (800faa8 <tcp_process+0x2ac>)
 800f906:	681a      	ldr	r2, [r3, #0]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2200      	movs	r2, #0
 800f910:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2200      	movs	r2, #0
 800f918:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f001 fc2f 	bl	8011180 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	7d1b      	ldrb	r3, [r3, #20]
 800f926:	3b02      	subs	r3, #2
 800f928:	2b07      	cmp	r3, #7
 800f92a:	f200 8337 	bhi.w	800ff9c <tcp_process+0x7a0>
 800f92e:	a201      	add	r2, pc, #4	; (adr r2, 800f934 <tcp_process+0x138>)
 800f930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f934:	0800f955 	.word	0x0800f955
 800f938:	0800fb85 	.word	0x0800fb85
 800f93c:	0800fcfd 	.word	0x0800fcfd
 800f940:	0800fd27 	.word	0x0800fd27
 800f944:	0800fe4b 	.word	0x0800fe4b
 800f948:	0800fcfd 	.word	0x0800fcfd
 800f94c:	0800fed7 	.word	0x0800fed7
 800f950:	0800ff67 	.word	0x0800ff67
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f954:	4b4f      	ldr	r3, [pc, #316]	; (800fa94 <tcp_process+0x298>)
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	f003 0310 	and.w	r3, r3, #16
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	f000 80e4 	beq.w	800fb2a <tcp_process+0x32e>
 800f962:	4b4c      	ldr	r3, [pc, #304]	; (800fa94 <tcp_process+0x298>)
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	f003 0302 	and.w	r3, r3, #2
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f000 80dd 	beq.w	800fb2a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f974:	1c5a      	adds	r2, r3, #1
 800f976:	4b48      	ldr	r3, [pc, #288]	; (800fa98 <tcp_process+0x29c>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	f040 80d5 	bne.w	800fb2a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f980:	4b46      	ldr	r3, [pc, #280]	; (800fa9c <tcp_process+0x2a0>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	1c5a      	adds	r2, r3, #1
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f992:	4b41      	ldr	r3, [pc, #260]	; (800fa98 <tcp_process+0x29c>)
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f99a:	4b44      	ldr	r3, [pc, #272]	; (800faac <tcp_process+0x2b0>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	89db      	ldrh	r3, [r3, #14]
 800f9a0:	b29a      	uxth	r2, r3
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f9b4:	4b39      	ldr	r3, [pc, #228]	; (800fa9c <tcp_process+0x2a0>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	1e5a      	subs	r2, r3, #1
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2204      	movs	r2, #4
 800f9c2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f007 f91d 	bl	8016c0c <ip4_route>
 800f9d2:	4601      	mov	r1, r0
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	3304      	adds	r3, #4
 800f9d8:	461a      	mov	r2, r3
 800f9da:	4620      	mov	r0, r4
 800f9dc:	f7ff f88c 	bl	800eaf8 <tcp_eff_send_mss_netif>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9ec:	009a      	lsls	r2, r3, #2
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9f2:	005b      	lsls	r3, r3, #1
 800f9f4:	f241 111c 	movw	r1, #4380	; 0x111c
 800f9f8:	428b      	cmp	r3, r1
 800f9fa:	bf38      	it	cc
 800f9fc:	460b      	movcc	r3, r1
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d204      	bcs.n	800fa0c <tcp_process+0x210>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa06:	009b      	lsls	r3, r3, #2
 800fa08:	b29b      	uxth	r3, r3
 800fa0a:	e00d      	b.n	800fa28 <tcp_process+0x22c>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa10:	005b      	lsls	r3, r3, #1
 800fa12:	f241 121c 	movw	r2, #4380	; 0x111c
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d904      	bls.n	800fa24 <tcp_process+0x228>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa1e:	005b      	lsls	r3, r3, #1
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	e001      	b.n	800fa28 <tcp_process+0x22c>
 800fa24:	f241 131c 	movw	r3, #4380	; 0x111c
 800fa28:	687a      	ldr	r2, [r7, #4]
 800fa2a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d106      	bne.n	800fa46 <tcp_process+0x24a>
 800fa38:	4b13      	ldr	r3, [pc, #76]	; (800fa88 <tcp_process+0x28c>)
 800fa3a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fa3e:	491c      	ldr	r1, [pc, #112]	; (800fab0 <tcp_process+0x2b4>)
 800fa40:	4813      	ldr	r0, [pc, #76]	; (800fa90 <tcp_process+0x294>)
 800fa42:	f008 fdbd 	bl	80185c0 <iprintf>
        --pcb->snd_queuelen;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fa4c:	3b01      	subs	r3, #1
 800fa4e:	b29a      	uxth	r2, r3
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa5a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d12a      	bne.n	800fab8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa66:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d106      	bne.n	800fa7c <tcp_process+0x280>
 800fa6e:	4b06      	ldr	r3, [pc, #24]	; (800fa88 <tcp_process+0x28c>)
 800fa70:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fa74:	490f      	ldr	r1, [pc, #60]	; (800fab4 <tcp_process+0x2b8>)
 800fa76:	4806      	ldr	r0, [pc, #24]	; (800fa90 <tcp_process+0x294>)
 800fa78:	f008 fda2 	bl	80185c0 <iprintf>
          pcb->unsent = rseg->next;
 800fa7c:	69fb      	ldr	r3, [r7, #28]
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	66da      	str	r2, [r3, #108]	; 0x6c
 800fa84:	e01c      	b.n	800fac0 <tcp_process+0x2c4>
 800fa86:	bf00      	nop
 800fa88:	0801bab8 	.word	0x0801bab8
 800fa8c:	0801bcf0 	.word	0x0801bcf0
 800fa90:	0801bb04 	.word	0x0801bb04
 800fa94:	200115a4 	.word	0x200115a4
 800fa98:	2001159c 	.word	0x2001159c
 800fa9c:	20011598 	.word	0x20011598
 800faa0:	0801bd0c 	.word	0x0801bd0c
 800faa4:	200115a5 	.word	0x200115a5
 800faa8:	20011560 	.word	0x20011560
 800faac:	20011588 	.word	0x20011588
 800fab0:	0801bd2c 	.word	0x0801bd2c
 800fab4:	0801bd44 	.word	0x0801bd44
        } else {
          pcb->unacked = rseg->next;
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fac0:	69f8      	ldr	r0, [r7, #28]
 800fac2:	f7fe fc36 	bl	800e332 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faca:	2b00      	cmp	r3, #0
 800facc:	d104      	bne.n	800fad8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fad4:	861a      	strh	r2, [r3, #48]	; 0x30
 800fad6:	e006      	b.n	800fae6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2200      	movs	r2, #0
 800fadc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2200      	movs	r2, #0
 800fae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800faec:	2b00      	cmp	r3, #0
 800faee:	d00a      	beq.n	800fb06 <tcp_process+0x30a>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800faf6:	687a      	ldr	r2, [r7, #4]
 800faf8:	6910      	ldr	r0, [r2, #16]
 800fafa:	2200      	movs	r2, #0
 800fafc:	6879      	ldr	r1, [r7, #4]
 800fafe:	4798      	blx	r3
 800fb00:	4603      	mov	r3, r0
 800fb02:	76bb      	strb	r3, [r7, #26]
 800fb04:	e001      	b.n	800fb0a <tcp_process+0x30e>
 800fb06:	2300      	movs	r3, #0
 800fb08:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fb0a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fb0e:	f113 0f0d 	cmn.w	r3, #13
 800fb12:	d102      	bne.n	800fb1a <tcp_process+0x31e>
          return ERR_ABRT;
 800fb14:	f06f 030c 	mvn.w	r3, #12
 800fb18:	e250      	b.n	800ffbc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	8b5b      	ldrh	r3, [r3, #26]
 800fb1e:	f043 0302 	orr.w	r3, r3, #2
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fb28:	e23a      	b.n	800ffa0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fb2a:	4b98      	ldr	r3, [pc, #608]	; (800fd8c <tcp_process+0x590>)
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	f003 0310 	and.w	r3, r3, #16
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	f000 8234 	beq.w	800ffa0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb38:	4b95      	ldr	r3, [pc, #596]	; (800fd90 <tcp_process+0x594>)
 800fb3a:	6819      	ldr	r1, [r3, #0]
 800fb3c:	4b95      	ldr	r3, [pc, #596]	; (800fd94 <tcp_process+0x598>)
 800fb3e:	881b      	ldrh	r3, [r3, #0]
 800fb40:	461a      	mov	r2, r3
 800fb42:	4b95      	ldr	r3, [pc, #596]	; (800fd98 <tcp_process+0x59c>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb48:	4b94      	ldr	r3, [pc, #592]	; (800fd9c <tcp_process+0x5a0>)
 800fb4a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb4c:	885b      	ldrh	r3, [r3, #2]
 800fb4e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb50:	4a92      	ldr	r2, [pc, #584]	; (800fd9c <tcp_process+0x5a0>)
 800fb52:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb54:	8812      	ldrh	r2, [r2, #0]
 800fb56:	b292      	uxth	r2, r2
 800fb58:	9202      	str	r2, [sp, #8]
 800fb5a:	9301      	str	r3, [sp, #4]
 800fb5c:	4b90      	ldr	r3, [pc, #576]	; (800fda0 <tcp_process+0x5a4>)
 800fb5e:	9300      	str	r3, [sp, #0]
 800fb60:	4b90      	ldr	r3, [pc, #576]	; (800fda4 <tcp_process+0x5a8>)
 800fb62:	4602      	mov	r2, r0
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f003 f8dd 	bl	8012d24 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb70:	2b05      	cmp	r3, #5
 800fb72:	f200 8215 	bhi.w	800ffa0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f002 fea9 	bl	80128d4 <tcp_rexmit_rto>
      break;
 800fb82:	e20d      	b.n	800ffa0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fb84:	4b81      	ldr	r3, [pc, #516]	; (800fd8c <tcp_process+0x590>)
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	f003 0310 	and.w	r3, r3, #16
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f000 80a1 	beq.w	800fcd4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fb92:	4b7f      	ldr	r3, [pc, #508]	; (800fd90 <tcp_process+0x594>)
 800fb94:	681a      	ldr	r2, [r3, #0]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb9a:	1ad3      	subs	r3, r2, r3
 800fb9c:	3b01      	subs	r3, #1
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	db7e      	blt.n	800fca0 <tcp_process+0x4a4>
 800fba2:	4b7b      	ldr	r3, [pc, #492]	; (800fd90 <tcp_process+0x594>)
 800fba4:	681a      	ldr	r2, [r3, #0]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbaa:	1ad3      	subs	r3, r2, r3
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	dc77      	bgt.n	800fca0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2204      	movs	r2, #4
 800fbb4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d102      	bne.n	800fbc4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fbbe:	23fa      	movs	r3, #250	; 0xfa
 800fbc0:	76bb      	strb	r3, [r7, #26]
 800fbc2:	e01d      	b.n	800fc00 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbc8:	699b      	ldr	r3, [r3, #24]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d106      	bne.n	800fbdc <tcp_process+0x3e0>
 800fbce:	4b76      	ldr	r3, [pc, #472]	; (800fda8 <tcp_process+0x5ac>)
 800fbd0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fbd4:	4975      	ldr	r1, [pc, #468]	; (800fdac <tcp_process+0x5b0>)
 800fbd6:	4876      	ldr	r0, [pc, #472]	; (800fdb0 <tcp_process+0x5b4>)
 800fbd8:	f008 fcf2 	bl	80185c0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbe0:	699b      	ldr	r3, [r3, #24]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d00a      	beq.n	800fbfc <tcp_process+0x400>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbea:	699b      	ldr	r3, [r3, #24]
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	6910      	ldr	r0, [r2, #16]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	6879      	ldr	r1, [r7, #4]
 800fbf4:	4798      	blx	r3
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	76bb      	strb	r3, [r7, #26]
 800fbfa:	e001      	b.n	800fc00 <tcp_process+0x404>
 800fbfc:	23f0      	movs	r3, #240	; 0xf0
 800fbfe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fc00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d00a      	beq.n	800fc1e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fc08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fc0c:	f113 0f0d 	cmn.w	r3, #13
 800fc10:	d002      	beq.n	800fc18 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f7fd fce8 	bl	800d5e8 <tcp_abort>
            }
            return ERR_ABRT;
 800fc18:	f06f 030c 	mvn.w	r3, #12
 800fc1c:	e1ce      	b.n	800ffbc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 fae0 	bl	80101e4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fc24:	4b63      	ldr	r3, [pc, #396]	; (800fdb4 <tcp_process+0x5b8>)
 800fc26:	881b      	ldrh	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d005      	beq.n	800fc38 <tcp_process+0x43c>
            recv_acked--;
 800fc2c:	4b61      	ldr	r3, [pc, #388]	; (800fdb4 <tcp_process+0x5b8>)
 800fc2e:	881b      	ldrh	r3, [r3, #0]
 800fc30:	3b01      	subs	r3, #1
 800fc32:	b29a      	uxth	r2, r3
 800fc34:	4b5f      	ldr	r3, [pc, #380]	; (800fdb4 <tcp_process+0x5b8>)
 800fc36:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc3c:	009a      	lsls	r2, r3, #2
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc42:	005b      	lsls	r3, r3, #1
 800fc44:	f241 111c 	movw	r1, #4380	; 0x111c
 800fc48:	428b      	cmp	r3, r1
 800fc4a:	bf38      	it	cc
 800fc4c:	460b      	movcc	r3, r1
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d204      	bcs.n	800fc5c <tcp_process+0x460>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc56:	009b      	lsls	r3, r3, #2
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	e00d      	b.n	800fc78 <tcp_process+0x47c>
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	f241 121c 	movw	r2, #4380	; 0x111c
 800fc66:	4293      	cmp	r3, r2
 800fc68:	d904      	bls.n	800fc74 <tcp_process+0x478>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc6e:	005b      	lsls	r3, r3, #1
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	e001      	b.n	800fc78 <tcp_process+0x47c>
 800fc74:	f241 131c 	movw	r3, #4380	; 0x111c
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fc7e:	4b4e      	ldr	r3, [pc, #312]	; (800fdb8 <tcp_process+0x5bc>)
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	f003 0320 	and.w	r3, r3, #32
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d037      	beq.n	800fcfa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	8b5b      	ldrh	r3, [r3, #26]
 800fc8e:	f043 0302 	orr.w	r3, r3, #2
 800fc92:	b29a      	uxth	r2, r3
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2207      	movs	r2, #7
 800fc9c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fc9e:	e02c      	b.n	800fcfa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fca0:	4b3b      	ldr	r3, [pc, #236]	; (800fd90 <tcp_process+0x594>)
 800fca2:	6819      	ldr	r1, [r3, #0]
 800fca4:	4b3b      	ldr	r3, [pc, #236]	; (800fd94 <tcp_process+0x598>)
 800fca6:	881b      	ldrh	r3, [r3, #0]
 800fca8:	461a      	mov	r2, r3
 800fcaa:	4b3b      	ldr	r3, [pc, #236]	; (800fd98 <tcp_process+0x59c>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcb0:	4b3a      	ldr	r3, [pc, #232]	; (800fd9c <tcp_process+0x5a0>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcb4:	885b      	ldrh	r3, [r3, #2]
 800fcb6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcb8:	4a38      	ldr	r2, [pc, #224]	; (800fd9c <tcp_process+0x5a0>)
 800fcba:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcbc:	8812      	ldrh	r2, [r2, #0]
 800fcbe:	b292      	uxth	r2, r2
 800fcc0:	9202      	str	r2, [sp, #8]
 800fcc2:	9301      	str	r3, [sp, #4]
 800fcc4:	4b36      	ldr	r3, [pc, #216]	; (800fda0 <tcp_process+0x5a4>)
 800fcc6:	9300      	str	r3, [sp, #0]
 800fcc8:	4b36      	ldr	r3, [pc, #216]	; (800fda4 <tcp_process+0x5a8>)
 800fcca:	4602      	mov	r2, r0
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f003 f829 	bl	8012d24 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fcd2:	e167      	b.n	800ffa4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fcd4:	4b2d      	ldr	r3, [pc, #180]	; (800fd8c <tcp_process+0x590>)
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	f003 0302 	and.w	r3, r3, #2
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	f000 8161 	beq.w	800ffa4 <tcp_process+0x7a8>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce6:	1e5a      	subs	r2, r3, #1
 800fce8:	4b2b      	ldr	r3, [pc, #172]	; (800fd98 <tcp_process+0x59c>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	429a      	cmp	r2, r3
 800fcee:	f040 8159 	bne.w	800ffa4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f002 fe10 	bl	8012918 <tcp_rexmit>
      break;
 800fcf8:	e154      	b.n	800ffa4 <tcp_process+0x7a8>
 800fcfa:	e153      	b.n	800ffa4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f000 fa71 	bl	80101e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fd02:	4b2d      	ldr	r3, [pc, #180]	; (800fdb8 <tcp_process+0x5bc>)
 800fd04:	781b      	ldrb	r3, [r3, #0]
 800fd06:	f003 0320 	and.w	r3, r3, #32
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	f000 814c 	beq.w	800ffa8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	8b5b      	ldrh	r3, [r3, #26]
 800fd14:	f043 0302 	orr.w	r3, r3, #2
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2207      	movs	r2, #7
 800fd22:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fd24:	e140      	b.n	800ffa8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 fa5c 	bl	80101e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fd2c:	4b22      	ldr	r3, [pc, #136]	; (800fdb8 <tcp_process+0x5bc>)
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	f003 0320 	and.w	r3, r3, #32
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d071      	beq.n	800fe1c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd38:	4b14      	ldr	r3, [pc, #80]	; (800fd8c <tcp_process+0x590>)
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	f003 0310 	and.w	r3, r3, #16
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d060      	beq.n	800fe06 <tcp_process+0x60a>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd48:	4b11      	ldr	r3, [pc, #68]	; (800fd90 <tcp_process+0x594>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d15a      	bne.n	800fe06 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d156      	bne.n	800fe06 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	8b5b      	ldrh	r3, [r3, #26]
 800fd5c:	f043 0302 	orr.w	r3, r3, #2
 800fd60:	b29a      	uxth	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f7fe fdbc 	bl	800e8e4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fd6c:	4b13      	ldr	r3, [pc, #76]	; (800fdbc <tcp_process+0x5c0>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	687a      	ldr	r2, [r7, #4]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d105      	bne.n	800fd82 <tcp_process+0x586>
 800fd76:	4b11      	ldr	r3, [pc, #68]	; (800fdbc <tcp_process+0x5c0>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	68db      	ldr	r3, [r3, #12]
 800fd7c:	4a0f      	ldr	r2, [pc, #60]	; (800fdbc <tcp_process+0x5c0>)
 800fd7e:	6013      	str	r3, [r2, #0]
 800fd80:	e02e      	b.n	800fde0 <tcp_process+0x5e4>
 800fd82:	4b0e      	ldr	r3, [pc, #56]	; (800fdbc <tcp_process+0x5c0>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	617b      	str	r3, [r7, #20]
 800fd88:	e027      	b.n	800fdda <tcp_process+0x5de>
 800fd8a:	bf00      	nop
 800fd8c:	200115a4 	.word	0x200115a4
 800fd90:	2001159c 	.word	0x2001159c
 800fd94:	200115a2 	.word	0x200115a2
 800fd98:	20011598 	.word	0x20011598
 800fd9c:	20011588 	.word	0x20011588
 800fda0:	2000ddfc 	.word	0x2000ddfc
 800fda4:	2000de00 	.word	0x2000de00
 800fda8:	0801bab8 	.word	0x0801bab8
 800fdac:	0801bd58 	.word	0x0801bd58
 800fdb0:	0801bb04 	.word	0x0801bb04
 800fdb4:	200115a0 	.word	0x200115a0
 800fdb8:	200115a5 	.word	0x200115a5
 800fdbc:	2001156c 	.word	0x2001156c
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	68db      	ldr	r3, [r3, #12]
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d104      	bne.n	800fdd4 <tcp_process+0x5d8>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	68da      	ldr	r2, [r3, #12]
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	60da      	str	r2, [r3, #12]
 800fdd2:	e005      	b.n	800fde0 <tcp_process+0x5e4>
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	68db      	ldr	r3, [r3, #12]
 800fdd8:	617b      	str	r3, [r7, #20]
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d1ef      	bne.n	800fdc0 <tcp_process+0x5c4>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2200      	movs	r2, #0
 800fde4:	60da      	str	r2, [r3, #12]
 800fde6:	4b77      	ldr	r3, [pc, #476]	; (800ffc4 <tcp_process+0x7c8>)
 800fde8:	2201      	movs	r2, #1
 800fdea:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	220a      	movs	r2, #10
 800fdf0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fdf2:	4b75      	ldr	r3, [pc, #468]	; (800ffc8 <tcp_process+0x7cc>)
 800fdf4:	681a      	ldr	r2, [r3, #0]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	60da      	str	r2, [r3, #12]
 800fdfa:	4a73      	ldr	r2, [pc, #460]	; (800ffc8 <tcp_process+0x7cc>)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6013      	str	r3, [r2, #0]
 800fe00:	f003 f952 	bl	80130a8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fe04:	e0d2      	b.n	800ffac <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	8b5b      	ldrh	r3, [r3, #26]
 800fe0a:	f043 0302 	orr.w	r3, r3, #2
 800fe0e:	b29a      	uxth	r2, r3
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2208      	movs	r2, #8
 800fe18:	751a      	strb	r2, [r3, #20]
      break;
 800fe1a:	e0c7      	b.n	800ffac <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fe1c:	4b6b      	ldr	r3, [pc, #428]	; (800ffcc <tcp_process+0x7d0>)
 800fe1e:	781b      	ldrb	r3, [r3, #0]
 800fe20:	f003 0310 	and.w	r3, r3, #16
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f000 80c1 	beq.w	800ffac <tcp_process+0x7b0>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe2e:	4b68      	ldr	r3, [pc, #416]	; (800ffd0 <tcp_process+0x7d4>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	f040 80ba 	bne.w	800ffac <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	f040 80b5 	bne.w	800ffac <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2206      	movs	r2, #6
 800fe46:	751a      	strb	r2, [r3, #20]
      break;
 800fe48:	e0b0      	b.n	800ffac <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 f9ca 	bl	80101e4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fe50:	4b60      	ldr	r3, [pc, #384]	; (800ffd4 <tcp_process+0x7d8>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	f003 0320 	and.w	r3, r3, #32
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	f000 80a9 	beq.w	800ffb0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	8b5b      	ldrh	r3, [r3, #26]
 800fe62:	f043 0302 	orr.w	r3, r3, #2
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7fe fd39 	bl	800e8e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fe72:	4b59      	ldr	r3, [pc, #356]	; (800ffd8 <tcp_process+0x7dc>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d105      	bne.n	800fe88 <tcp_process+0x68c>
 800fe7c:	4b56      	ldr	r3, [pc, #344]	; (800ffd8 <tcp_process+0x7dc>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	4a55      	ldr	r2, [pc, #340]	; (800ffd8 <tcp_process+0x7dc>)
 800fe84:	6013      	str	r3, [r2, #0]
 800fe86:	e013      	b.n	800feb0 <tcp_process+0x6b4>
 800fe88:	4b53      	ldr	r3, [pc, #332]	; (800ffd8 <tcp_process+0x7dc>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	613b      	str	r3, [r7, #16]
 800fe8e:	e00c      	b.n	800feaa <tcp_process+0x6ae>
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d104      	bne.n	800fea4 <tcp_process+0x6a8>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	68da      	ldr	r2, [r3, #12]
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	60da      	str	r2, [r3, #12]
 800fea2:	e005      	b.n	800feb0 <tcp_process+0x6b4>
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	68db      	ldr	r3, [r3, #12]
 800fea8:	613b      	str	r3, [r7, #16]
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1ef      	bne.n	800fe90 <tcp_process+0x694>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2200      	movs	r2, #0
 800feb4:	60da      	str	r2, [r3, #12]
 800feb6:	4b43      	ldr	r3, [pc, #268]	; (800ffc4 <tcp_process+0x7c8>)
 800feb8:	2201      	movs	r2, #1
 800feba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	220a      	movs	r2, #10
 800fec0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fec2:	4b41      	ldr	r3, [pc, #260]	; (800ffc8 <tcp_process+0x7cc>)
 800fec4:	681a      	ldr	r2, [r3, #0]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	60da      	str	r2, [r3, #12]
 800feca:	4a3f      	ldr	r2, [pc, #252]	; (800ffc8 <tcp_process+0x7cc>)
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6013      	str	r3, [r2, #0]
 800fed0:	f003 f8ea 	bl	80130a8 <tcp_timer_needed>
      }
      break;
 800fed4:	e06c      	b.n	800ffb0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f000 f984 	bl	80101e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fedc:	4b3b      	ldr	r3, [pc, #236]	; (800ffcc <tcp_process+0x7d0>)
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	f003 0310 	and.w	r3, r3, #16
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d065      	beq.n	800ffb4 <tcp_process+0x7b8>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800feec:	4b38      	ldr	r3, [pc, #224]	; (800ffd0 <tcp_process+0x7d4>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d15f      	bne.n	800ffb4 <tcp_process+0x7b8>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d15b      	bne.n	800ffb4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f7fe fcf1 	bl	800e8e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ff02:	4b35      	ldr	r3, [pc, #212]	; (800ffd8 <tcp_process+0x7dc>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	429a      	cmp	r2, r3
 800ff0a:	d105      	bne.n	800ff18 <tcp_process+0x71c>
 800ff0c:	4b32      	ldr	r3, [pc, #200]	; (800ffd8 <tcp_process+0x7dc>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	68db      	ldr	r3, [r3, #12]
 800ff12:	4a31      	ldr	r2, [pc, #196]	; (800ffd8 <tcp_process+0x7dc>)
 800ff14:	6013      	str	r3, [r2, #0]
 800ff16:	e013      	b.n	800ff40 <tcp_process+0x744>
 800ff18:	4b2f      	ldr	r3, [pc, #188]	; (800ffd8 <tcp_process+0x7dc>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	60fb      	str	r3, [r7, #12]
 800ff1e:	e00c      	b.n	800ff3a <tcp_process+0x73e>
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	68db      	ldr	r3, [r3, #12]
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d104      	bne.n	800ff34 <tcp_process+0x738>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	68da      	ldr	r2, [r3, #12]
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	60da      	str	r2, [r3, #12]
 800ff32:	e005      	b.n	800ff40 <tcp_process+0x744>
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	60fb      	str	r3, [r7, #12]
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d1ef      	bne.n	800ff20 <tcp_process+0x724>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	60da      	str	r2, [r3, #12]
 800ff46:	4b1f      	ldr	r3, [pc, #124]	; (800ffc4 <tcp_process+0x7c8>)
 800ff48:	2201      	movs	r2, #1
 800ff4a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	220a      	movs	r2, #10
 800ff50:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ff52:	4b1d      	ldr	r3, [pc, #116]	; (800ffc8 <tcp_process+0x7cc>)
 800ff54:	681a      	ldr	r2, [r3, #0]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	60da      	str	r2, [r3, #12]
 800ff5a:	4a1b      	ldr	r2, [pc, #108]	; (800ffc8 <tcp_process+0x7cc>)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6013      	str	r3, [r2, #0]
 800ff60:	f003 f8a2 	bl	80130a8 <tcp_timer_needed>
      }
      break;
 800ff64:	e026      	b.n	800ffb4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f000 f93c 	bl	80101e4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ff6c:	4b17      	ldr	r3, [pc, #92]	; (800ffcc <tcp_process+0x7d0>)
 800ff6e:	781b      	ldrb	r3, [r3, #0]
 800ff70:	f003 0310 	and.w	r3, r3, #16
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d01f      	beq.n	800ffb8 <tcp_process+0x7bc>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff7c:	4b14      	ldr	r3, [pc, #80]	; (800ffd0 <tcp_process+0x7d4>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d119      	bne.n	800ffb8 <tcp_process+0x7bc>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d115      	bne.n	800ffb8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ff8c:	4b11      	ldr	r3, [pc, #68]	; (800ffd4 <tcp_process+0x7d8>)
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	f043 0310 	orr.w	r3, r3, #16
 800ff94:	b2da      	uxtb	r2, r3
 800ff96:	4b0f      	ldr	r3, [pc, #60]	; (800ffd4 <tcp_process+0x7d8>)
 800ff98:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ff9a:	e00d      	b.n	800ffb8 <tcp_process+0x7bc>
    default:
      break;
 800ff9c:	bf00      	nop
 800ff9e:	e00c      	b.n	800ffba <tcp_process+0x7be>
      break;
 800ffa0:	bf00      	nop
 800ffa2:	e00a      	b.n	800ffba <tcp_process+0x7be>
      break;
 800ffa4:	bf00      	nop
 800ffa6:	e008      	b.n	800ffba <tcp_process+0x7be>
      break;
 800ffa8:	bf00      	nop
 800ffaa:	e006      	b.n	800ffba <tcp_process+0x7be>
      break;
 800ffac:	bf00      	nop
 800ffae:	e004      	b.n	800ffba <tcp_process+0x7be>
      break;
 800ffb0:	bf00      	nop
 800ffb2:	e002      	b.n	800ffba <tcp_process+0x7be>
      break;
 800ffb4:	bf00      	nop
 800ffb6:	e000      	b.n	800ffba <tcp_process+0x7be>
      break;
 800ffb8:	bf00      	nop
  }
  return ERR_OK;
 800ffba:	2300      	movs	r3, #0
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3724      	adds	r7, #36	; 0x24
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd90      	pop	{r4, r7, pc}
 800ffc4:	20011574 	.word	0x20011574
 800ffc8:	20011570 	.word	0x20011570
 800ffcc:	200115a4 	.word	0x200115a4
 800ffd0:	2001159c 	.word	0x2001159c
 800ffd4:	200115a5 	.word	0x200115a5
 800ffd8:	2001156c 	.word	0x2001156c

0800ffdc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ffdc:	b590      	push	{r4, r7, lr}
 800ffde:	b085      	sub	sp, #20
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d106      	bne.n	800fffa <tcp_oos_insert_segment+0x1e>
 800ffec:	4b3b      	ldr	r3, [pc, #236]	; (80100dc <tcp_oos_insert_segment+0x100>)
 800ffee:	f240 421f 	movw	r2, #1055	; 0x41f
 800fff2:	493b      	ldr	r1, [pc, #236]	; (80100e0 <tcp_oos_insert_segment+0x104>)
 800fff4:	483b      	ldr	r0, [pc, #236]	; (80100e4 <tcp_oos_insert_segment+0x108>)
 800fff6:	f008 fae3 	bl	80185c0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	68db      	ldr	r3, [r3, #12]
 800fffe:	899b      	ldrh	r3, [r3, #12]
 8010000:	b29b      	uxth	r3, r3
 8010002:	4618      	mov	r0, r3
 8010004:	f7fb f8bc 	bl	800b180 <lwip_htons>
 8010008:	4603      	mov	r3, r0
 801000a:	b2db      	uxtb	r3, r3
 801000c:	f003 0301 	and.w	r3, r3, #1
 8010010:	2b00      	cmp	r3, #0
 8010012:	d028      	beq.n	8010066 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010014:	6838      	ldr	r0, [r7, #0]
 8010016:	f7fe f977 	bl	800e308 <tcp_segs_free>
    next = NULL;
 801001a:	2300      	movs	r3, #0
 801001c:	603b      	str	r3, [r7, #0]
 801001e:	e056      	b.n	80100ce <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	68db      	ldr	r3, [r3, #12]
 8010024:	899b      	ldrh	r3, [r3, #12]
 8010026:	b29b      	uxth	r3, r3
 8010028:	4618      	mov	r0, r3
 801002a:	f7fb f8a9 	bl	800b180 <lwip_htons>
 801002e:	4603      	mov	r3, r0
 8010030:	b2db      	uxtb	r3, r3
 8010032:	f003 0301 	and.w	r3, r3, #1
 8010036:	2b00      	cmp	r3, #0
 8010038:	d00d      	beq.n	8010056 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	68db      	ldr	r3, [r3, #12]
 801003e:	899b      	ldrh	r3, [r3, #12]
 8010040:	b29c      	uxth	r4, r3
 8010042:	2001      	movs	r0, #1
 8010044:	f7fb f89c 	bl	800b180 <lwip_htons>
 8010048:	4603      	mov	r3, r0
 801004a:	461a      	mov	r2, r3
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	4322      	orrs	r2, r4
 8010052:	b292      	uxth	r2, r2
 8010054:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010060:	68f8      	ldr	r0, [r7, #12]
 8010062:	f7fe f966 	bl	800e332 <tcp_seg_free>
    while (next &&
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d00e      	beq.n	801008a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	891b      	ldrh	r3, [r3, #8]
 8010070:	461a      	mov	r2, r3
 8010072:	4b1d      	ldr	r3, [pc, #116]	; (80100e8 <tcp_oos_insert_segment+0x10c>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	441a      	add	r2, r3
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	6839      	ldr	r1, [r7, #0]
 8010080:	8909      	ldrh	r1, [r1, #8]
 8010082:	440b      	add	r3, r1
 8010084:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010086:	2b00      	cmp	r3, #0
 8010088:	daca      	bge.n	8010020 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d01e      	beq.n	80100ce <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	891b      	ldrh	r3, [r3, #8]
 8010094:	461a      	mov	r2, r3
 8010096:	4b14      	ldr	r3, [pc, #80]	; (80100e8 <tcp_oos_insert_segment+0x10c>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	441a      	add	r2, r3
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	dd12      	ble.n	80100ce <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	68db      	ldr	r3, [r3, #12]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	4b0d      	ldr	r3, [pc, #52]	; (80100e8 <tcp_oos_insert_segment+0x10c>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	b29a      	uxth	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	685a      	ldr	r2, [r3, #4]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	891b      	ldrh	r3, [r3, #8]
 80100c6:	4619      	mov	r1, r3
 80100c8:	4610      	mov	r0, r2
 80100ca:	f7fc fb07 	bl	800c6dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	683a      	ldr	r2, [r7, #0]
 80100d2:	601a      	str	r2, [r3, #0]
}
 80100d4:	bf00      	nop
 80100d6:	3714      	adds	r7, #20
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd90      	pop	{r4, r7, pc}
 80100dc:	0801bab8 	.word	0x0801bab8
 80100e0:	0801bd78 	.word	0x0801bd78
 80100e4:	0801bb04 	.word	0x0801bb04
 80100e8:	20011598 	.word	0x20011598

080100ec <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80100ec:	b5b0      	push	{r4, r5, r7, lr}
 80100ee:	b086      	sub	sp, #24
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	607a      	str	r2, [r7, #4]
 80100f8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80100fa:	e03e      	b.n	801017a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	685b      	ldr	r3, [r3, #4]
 801010a:	4618      	mov	r0, r3
 801010c:	f7fc fcfa 	bl	800cb04 <pbuf_clen>
 8010110:	4603      	mov	r3, r0
 8010112:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801011a:	8a7a      	ldrh	r2, [r7, #18]
 801011c:	429a      	cmp	r2, r3
 801011e:	d906      	bls.n	801012e <tcp_free_acked_segments+0x42>
 8010120:	4b2a      	ldr	r3, [pc, #168]	; (80101cc <tcp_free_acked_segments+0xe0>)
 8010122:	f240 4257 	movw	r2, #1111	; 0x457
 8010126:	492a      	ldr	r1, [pc, #168]	; (80101d0 <tcp_free_acked_segments+0xe4>)
 8010128:	482a      	ldr	r0, [pc, #168]	; (80101d4 <tcp_free_acked_segments+0xe8>)
 801012a:	f008 fa49 	bl	80185c0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010134:	8a7b      	ldrh	r3, [r7, #18]
 8010136:	1ad3      	subs	r3, r2, r3
 8010138:	b29a      	uxth	r2, r3
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	891a      	ldrh	r2, [r3, #8]
 8010144:	4b24      	ldr	r3, [pc, #144]	; (80101d8 <tcp_free_acked_segments+0xec>)
 8010146:	881b      	ldrh	r3, [r3, #0]
 8010148:	4413      	add	r3, r2
 801014a:	b29a      	uxth	r2, r3
 801014c:	4b22      	ldr	r3, [pc, #136]	; (80101d8 <tcp_free_acked_segments+0xec>)
 801014e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010150:	6978      	ldr	r0, [r7, #20]
 8010152:	f7fe f8ee 	bl	800e332 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801015c:	2b00      	cmp	r3, #0
 801015e:	d00c      	beq.n	801017a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d109      	bne.n	801017a <tcp_free_acked_segments+0x8e>
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d106      	bne.n	801017a <tcp_free_acked_segments+0x8e>
 801016c:	4b17      	ldr	r3, [pc, #92]	; (80101cc <tcp_free_acked_segments+0xe0>)
 801016e:	f240 4261 	movw	r2, #1121	; 0x461
 8010172:	491a      	ldr	r1, [pc, #104]	; (80101dc <tcp_free_acked_segments+0xf0>)
 8010174:	4817      	ldr	r0, [pc, #92]	; (80101d4 <tcp_free_acked_segments+0xe8>)
 8010176:	f008 fa23 	bl	80185c0 <iprintf>
  while (seg_list != NULL &&
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d020      	beq.n	80101c2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	68db      	ldr	r3, [r3, #12]
 8010184:	685b      	ldr	r3, [r3, #4]
 8010186:	4618      	mov	r0, r3
 8010188:	f7fb f80f 	bl	800b1aa <lwip_htonl>
 801018c:	4604      	mov	r4, r0
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	891b      	ldrh	r3, [r3, #8]
 8010192:	461d      	mov	r5, r3
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	899b      	ldrh	r3, [r3, #12]
 801019a:	b29b      	uxth	r3, r3
 801019c:	4618      	mov	r0, r3
 801019e:	f7fa ffef 	bl	800b180 <lwip_htons>
 80101a2:	4603      	mov	r3, r0
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	f003 0303 	and.w	r3, r3, #3
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d001      	beq.n	80101b2 <tcp_free_acked_segments+0xc6>
 80101ae:	2301      	movs	r3, #1
 80101b0:	e000      	b.n	80101b4 <tcp_free_acked_segments+0xc8>
 80101b2:	2300      	movs	r3, #0
 80101b4:	442b      	add	r3, r5
 80101b6:	18e2      	adds	r2, r4, r3
 80101b8:	4b09      	ldr	r3, [pc, #36]	; (80101e0 <tcp_free_acked_segments+0xf4>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80101be:	2b00      	cmp	r3, #0
 80101c0:	dd9c      	ble.n	80100fc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80101c2:	68bb      	ldr	r3, [r7, #8]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3718      	adds	r7, #24
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bdb0      	pop	{r4, r5, r7, pc}
 80101cc:	0801bab8 	.word	0x0801bab8
 80101d0:	0801bda0 	.word	0x0801bda0
 80101d4:	0801bb04 	.word	0x0801bb04
 80101d8:	200115a0 	.word	0x200115a0
 80101dc:	0801bdc8 	.word	0x0801bdc8
 80101e0:	2001159c 	.word	0x2001159c

080101e4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80101e4:	b5b0      	push	{r4, r5, r7, lr}
 80101e6:	b094      	sub	sp, #80	; 0x50
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80101ec:	2300      	movs	r3, #0
 80101ee:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d106      	bne.n	8010204 <tcp_receive+0x20>
 80101f6:	4b91      	ldr	r3, [pc, #580]	; (801043c <tcp_receive+0x258>)
 80101f8:	f240 427b 	movw	r2, #1147	; 0x47b
 80101fc:	4990      	ldr	r1, [pc, #576]	; (8010440 <tcp_receive+0x25c>)
 80101fe:	4891      	ldr	r0, [pc, #580]	; (8010444 <tcp_receive+0x260>)
 8010200:	f008 f9de 	bl	80185c0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	7d1b      	ldrb	r3, [r3, #20]
 8010208:	2b03      	cmp	r3, #3
 801020a:	d806      	bhi.n	801021a <tcp_receive+0x36>
 801020c:	4b8b      	ldr	r3, [pc, #556]	; (801043c <tcp_receive+0x258>)
 801020e:	f240 427c 	movw	r2, #1148	; 0x47c
 8010212:	498d      	ldr	r1, [pc, #564]	; (8010448 <tcp_receive+0x264>)
 8010214:	488b      	ldr	r0, [pc, #556]	; (8010444 <tcp_receive+0x260>)
 8010216:	f008 f9d3 	bl	80185c0 <iprintf>

  if (flags & TCP_ACK) {
 801021a:	4b8c      	ldr	r3, [pc, #560]	; (801044c <tcp_receive+0x268>)
 801021c:	781b      	ldrb	r3, [r3, #0]
 801021e:	f003 0310 	and.w	r3, r3, #16
 8010222:	2b00      	cmp	r3, #0
 8010224:	f000 8264 	beq.w	80106f0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801022e:	461a      	mov	r2, r3
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010234:	4413      	add	r3, r2
 8010236:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801023c:	4b84      	ldr	r3, [pc, #528]	; (8010450 <tcp_receive+0x26c>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	2b00      	cmp	r3, #0
 8010244:	db1b      	blt.n	801027e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801024a:	4b81      	ldr	r3, [pc, #516]	; (8010450 <tcp_receive+0x26c>)
 801024c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801024e:	429a      	cmp	r2, r3
 8010250:	d106      	bne.n	8010260 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010256:	4b7f      	ldr	r3, [pc, #508]	; (8010454 <tcp_receive+0x270>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	1ad3      	subs	r3, r2, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	db0e      	blt.n	801027e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010264:	4b7b      	ldr	r3, [pc, #492]	; (8010454 <tcp_receive+0x270>)
 8010266:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010268:	429a      	cmp	r2, r3
 801026a:	d125      	bne.n	80102b8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801026c:	4b7a      	ldr	r3, [pc, #488]	; (8010458 <tcp_receive+0x274>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	89db      	ldrh	r3, [r3, #14]
 8010272:	b29a      	uxth	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801027a:	429a      	cmp	r2, r3
 801027c:	d91c      	bls.n	80102b8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801027e:	4b76      	ldr	r3, [pc, #472]	; (8010458 <tcp_receive+0x274>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	89db      	ldrh	r3, [r3, #14]
 8010284:	b29a      	uxth	r2, r3
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010298:	429a      	cmp	r2, r3
 801029a:	d205      	bcs.n	80102a8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80102a8:	4b69      	ldr	r3, [pc, #420]	; (8010450 <tcp_receive+0x26c>)
 80102aa:	681a      	ldr	r2, [r3, #0]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80102b0:	4b68      	ldr	r3, [pc, #416]	; (8010454 <tcp_receive+0x270>)
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80102b8:	4b66      	ldr	r3, [pc, #408]	; (8010454 <tcp_receive+0x270>)
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	dc58      	bgt.n	8010378 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80102c6:	4b65      	ldr	r3, [pc, #404]	; (801045c <tcp_receive+0x278>)
 80102c8:	881b      	ldrh	r3, [r3, #0]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d14b      	bne.n	8010366 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102d2:	687a      	ldr	r2, [r7, #4]
 80102d4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80102d8:	4413      	add	r3, r2
 80102da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102dc:	429a      	cmp	r2, r3
 80102de:	d142      	bne.n	8010366 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	db3d      	blt.n	8010366 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80102ee:	4b59      	ldr	r3, [pc, #356]	; (8010454 <tcp_receive+0x270>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d137      	bne.n	8010366 <tcp_receive+0x182>
              found_dupack = 1;
 80102f6:	2301      	movs	r3, #1
 80102f8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010300:	2bff      	cmp	r3, #255	; 0xff
 8010302:	d007      	beq.n	8010314 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801030a:	3301      	adds	r3, #1
 801030c:	b2da      	uxtb	r2, r3
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801031a:	2b03      	cmp	r3, #3
 801031c:	d91b      	bls.n	8010356 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010328:	4413      	add	r3, r2
 801032a:	b29a      	uxth	r2, r3
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010332:	429a      	cmp	r2, r3
 8010334:	d30a      	bcc.n	801034c <tcp_receive+0x168>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010340:	4413      	add	r3, r2
 8010342:	b29a      	uxth	r2, r3
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801034a:	e004      	b.n	8010356 <tcp_receive+0x172>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010352:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801035c:	2b02      	cmp	r3, #2
 801035e:	d902      	bls.n	8010366 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f002 fb45 	bl	80129f0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010368:	2b00      	cmp	r3, #0
 801036a:	f040 8161 	bne.w	8010630 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2200      	movs	r2, #0
 8010372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010376:	e15b      	b.n	8010630 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010378:	4b36      	ldr	r3, [pc, #216]	; (8010454 <tcp_receive+0x270>)
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	3b01      	subs	r3, #1
 8010384:	2b00      	cmp	r3, #0
 8010386:	f2c0 814e 	blt.w	8010626 <tcp_receive+0x442>
 801038a:	4b32      	ldr	r3, [pc, #200]	; (8010454 <tcp_receive+0x270>)
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010392:	1ad3      	subs	r3, r2, r3
 8010394:	2b00      	cmp	r3, #0
 8010396:	f300 8146 	bgt.w	8010626 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	8b5b      	ldrh	r3, [r3, #26]
 801039e:	f003 0304 	and.w	r3, r3, #4
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d010      	beq.n	80103c8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	8b5b      	ldrh	r3, [r3, #26]
 80103aa:	f023 0304 	bic.w	r3, r3, #4
 80103ae:	b29a      	uxth	r2, r3
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2200      	movs	r2, #0
 80103c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80103d6:	10db      	asrs	r3, r3, #3
 80103d8:	b21b      	sxth	r3, r3
 80103da:	b29a      	uxth	r2, r3
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	4413      	add	r3, r2
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	b21a      	sxth	r2, r3
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80103f0:	4b18      	ldr	r3, [pc, #96]	; (8010454 <tcp_receive+0x270>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	b29a      	uxth	r2, r3
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	1ad3      	subs	r3, r2, r3
 80103fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2200      	movs	r2, #0
 8010404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010408:	4b12      	ldr	r3, [pc, #72]	; (8010454 <tcp_receive+0x270>)
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	7d1b      	ldrb	r3, [r3, #20]
 8010414:	2b03      	cmp	r3, #3
 8010416:	f240 8097 	bls.w	8010548 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010426:	429a      	cmp	r2, r3
 8010428:	d245      	bcs.n	80104b6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	8b5b      	ldrh	r3, [r3, #26]
 801042e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010432:	2b00      	cmp	r3, #0
 8010434:	d014      	beq.n	8010460 <tcp_receive+0x27c>
 8010436:	2301      	movs	r3, #1
 8010438:	e013      	b.n	8010462 <tcp_receive+0x27e>
 801043a:	bf00      	nop
 801043c:	0801bab8 	.word	0x0801bab8
 8010440:	0801bde8 	.word	0x0801bde8
 8010444:	0801bb04 	.word	0x0801bb04
 8010448:	0801be04 	.word	0x0801be04
 801044c:	200115a4 	.word	0x200115a4
 8010450:	20011598 	.word	0x20011598
 8010454:	2001159c 	.word	0x2001159c
 8010458:	20011588 	.word	0x20011588
 801045c:	200115a2 	.word	0x200115a2
 8010460:	2302      	movs	r3, #2
 8010462:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010466:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801046a:	b29a      	uxth	r2, r3
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010470:	fb12 f303 	smulbb	r3, r2, r3
 8010474:	b29b      	uxth	r3, r3
 8010476:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010478:	4293      	cmp	r3, r2
 801047a:	bf28      	it	cs
 801047c:	4613      	movcs	r3, r2
 801047e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010486:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010488:	4413      	add	r3, r2
 801048a:	b29a      	uxth	r2, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010492:	429a      	cmp	r2, r3
 8010494:	d309      	bcc.n	80104aa <tcp_receive+0x2c6>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801049c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801049e:	4413      	add	r3, r2
 80104a0:	b29a      	uxth	r2, r3
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80104a8:	e04e      	b.n	8010548 <tcp_receive+0x364>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80104b4:	e048      	b.n	8010548 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80104bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80104be:	4413      	add	r3, r2
 80104c0:	b29a      	uxth	r2, r3
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d309      	bcc.n	80104e0 <tcp_receive+0x2fc>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80104d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80104d4:	4413      	add	r3, r2
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80104de:	e004      	b.n	80104ea <tcp_receive+0x306>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d326      	bcc.n	8010548 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010506:	1ad3      	subs	r3, r2, r3
 8010508:	b29a      	uxth	r2, r3
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801051a:	4413      	add	r3, r2
 801051c:	b29a      	uxth	r2, r3
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010524:	429a      	cmp	r2, r3
 8010526:	d30a      	bcc.n	801053e <tcp_receive+0x35a>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010532:	4413      	add	r3, r2
 8010534:	b29a      	uxth	r2, r3
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801053c:	e004      	b.n	8010548 <tcp_receive+0x364>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010544:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010550:	4a98      	ldr	r2, [pc, #608]	; (80107b4 <tcp_receive+0x5d0>)
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f7ff fdca 	bl	80100ec <tcp_free_acked_segments>
 8010558:	4602      	mov	r2, r0
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010566:	4a94      	ldr	r2, [pc, #592]	; (80107b8 <tcp_receive+0x5d4>)
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f7ff fdbf 	bl	80100ec <tcp_free_acked_segments>
 801056e:	4602      	mov	r2, r0
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010578:	2b00      	cmp	r3, #0
 801057a:	d104      	bne.n	8010586 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010582:	861a      	strh	r2, [r3, #48]	; 0x30
 8010584:	e002      	b.n	801058c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2200      	movs	r2, #0
 801058a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2200      	movs	r2, #0
 8010590:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010596:	2b00      	cmp	r3, #0
 8010598:	d103      	bne.n	80105a2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80105a8:	4b84      	ldr	r3, [pc, #528]	; (80107bc <tcp_receive+0x5d8>)
 80105aa:	881b      	ldrh	r3, [r3, #0]
 80105ac:	4413      	add	r3, r2
 80105ae:	b29a      	uxth	r2, r3
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	8b5b      	ldrh	r3, [r3, #26]
 80105ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d035      	beq.n	801062e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d118      	bne.n	80105fc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d00c      	beq.n	80105ec <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	4618      	mov	r0, r3
 80105e0:	f7fa fde3 	bl	800b1aa <lwip_htonl>
 80105e4:	4603      	mov	r3, r0
 80105e6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	dc20      	bgt.n	801062e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	8b5b      	ldrh	r3, [r3, #26]
 80105f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105f4:	b29a      	uxth	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80105fa:	e018      	b.n	801062e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010604:	68db      	ldr	r3, [r3, #12]
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	4618      	mov	r0, r3
 801060a:	f7fa fdce 	bl	800b1aa <lwip_htonl>
 801060e:	4603      	mov	r3, r0
 8010610:	1ae3      	subs	r3, r4, r3
 8010612:	2b00      	cmp	r3, #0
 8010614:	dc0b      	bgt.n	801062e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	8b5b      	ldrh	r3, [r3, #26]
 801061a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801061e:	b29a      	uxth	r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010624:	e003      	b.n	801062e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f002 fbce 	bl	8012dc8 <tcp_send_empty_ack>
 801062c:	e000      	b.n	8010630 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801062e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010634:	2b00      	cmp	r3, #0
 8010636:	d05b      	beq.n	80106f0 <tcp_receive+0x50c>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801063c:	4b60      	ldr	r3, [pc, #384]	; (80107c0 <tcp_receive+0x5dc>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	1ad3      	subs	r3, r2, r3
 8010642:	2b00      	cmp	r3, #0
 8010644:	da54      	bge.n	80106f0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010646:	4b5f      	ldr	r3, [pc, #380]	; (80107c4 <tcp_receive+0x5e0>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	b29a      	uxth	r2, r3
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010650:	b29b      	uxth	r3, r3
 8010652:	1ad3      	subs	r3, r2, r3
 8010654:	b29b      	uxth	r3, r3
 8010656:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801065a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010664:	10db      	asrs	r3, r3, #3
 8010666:	b21b      	sxth	r3, r3
 8010668:	b29b      	uxth	r3, r3
 801066a:	1ad3      	subs	r3, r2, r3
 801066c:	b29b      	uxth	r3, r3
 801066e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010678:	b29a      	uxth	r2, r3
 801067a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801067e:	4413      	add	r3, r2
 8010680:	b29b      	uxth	r3, r3
 8010682:	b21a      	sxth	r2, r3
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010688:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801068c:	2b00      	cmp	r3, #0
 801068e:	da05      	bge.n	801069c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010690:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010694:	425b      	negs	r3, r3
 8010696:	b29b      	uxth	r3, r3
 8010698:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801069c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80106a6:	109b      	asrs	r3, r3, #2
 80106a8:	b21b      	sxth	r3, r3
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	1ad3      	subs	r3, r2, r3
 80106ae:	b29b      	uxth	r3, r3
 80106b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80106c0:	4413      	add	r3, r2
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	b21a      	sxth	r2, r3
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80106d0:	10db      	asrs	r3, r3, #3
 80106d2:	b21b      	sxth	r3, r3
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80106dc:	b29b      	uxth	r3, r3
 80106de:	4413      	add	r3, r2
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	b21a      	sxth	r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2200      	movs	r2, #0
 80106ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80106f0:	4b35      	ldr	r3, [pc, #212]	; (80107c8 <tcp_receive+0x5e4>)
 80106f2:	881b      	ldrh	r3, [r3, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	f000 84e2 	beq.w	80110be <tcp_receive+0xeda>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	7d1b      	ldrb	r3, [r3, #20]
 80106fe:	2b06      	cmp	r3, #6
 8010700:	f200 84dd 	bhi.w	80110be <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010708:	4b30      	ldr	r3, [pc, #192]	; (80107cc <tcp_receive+0x5e8>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	1ad3      	subs	r3, r2, r3
 801070e:	3b01      	subs	r3, #1
 8010710:	2b00      	cmp	r3, #0
 8010712:	f2c0 808f 	blt.w	8010834 <tcp_receive+0x650>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801071a:	4b2b      	ldr	r3, [pc, #172]	; (80107c8 <tcp_receive+0x5e4>)
 801071c:	881b      	ldrh	r3, [r3, #0]
 801071e:	4619      	mov	r1, r3
 8010720:	4b2a      	ldr	r3, [pc, #168]	; (80107cc <tcp_receive+0x5e8>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	440b      	add	r3, r1
 8010726:	1ad3      	subs	r3, r2, r3
 8010728:	3301      	adds	r3, #1
 801072a:	2b00      	cmp	r3, #0
 801072c:	f300 8082 	bgt.w	8010834 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010730:	4b27      	ldr	r3, [pc, #156]	; (80107d0 <tcp_receive+0x5ec>)
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801073a:	4b24      	ldr	r3, [pc, #144]	; (80107cc <tcp_receive+0x5e8>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	1ad3      	subs	r3, r2, r3
 8010740:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010742:	4b23      	ldr	r3, [pc, #140]	; (80107d0 <tcp_receive+0x5ec>)
 8010744:	685b      	ldr	r3, [r3, #4]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d106      	bne.n	8010758 <tcp_receive+0x574>
 801074a:	4b22      	ldr	r3, [pc, #136]	; (80107d4 <tcp_receive+0x5f0>)
 801074c:	f240 5294 	movw	r2, #1428	; 0x594
 8010750:	4921      	ldr	r1, [pc, #132]	; (80107d8 <tcp_receive+0x5f4>)
 8010752:	4822      	ldr	r0, [pc, #136]	; (80107dc <tcp_receive+0x5f8>)
 8010754:	f007 ff34 	bl	80185c0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801075e:	4293      	cmp	r3, r2
 8010760:	d906      	bls.n	8010770 <tcp_receive+0x58c>
 8010762:	4b1c      	ldr	r3, [pc, #112]	; (80107d4 <tcp_receive+0x5f0>)
 8010764:	f240 5295 	movw	r2, #1429	; 0x595
 8010768:	491d      	ldr	r1, [pc, #116]	; (80107e0 <tcp_receive+0x5fc>)
 801076a:	481c      	ldr	r0, [pc, #112]	; (80107dc <tcp_receive+0x5f8>)
 801076c:	f007 ff28 	bl	80185c0 <iprintf>
      off = (u16_t)off32;
 8010770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010772:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010776:	4b16      	ldr	r3, [pc, #88]	; (80107d0 <tcp_receive+0x5ec>)
 8010778:	685b      	ldr	r3, [r3, #4]
 801077a:	891b      	ldrh	r3, [r3, #8]
 801077c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010780:	429a      	cmp	r2, r3
 8010782:	d906      	bls.n	8010792 <tcp_receive+0x5ae>
 8010784:	4b13      	ldr	r3, [pc, #76]	; (80107d4 <tcp_receive+0x5f0>)
 8010786:	f240 5297 	movw	r2, #1431	; 0x597
 801078a:	4916      	ldr	r1, [pc, #88]	; (80107e4 <tcp_receive+0x600>)
 801078c:	4813      	ldr	r0, [pc, #76]	; (80107dc <tcp_receive+0x5f8>)
 801078e:	f007 ff17 	bl	80185c0 <iprintf>
      inseg.len -= off;
 8010792:	4b0f      	ldr	r3, [pc, #60]	; (80107d0 <tcp_receive+0x5ec>)
 8010794:	891a      	ldrh	r2, [r3, #8]
 8010796:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801079a:	1ad3      	subs	r3, r2, r3
 801079c:	b29a      	uxth	r2, r3
 801079e:	4b0c      	ldr	r3, [pc, #48]	; (80107d0 <tcp_receive+0x5ec>)
 80107a0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80107a2:	4b0b      	ldr	r3, [pc, #44]	; (80107d0 <tcp_receive+0x5ec>)
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	891a      	ldrh	r2, [r3, #8]
 80107a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107ac:	1ad3      	subs	r3, r2, r3
 80107ae:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80107b0:	e02a      	b.n	8010808 <tcp_receive+0x624>
 80107b2:	bf00      	nop
 80107b4:	0801be20 	.word	0x0801be20
 80107b8:	0801be28 	.word	0x0801be28
 80107bc:	200115a0 	.word	0x200115a0
 80107c0:	2001159c 	.word	0x2001159c
 80107c4:	20011560 	.word	0x20011560
 80107c8:	200115a2 	.word	0x200115a2
 80107cc:	20011598 	.word	0x20011598
 80107d0:	20011578 	.word	0x20011578
 80107d4:	0801bab8 	.word	0x0801bab8
 80107d8:	0801be30 	.word	0x0801be30
 80107dc:	0801bb04 	.word	0x0801bb04
 80107e0:	0801be40 	.word	0x0801be40
 80107e4:	0801be50 	.word	0x0801be50
        off -= p->len;
 80107e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107ea:	895b      	ldrh	r3, [r3, #10]
 80107ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107f0:	1ad3      	subs	r3, r2, r3
 80107f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80107f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80107fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80107fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107fe:	2200      	movs	r2, #0
 8010800:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801080a:	895b      	ldrh	r3, [r3, #10]
 801080c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010810:	429a      	cmp	r2, r3
 8010812:	d8e9      	bhi.n	80107e8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010814:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010818:	4619      	mov	r1, r3
 801081a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801081c:	f7fc f85e 	bl	800c8dc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010824:	4a91      	ldr	r2, [pc, #580]	; (8010a6c <tcp_receive+0x888>)
 8010826:	6013      	str	r3, [r2, #0]
 8010828:	4b91      	ldr	r3, [pc, #580]	; (8010a70 <tcp_receive+0x88c>)
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	4a8f      	ldr	r2, [pc, #572]	; (8010a6c <tcp_receive+0x888>)
 801082e:	6812      	ldr	r2, [r2, #0]
 8010830:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010832:	e00d      	b.n	8010850 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010834:	4b8d      	ldr	r3, [pc, #564]	; (8010a6c <tcp_receive+0x888>)
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801083c:	1ad3      	subs	r3, r2, r3
 801083e:	2b00      	cmp	r3, #0
 8010840:	da06      	bge.n	8010850 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	8b5b      	ldrh	r3, [r3, #26]
 8010846:	f043 0302 	orr.w	r3, r3, #2
 801084a:	b29a      	uxth	r2, r3
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010850:	4b86      	ldr	r3, [pc, #536]	; (8010a6c <tcp_receive+0x888>)
 8010852:	681a      	ldr	r2, [r3, #0]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010858:	1ad3      	subs	r3, r2, r3
 801085a:	2b00      	cmp	r3, #0
 801085c:	f2c0 842a 	blt.w	80110b4 <tcp_receive+0xed0>
 8010860:	4b82      	ldr	r3, [pc, #520]	; (8010a6c <tcp_receive+0x888>)
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010868:	6879      	ldr	r1, [r7, #4]
 801086a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801086c:	440b      	add	r3, r1
 801086e:	1ad3      	subs	r3, r2, r3
 8010870:	3301      	adds	r3, #1
 8010872:	2b00      	cmp	r3, #0
 8010874:	f300 841e 	bgt.w	80110b4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801087c:	4b7b      	ldr	r3, [pc, #492]	; (8010a6c <tcp_receive+0x888>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	429a      	cmp	r2, r3
 8010882:	f040 829a 	bne.w	8010dba <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010886:	4b7a      	ldr	r3, [pc, #488]	; (8010a70 <tcp_receive+0x88c>)
 8010888:	891c      	ldrh	r4, [r3, #8]
 801088a:	4b79      	ldr	r3, [pc, #484]	; (8010a70 <tcp_receive+0x88c>)
 801088c:	68db      	ldr	r3, [r3, #12]
 801088e:	899b      	ldrh	r3, [r3, #12]
 8010890:	b29b      	uxth	r3, r3
 8010892:	4618      	mov	r0, r3
 8010894:	f7fa fc74 	bl	800b180 <lwip_htons>
 8010898:	4603      	mov	r3, r0
 801089a:	b2db      	uxtb	r3, r3
 801089c:	f003 0303 	and.w	r3, r3, #3
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d001      	beq.n	80108a8 <tcp_receive+0x6c4>
 80108a4:	2301      	movs	r3, #1
 80108a6:	e000      	b.n	80108aa <tcp_receive+0x6c6>
 80108a8:	2300      	movs	r3, #0
 80108aa:	4423      	add	r3, r4
 80108ac:	b29a      	uxth	r2, r3
 80108ae:	4b71      	ldr	r3, [pc, #452]	; (8010a74 <tcp_receive+0x890>)
 80108b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80108b6:	4b6f      	ldr	r3, [pc, #444]	; (8010a74 <tcp_receive+0x890>)
 80108b8:	881b      	ldrh	r3, [r3, #0]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d275      	bcs.n	80109aa <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80108be:	4b6c      	ldr	r3, [pc, #432]	; (8010a70 <tcp_receive+0x88c>)
 80108c0:	68db      	ldr	r3, [r3, #12]
 80108c2:	899b      	ldrh	r3, [r3, #12]
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7fa fc5a 	bl	800b180 <lwip_htons>
 80108cc:	4603      	mov	r3, r0
 80108ce:	b2db      	uxtb	r3, r3
 80108d0:	f003 0301 	and.w	r3, r3, #1
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d01f      	beq.n	8010918 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80108d8:	4b65      	ldr	r3, [pc, #404]	; (8010a70 <tcp_receive+0x88c>)
 80108da:	68db      	ldr	r3, [r3, #12]
 80108dc:	899b      	ldrh	r3, [r3, #12]
 80108de:	b29b      	uxth	r3, r3
 80108e0:	b21b      	sxth	r3, r3
 80108e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80108e6:	b21c      	sxth	r4, r3
 80108e8:	4b61      	ldr	r3, [pc, #388]	; (8010a70 <tcp_receive+0x88c>)
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	899b      	ldrh	r3, [r3, #12]
 80108ee:	b29b      	uxth	r3, r3
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7fa fc45 	bl	800b180 <lwip_htons>
 80108f6:	4603      	mov	r3, r0
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010900:	b29b      	uxth	r3, r3
 8010902:	4618      	mov	r0, r3
 8010904:	f7fa fc3c 	bl	800b180 <lwip_htons>
 8010908:	4603      	mov	r3, r0
 801090a:	b21b      	sxth	r3, r3
 801090c:	4323      	orrs	r3, r4
 801090e:	b21a      	sxth	r2, r3
 8010910:	4b57      	ldr	r3, [pc, #348]	; (8010a70 <tcp_receive+0x88c>)
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	b292      	uxth	r2, r2
 8010916:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801091c:	4b54      	ldr	r3, [pc, #336]	; (8010a70 <tcp_receive+0x88c>)
 801091e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010920:	4b53      	ldr	r3, [pc, #332]	; (8010a70 <tcp_receive+0x88c>)
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	899b      	ldrh	r3, [r3, #12]
 8010926:	b29b      	uxth	r3, r3
 8010928:	4618      	mov	r0, r3
 801092a:	f7fa fc29 	bl	800b180 <lwip_htons>
 801092e:	4603      	mov	r3, r0
 8010930:	b2db      	uxtb	r3, r3
 8010932:	f003 0302 	and.w	r3, r3, #2
 8010936:	2b00      	cmp	r3, #0
 8010938:	d005      	beq.n	8010946 <tcp_receive+0x762>
            inseg.len -= 1;
 801093a:	4b4d      	ldr	r3, [pc, #308]	; (8010a70 <tcp_receive+0x88c>)
 801093c:	891b      	ldrh	r3, [r3, #8]
 801093e:	3b01      	subs	r3, #1
 8010940:	b29a      	uxth	r2, r3
 8010942:	4b4b      	ldr	r3, [pc, #300]	; (8010a70 <tcp_receive+0x88c>)
 8010944:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010946:	4b4a      	ldr	r3, [pc, #296]	; (8010a70 <tcp_receive+0x88c>)
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	4a49      	ldr	r2, [pc, #292]	; (8010a70 <tcp_receive+0x88c>)
 801094c:	8912      	ldrh	r2, [r2, #8]
 801094e:	4611      	mov	r1, r2
 8010950:	4618      	mov	r0, r3
 8010952:	f7fb fec3 	bl	800c6dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010956:	4b46      	ldr	r3, [pc, #280]	; (8010a70 <tcp_receive+0x88c>)
 8010958:	891c      	ldrh	r4, [r3, #8]
 801095a:	4b45      	ldr	r3, [pc, #276]	; (8010a70 <tcp_receive+0x88c>)
 801095c:	68db      	ldr	r3, [r3, #12]
 801095e:	899b      	ldrh	r3, [r3, #12]
 8010960:	b29b      	uxth	r3, r3
 8010962:	4618      	mov	r0, r3
 8010964:	f7fa fc0c 	bl	800b180 <lwip_htons>
 8010968:	4603      	mov	r3, r0
 801096a:	b2db      	uxtb	r3, r3
 801096c:	f003 0303 	and.w	r3, r3, #3
 8010970:	2b00      	cmp	r3, #0
 8010972:	d001      	beq.n	8010978 <tcp_receive+0x794>
 8010974:	2301      	movs	r3, #1
 8010976:	e000      	b.n	801097a <tcp_receive+0x796>
 8010978:	2300      	movs	r3, #0
 801097a:	4423      	add	r3, r4
 801097c:	b29a      	uxth	r2, r3
 801097e:	4b3d      	ldr	r3, [pc, #244]	; (8010a74 <tcp_receive+0x890>)
 8010980:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010982:	4b3c      	ldr	r3, [pc, #240]	; (8010a74 <tcp_receive+0x890>)
 8010984:	881b      	ldrh	r3, [r3, #0]
 8010986:	461a      	mov	r2, r3
 8010988:	4b38      	ldr	r3, [pc, #224]	; (8010a6c <tcp_receive+0x888>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	441a      	add	r2, r3
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010992:	6879      	ldr	r1, [r7, #4]
 8010994:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010996:	440b      	add	r3, r1
 8010998:	429a      	cmp	r2, r3
 801099a:	d006      	beq.n	80109aa <tcp_receive+0x7c6>
 801099c:	4b36      	ldr	r3, [pc, #216]	; (8010a78 <tcp_receive+0x894>)
 801099e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80109a2:	4936      	ldr	r1, [pc, #216]	; (8010a7c <tcp_receive+0x898>)
 80109a4:	4836      	ldr	r0, [pc, #216]	; (8010a80 <tcp_receive+0x89c>)
 80109a6:	f007 fe0b 	bl	80185c0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	f000 80e7 	beq.w	8010b82 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80109b4:	4b2e      	ldr	r3, [pc, #184]	; (8010a70 <tcp_receive+0x88c>)
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	899b      	ldrh	r3, [r3, #12]
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	4618      	mov	r0, r3
 80109be:	f7fa fbdf 	bl	800b180 <lwip_htons>
 80109c2:	4603      	mov	r3, r0
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	f003 0301 	and.w	r3, r3, #1
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d010      	beq.n	80109f0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80109ce:	e00a      	b.n	80109e6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109d4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109da:	681a      	ldr	r2, [r3, #0]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80109e0:	68f8      	ldr	r0, [r7, #12]
 80109e2:	f7fd fca6 	bl	800e332 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d1f0      	bne.n	80109d0 <tcp_receive+0x7ec>
 80109ee:	e0c8      	b.n	8010b82 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80109f6:	e052      	b.n	8010a9e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80109f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109fa:	68db      	ldr	r3, [r3, #12]
 80109fc:	899b      	ldrh	r3, [r3, #12]
 80109fe:	b29b      	uxth	r3, r3
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7fa fbbd 	bl	800b180 <lwip_htons>
 8010a06:	4603      	mov	r3, r0
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	f003 0301 	and.w	r3, r3, #1
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d03d      	beq.n	8010a8e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010a12:	4b17      	ldr	r3, [pc, #92]	; (8010a70 <tcp_receive+0x88c>)
 8010a14:	68db      	ldr	r3, [r3, #12]
 8010a16:	899b      	ldrh	r3, [r3, #12]
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7fa fbb0 	bl	800b180 <lwip_htons>
 8010a20:	4603      	mov	r3, r0
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d130      	bne.n	8010a8e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010a2c:	4b10      	ldr	r3, [pc, #64]	; (8010a70 <tcp_receive+0x88c>)
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	899b      	ldrh	r3, [r3, #12]
 8010a32:	b29c      	uxth	r4, r3
 8010a34:	2001      	movs	r0, #1
 8010a36:	f7fa fba3 	bl	800b180 <lwip_htons>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	4b0c      	ldr	r3, [pc, #48]	; (8010a70 <tcp_receive+0x88c>)
 8010a40:	68db      	ldr	r3, [r3, #12]
 8010a42:	4322      	orrs	r2, r4
 8010a44:	b292      	uxth	r2, r2
 8010a46:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010a48:	4b09      	ldr	r3, [pc, #36]	; (8010a70 <tcp_receive+0x88c>)
 8010a4a:	891c      	ldrh	r4, [r3, #8]
 8010a4c:	4b08      	ldr	r3, [pc, #32]	; (8010a70 <tcp_receive+0x88c>)
 8010a4e:	68db      	ldr	r3, [r3, #12]
 8010a50:	899b      	ldrh	r3, [r3, #12]
 8010a52:	b29b      	uxth	r3, r3
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7fa fb93 	bl	800b180 <lwip_htons>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	f003 0303 	and.w	r3, r3, #3
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d00e      	beq.n	8010a84 <tcp_receive+0x8a0>
 8010a66:	2301      	movs	r3, #1
 8010a68:	e00d      	b.n	8010a86 <tcp_receive+0x8a2>
 8010a6a:	bf00      	nop
 8010a6c:	20011598 	.word	0x20011598
 8010a70:	20011578 	.word	0x20011578
 8010a74:	200115a2 	.word	0x200115a2
 8010a78:	0801bab8 	.word	0x0801bab8
 8010a7c:	0801be60 	.word	0x0801be60
 8010a80:	0801bb04 	.word	0x0801bb04
 8010a84:	2300      	movs	r3, #0
 8010a86:	4423      	add	r3, r4
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	4b98      	ldr	r3, [pc, #608]	; (8010cec <tcp_receive+0xb08>)
 8010a8c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a90:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010a98:	6938      	ldr	r0, [r7, #16]
 8010a9a:	f7fd fc4a 	bl	800e332 <tcp_seg_free>
            while (next &&
 8010a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d00e      	beq.n	8010ac2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010aa4:	4b91      	ldr	r3, [pc, #580]	; (8010cec <tcp_receive+0xb08>)
 8010aa6:	881b      	ldrh	r3, [r3, #0]
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	4b91      	ldr	r3, [pc, #580]	; (8010cf0 <tcp_receive+0xb0c>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	441a      	add	r2, r3
 8010ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ab2:	68db      	ldr	r3, [r3, #12]
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ab8:	8909      	ldrh	r1, [r1, #8]
 8010aba:	440b      	add	r3, r1
 8010abc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	da9a      	bge.n	80109f8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d059      	beq.n	8010b7c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010ac8:	4b88      	ldr	r3, [pc, #544]	; (8010cec <tcp_receive+0xb08>)
 8010aca:	881b      	ldrh	r3, [r3, #0]
 8010acc:	461a      	mov	r2, r3
 8010ace:	4b88      	ldr	r3, [pc, #544]	; (8010cf0 <tcp_receive+0xb0c>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	441a      	add	r2, r3
 8010ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ad6:	68db      	ldr	r3, [r3, #12]
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	dd4d      	ble.n	8010b7c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ae2:	68db      	ldr	r3, [r3, #12]
 8010ae4:	685b      	ldr	r3, [r3, #4]
 8010ae6:	b29a      	uxth	r2, r3
 8010ae8:	4b81      	ldr	r3, [pc, #516]	; (8010cf0 <tcp_receive+0xb0c>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	1ad3      	subs	r3, r2, r3
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	4b80      	ldr	r3, [pc, #512]	; (8010cf4 <tcp_receive+0xb10>)
 8010af4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010af6:	4b7f      	ldr	r3, [pc, #508]	; (8010cf4 <tcp_receive+0xb10>)
 8010af8:	68db      	ldr	r3, [r3, #12]
 8010afa:	899b      	ldrh	r3, [r3, #12]
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7fa fb3e 	bl	800b180 <lwip_htons>
 8010b04:	4603      	mov	r3, r0
 8010b06:	b2db      	uxtb	r3, r3
 8010b08:	f003 0302 	and.w	r3, r3, #2
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d005      	beq.n	8010b1c <tcp_receive+0x938>
                inseg.len -= 1;
 8010b10:	4b78      	ldr	r3, [pc, #480]	; (8010cf4 <tcp_receive+0xb10>)
 8010b12:	891b      	ldrh	r3, [r3, #8]
 8010b14:	3b01      	subs	r3, #1
 8010b16:	b29a      	uxth	r2, r3
 8010b18:	4b76      	ldr	r3, [pc, #472]	; (8010cf4 <tcp_receive+0xb10>)
 8010b1a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010b1c:	4b75      	ldr	r3, [pc, #468]	; (8010cf4 <tcp_receive+0xb10>)
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	4a74      	ldr	r2, [pc, #464]	; (8010cf4 <tcp_receive+0xb10>)
 8010b22:	8912      	ldrh	r2, [r2, #8]
 8010b24:	4611      	mov	r1, r2
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7fb fdd8 	bl	800c6dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010b2c:	4b71      	ldr	r3, [pc, #452]	; (8010cf4 <tcp_receive+0xb10>)
 8010b2e:	891c      	ldrh	r4, [r3, #8]
 8010b30:	4b70      	ldr	r3, [pc, #448]	; (8010cf4 <tcp_receive+0xb10>)
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	899b      	ldrh	r3, [r3, #12]
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7fa fb21 	bl	800b180 <lwip_htons>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	f003 0303 	and.w	r3, r3, #3
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d001      	beq.n	8010b4e <tcp_receive+0x96a>
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	e000      	b.n	8010b50 <tcp_receive+0x96c>
 8010b4e:	2300      	movs	r3, #0
 8010b50:	4423      	add	r3, r4
 8010b52:	b29a      	uxth	r2, r3
 8010b54:	4b65      	ldr	r3, [pc, #404]	; (8010cec <tcp_receive+0xb08>)
 8010b56:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010b58:	4b64      	ldr	r3, [pc, #400]	; (8010cec <tcp_receive+0xb08>)
 8010b5a:	881b      	ldrh	r3, [r3, #0]
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	4b64      	ldr	r3, [pc, #400]	; (8010cf0 <tcp_receive+0xb0c>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	441a      	add	r2, r3
 8010b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b66:	68db      	ldr	r3, [r3, #12]
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d006      	beq.n	8010b7c <tcp_receive+0x998>
 8010b6e:	4b62      	ldr	r3, [pc, #392]	; (8010cf8 <tcp_receive+0xb14>)
 8010b70:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010b74:	4961      	ldr	r1, [pc, #388]	; (8010cfc <tcp_receive+0xb18>)
 8010b76:	4862      	ldr	r0, [pc, #392]	; (8010d00 <tcp_receive+0xb1c>)
 8010b78:	f007 fd22 	bl	80185c0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b80:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010b82:	4b5a      	ldr	r3, [pc, #360]	; (8010cec <tcp_receive+0xb08>)
 8010b84:	881b      	ldrh	r3, [r3, #0]
 8010b86:	461a      	mov	r2, r3
 8010b88:	4b59      	ldr	r3, [pc, #356]	; (8010cf0 <tcp_receive+0xb0c>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	441a      	add	r2, r3
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b96:	4b55      	ldr	r3, [pc, #340]	; (8010cec <tcp_receive+0xb08>)
 8010b98:	881b      	ldrh	r3, [r3, #0]
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d206      	bcs.n	8010bac <tcp_receive+0x9c8>
 8010b9e:	4b56      	ldr	r3, [pc, #344]	; (8010cf8 <tcp_receive+0xb14>)
 8010ba0:	f240 6207 	movw	r2, #1543	; 0x607
 8010ba4:	4957      	ldr	r1, [pc, #348]	; (8010d04 <tcp_receive+0xb20>)
 8010ba6:	4856      	ldr	r0, [pc, #344]	; (8010d00 <tcp_receive+0xb1c>)
 8010ba8:	f007 fd0a 	bl	80185c0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010bb0:	4b4e      	ldr	r3, [pc, #312]	; (8010cec <tcp_receive+0xb08>)
 8010bb2:	881b      	ldrh	r3, [r3, #0]
 8010bb4:	1ad3      	subs	r3, r2, r3
 8010bb6:	b29a      	uxth	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7fc fe93 	bl	800d8e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010bc2:	4b4c      	ldr	r3, [pc, #304]	; (8010cf4 <tcp_receive+0xb10>)
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	891b      	ldrh	r3, [r3, #8]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d006      	beq.n	8010bda <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010bcc:	4b49      	ldr	r3, [pc, #292]	; (8010cf4 <tcp_receive+0xb10>)
 8010bce:	685b      	ldr	r3, [r3, #4]
 8010bd0:	4a4d      	ldr	r2, [pc, #308]	; (8010d08 <tcp_receive+0xb24>)
 8010bd2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010bd4:	4b47      	ldr	r3, [pc, #284]	; (8010cf4 <tcp_receive+0xb10>)
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010bda:	4b46      	ldr	r3, [pc, #280]	; (8010cf4 <tcp_receive+0xb10>)
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	899b      	ldrh	r3, [r3, #12]
 8010be0:	b29b      	uxth	r3, r3
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fa facc 	bl	800b180 <lwip_htons>
 8010be8:	4603      	mov	r3, r0
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	f003 0301 	and.w	r3, r3, #1
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	f000 80b8 	beq.w	8010d66 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010bf6:	4b45      	ldr	r3, [pc, #276]	; (8010d0c <tcp_receive+0xb28>)
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	f043 0320 	orr.w	r3, r3, #32
 8010bfe:	b2da      	uxtb	r2, r3
 8010c00:	4b42      	ldr	r3, [pc, #264]	; (8010d0c <tcp_receive+0xb28>)
 8010c02:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010c04:	e0af      	b.n	8010d66 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c0a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	4a36      	ldr	r2, [pc, #216]	; (8010cf0 <tcp_receive+0xb0c>)
 8010c16:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	891b      	ldrh	r3, [r3, #8]
 8010c1c:	461c      	mov	r4, r3
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	68db      	ldr	r3, [r3, #12]
 8010c22:	899b      	ldrh	r3, [r3, #12]
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fa faaa 	bl	800b180 <lwip_htons>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	f003 0303 	and.w	r3, r3, #3
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d001      	beq.n	8010c3c <tcp_receive+0xa58>
 8010c38:	2301      	movs	r3, #1
 8010c3a:	e000      	b.n	8010c3e <tcp_receive+0xa5a>
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	191a      	adds	r2, r3, r4
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c44:	441a      	add	r2, r3
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c4e:	461c      	mov	r4, r3
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	891b      	ldrh	r3, [r3, #8]
 8010c54:	461d      	mov	r5, r3
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	68db      	ldr	r3, [r3, #12]
 8010c5a:	899b      	ldrh	r3, [r3, #12]
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7fa fa8e 	bl	800b180 <lwip_htons>
 8010c64:	4603      	mov	r3, r0
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	f003 0303 	and.w	r3, r3, #3
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d001      	beq.n	8010c74 <tcp_receive+0xa90>
 8010c70:	2301      	movs	r3, #1
 8010c72:	e000      	b.n	8010c76 <tcp_receive+0xa92>
 8010c74:	2300      	movs	r3, #0
 8010c76:	442b      	add	r3, r5
 8010c78:	429c      	cmp	r4, r3
 8010c7a:	d206      	bcs.n	8010c8a <tcp_receive+0xaa6>
 8010c7c:	4b1e      	ldr	r3, [pc, #120]	; (8010cf8 <tcp_receive+0xb14>)
 8010c7e:	f240 622b 	movw	r2, #1579	; 0x62b
 8010c82:	4923      	ldr	r1, [pc, #140]	; (8010d10 <tcp_receive+0xb2c>)
 8010c84:	481e      	ldr	r0, [pc, #120]	; (8010d00 <tcp_receive+0xb1c>)
 8010c86:	f007 fc9b 	bl	80185c0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	891b      	ldrh	r3, [r3, #8]
 8010c8e:	461c      	mov	r4, r3
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	899b      	ldrh	r3, [r3, #12]
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7fa fa71 	bl	800b180 <lwip_htons>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	f003 0303 	and.w	r3, r3, #3
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d001      	beq.n	8010cae <tcp_receive+0xaca>
 8010caa:	2301      	movs	r3, #1
 8010cac:	e000      	b.n	8010cb0 <tcp_receive+0xacc>
 8010cae:	2300      	movs	r3, #0
 8010cb0:	1919      	adds	r1, r3, r4
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010cb6:	b28b      	uxth	r3, r1
 8010cb8:	1ad3      	subs	r3, r2, r3
 8010cba:	b29a      	uxth	r2, r3
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f7fc fe11 	bl	800d8e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	891b      	ldrh	r3, [r3, #8]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d028      	beq.n	8010d22 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010cd0:	4b0d      	ldr	r3, [pc, #52]	; (8010d08 <tcp_receive+0xb24>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d01d      	beq.n	8010d14 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010cd8:	4b0b      	ldr	r3, [pc, #44]	; (8010d08 <tcp_receive+0xb24>)
 8010cda:	681a      	ldr	r2, [r3, #0]
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	4610      	mov	r0, r2
 8010ce4:	f7fb ff4e 	bl	800cb84 <pbuf_cat>
 8010ce8:	e018      	b.n	8010d1c <tcp_receive+0xb38>
 8010cea:	bf00      	nop
 8010cec:	200115a2 	.word	0x200115a2
 8010cf0:	20011598 	.word	0x20011598
 8010cf4:	20011578 	.word	0x20011578
 8010cf8:	0801bab8 	.word	0x0801bab8
 8010cfc:	0801be98 	.word	0x0801be98
 8010d00:	0801bb04 	.word	0x0801bb04
 8010d04:	0801bed4 	.word	0x0801bed4
 8010d08:	200115a8 	.word	0x200115a8
 8010d0c:	200115a5 	.word	0x200115a5
 8010d10:	0801bef4 	.word	0x0801bef4
            } else {
              recv_data = cseg->p;
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	685b      	ldr	r3, [r3, #4]
 8010d18:	4a70      	ldr	r2, [pc, #448]	; (8010edc <tcp_receive+0xcf8>)
 8010d1a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	2200      	movs	r2, #0
 8010d20:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	68db      	ldr	r3, [r3, #12]
 8010d26:	899b      	ldrh	r3, [r3, #12]
 8010d28:	b29b      	uxth	r3, r3
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7fa fa28 	bl	800b180 <lwip_htons>
 8010d30:	4603      	mov	r3, r0
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	f003 0301 	and.w	r3, r3, #1
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d00d      	beq.n	8010d58 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010d3c:	4b68      	ldr	r3, [pc, #416]	; (8010ee0 <tcp_receive+0xcfc>)
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	f043 0320 	orr.w	r3, r3, #32
 8010d44:	b2da      	uxtb	r2, r3
 8010d46:	4b66      	ldr	r3, [pc, #408]	; (8010ee0 <tcp_receive+0xcfc>)
 8010d48:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	7d1b      	ldrb	r3, [r3, #20]
 8010d4e:	2b04      	cmp	r3, #4
 8010d50:	d102      	bne.n	8010d58 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2207      	movs	r2, #7
 8010d56:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	681a      	ldr	r2, [r3, #0]
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010d60:	68b8      	ldr	r0, [r7, #8]
 8010d62:	f7fd fae6 	bl	800e332 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d008      	beq.n	8010d80 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d72:	68db      	ldr	r3, [r3, #12]
 8010d74:	685a      	ldr	r2, [r3, #4]
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	f43f af43 	beq.w	8010c06 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	8b5b      	ldrh	r3, [r3, #26]
 8010d84:	f003 0301 	and.w	r3, r3, #1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d00e      	beq.n	8010daa <tcp_receive+0xbc6>
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	8b5b      	ldrh	r3, [r3, #26]
 8010d90:	f023 0301 	bic.w	r3, r3, #1
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	835a      	strh	r2, [r3, #26]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	8b5b      	ldrh	r3, [r3, #26]
 8010d9e:	f043 0302 	orr.w	r3, r3, #2
 8010da2:	b29a      	uxth	r2, r3
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010da8:	e188      	b.n	80110bc <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	8b5b      	ldrh	r3, [r3, #26]
 8010dae:	f043 0301 	orr.w	r3, r3, #1
 8010db2:	b29a      	uxth	r2, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010db8:	e180      	b.n	80110bc <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d106      	bne.n	8010dd0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010dc2:	4848      	ldr	r0, [pc, #288]	; (8010ee4 <tcp_receive+0xd00>)
 8010dc4:	f7fd faec 	bl	800e3a0 <tcp_seg_copy>
 8010dc8:	4602      	mov	r2, r0
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	675a      	str	r2, [r3, #116]	; 0x74
 8010dce:	e16d      	b.n	80110ac <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8010dda:	e157      	b.n	801108c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	685a      	ldr	r2, [r3, #4]
 8010de2:	4b41      	ldr	r3, [pc, #260]	; (8010ee8 <tcp_receive+0xd04>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d11d      	bne.n	8010e26 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010dea:	4b3e      	ldr	r3, [pc, #248]	; (8010ee4 <tcp_receive+0xd00>)
 8010dec:	891a      	ldrh	r2, [r3, #8]
 8010dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df0:	891b      	ldrh	r3, [r3, #8]
 8010df2:	429a      	cmp	r2, r3
 8010df4:	f240 814f 	bls.w	8011096 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010df8:	483a      	ldr	r0, [pc, #232]	; (8010ee4 <tcp_receive+0xd00>)
 8010dfa:	f7fd fad1 	bl	800e3a0 <tcp_seg_copy>
 8010dfe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f000 8149 	beq.w	801109a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d003      	beq.n	8010e16 <tcp_receive+0xc32>
                    prev->next = cseg;
 8010e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e10:	697a      	ldr	r2, [r7, #20]
 8010e12:	601a      	str	r2, [r3, #0]
 8010e14:	e002      	b.n	8010e1c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	697a      	ldr	r2, [r7, #20]
 8010e1a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010e1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010e1e:	6978      	ldr	r0, [r7, #20]
 8010e20:	f7ff f8dc 	bl	800ffdc <tcp_oos_insert_segment>
                }
                break;
 8010e24:	e139      	b.n	801109a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d117      	bne.n	8010e5c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010e2c:	4b2e      	ldr	r3, [pc, #184]	; (8010ee8 <tcp_receive+0xd04>)
 8010e2e:	681a      	ldr	r2, [r3, #0]
 8010e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e32:	68db      	ldr	r3, [r3, #12]
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	1ad3      	subs	r3, r2, r3
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	da57      	bge.n	8010eec <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010e3c:	4829      	ldr	r0, [pc, #164]	; (8010ee4 <tcp_receive+0xd00>)
 8010e3e:	f7fd faaf 	bl	800e3a0 <tcp_seg_copy>
 8010e42:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010e44:	69bb      	ldr	r3, [r7, #24]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	f000 8129 	beq.w	801109e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	69ba      	ldr	r2, [r7, #24]
 8010e50:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010e52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010e54:	69b8      	ldr	r0, [r7, #24]
 8010e56:	f7ff f8c1 	bl	800ffdc <tcp_oos_insert_segment>
                  }
                  break;
 8010e5a:	e120      	b.n	801109e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010e5c:	4b22      	ldr	r3, [pc, #136]	; (8010ee8 <tcp_receive+0xd04>)
 8010e5e:	681a      	ldr	r2, [r3, #0]
 8010e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e62:	68db      	ldr	r3, [r3, #12]
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	1ad3      	subs	r3, r2, r3
 8010e68:	3b01      	subs	r3, #1
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	db3e      	blt.n	8010eec <tcp_receive+0xd08>
 8010e6e:	4b1e      	ldr	r3, [pc, #120]	; (8010ee8 <tcp_receive+0xd04>)
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	685b      	ldr	r3, [r3, #4]
 8010e78:	1ad3      	subs	r3, r2, r3
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	dc35      	bgt.n	8010eec <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010e80:	4818      	ldr	r0, [pc, #96]	; (8010ee4 <tcp_receive+0xd00>)
 8010e82:	f7fd fa8d 	bl	800e3a0 <tcp_seg_copy>
 8010e86:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010e88:	69fb      	ldr	r3, [r7, #28]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f000 8109 	beq.w	80110a2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e92:	68db      	ldr	r3, [r3, #12]
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e98:	8912      	ldrh	r2, [r2, #8]
 8010e9a:	441a      	add	r2, r3
 8010e9c:	4b12      	ldr	r3, [pc, #72]	; (8010ee8 <tcp_receive+0xd04>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	1ad3      	subs	r3, r2, r3
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	dd12      	ble.n	8010ecc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010ea6:	4b10      	ldr	r3, [pc, #64]	; (8010ee8 <tcp_receive+0xd04>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	b29a      	uxth	r2, r3
 8010eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eae:	68db      	ldr	r3, [r3, #12]
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	1ad3      	subs	r3, r2, r3
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ebe:	685a      	ldr	r2, [r3, #4]
 8010ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ec2:	891b      	ldrh	r3, [r3, #8]
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	4610      	mov	r0, r2
 8010ec8:	f7fb fc08 	bl	800c6dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ece:	69fa      	ldr	r2, [r7, #28]
 8010ed0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010ed4:	69f8      	ldr	r0, [r7, #28]
 8010ed6:	f7ff f881 	bl	800ffdc <tcp_oos_insert_segment>
                  }
                  break;
 8010eda:	e0e2      	b.n	80110a2 <tcp_receive+0xebe>
 8010edc:	200115a8 	.word	0x200115a8
 8010ee0:	200115a5 	.word	0x200115a5
 8010ee4:	20011578 	.word	0x20011578
 8010ee8:	20011598 	.word	0x20011598
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	f040 80c6 	bne.w	8011086 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010efa:	4b80      	ldr	r3, [pc, #512]	; (80110fc <tcp_receive+0xf18>)
 8010efc:	681a      	ldr	r2, [r3, #0]
 8010efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	685b      	ldr	r3, [r3, #4]
 8010f04:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	f340 80bd 	ble.w	8011086 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f0e:	68db      	ldr	r3, [r3, #12]
 8010f10:	899b      	ldrh	r3, [r3, #12]
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7fa f933 	bl	800b180 <lwip_htons>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	f003 0301 	and.w	r3, r3, #1
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	f040 80bf 	bne.w	80110a6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010f28:	4875      	ldr	r0, [pc, #468]	; (8011100 <tcp_receive+0xf1c>)
 8010f2a:	f7fd fa39 	bl	800e3a0 <tcp_seg_copy>
 8010f2e:	4602      	mov	r2, r0
 8010f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f32:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f000 80b6 	beq.w	80110aa <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f46:	8912      	ldrh	r2, [r2, #8]
 8010f48:	441a      	add	r2, r3
 8010f4a:	4b6c      	ldr	r3, [pc, #432]	; (80110fc <tcp_receive+0xf18>)
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	1ad3      	subs	r3, r2, r3
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	dd12      	ble.n	8010f7a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010f54:	4b69      	ldr	r3, [pc, #420]	; (80110fc <tcp_receive+0xf18>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	b29a      	uxth	r2, r3
 8010f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5c:	68db      	ldr	r3, [r3, #12]
 8010f5e:	685b      	ldr	r3, [r3, #4]
 8010f60:	b29b      	uxth	r3, r3
 8010f62:	1ad3      	subs	r3, r2, r3
 8010f64:	b29a      	uxth	r2, r3
 8010f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f68:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6c:	685a      	ldr	r2, [r3, #4]
 8010f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f70:	891b      	ldrh	r3, [r3, #8]
 8010f72:	4619      	mov	r1, r3
 8010f74:	4610      	mov	r0, r2
 8010f76:	f7fb fbb1 	bl	800c6dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010f7a:	4b62      	ldr	r3, [pc, #392]	; (8011104 <tcp_receive+0xf20>)
 8010f7c:	881b      	ldrh	r3, [r3, #0]
 8010f7e:	461a      	mov	r2, r3
 8010f80:	4b5e      	ldr	r3, [pc, #376]	; (80110fc <tcp_receive+0xf18>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	441a      	add	r2, r3
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f8a:	6879      	ldr	r1, [r7, #4]
 8010f8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f8e:	440b      	add	r3, r1
 8010f90:	1ad3      	subs	r3, r2, r3
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	f340 8089 	ble.w	80110aa <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	899b      	ldrh	r3, [r3, #12]
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fa f8ec 	bl	800b180 <lwip_htons>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	b2db      	uxtb	r3, r3
 8010fac:	f003 0301 	and.w	r3, r3, #1
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d022      	beq.n	8010ffa <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	68db      	ldr	r3, [r3, #12]
 8010fba:	899b      	ldrh	r3, [r3, #12]
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	b21b      	sxth	r3, r3
 8010fc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010fc4:	b21c      	sxth	r4, r3
 8010fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	899b      	ldrh	r3, [r3, #12]
 8010fce:	b29b      	uxth	r3, r3
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7fa f8d5 	bl	800b180 <lwip_htons>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	b2db      	uxtb	r3, r3
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7fa f8cc 	bl	800b180 <lwip_htons>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	b21b      	sxth	r3, r3
 8010fec:	4323      	orrs	r3, r4
 8010fee:	b21a      	sxth	r2, r3
 8010ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	68db      	ldr	r3, [r3, #12]
 8010ff6:	b292      	uxth	r2, r2
 8010ff8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ffe:	b29a      	uxth	r2, r3
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011004:	4413      	add	r3, r2
 8011006:	b299      	uxth	r1, r3
 8011008:	4b3c      	ldr	r3, [pc, #240]	; (80110fc <tcp_receive+0xf18>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	b29a      	uxth	r2, r3
 801100e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	1a8a      	subs	r2, r1, r2
 8011014:	b292      	uxth	r2, r2
 8011016:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	685a      	ldr	r2, [r3, #4]
 801101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	891b      	ldrh	r3, [r3, #8]
 8011024:	4619      	mov	r1, r3
 8011026:	4610      	mov	r0, r2
 8011028:	f7fb fb58 	bl	800c6dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801102c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	891c      	ldrh	r4, [r3, #8]
 8011032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	899b      	ldrh	r3, [r3, #12]
 801103a:	b29b      	uxth	r3, r3
 801103c:	4618      	mov	r0, r3
 801103e:	f7fa f89f 	bl	800b180 <lwip_htons>
 8011042:	4603      	mov	r3, r0
 8011044:	b2db      	uxtb	r3, r3
 8011046:	f003 0303 	and.w	r3, r3, #3
 801104a:	2b00      	cmp	r3, #0
 801104c:	d001      	beq.n	8011052 <tcp_receive+0xe6e>
 801104e:	2301      	movs	r3, #1
 8011050:	e000      	b.n	8011054 <tcp_receive+0xe70>
 8011052:	2300      	movs	r3, #0
 8011054:	4423      	add	r3, r4
 8011056:	b29a      	uxth	r2, r3
 8011058:	4b2a      	ldr	r3, [pc, #168]	; (8011104 <tcp_receive+0xf20>)
 801105a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801105c:	4b29      	ldr	r3, [pc, #164]	; (8011104 <tcp_receive+0xf20>)
 801105e:	881b      	ldrh	r3, [r3, #0]
 8011060:	461a      	mov	r2, r3
 8011062:	4b26      	ldr	r3, [pc, #152]	; (80110fc <tcp_receive+0xf18>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	441a      	add	r2, r3
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801106c:	6879      	ldr	r1, [r7, #4]
 801106e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011070:	440b      	add	r3, r1
 8011072:	429a      	cmp	r2, r3
 8011074:	d019      	beq.n	80110aa <tcp_receive+0xec6>
 8011076:	4b24      	ldr	r3, [pc, #144]	; (8011108 <tcp_receive+0xf24>)
 8011078:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801107c:	4923      	ldr	r1, [pc, #140]	; (801110c <tcp_receive+0xf28>)
 801107e:	4824      	ldr	r0, [pc, #144]	; (8011110 <tcp_receive+0xf2c>)
 8011080:	f007 fa9e 	bl	80185c0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011084:	e011      	b.n	80110aa <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	63bb      	str	r3, [r7, #56]	; 0x38
 801108c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801108e:	2b00      	cmp	r3, #0
 8011090:	f47f aea4 	bne.w	8010ddc <tcp_receive+0xbf8>
 8011094:	e00a      	b.n	80110ac <tcp_receive+0xec8>
                break;
 8011096:	bf00      	nop
 8011098:	e008      	b.n	80110ac <tcp_receive+0xec8>
                break;
 801109a:	bf00      	nop
 801109c:	e006      	b.n	80110ac <tcp_receive+0xec8>
                  break;
 801109e:	bf00      	nop
 80110a0:	e004      	b.n	80110ac <tcp_receive+0xec8>
                  break;
 80110a2:	bf00      	nop
 80110a4:	e002      	b.n	80110ac <tcp_receive+0xec8>
                  break;
 80110a6:	bf00      	nop
 80110a8:	e000      	b.n	80110ac <tcp_receive+0xec8>
                break;
 80110aa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f001 fe8b 	bl	8012dc8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80110b2:	e003      	b.n	80110bc <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f001 fe87 	bl	8012dc8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80110ba:	e01a      	b.n	80110f2 <tcp_receive+0xf0e>
 80110bc:	e019      	b.n	80110f2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80110be:	4b0f      	ldr	r3, [pc, #60]	; (80110fc <tcp_receive+0xf18>)
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110c6:	1ad3      	subs	r3, r2, r3
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	db0a      	blt.n	80110e2 <tcp_receive+0xefe>
 80110cc:	4b0b      	ldr	r3, [pc, #44]	; (80110fc <tcp_receive+0xf18>)
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d4:	6879      	ldr	r1, [r7, #4]
 80110d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80110d8:	440b      	add	r3, r1
 80110da:	1ad3      	subs	r3, r2, r3
 80110dc:	3301      	adds	r3, #1
 80110de:	2b00      	cmp	r3, #0
 80110e0:	dd07      	ble.n	80110f2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	8b5b      	ldrh	r3, [r3, #26]
 80110e6:	f043 0302 	orr.w	r3, r3, #2
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80110f0:	e7ff      	b.n	80110f2 <tcp_receive+0xf0e>
 80110f2:	bf00      	nop
 80110f4:	3750      	adds	r7, #80	; 0x50
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bdb0      	pop	{r4, r5, r7, pc}
 80110fa:	bf00      	nop
 80110fc:	20011598 	.word	0x20011598
 8011100:	20011578 	.word	0x20011578
 8011104:	200115a2 	.word	0x200115a2
 8011108:	0801bab8 	.word	0x0801bab8
 801110c:	0801be60 	.word	0x0801be60
 8011110:	0801bb04 	.word	0x0801bb04

08011114 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011114:	b480      	push	{r7}
 8011116:	b083      	sub	sp, #12
 8011118:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801111a:	4b15      	ldr	r3, [pc, #84]	; (8011170 <tcp_get_next_optbyte+0x5c>)
 801111c:	881b      	ldrh	r3, [r3, #0]
 801111e:	1c5a      	adds	r2, r3, #1
 8011120:	b291      	uxth	r1, r2
 8011122:	4a13      	ldr	r2, [pc, #76]	; (8011170 <tcp_get_next_optbyte+0x5c>)
 8011124:	8011      	strh	r1, [r2, #0]
 8011126:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011128:	4b12      	ldr	r3, [pc, #72]	; (8011174 <tcp_get_next_optbyte+0x60>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d004      	beq.n	801113a <tcp_get_next_optbyte+0x26>
 8011130:	4b11      	ldr	r3, [pc, #68]	; (8011178 <tcp_get_next_optbyte+0x64>)
 8011132:	881b      	ldrh	r3, [r3, #0]
 8011134:	88fa      	ldrh	r2, [r7, #6]
 8011136:	429a      	cmp	r2, r3
 8011138:	d208      	bcs.n	801114c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801113a:	4b10      	ldr	r3, [pc, #64]	; (801117c <tcp_get_next_optbyte+0x68>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	3314      	adds	r3, #20
 8011140:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011142:	88fb      	ldrh	r3, [r7, #6]
 8011144:	683a      	ldr	r2, [r7, #0]
 8011146:	4413      	add	r3, r2
 8011148:	781b      	ldrb	r3, [r3, #0]
 801114a:	e00b      	b.n	8011164 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801114c:	88fb      	ldrh	r3, [r7, #6]
 801114e:	b2da      	uxtb	r2, r3
 8011150:	4b09      	ldr	r3, [pc, #36]	; (8011178 <tcp_get_next_optbyte+0x64>)
 8011152:	881b      	ldrh	r3, [r3, #0]
 8011154:	b2db      	uxtb	r3, r3
 8011156:	1ad3      	subs	r3, r2, r3
 8011158:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801115a:	4b06      	ldr	r3, [pc, #24]	; (8011174 <tcp_get_next_optbyte+0x60>)
 801115c:	681a      	ldr	r2, [r3, #0]
 801115e:	797b      	ldrb	r3, [r7, #5]
 8011160:	4413      	add	r3, r2
 8011162:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011164:	4618      	mov	r0, r3
 8011166:	370c      	adds	r7, #12
 8011168:	46bd      	mov	sp, r7
 801116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116e:	4770      	bx	lr
 8011170:	20011594 	.word	0x20011594
 8011174:	20011590 	.word	0x20011590
 8011178:	2001158e 	.word	0x2001158e
 801117c:	20011588 	.word	0x20011588

08011180 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b084      	sub	sp, #16
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d106      	bne.n	801119c <tcp_parseopt+0x1c>
 801118e:	4b32      	ldr	r3, [pc, #200]	; (8011258 <tcp_parseopt+0xd8>)
 8011190:	f240 727d 	movw	r2, #1917	; 0x77d
 8011194:	4931      	ldr	r1, [pc, #196]	; (801125c <tcp_parseopt+0xdc>)
 8011196:	4832      	ldr	r0, [pc, #200]	; (8011260 <tcp_parseopt+0xe0>)
 8011198:	f007 fa12 	bl	80185c0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801119c:	4b31      	ldr	r3, [pc, #196]	; (8011264 <tcp_parseopt+0xe4>)
 801119e:	881b      	ldrh	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d055      	beq.n	8011250 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80111a4:	4b30      	ldr	r3, [pc, #192]	; (8011268 <tcp_parseopt+0xe8>)
 80111a6:	2200      	movs	r2, #0
 80111a8:	801a      	strh	r2, [r3, #0]
 80111aa:	e045      	b.n	8011238 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80111ac:	f7ff ffb2 	bl	8011114 <tcp_get_next_optbyte>
 80111b0:	4603      	mov	r3, r0
 80111b2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80111b4:	7bfb      	ldrb	r3, [r7, #15]
 80111b6:	2b02      	cmp	r3, #2
 80111b8:	d006      	beq.n	80111c8 <tcp_parseopt+0x48>
 80111ba:	2b02      	cmp	r3, #2
 80111bc:	dc2b      	bgt.n	8011216 <tcp_parseopt+0x96>
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d041      	beq.n	8011246 <tcp_parseopt+0xc6>
 80111c2:	2b01      	cmp	r3, #1
 80111c4:	d127      	bne.n	8011216 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80111c6:	e037      	b.n	8011238 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80111c8:	f7ff ffa4 	bl	8011114 <tcp_get_next_optbyte>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2b04      	cmp	r3, #4
 80111d0:	d13b      	bne.n	801124a <tcp_parseopt+0xca>
 80111d2:	4b25      	ldr	r3, [pc, #148]	; (8011268 <tcp_parseopt+0xe8>)
 80111d4:	881b      	ldrh	r3, [r3, #0]
 80111d6:	3301      	adds	r3, #1
 80111d8:	4a22      	ldr	r2, [pc, #136]	; (8011264 <tcp_parseopt+0xe4>)
 80111da:	8812      	ldrh	r2, [r2, #0]
 80111dc:	4293      	cmp	r3, r2
 80111de:	da34      	bge.n	801124a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80111e0:	f7ff ff98 	bl	8011114 <tcp_get_next_optbyte>
 80111e4:	4603      	mov	r3, r0
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	021b      	lsls	r3, r3, #8
 80111ea:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80111ec:	f7ff ff92 	bl	8011114 <tcp_get_next_optbyte>
 80111f0:	4603      	mov	r3, r0
 80111f2:	b29a      	uxth	r2, r3
 80111f4:	89bb      	ldrh	r3, [r7, #12]
 80111f6:	4313      	orrs	r3, r2
 80111f8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80111fa:	89bb      	ldrh	r3, [r7, #12]
 80111fc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011200:	d804      	bhi.n	801120c <tcp_parseopt+0x8c>
 8011202:	89bb      	ldrh	r3, [r7, #12]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d001      	beq.n	801120c <tcp_parseopt+0x8c>
 8011208:	89ba      	ldrh	r2, [r7, #12]
 801120a:	e001      	b.n	8011210 <tcp_parseopt+0x90>
 801120c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011214:	e010      	b.n	8011238 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011216:	f7ff ff7d 	bl	8011114 <tcp_get_next_optbyte>
 801121a:	4603      	mov	r3, r0
 801121c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801121e:	7afb      	ldrb	r3, [r7, #11]
 8011220:	2b01      	cmp	r3, #1
 8011222:	d914      	bls.n	801124e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011224:	7afb      	ldrb	r3, [r7, #11]
 8011226:	b29a      	uxth	r2, r3
 8011228:	4b0f      	ldr	r3, [pc, #60]	; (8011268 <tcp_parseopt+0xe8>)
 801122a:	881b      	ldrh	r3, [r3, #0]
 801122c:	4413      	add	r3, r2
 801122e:	b29b      	uxth	r3, r3
 8011230:	3b02      	subs	r3, #2
 8011232:	b29a      	uxth	r2, r3
 8011234:	4b0c      	ldr	r3, [pc, #48]	; (8011268 <tcp_parseopt+0xe8>)
 8011236:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011238:	4b0b      	ldr	r3, [pc, #44]	; (8011268 <tcp_parseopt+0xe8>)
 801123a:	881a      	ldrh	r2, [r3, #0]
 801123c:	4b09      	ldr	r3, [pc, #36]	; (8011264 <tcp_parseopt+0xe4>)
 801123e:	881b      	ldrh	r3, [r3, #0]
 8011240:	429a      	cmp	r2, r3
 8011242:	d3b3      	bcc.n	80111ac <tcp_parseopt+0x2c>
 8011244:	e004      	b.n	8011250 <tcp_parseopt+0xd0>
          return;
 8011246:	bf00      	nop
 8011248:	e002      	b.n	8011250 <tcp_parseopt+0xd0>
            return;
 801124a:	bf00      	nop
 801124c:	e000      	b.n	8011250 <tcp_parseopt+0xd0>
            return;
 801124e:	bf00      	nop
      }
    }
  }
}
 8011250:	3710      	adds	r7, #16
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	0801bab8 	.word	0x0801bab8
 801125c:	0801bf1c 	.word	0x0801bf1c
 8011260:	0801bb04 	.word	0x0801bb04
 8011264:	2001158c 	.word	0x2001158c
 8011268:	20011594 	.word	0x20011594

0801126c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801126c:	b480      	push	{r7}
 801126e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011270:	4b05      	ldr	r3, [pc, #20]	; (8011288 <tcp_trigger_input_pcb_close+0x1c>)
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	f043 0310 	orr.w	r3, r3, #16
 8011278:	b2da      	uxtb	r2, r3
 801127a:	4b03      	ldr	r3, [pc, #12]	; (8011288 <tcp_trigger_input_pcb_close+0x1c>)
 801127c:	701a      	strb	r2, [r3, #0]
}
 801127e:	bf00      	nop
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr
 8011288:	200115a5 	.word	0x200115a5

0801128c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	60f8      	str	r0, [r7, #12]
 8011294:	60b9      	str	r1, [r7, #8]
 8011296:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d00a      	beq.n	80112b4 <tcp_route+0x28>
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	7a1b      	ldrb	r3, [r3, #8]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d006      	beq.n	80112b4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	7a1b      	ldrb	r3, [r3, #8]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7fb f80e 	bl	800c2cc <netif_get_by_index>
 80112b0:	4603      	mov	r3, r0
 80112b2:	e003      	b.n	80112bc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f005 fca9 	bl	8016c0c <ip4_route>
 80112ba:	4603      	mov	r3, r0
  }
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3710      	adds	r7, #16
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}

080112c4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80112c4:	b590      	push	{r4, r7, lr}
 80112c6:	b087      	sub	sp, #28
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	603b      	str	r3, [r7, #0]
 80112d0:	4613      	mov	r3, r2
 80112d2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d105      	bne.n	80112e6 <tcp_create_segment+0x22>
 80112da:	4b44      	ldr	r3, [pc, #272]	; (80113ec <tcp_create_segment+0x128>)
 80112dc:	22a3      	movs	r2, #163	; 0xa3
 80112de:	4944      	ldr	r1, [pc, #272]	; (80113f0 <tcp_create_segment+0x12c>)
 80112e0:	4844      	ldr	r0, [pc, #272]	; (80113f4 <tcp_create_segment+0x130>)
 80112e2:	f007 f96d 	bl	80185c0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d105      	bne.n	80112f8 <tcp_create_segment+0x34>
 80112ec:	4b3f      	ldr	r3, [pc, #252]	; (80113ec <tcp_create_segment+0x128>)
 80112ee:	22a4      	movs	r2, #164	; 0xa4
 80112f0:	4941      	ldr	r1, [pc, #260]	; (80113f8 <tcp_create_segment+0x134>)
 80112f2:	4840      	ldr	r0, [pc, #256]	; (80113f4 <tcp_create_segment+0x130>)
 80112f4:	f007 f964 	bl	80185c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80112f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80112fc:	009b      	lsls	r3, r3, #2
 80112fe:	b2db      	uxtb	r3, r3
 8011300:	f003 0304 	and.w	r3, r3, #4
 8011304:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011306:	2003      	movs	r0, #3
 8011308:	f7fa fc48 	bl	800bb9c <memp_malloc>
 801130c:	6138      	str	r0, [r7, #16]
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d104      	bne.n	801131e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011314:	68b8      	ldr	r0, [r7, #8]
 8011316:	f7fb fb67 	bl	800c9e8 <pbuf_free>
    return NULL;
 801131a:	2300      	movs	r3, #0
 801131c:	e061      	b.n	80113e2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011324:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	2200      	movs	r2, #0
 801132a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801132c:	693b      	ldr	r3, [r7, #16]
 801132e:	68ba      	ldr	r2, [r7, #8]
 8011330:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	891a      	ldrh	r2, [r3, #8]
 8011336:	7dfb      	ldrb	r3, [r7, #23]
 8011338:	b29b      	uxth	r3, r3
 801133a:	429a      	cmp	r2, r3
 801133c:	d205      	bcs.n	801134a <tcp_create_segment+0x86>
 801133e:	4b2b      	ldr	r3, [pc, #172]	; (80113ec <tcp_create_segment+0x128>)
 8011340:	22b0      	movs	r2, #176	; 0xb0
 8011342:	492e      	ldr	r1, [pc, #184]	; (80113fc <tcp_create_segment+0x138>)
 8011344:	482b      	ldr	r0, [pc, #172]	; (80113f4 <tcp_create_segment+0x130>)
 8011346:	f007 f93b 	bl	80185c0 <iprintf>
  seg->len = p->tot_len - optlen;
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	891a      	ldrh	r2, [r3, #8]
 801134e:	7dfb      	ldrb	r3, [r7, #23]
 8011350:	b29b      	uxth	r3, r3
 8011352:	1ad3      	subs	r3, r2, r3
 8011354:	b29a      	uxth	r2, r3
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801135a:	2114      	movs	r1, #20
 801135c:	68b8      	ldr	r0, [r7, #8]
 801135e:	f7fb faad 	bl	800c8bc <pbuf_add_header>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d004      	beq.n	8011372 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011368:	6938      	ldr	r0, [r7, #16]
 801136a:	f7fc ffe2 	bl	800e332 <tcp_seg_free>
    return NULL;
 801136e:	2300      	movs	r3, #0
 8011370:	e037      	b.n	80113e2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	685a      	ldr	r2, [r3, #4]
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	8ada      	ldrh	r2, [r3, #22]
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	68dc      	ldr	r4, [r3, #12]
 8011384:	4610      	mov	r0, r2
 8011386:	f7f9 fefb 	bl	800b180 <lwip_htons>
 801138a:	4603      	mov	r3, r0
 801138c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	8b1a      	ldrh	r2, [r3, #24]
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	68dc      	ldr	r4, [r3, #12]
 8011396:	4610      	mov	r0, r2
 8011398:	f7f9 fef2 	bl	800b180 <lwip_htons>
 801139c:	4603      	mov	r3, r0
 801139e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	68dc      	ldr	r4, [r3, #12]
 80113a4:	6838      	ldr	r0, [r7, #0]
 80113a6:	f7f9 ff00 	bl	800b1aa <lwip_htonl>
 80113aa:	4603      	mov	r3, r0
 80113ac:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80113ae:	7dfb      	ldrb	r3, [r7, #23]
 80113b0:	089b      	lsrs	r3, r3, #2
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	3305      	adds	r3, #5
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	031b      	lsls	r3, r3, #12
 80113bc:	b29a      	uxth	r2, r3
 80113be:	79fb      	ldrb	r3, [r7, #7]
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	4313      	orrs	r3, r2
 80113c4:	b29a      	uxth	r2, r3
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	68dc      	ldr	r4, [r3, #12]
 80113ca:	4610      	mov	r0, r2
 80113cc:	f7f9 fed8 	bl	800b180 <lwip_htons>
 80113d0:	4603      	mov	r3, r0
 80113d2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	2200      	movs	r2, #0
 80113da:	749a      	strb	r2, [r3, #18]
 80113dc:	2200      	movs	r2, #0
 80113de:	74da      	strb	r2, [r3, #19]
  return seg;
 80113e0:	693b      	ldr	r3, [r7, #16]
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	371c      	adds	r7, #28
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd90      	pop	{r4, r7, pc}
 80113ea:	bf00      	nop
 80113ec:	0801bf38 	.word	0x0801bf38
 80113f0:	0801bf6c 	.word	0x0801bf6c
 80113f4:	0801bf8c 	.word	0x0801bf8c
 80113f8:	0801bfb4 	.word	0x0801bfb4
 80113fc:	0801bfd8 	.word	0x0801bfd8

08011400 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b086      	sub	sp, #24
 8011404:	af00      	add	r7, sp, #0
 8011406:	607b      	str	r3, [r7, #4]
 8011408:	4603      	mov	r3, r0
 801140a:	73fb      	strb	r3, [r7, #15]
 801140c:	460b      	mov	r3, r1
 801140e:	81bb      	strh	r3, [r7, #12]
 8011410:	4613      	mov	r3, r2
 8011412:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011414:	89bb      	ldrh	r3, [r7, #12]
 8011416:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d105      	bne.n	801142a <tcp_pbuf_prealloc+0x2a>
 801141e:	4b30      	ldr	r3, [pc, #192]	; (80114e0 <tcp_pbuf_prealloc+0xe0>)
 8011420:	22e8      	movs	r2, #232	; 0xe8
 8011422:	4930      	ldr	r1, [pc, #192]	; (80114e4 <tcp_pbuf_prealloc+0xe4>)
 8011424:	4830      	ldr	r0, [pc, #192]	; (80114e8 <tcp_pbuf_prealloc+0xe8>)
 8011426:	f007 f8cb 	bl	80185c0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801142a:	6a3b      	ldr	r3, [r7, #32]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d105      	bne.n	801143c <tcp_pbuf_prealloc+0x3c>
 8011430:	4b2b      	ldr	r3, [pc, #172]	; (80114e0 <tcp_pbuf_prealloc+0xe0>)
 8011432:	22e9      	movs	r2, #233	; 0xe9
 8011434:	492d      	ldr	r1, [pc, #180]	; (80114ec <tcp_pbuf_prealloc+0xec>)
 8011436:	482c      	ldr	r0, [pc, #176]	; (80114e8 <tcp_pbuf_prealloc+0xe8>)
 8011438:	f007 f8c2 	bl	80185c0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801143c:	89ba      	ldrh	r2, [r7, #12]
 801143e:	897b      	ldrh	r3, [r7, #10]
 8011440:	429a      	cmp	r2, r3
 8011442:	d221      	bcs.n	8011488 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011444:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011448:	f003 0302 	and.w	r3, r3, #2
 801144c:	2b00      	cmp	r3, #0
 801144e:	d111      	bne.n	8011474 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011450:	6a3b      	ldr	r3, [r7, #32]
 8011452:	8b5b      	ldrh	r3, [r3, #26]
 8011454:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011458:	2b00      	cmp	r3, #0
 801145a:	d115      	bne.n	8011488 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801145c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011460:	2b00      	cmp	r3, #0
 8011462:	d007      	beq.n	8011474 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011464:	6a3b      	ldr	r3, [r7, #32]
 8011466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011468:	2b00      	cmp	r3, #0
 801146a:	d103      	bne.n	8011474 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801146c:	6a3b      	ldr	r3, [r7, #32]
 801146e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011470:	2b00      	cmp	r3, #0
 8011472:	d009      	beq.n	8011488 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011474:	89bb      	ldrh	r3, [r7, #12]
 8011476:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801147a:	f023 0203 	bic.w	r2, r3, #3
 801147e:	897b      	ldrh	r3, [r7, #10]
 8011480:	4293      	cmp	r3, r2
 8011482:	bf28      	it	cs
 8011484:	4613      	movcs	r3, r2
 8011486:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011488:	8af9      	ldrh	r1, [r7, #22]
 801148a:	7bfb      	ldrb	r3, [r7, #15]
 801148c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011490:	4618      	mov	r0, r3
 8011492:	f7fa ffc5 	bl	800c420 <pbuf_alloc>
 8011496:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011498:	693b      	ldr	r3, [r7, #16]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d101      	bne.n	80114a2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801149e:	2300      	movs	r3, #0
 80114a0:	e019      	b.n	80114d6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d006      	beq.n	80114b8 <tcp_pbuf_prealloc+0xb8>
 80114aa:	4b0d      	ldr	r3, [pc, #52]	; (80114e0 <tcp_pbuf_prealloc+0xe0>)
 80114ac:	f240 120b 	movw	r2, #267	; 0x10b
 80114b0:	490f      	ldr	r1, [pc, #60]	; (80114f0 <tcp_pbuf_prealloc+0xf0>)
 80114b2:	480d      	ldr	r0, [pc, #52]	; (80114e8 <tcp_pbuf_prealloc+0xe8>)
 80114b4:	f007 f884 	bl	80185c0 <iprintf>
  *oversize = p->len - length;
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	895a      	ldrh	r2, [r3, #10]
 80114bc:	89bb      	ldrh	r3, [r7, #12]
 80114be:	1ad3      	subs	r3, r2, r3
 80114c0:	b29a      	uxth	r2, r3
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	89ba      	ldrh	r2, [r7, #12]
 80114ca:	811a      	strh	r2, [r3, #8]
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	891a      	ldrh	r2, [r3, #8]
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	815a      	strh	r2, [r3, #10]
  return p;
 80114d4:	693b      	ldr	r3, [r7, #16]
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	3718      	adds	r7, #24
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}
 80114de:	bf00      	nop
 80114e0:	0801bf38 	.word	0x0801bf38
 80114e4:	0801bff0 	.word	0x0801bff0
 80114e8:	0801bf8c 	.word	0x0801bf8c
 80114ec:	0801c014 	.word	0x0801c014
 80114f0:	0801c034 	.word	0x0801c034

080114f4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	460b      	mov	r3, r1
 80114fe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d106      	bne.n	8011514 <tcp_write_checks+0x20>
 8011506:	4b33      	ldr	r3, [pc, #204]	; (80115d4 <tcp_write_checks+0xe0>)
 8011508:	f240 1233 	movw	r2, #307	; 0x133
 801150c:	4932      	ldr	r1, [pc, #200]	; (80115d8 <tcp_write_checks+0xe4>)
 801150e:	4833      	ldr	r0, [pc, #204]	; (80115dc <tcp_write_checks+0xe8>)
 8011510:	f007 f856 	bl	80185c0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	7d1b      	ldrb	r3, [r3, #20]
 8011518:	2b04      	cmp	r3, #4
 801151a:	d00e      	beq.n	801153a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011520:	2b07      	cmp	r3, #7
 8011522:	d00a      	beq.n	801153a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011528:	2b02      	cmp	r3, #2
 801152a:	d006      	beq.n	801153a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011530:	2b03      	cmp	r3, #3
 8011532:	d002      	beq.n	801153a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011534:	f06f 030a 	mvn.w	r3, #10
 8011538:	e048      	b.n	80115cc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801153a:	887b      	ldrh	r3, [r7, #2]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d101      	bne.n	8011544 <tcp_write_checks+0x50>
    return ERR_OK;
 8011540:	2300      	movs	r3, #0
 8011542:	e043      	b.n	80115cc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801154a:	887a      	ldrh	r2, [r7, #2]
 801154c:	429a      	cmp	r2, r3
 801154e:	d909      	bls.n	8011564 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	8b5b      	ldrh	r3, [r3, #26]
 8011554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011558:	b29a      	uxth	r2, r3
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801155e:	f04f 33ff 	mov.w	r3, #4294967295
 8011562:	e033      	b.n	80115cc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801156a:	2b08      	cmp	r3, #8
 801156c:	d909      	bls.n	8011582 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	8b5b      	ldrh	r3, [r3, #26]
 8011572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011576:	b29a      	uxth	r2, r3
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801157c:	f04f 33ff 	mov.w	r3, #4294967295
 8011580:	e024      	b.n	80115cc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011588:	2b00      	cmp	r3, #0
 801158a:	d00f      	beq.n	80115ac <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011590:	2b00      	cmp	r3, #0
 8011592:	d11a      	bne.n	80115ca <tcp_write_checks+0xd6>
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011598:	2b00      	cmp	r3, #0
 801159a:	d116      	bne.n	80115ca <tcp_write_checks+0xd6>
 801159c:	4b0d      	ldr	r3, [pc, #52]	; (80115d4 <tcp_write_checks+0xe0>)
 801159e:	f240 1255 	movw	r2, #341	; 0x155
 80115a2:	490f      	ldr	r1, [pc, #60]	; (80115e0 <tcp_write_checks+0xec>)
 80115a4:	480d      	ldr	r0, [pc, #52]	; (80115dc <tcp_write_checks+0xe8>)
 80115a6:	f007 f80b 	bl	80185c0 <iprintf>
 80115aa:	e00e      	b.n	80115ca <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d103      	bne.n	80115bc <tcp_write_checks+0xc8>
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d006      	beq.n	80115ca <tcp_write_checks+0xd6>
 80115bc:	4b05      	ldr	r3, [pc, #20]	; (80115d4 <tcp_write_checks+0xe0>)
 80115be:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80115c2:	4908      	ldr	r1, [pc, #32]	; (80115e4 <tcp_write_checks+0xf0>)
 80115c4:	4805      	ldr	r0, [pc, #20]	; (80115dc <tcp_write_checks+0xe8>)
 80115c6:	f006 fffb 	bl	80185c0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80115ca:	2300      	movs	r3, #0
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3708      	adds	r7, #8
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}
 80115d4:	0801bf38 	.word	0x0801bf38
 80115d8:	0801c048 	.word	0x0801c048
 80115dc:	0801bf8c 	.word	0x0801bf8c
 80115e0:	0801c068 	.word	0x0801c068
 80115e4:	0801c0a4 	.word	0x0801c0a4

080115e8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80115e8:	b590      	push	{r4, r7, lr}
 80115ea:	b09b      	sub	sp, #108	; 0x6c
 80115ec:	af04      	add	r7, sp, #16
 80115ee:	60f8      	str	r0, [r7, #12]
 80115f0:	60b9      	str	r1, [r7, #8]
 80115f2:	4611      	mov	r1, r2
 80115f4:	461a      	mov	r2, r3
 80115f6:	460b      	mov	r3, r1
 80115f8:	80fb      	strh	r3, [r7, #6]
 80115fa:	4613      	mov	r3, r2
 80115fc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80115fe:	2300      	movs	r3, #0
 8011600:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011602:	2300      	movs	r3, #0
 8011604:	653b      	str	r3, [r7, #80]	; 0x50
 8011606:	2300      	movs	r3, #0
 8011608:	64fb      	str	r3, [r7, #76]	; 0x4c
 801160a:	2300      	movs	r3, #0
 801160c:	64bb      	str	r3, [r7, #72]	; 0x48
 801160e:	2300      	movs	r3, #0
 8011610:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011612:	2300      	movs	r3, #0
 8011614:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011618:	2300      	movs	r3, #0
 801161a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801161e:	2300      	movs	r3, #0
 8011620:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011622:	2300      	movs	r3, #0
 8011624:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011626:	2300      	movs	r3, #0
 8011628:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d109      	bne.n	8011644 <tcp_write+0x5c>
 8011630:	4ba4      	ldr	r3, [pc, #656]	; (80118c4 <tcp_write+0x2dc>)
 8011632:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011636:	49a4      	ldr	r1, [pc, #656]	; (80118c8 <tcp_write+0x2e0>)
 8011638:	48a4      	ldr	r0, [pc, #656]	; (80118cc <tcp_write+0x2e4>)
 801163a:	f006 ffc1 	bl	80185c0 <iprintf>
 801163e:	f06f 030f 	mvn.w	r3, #15
 8011642:	e32a      	b.n	8011c9a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801164a:	085b      	lsrs	r3, r3, #1
 801164c:	b29a      	uxth	r2, r3
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011652:	4293      	cmp	r3, r2
 8011654:	bf28      	it	cs
 8011656:	4613      	movcs	r3, r2
 8011658:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801165a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801165c:	2b00      	cmp	r3, #0
 801165e:	d102      	bne.n	8011666 <tcp_write+0x7e>
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011664:	e000      	b.n	8011668 <tcp_write+0x80>
 8011666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011668:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801166a:	68bb      	ldr	r3, [r7, #8]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d109      	bne.n	8011684 <tcp_write+0x9c>
 8011670:	4b94      	ldr	r3, [pc, #592]	; (80118c4 <tcp_write+0x2dc>)
 8011672:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011676:	4996      	ldr	r1, [pc, #600]	; (80118d0 <tcp_write+0x2e8>)
 8011678:	4894      	ldr	r0, [pc, #592]	; (80118cc <tcp_write+0x2e4>)
 801167a:	f006 ffa1 	bl	80185c0 <iprintf>
 801167e:	f06f 030f 	mvn.w	r3, #15
 8011682:	e30a      	b.n	8011c9a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011684:	88fb      	ldrh	r3, [r7, #6]
 8011686:	4619      	mov	r1, r3
 8011688:	68f8      	ldr	r0, [r7, #12]
 801168a:	f7ff ff33 	bl	80114f4 <tcp_write_checks>
 801168e:	4603      	mov	r3, r0
 8011690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011694:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011698:	2b00      	cmp	r3, #0
 801169a:	d002      	beq.n	80116a2 <tcp_write+0xba>
    return err;
 801169c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80116a0:	e2fb      	b.n	8011c9a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80116a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80116ac:	2300      	movs	r3, #0
 80116ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	f000 80f6 	beq.w	80118a8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116c0:	653b      	str	r3, [r7, #80]	; 0x50
 80116c2:	e002      	b.n	80116ca <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80116c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d1f8      	bne.n	80116c4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80116d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116d4:	7a9b      	ldrb	r3, [r3, #10]
 80116d6:	009b      	lsls	r3, r3, #2
 80116d8:	b29b      	uxth	r3, r3
 80116da:	f003 0304 	and.w	r3, r3, #4
 80116de:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80116e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80116e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116e4:	891b      	ldrh	r3, [r3, #8]
 80116e6:	4619      	mov	r1, r3
 80116e8:	8c3b      	ldrh	r3, [r7, #32]
 80116ea:	440b      	add	r3, r1
 80116ec:	429a      	cmp	r2, r3
 80116ee:	da06      	bge.n	80116fe <tcp_write+0x116>
 80116f0:	4b74      	ldr	r3, [pc, #464]	; (80118c4 <tcp_write+0x2dc>)
 80116f2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80116f6:	4977      	ldr	r1, [pc, #476]	; (80118d4 <tcp_write+0x2ec>)
 80116f8:	4874      	ldr	r0, [pc, #464]	; (80118cc <tcp_write+0x2e4>)
 80116fa:	f006 ff61 	bl	80185c0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80116fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011700:	891a      	ldrh	r2, [r3, #8]
 8011702:	8c3b      	ldrh	r3, [r7, #32]
 8011704:	4413      	add	r3, r2
 8011706:	b29b      	uxth	r3, r3
 8011708:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801170a:	1ad3      	subs	r3, r2, r3
 801170c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011714:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011716:	8a7b      	ldrh	r3, [r7, #18]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d026      	beq.n	801176a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801171c:	8a7b      	ldrh	r3, [r7, #18]
 801171e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011720:	429a      	cmp	r2, r3
 8011722:	d206      	bcs.n	8011732 <tcp_write+0x14a>
 8011724:	4b67      	ldr	r3, [pc, #412]	; (80118c4 <tcp_write+0x2dc>)
 8011726:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801172a:	496b      	ldr	r1, [pc, #428]	; (80118d8 <tcp_write+0x2f0>)
 801172c:	4867      	ldr	r0, [pc, #412]	; (80118cc <tcp_write+0x2e4>)
 801172e:	f006 ff47 	bl	80185c0 <iprintf>
      seg = last_unsent;
 8011732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011734:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011736:	8a7b      	ldrh	r3, [r7, #18]
 8011738:	88fa      	ldrh	r2, [r7, #6]
 801173a:	4293      	cmp	r3, r2
 801173c:	bf28      	it	cs
 801173e:	4613      	movcs	r3, r2
 8011740:	b29b      	uxth	r3, r3
 8011742:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011744:	4293      	cmp	r3, r2
 8011746:	bf28      	it	cs
 8011748:	4613      	movcs	r3, r2
 801174a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801174c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011750:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011752:	4413      	add	r3, r2
 8011754:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011758:	8a7a      	ldrh	r2, [r7, #18]
 801175a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801175c:	1ad3      	subs	r3, r2, r3
 801175e:	b29b      	uxth	r3, r3
 8011760:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011762:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011764:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011766:	1ad3      	subs	r3, r2, r3
 8011768:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801176a:	8a7b      	ldrh	r3, [r7, #18]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d00b      	beq.n	8011788 <tcp_write+0x1a0>
 8011770:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011774:	88fb      	ldrh	r3, [r7, #6]
 8011776:	429a      	cmp	r2, r3
 8011778:	d006      	beq.n	8011788 <tcp_write+0x1a0>
 801177a:	4b52      	ldr	r3, [pc, #328]	; (80118c4 <tcp_write+0x2dc>)
 801177c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011780:	4956      	ldr	r1, [pc, #344]	; (80118dc <tcp_write+0x2f4>)
 8011782:	4852      	ldr	r0, [pc, #328]	; (80118cc <tcp_write+0x2e4>)
 8011784:	f006 ff1c 	bl	80185c0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011788:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801178c:	88fb      	ldrh	r3, [r7, #6]
 801178e:	429a      	cmp	r2, r3
 8011790:	f080 8167 	bcs.w	8011a62 <tcp_write+0x47a>
 8011794:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011796:	2b00      	cmp	r3, #0
 8011798:	f000 8163 	beq.w	8011a62 <tcp_write+0x47a>
 801179c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801179e:	891b      	ldrh	r3, [r3, #8]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	f000 815e 	beq.w	8011a62 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80117a6:	88fa      	ldrh	r2, [r7, #6]
 80117a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80117ac:	1ad2      	subs	r2, r2, r3
 80117ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80117b0:	4293      	cmp	r3, r2
 80117b2:	bfa8      	it	ge
 80117b4:	4613      	movge	r3, r2
 80117b6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80117b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ba:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80117bc:	797b      	ldrb	r3, [r7, #5]
 80117be:	f003 0301 	and.w	r3, r3, #1
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d027      	beq.n	8011816 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80117c6:	f107 0012 	add.w	r0, r7, #18
 80117ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80117cc:	8bf9      	ldrh	r1, [r7, #30]
 80117ce:	2301      	movs	r3, #1
 80117d0:	9302      	str	r3, [sp, #8]
 80117d2:	797b      	ldrb	r3, [r7, #5]
 80117d4:	9301      	str	r3, [sp, #4]
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	9300      	str	r3, [sp, #0]
 80117da:	4603      	mov	r3, r0
 80117dc:	2000      	movs	r0, #0
 80117de:	f7ff fe0f 	bl	8011400 <tcp_pbuf_prealloc>
 80117e2:	6578      	str	r0, [r7, #84]	; 0x54
 80117e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f000 8225 	beq.w	8011c36 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80117ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117ee:	6858      	ldr	r0, [r3, #4]
 80117f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80117f4:	68ba      	ldr	r2, [r7, #8]
 80117f6:	4413      	add	r3, r2
 80117f8:	8bfa      	ldrh	r2, [r7, #30]
 80117fa:	4619      	mov	r1, r3
 80117fc:	f007 f8e0 	bl	80189c0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011800:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011802:	f7fb f97f 	bl	800cb04 <pbuf_clen>
 8011806:	4603      	mov	r3, r0
 8011808:	461a      	mov	r2, r3
 801180a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801180e:	4413      	add	r3, r2
 8011810:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011814:	e041      	b.n	801189a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	637b      	str	r3, [r7, #52]	; 0x34
 801181c:	e002      	b.n	8011824 <tcp_write+0x23c>
 801181e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	637b      	str	r3, [r7, #52]	; 0x34
 8011824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d1f8      	bne.n	801181e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801182c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801182e:	7b1b      	ldrb	r3, [r3, #12]
 8011830:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011834:	2b00      	cmp	r3, #0
 8011836:	d115      	bne.n	8011864 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801183a:	685b      	ldr	r3, [r3, #4]
 801183c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801183e:	8952      	ldrh	r2, [r2, #10]
 8011840:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011842:	68ba      	ldr	r2, [r7, #8]
 8011844:	429a      	cmp	r2, r3
 8011846:	d10d      	bne.n	8011864 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011848:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801184c:	2b00      	cmp	r3, #0
 801184e:	d006      	beq.n	801185e <tcp_write+0x276>
 8011850:	4b1c      	ldr	r3, [pc, #112]	; (80118c4 <tcp_write+0x2dc>)
 8011852:	f240 2231 	movw	r2, #561	; 0x231
 8011856:	4922      	ldr	r1, [pc, #136]	; (80118e0 <tcp_write+0x2f8>)
 8011858:	481c      	ldr	r0, [pc, #112]	; (80118cc <tcp_write+0x2e4>)
 801185a:	f006 feb1 	bl	80185c0 <iprintf>
          extendlen = seglen;
 801185e:	8bfb      	ldrh	r3, [r7, #30]
 8011860:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011862:	e01a      	b.n	801189a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011864:	8bfb      	ldrh	r3, [r7, #30]
 8011866:	2201      	movs	r2, #1
 8011868:	4619      	mov	r1, r3
 801186a:	2000      	movs	r0, #0
 801186c:	f7fa fdd8 	bl	800c420 <pbuf_alloc>
 8011870:	6578      	str	r0, [r7, #84]	; 0x54
 8011872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011874:	2b00      	cmp	r3, #0
 8011876:	f000 81e0 	beq.w	8011c3a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801187a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801187e:	68ba      	ldr	r2, [r7, #8]
 8011880:	441a      	add	r2, r3
 8011882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011884:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011886:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011888:	f7fb f93c 	bl	800cb04 <pbuf_clen>
 801188c:	4603      	mov	r3, r0
 801188e:	461a      	mov	r2, r3
 8011890:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011894:	4413      	add	r3, r2
 8011896:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801189a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801189e:	8bfb      	ldrh	r3, [r7, #30]
 80118a0:	4413      	add	r3, r2
 80118a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80118a6:	e0dc      	b.n	8011a62 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	f000 80d7 	beq.w	8011a62 <tcp_write+0x47a>
 80118b4:	4b03      	ldr	r3, [pc, #12]	; (80118c4 <tcp_write+0x2dc>)
 80118b6:	f240 224a 	movw	r2, #586	; 0x24a
 80118ba:	490a      	ldr	r1, [pc, #40]	; (80118e4 <tcp_write+0x2fc>)
 80118bc:	4803      	ldr	r0, [pc, #12]	; (80118cc <tcp_write+0x2e4>)
 80118be:	f006 fe7f 	bl	80185c0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80118c2:	e0ce      	b.n	8011a62 <tcp_write+0x47a>
 80118c4:	0801bf38 	.word	0x0801bf38
 80118c8:	0801c0d8 	.word	0x0801c0d8
 80118cc:	0801bf8c 	.word	0x0801bf8c
 80118d0:	0801c0f0 	.word	0x0801c0f0
 80118d4:	0801c124 	.word	0x0801c124
 80118d8:	0801c13c 	.word	0x0801c13c
 80118dc:	0801c15c 	.word	0x0801c15c
 80118e0:	0801c17c 	.word	0x0801c17c
 80118e4:	0801c1a8 	.word	0x0801c1a8
    struct pbuf *p;
    u16_t left = len - pos;
 80118e8:	88fa      	ldrh	r2, [r7, #6]
 80118ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80118f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80118f6:	b29b      	uxth	r3, r3
 80118f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80118fa:	1ad3      	subs	r3, r2, r3
 80118fc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80118fe:	8b7a      	ldrh	r2, [r7, #26]
 8011900:	8bbb      	ldrh	r3, [r7, #28]
 8011902:	4293      	cmp	r3, r2
 8011904:	bf28      	it	cs
 8011906:	4613      	movcs	r3, r2
 8011908:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801190a:	797b      	ldrb	r3, [r7, #5]
 801190c:	f003 0301 	and.w	r3, r3, #1
 8011910:	2b00      	cmp	r3, #0
 8011912:	d036      	beq.n	8011982 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011914:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011918:	b29a      	uxth	r2, r3
 801191a:	8b3b      	ldrh	r3, [r7, #24]
 801191c:	4413      	add	r3, r2
 801191e:	b299      	uxth	r1, r3
 8011920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011922:	2b00      	cmp	r3, #0
 8011924:	bf0c      	ite	eq
 8011926:	2301      	moveq	r3, #1
 8011928:	2300      	movne	r3, #0
 801192a:	b2db      	uxtb	r3, r3
 801192c:	f107 0012 	add.w	r0, r7, #18
 8011930:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011932:	9302      	str	r3, [sp, #8]
 8011934:	797b      	ldrb	r3, [r7, #5]
 8011936:	9301      	str	r3, [sp, #4]
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	9300      	str	r3, [sp, #0]
 801193c:	4603      	mov	r3, r0
 801193e:	2036      	movs	r0, #54	; 0x36
 8011940:	f7ff fd5e 	bl	8011400 <tcp_pbuf_prealloc>
 8011944:	6338      	str	r0, [r7, #48]	; 0x30
 8011946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011948:	2b00      	cmp	r3, #0
 801194a:	f000 8178 	beq.w	8011c3e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801194e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011950:	895b      	ldrh	r3, [r3, #10]
 8011952:	8b3a      	ldrh	r2, [r7, #24]
 8011954:	429a      	cmp	r2, r3
 8011956:	d906      	bls.n	8011966 <tcp_write+0x37e>
 8011958:	4b8c      	ldr	r3, [pc, #560]	; (8011b8c <tcp_write+0x5a4>)
 801195a:	f240 2266 	movw	r2, #614	; 0x266
 801195e:	498c      	ldr	r1, [pc, #560]	; (8011b90 <tcp_write+0x5a8>)
 8011960:	488c      	ldr	r0, [pc, #560]	; (8011b94 <tcp_write+0x5ac>)
 8011962:	f006 fe2d 	bl	80185c0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011968:	685a      	ldr	r2, [r3, #4]
 801196a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801196e:	18d0      	adds	r0, r2, r3
 8011970:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011974:	68ba      	ldr	r2, [r7, #8]
 8011976:	4413      	add	r3, r2
 8011978:	8b3a      	ldrh	r2, [r7, #24]
 801197a:	4619      	mov	r1, r3
 801197c:	f007 f820 	bl	80189c0 <memcpy>
 8011980:	e02f      	b.n	80119e2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011982:	8a7b      	ldrh	r3, [r7, #18]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d006      	beq.n	8011996 <tcp_write+0x3ae>
 8011988:	4b80      	ldr	r3, [pc, #512]	; (8011b8c <tcp_write+0x5a4>)
 801198a:	f240 2271 	movw	r2, #625	; 0x271
 801198e:	4982      	ldr	r1, [pc, #520]	; (8011b98 <tcp_write+0x5b0>)
 8011990:	4880      	ldr	r0, [pc, #512]	; (8011b94 <tcp_write+0x5ac>)
 8011992:	f006 fe15 	bl	80185c0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011996:	8b3b      	ldrh	r3, [r7, #24]
 8011998:	2201      	movs	r2, #1
 801199a:	4619      	mov	r1, r3
 801199c:	2036      	movs	r0, #54	; 0x36
 801199e:	f7fa fd3f 	bl	800c420 <pbuf_alloc>
 80119a2:	6178      	str	r0, [r7, #20]
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	f000 814b 	beq.w	8011c42 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80119ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80119b0:	68ba      	ldr	r2, [r7, #8]
 80119b2:	441a      	add	r2, r3
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80119b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80119bc:	b29b      	uxth	r3, r3
 80119be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119c2:	4619      	mov	r1, r3
 80119c4:	2036      	movs	r0, #54	; 0x36
 80119c6:	f7fa fd2b 	bl	800c420 <pbuf_alloc>
 80119ca:	6338      	str	r0, [r7, #48]	; 0x30
 80119cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d103      	bne.n	80119da <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80119d2:	6978      	ldr	r0, [r7, #20]
 80119d4:	f7fb f808 	bl	800c9e8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80119d8:	e136      	b.n	8011c48 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80119da:	6979      	ldr	r1, [r7, #20]
 80119dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119de:	f7fb f8d1 	bl	800cb84 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80119e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119e4:	f7fb f88e 	bl	800cb04 <pbuf_clen>
 80119e8:	4603      	mov	r3, r0
 80119ea:	461a      	mov	r2, r3
 80119ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80119f0:	4413      	add	r3, r2
 80119f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80119f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80119fa:	2b09      	cmp	r3, #9
 80119fc:	d903      	bls.n	8011a06 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80119fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a00:	f7fa fff2 	bl	800c9e8 <pbuf_free>
      goto memerr;
 8011a04:	e120      	b.n	8011c48 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011a0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a0e:	441a      	add	r2, r3
 8011a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a14:	9300      	str	r3, [sp, #0]
 8011a16:	4613      	mov	r3, r2
 8011a18:	2200      	movs	r2, #0
 8011a1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011a1c:	68f8      	ldr	r0, [r7, #12]
 8011a1e:	f7ff fc51 	bl	80112c4 <tcp_create_segment>
 8011a22:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	f000 810d 	beq.w	8011c46 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d102      	bne.n	8011a38 <tcp_write+0x450>
      queue = seg;
 8011a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a34:	647b      	str	r3, [r7, #68]	; 0x44
 8011a36:	e00c      	b.n	8011a52 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d106      	bne.n	8011a4c <tcp_write+0x464>
 8011a3e:	4b53      	ldr	r3, [pc, #332]	; (8011b8c <tcp_write+0x5a4>)
 8011a40:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011a44:	4955      	ldr	r1, [pc, #340]	; (8011b9c <tcp_write+0x5b4>)
 8011a46:	4853      	ldr	r0, [pc, #332]	; (8011b94 <tcp_write+0x5ac>)
 8011a48:	f006 fdba 	bl	80185c0 <iprintf>
      prev_seg->next = seg;
 8011a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a50:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a54:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011a56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a5a:	8b3b      	ldrh	r3, [r7, #24]
 8011a5c:	4413      	add	r3, r2
 8011a5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011a62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a66:	88fb      	ldrh	r3, [r7, #6]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	f4ff af3d 	bcc.w	80118e8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011a6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d02c      	beq.n	8011ace <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a76:	685b      	ldr	r3, [r3, #4]
 8011a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a7a:	e01e      	b.n	8011aba <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a7e:	891a      	ldrh	r2, [r3, #8]
 8011a80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a82:	4413      	add	r3, r2
 8011a84:	b29a      	uxth	r2, r3
 8011a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a88:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d110      	bne.n	8011ab4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a94:	685b      	ldr	r3, [r3, #4]
 8011a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a98:	8952      	ldrh	r2, [r2, #10]
 8011a9a:	4413      	add	r3, r2
 8011a9c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011a9e:	68b9      	ldr	r1, [r7, #8]
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f006 ff8d 	bl	80189c0 <memcpy>
        p->len += oversize_used;
 8011aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa8:	895a      	ldrh	r2, [r3, #10]
 8011aaa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011aac:	4413      	add	r3, r2
 8011aae:	b29a      	uxth	r2, r3
 8011ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d1dd      	bne.n	8011a7c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ac2:	891a      	ldrh	r2, [r3, #8]
 8011ac4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ac6:	4413      	add	r3, r2
 8011ac8:	b29a      	uxth	r2, r3
 8011aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011acc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011ace:	8a7a      	ldrh	r2, [r7, #18]
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d018      	beq.n	8011b0e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d106      	bne.n	8011af0 <tcp_write+0x508>
 8011ae2:	4b2a      	ldr	r3, [pc, #168]	; (8011b8c <tcp_write+0x5a4>)
 8011ae4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011ae8:	492d      	ldr	r1, [pc, #180]	; (8011ba0 <tcp_write+0x5b8>)
 8011aea:	482a      	ldr	r0, [pc, #168]	; (8011b94 <tcp_write+0x5ac>)
 8011aec:	f006 fd68 	bl	80185c0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fb f844 	bl	800cb84 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011afe:	891a      	ldrh	r2, [r3, #8]
 8011b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b02:	891b      	ldrh	r3, [r3, #8]
 8011b04:	4413      	add	r3, r2
 8011b06:	b29a      	uxth	r2, r3
 8011b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b0a:	811a      	strh	r2, [r3, #8]
 8011b0c:	e037      	b.n	8011b7e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011b0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d034      	beq.n	8011b7e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d003      	beq.n	8011b22 <tcp_write+0x53a>
 8011b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d106      	bne.n	8011b30 <tcp_write+0x548>
 8011b22:	4b1a      	ldr	r3, [pc, #104]	; (8011b8c <tcp_write+0x5a4>)
 8011b24:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011b28:	491e      	ldr	r1, [pc, #120]	; (8011ba4 <tcp_write+0x5bc>)
 8011b2a:	481a      	ldr	r0, [pc, #104]	; (8011b94 <tcp_write+0x5ac>)
 8011b2c:	f006 fd48 	bl	80185c0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b36:	e009      	b.n	8011b4c <tcp_write+0x564>
      p->tot_len += extendlen;
 8011b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b3a:	891a      	ldrh	r2, [r3, #8]
 8011b3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011b3e:	4413      	add	r3, r2
 8011b40:	b29a      	uxth	r2, r3
 8011b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b44:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d1f1      	bne.n	8011b38 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b56:	891a      	ldrh	r2, [r3, #8]
 8011b58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011b5a:	4413      	add	r3, r2
 8011b5c:	b29a      	uxth	r2, r3
 8011b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b60:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b64:	895a      	ldrh	r2, [r3, #10]
 8011b66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011b68:	4413      	add	r3, r2
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b6e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b72:	891a      	ldrh	r2, [r3, #8]
 8011b74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011b76:	4413      	add	r3, r2
 8011b78:	b29a      	uxth	r2, r3
 8011b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b7c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d111      	bne.n	8011ba8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b88:	66da      	str	r2, [r3, #108]	; 0x6c
 8011b8a:	e010      	b.n	8011bae <tcp_write+0x5c6>
 8011b8c:	0801bf38 	.word	0x0801bf38
 8011b90:	0801c1d8 	.word	0x0801c1d8
 8011b94:	0801bf8c 	.word	0x0801bf8c
 8011b98:	0801c218 	.word	0x0801c218
 8011b9c:	0801c228 	.word	0x0801c228
 8011ba0:	0801c23c 	.word	0x0801c23c
 8011ba4:	0801c274 	.word	0x0801c274
  } else {
    last_unsent->next = queue;
 8011ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011bac:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011bb2:	88fb      	ldrh	r3, [r7, #6]
 8011bb4:	441a      	add	r2, r3
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011bc0:	88fb      	ldrh	r3, [r7, #6]
 8011bc2:	1ad3      	subs	r3, r2, r3
 8011bc4:	b29a      	uxth	r2, r3
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011bd2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d00e      	beq.n	8011bfe <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d10a      	bne.n	8011bfe <tcp_write+0x616>
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d106      	bne.n	8011bfe <tcp_write+0x616>
 8011bf0:	4b2c      	ldr	r3, [pc, #176]	; (8011ca4 <tcp_write+0x6bc>)
 8011bf2:	f240 3212 	movw	r2, #786	; 0x312
 8011bf6:	492c      	ldr	r1, [pc, #176]	; (8011ca8 <tcp_write+0x6c0>)
 8011bf8:	482c      	ldr	r0, [pc, #176]	; (8011cac <tcp_write+0x6c4>)
 8011bfa:	f006 fce1 	bl	80185c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d016      	beq.n	8011c32 <tcp_write+0x64a>
 8011c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c06:	68db      	ldr	r3, [r3, #12]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d012      	beq.n	8011c32 <tcp_write+0x64a>
 8011c0c:	797b      	ldrb	r3, [r7, #5]
 8011c0e:	f003 0302 	and.w	r3, r3, #2
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d10d      	bne.n	8011c32 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c18:	68db      	ldr	r3, [r3, #12]
 8011c1a:	899b      	ldrh	r3, [r3, #12]
 8011c1c:	b29c      	uxth	r4, r3
 8011c1e:	2008      	movs	r0, #8
 8011c20:	f7f9 faae 	bl	800b180 <lwip_htons>
 8011c24:	4603      	mov	r3, r0
 8011c26:	461a      	mov	r2, r3
 8011c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c2a:	68db      	ldr	r3, [r3, #12]
 8011c2c:	4322      	orrs	r2, r4
 8011c2e:	b292      	uxth	r2, r2
 8011c30:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011c32:	2300      	movs	r3, #0
 8011c34:	e031      	b.n	8011c9a <tcp_write+0x6b2>
          goto memerr;
 8011c36:	bf00      	nop
 8011c38:	e006      	b.n	8011c48 <tcp_write+0x660>
            goto memerr;
 8011c3a:	bf00      	nop
 8011c3c:	e004      	b.n	8011c48 <tcp_write+0x660>
        goto memerr;
 8011c3e:	bf00      	nop
 8011c40:	e002      	b.n	8011c48 <tcp_write+0x660>
        goto memerr;
 8011c42:	bf00      	nop
 8011c44:	e000      	b.n	8011c48 <tcp_write+0x660>
      goto memerr;
 8011c46:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	8b5b      	ldrh	r3, [r3, #26]
 8011c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c50:	b29a      	uxth	r2, r3
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d002      	beq.n	8011c62 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011c5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011c5e:	f7fa fec3 	bl	800c9e8 <pbuf_free>
  }
  if (queue != NULL) {
 8011c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d002      	beq.n	8011c6e <tcp_write+0x686>
    tcp_segs_free(queue);
 8011c68:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011c6a:	f7fc fb4d 	bl	800e308 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d00e      	beq.n	8011c96 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d10a      	bne.n	8011c96 <tcp_write+0x6ae>
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d106      	bne.n	8011c96 <tcp_write+0x6ae>
 8011c88:	4b06      	ldr	r3, [pc, #24]	; (8011ca4 <tcp_write+0x6bc>)
 8011c8a:	f240 3227 	movw	r2, #807	; 0x327
 8011c8e:	4906      	ldr	r1, [pc, #24]	; (8011ca8 <tcp_write+0x6c0>)
 8011c90:	4806      	ldr	r0, [pc, #24]	; (8011cac <tcp_write+0x6c4>)
 8011c92:	f006 fc95 	bl	80185c0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	375c      	adds	r7, #92	; 0x5c
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd90      	pop	{r4, r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	0801bf38 	.word	0x0801bf38
 8011ca8:	0801c2ac 	.word	0x0801c2ac
 8011cac:	0801bf8c 	.word	0x0801bf8c

08011cb0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011cb0:	b590      	push	{r4, r7, lr}
 8011cb2:	b08b      	sub	sp, #44	; 0x2c
 8011cb4:	af02      	add	r7, sp, #8
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	460b      	mov	r3, r1
 8011cba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	61fb      	str	r3, [r7, #28]
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d106      	bne.n	8011cdc <tcp_split_unsent_seg+0x2c>
 8011cce:	4b95      	ldr	r3, [pc, #596]	; (8011f24 <tcp_split_unsent_seg+0x274>)
 8011cd0:	f240 324b 	movw	r2, #843	; 0x34b
 8011cd4:	4994      	ldr	r1, [pc, #592]	; (8011f28 <tcp_split_unsent_seg+0x278>)
 8011cd6:	4895      	ldr	r0, [pc, #596]	; (8011f2c <tcp_split_unsent_seg+0x27c>)
 8011cd8:	f006 fc72 	bl	80185c0 <iprintf>

  useg = pcb->unsent;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ce0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d102      	bne.n	8011cee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cec:	e116      	b.n	8011f1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011cee:	887b      	ldrh	r3, [r7, #2]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d109      	bne.n	8011d08 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011cf4:	4b8b      	ldr	r3, [pc, #556]	; (8011f24 <tcp_split_unsent_seg+0x274>)
 8011cf6:	f240 3253 	movw	r2, #851	; 0x353
 8011cfa:	498d      	ldr	r1, [pc, #564]	; (8011f30 <tcp_split_unsent_seg+0x280>)
 8011cfc:	488b      	ldr	r0, [pc, #556]	; (8011f2c <tcp_split_unsent_seg+0x27c>)
 8011cfe:	f006 fc5f 	bl	80185c0 <iprintf>
    return ERR_VAL;
 8011d02:	f06f 0305 	mvn.w	r3, #5
 8011d06:	e109      	b.n	8011f1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011d08:	697b      	ldr	r3, [r7, #20]
 8011d0a:	891b      	ldrh	r3, [r3, #8]
 8011d0c:	887a      	ldrh	r2, [r7, #2]
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	d301      	bcc.n	8011d16 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011d12:	2300      	movs	r3, #0
 8011d14:	e102      	b.n	8011f1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d1a:	887a      	ldrh	r2, [r7, #2]
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d906      	bls.n	8011d2e <tcp_split_unsent_seg+0x7e>
 8011d20:	4b80      	ldr	r3, [pc, #512]	; (8011f24 <tcp_split_unsent_seg+0x274>)
 8011d22:	f240 325b 	movw	r2, #859	; 0x35b
 8011d26:	4983      	ldr	r1, [pc, #524]	; (8011f34 <tcp_split_unsent_seg+0x284>)
 8011d28:	4880      	ldr	r0, [pc, #512]	; (8011f2c <tcp_split_unsent_seg+0x27c>)
 8011d2a:	f006 fc49 	bl	80185c0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	891b      	ldrh	r3, [r3, #8]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d106      	bne.n	8011d44 <tcp_split_unsent_seg+0x94>
 8011d36:	4b7b      	ldr	r3, [pc, #492]	; (8011f24 <tcp_split_unsent_seg+0x274>)
 8011d38:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011d3c:	497e      	ldr	r1, [pc, #504]	; (8011f38 <tcp_split_unsent_seg+0x288>)
 8011d3e:	487b      	ldr	r0, [pc, #492]	; (8011f2c <tcp_split_unsent_seg+0x27c>)
 8011d40:	f006 fc3e 	bl	80185c0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	7a9b      	ldrb	r3, [r3, #10]
 8011d48:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011d4a:	7bfb      	ldrb	r3, [r7, #15]
 8011d4c:	009b      	lsls	r3, r3, #2
 8011d4e:	b2db      	uxtb	r3, r3
 8011d50:	f003 0304 	and.w	r3, r3, #4
 8011d54:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	891a      	ldrh	r2, [r3, #8]
 8011d5a:	887b      	ldrh	r3, [r7, #2]
 8011d5c:	1ad3      	subs	r3, r2, r3
 8011d5e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011d60:	7bbb      	ldrb	r3, [r7, #14]
 8011d62:	b29a      	uxth	r2, r3
 8011d64:	89bb      	ldrh	r3, [r7, #12]
 8011d66:	4413      	add	r3, r2
 8011d68:	b29b      	uxth	r3, r3
 8011d6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d6e:	4619      	mov	r1, r3
 8011d70:	2036      	movs	r0, #54	; 0x36
 8011d72:	f7fa fb55 	bl	800c420 <pbuf_alloc>
 8011d76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	f000 80b7 	beq.w	8011eee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	891a      	ldrh	r2, [r3, #8]
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	891b      	ldrh	r3, [r3, #8]
 8011d8a:	1ad3      	subs	r3, r2, r3
 8011d8c:	b29a      	uxth	r2, r3
 8011d8e:	887b      	ldrh	r3, [r7, #2]
 8011d90:	4413      	add	r3, r2
 8011d92:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	6858      	ldr	r0, [r3, #4]
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	685a      	ldr	r2, [r3, #4]
 8011d9c:	7bbb      	ldrb	r3, [r7, #14]
 8011d9e:	18d1      	adds	r1, r2, r3
 8011da0:	897b      	ldrh	r3, [r7, #10]
 8011da2:	89ba      	ldrh	r2, [r7, #12]
 8011da4:	f7fb f826 	bl	800cdf4 <pbuf_copy_partial>
 8011da8:	4603      	mov	r3, r0
 8011daa:	461a      	mov	r2, r3
 8011dac:	89bb      	ldrh	r3, [r7, #12]
 8011dae:	4293      	cmp	r3, r2
 8011db0:	f040 809f 	bne.w	8011ef2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	68db      	ldr	r3, [r3, #12]
 8011db8:	899b      	ldrh	r3, [r3, #12]
 8011dba:	b29b      	uxth	r3, r3
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f7f9 f9df 	bl	800b180 <lwip_htons>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	b2db      	uxtb	r3, r3
 8011dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011dca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011dcc:	2300      	movs	r3, #0
 8011dce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011dd0:	7efb      	ldrb	r3, [r7, #27]
 8011dd2:	f003 0308 	and.w	r3, r3, #8
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d007      	beq.n	8011dea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011dda:	7efb      	ldrb	r3, [r7, #27]
 8011ddc:	f023 0308 	bic.w	r3, r3, #8
 8011de0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011de2:	7ebb      	ldrb	r3, [r7, #26]
 8011de4:	f043 0308 	orr.w	r3, r3, #8
 8011de8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011dea:	7efb      	ldrb	r3, [r7, #27]
 8011dec:	f003 0301 	and.w	r3, r3, #1
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d007      	beq.n	8011e04 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011df4:	7efb      	ldrb	r3, [r7, #27]
 8011df6:	f023 0301 	bic.w	r3, r3, #1
 8011dfa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011dfc:	7ebb      	ldrb	r3, [r7, #26]
 8011dfe:	f043 0301 	orr.w	r3, r3, #1
 8011e02:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	68db      	ldr	r3, [r3, #12]
 8011e08:	685b      	ldr	r3, [r3, #4]
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f7f9 f9cd 	bl	800b1aa <lwip_htonl>
 8011e10:	4602      	mov	r2, r0
 8011e12:	887b      	ldrh	r3, [r7, #2]
 8011e14:	18d1      	adds	r1, r2, r3
 8011e16:	7eba      	ldrb	r2, [r7, #26]
 8011e18:	7bfb      	ldrb	r3, [r7, #15]
 8011e1a:	9300      	str	r3, [sp, #0]
 8011e1c:	460b      	mov	r3, r1
 8011e1e:	6939      	ldr	r1, [r7, #16]
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f7ff fa4f 	bl	80112c4 <tcp_create_segment>
 8011e26:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011e28:	69fb      	ldr	r3, [r7, #28]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d063      	beq.n	8011ef6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7fa fe66 	bl	800cb04 <pbuf_clen>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	461a      	mov	r2, r3
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e42:	1a9b      	subs	r3, r3, r2
 8011e44:	b29a      	uxth	r2, r3
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	6858      	ldr	r0, [r3, #4]
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	685b      	ldr	r3, [r3, #4]
 8011e54:	891a      	ldrh	r2, [r3, #8]
 8011e56:	89bb      	ldrh	r3, [r7, #12]
 8011e58:	1ad3      	subs	r3, r2, r3
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	f7fa fc3d 	bl	800c6dc <pbuf_realloc>
  useg->len -= remainder;
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	891a      	ldrh	r2, [r3, #8]
 8011e66:	89bb      	ldrh	r3, [r7, #12]
 8011e68:	1ad3      	subs	r3, r2, r3
 8011e6a:	b29a      	uxth	r2, r3
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	899b      	ldrh	r3, [r3, #12]
 8011e76:	b29c      	uxth	r4, r3
 8011e78:	7efb      	ldrb	r3, [r7, #27]
 8011e7a:	b29b      	uxth	r3, r3
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7f9 f97f 	bl	800b180 <lwip_htons>
 8011e82:	4603      	mov	r3, r0
 8011e84:	461a      	mov	r2, r3
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	4322      	orrs	r2, r4
 8011e8c:	b292      	uxth	r2, r2
 8011e8e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011e90:	697b      	ldr	r3, [r7, #20]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7fa fe35 	bl	800cb04 <pbuf_clen>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ea4:	4413      	add	r3, r2
 8011ea6:	b29a      	uxth	r2, r3
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7fa fe26 	bl	800cb04 <pbuf_clen>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	461a      	mov	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ec2:	4413      	add	r3, r2
 8011ec4:	b29a      	uxth	r2, r3
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	681a      	ldr	r2, [r3, #0]
 8011ed0:	69fb      	ldr	r3, [r7, #28]
 8011ed2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	69fa      	ldr	r2, [r7, #28]
 8011ed8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011eda:	69fb      	ldr	r3, [r7, #28]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d103      	bne.n	8011eea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011eea:	2300      	movs	r3, #0
 8011eec:	e016      	b.n	8011f1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011eee:	bf00      	nop
 8011ef0:	e002      	b.n	8011ef8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011ef2:	bf00      	nop
 8011ef4:	e000      	b.n	8011ef8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011ef6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011ef8:	69fb      	ldr	r3, [r7, #28]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d006      	beq.n	8011f0c <tcp_split_unsent_seg+0x25c>
 8011efe:	4b09      	ldr	r3, [pc, #36]	; (8011f24 <tcp_split_unsent_seg+0x274>)
 8011f00:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011f04:	490d      	ldr	r1, [pc, #52]	; (8011f3c <tcp_split_unsent_seg+0x28c>)
 8011f06:	4809      	ldr	r0, [pc, #36]	; (8011f2c <tcp_split_unsent_seg+0x27c>)
 8011f08:	f006 fb5a 	bl	80185c0 <iprintf>
  if (p != NULL) {
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d002      	beq.n	8011f18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011f12:	6938      	ldr	r0, [r7, #16]
 8011f14:	f7fa fd68 	bl	800c9e8 <pbuf_free>
  }

  return ERR_MEM;
 8011f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3724      	adds	r7, #36	; 0x24
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd90      	pop	{r4, r7, pc}
 8011f24:	0801bf38 	.word	0x0801bf38
 8011f28:	0801c2cc 	.word	0x0801c2cc
 8011f2c:	0801bf8c 	.word	0x0801bf8c
 8011f30:	0801c2f0 	.word	0x0801c2f0
 8011f34:	0801c314 	.word	0x0801c314
 8011f38:	0801c324 	.word	0x0801c324
 8011f3c:	0801c334 	.word	0x0801c334

08011f40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011f40:	b590      	push	{r4, r7, lr}
 8011f42:	b085      	sub	sp, #20
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d106      	bne.n	8011f5c <tcp_send_fin+0x1c>
 8011f4e:	4b21      	ldr	r3, [pc, #132]	; (8011fd4 <tcp_send_fin+0x94>)
 8011f50:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011f54:	4920      	ldr	r1, [pc, #128]	; (8011fd8 <tcp_send_fin+0x98>)
 8011f56:	4821      	ldr	r0, [pc, #132]	; (8011fdc <tcp_send_fin+0x9c>)
 8011f58:	f006 fb32 	bl	80185c0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d02e      	beq.n	8011fc2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f68:	60fb      	str	r3, [r7, #12]
 8011f6a:	e002      	b.n	8011f72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d1f8      	bne.n	8011f6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	899b      	ldrh	r3, [r3, #12]
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7f9 f8fc 	bl	800b180 <lwip_htons>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	f003 0307 	and.w	r3, r3, #7
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d116      	bne.n	8011fc2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	899b      	ldrh	r3, [r3, #12]
 8011f9a:	b29c      	uxth	r4, r3
 8011f9c:	2001      	movs	r0, #1
 8011f9e:	f7f9 f8ef 	bl	800b180 <lwip_htons>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	461a      	mov	r2, r3
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	68db      	ldr	r3, [r3, #12]
 8011faa:	4322      	orrs	r2, r4
 8011fac:	b292      	uxth	r2, r2
 8011fae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	8b5b      	ldrh	r3, [r3, #26]
 8011fb4:	f043 0320 	orr.w	r3, r3, #32
 8011fb8:	b29a      	uxth	r2, r3
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	e004      	b.n	8011fcc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011fc2:	2101      	movs	r1, #1
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f000 f80b 	bl	8011fe0 <tcp_enqueue_flags>
 8011fca:	4603      	mov	r3, r0
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3714      	adds	r7, #20
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd90      	pop	{r4, r7, pc}
 8011fd4:	0801bf38 	.word	0x0801bf38
 8011fd8:	0801c340 	.word	0x0801c340
 8011fdc:	0801bf8c 	.word	0x0801bf8c

08011fe0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b08a      	sub	sp, #40	; 0x28
 8011fe4:	af02      	add	r7, sp, #8
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	460b      	mov	r3, r1
 8011fea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011fec:	2300      	movs	r3, #0
 8011fee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011ff4:	78fb      	ldrb	r3, [r7, #3]
 8011ff6:	f003 0303 	and.w	r3, r3, #3
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d106      	bne.n	801200c <tcp_enqueue_flags+0x2c>
 8011ffe:	4b67      	ldr	r3, [pc, #412]	; (801219c <tcp_enqueue_flags+0x1bc>)
 8012000:	f240 4211 	movw	r2, #1041	; 0x411
 8012004:	4966      	ldr	r1, [pc, #408]	; (80121a0 <tcp_enqueue_flags+0x1c0>)
 8012006:	4867      	ldr	r0, [pc, #412]	; (80121a4 <tcp_enqueue_flags+0x1c4>)
 8012008:	f006 fada 	bl	80185c0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d106      	bne.n	8012020 <tcp_enqueue_flags+0x40>
 8012012:	4b62      	ldr	r3, [pc, #392]	; (801219c <tcp_enqueue_flags+0x1bc>)
 8012014:	f240 4213 	movw	r2, #1043	; 0x413
 8012018:	4963      	ldr	r1, [pc, #396]	; (80121a8 <tcp_enqueue_flags+0x1c8>)
 801201a:	4862      	ldr	r0, [pc, #392]	; (80121a4 <tcp_enqueue_flags+0x1c4>)
 801201c:	f006 fad0 	bl	80185c0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012020:	78fb      	ldrb	r3, [r7, #3]
 8012022:	f003 0302 	and.w	r3, r3, #2
 8012026:	2b00      	cmp	r3, #0
 8012028:	d001      	beq.n	801202e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801202a:	2301      	movs	r3, #1
 801202c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801202e:	7ffb      	ldrb	r3, [r7, #31]
 8012030:	009b      	lsls	r3, r3, #2
 8012032:	b2db      	uxtb	r3, r3
 8012034:	f003 0304 	and.w	r3, r3, #4
 8012038:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801203a:	7dfb      	ldrb	r3, [r7, #23]
 801203c:	b29b      	uxth	r3, r3
 801203e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012042:	4619      	mov	r1, r3
 8012044:	2036      	movs	r0, #54	; 0x36
 8012046:	f7fa f9eb 	bl	800c420 <pbuf_alloc>
 801204a:	6138      	str	r0, [r7, #16]
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d109      	bne.n	8012066 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	8b5b      	ldrh	r3, [r3, #26]
 8012056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801205a:	b29a      	uxth	r2, r3
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012060:	f04f 33ff 	mov.w	r3, #4294967295
 8012064:	e095      	b.n	8012192 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012066:	693b      	ldr	r3, [r7, #16]
 8012068:	895a      	ldrh	r2, [r3, #10]
 801206a:	7dfb      	ldrb	r3, [r7, #23]
 801206c:	b29b      	uxth	r3, r3
 801206e:	429a      	cmp	r2, r3
 8012070:	d206      	bcs.n	8012080 <tcp_enqueue_flags+0xa0>
 8012072:	4b4a      	ldr	r3, [pc, #296]	; (801219c <tcp_enqueue_flags+0x1bc>)
 8012074:	f240 4239 	movw	r2, #1081	; 0x439
 8012078:	494c      	ldr	r1, [pc, #304]	; (80121ac <tcp_enqueue_flags+0x1cc>)
 801207a:	484a      	ldr	r0, [pc, #296]	; (80121a4 <tcp_enqueue_flags+0x1c4>)
 801207c:	f006 faa0 	bl	80185c0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012084:	78fa      	ldrb	r2, [r7, #3]
 8012086:	7ffb      	ldrb	r3, [r7, #31]
 8012088:	9300      	str	r3, [sp, #0]
 801208a:	460b      	mov	r3, r1
 801208c:	6939      	ldr	r1, [r7, #16]
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	f7ff f918 	bl	80112c4 <tcp_create_segment>
 8012094:	60f8      	str	r0, [r7, #12]
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d109      	bne.n	80120b0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	8b5b      	ldrh	r3, [r3, #26]
 80120a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120a4:	b29a      	uxth	r2, r3
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80120aa:	f04f 33ff 	mov.w	r3, #4294967295
 80120ae:	e070      	b.n	8012192 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	68db      	ldr	r3, [r3, #12]
 80120b4:	f003 0303 	and.w	r3, r3, #3
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d006      	beq.n	80120ca <tcp_enqueue_flags+0xea>
 80120bc:	4b37      	ldr	r3, [pc, #220]	; (801219c <tcp_enqueue_flags+0x1bc>)
 80120be:	f240 4242 	movw	r2, #1090	; 0x442
 80120c2:	493b      	ldr	r1, [pc, #236]	; (80121b0 <tcp_enqueue_flags+0x1d0>)
 80120c4:	4837      	ldr	r0, [pc, #220]	; (80121a4 <tcp_enqueue_flags+0x1c4>)
 80120c6:	f006 fa7b 	bl	80185c0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	891b      	ldrh	r3, [r3, #8]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d006      	beq.n	80120e0 <tcp_enqueue_flags+0x100>
 80120d2:	4b32      	ldr	r3, [pc, #200]	; (801219c <tcp_enqueue_flags+0x1bc>)
 80120d4:	f240 4243 	movw	r2, #1091	; 0x443
 80120d8:	4936      	ldr	r1, [pc, #216]	; (80121b4 <tcp_enqueue_flags+0x1d4>)
 80120da:	4832      	ldr	r0, [pc, #200]	; (80121a4 <tcp_enqueue_flags+0x1c4>)
 80120dc:	f006 fa70 	bl	80185c0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d103      	bne.n	80120f0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	68fa      	ldr	r2, [r7, #12]
 80120ec:	66da      	str	r2, [r3, #108]	; 0x6c
 80120ee:	e00d      	b.n	801210c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120f4:	61bb      	str	r3, [r7, #24]
 80120f6:	e002      	b.n	80120fe <tcp_enqueue_flags+0x11e>
 80120f8:	69bb      	ldr	r3, [r7, #24]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	61bb      	str	r3, [r7, #24]
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d1f8      	bne.n	80120f8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012106:	69bb      	ldr	r3, [r7, #24]
 8012108:	68fa      	ldr	r2, [r7, #12]
 801210a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2200      	movs	r2, #0
 8012110:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012114:	78fb      	ldrb	r3, [r7, #3]
 8012116:	f003 0302 	and.w	r3, r3, #2
 801211a:	2b00      	cmp	r3, #0
 801211c:	d104      	bne.n	8012128 <tcp_enqueue_flags+0x148>
 801211e:	78fb      	ldrb	r3, [r7, #3]
 8012120:	f003 0301 	and.w	r3, r3, #1
 8012124:	2b00      	cmp	r3, #0
 8012126:	d004      	beq.n	8012132 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801212c:	1c5a      	adds	r2, r3, #1
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012132:	78fb      	ldrb	r3, [r7, #3]
 8012134:	f003 0301 	and.w	r3, r3, #1
 8012138:	2b00      	cmp	r3, #0
 801213a:	d006      	beq.n	801214a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	8b5b      	ldrh	r3, [r3, #26]
 8012140:	f043 0320 	orr.w	r3, r3, #32
 8012144:	b29a      	uxth	r2, r3
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	4618      	mov	r0, r3
 8012150:	f7fa fcd8 	bl	800cb04 <pbuf_clen>
 8012154:	4603      	mov	r3, r0
 8012156:	461a      	mov	r2, r3
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801215e:	4413      	add	r3, r2
 8012160:	b29a      	uxth	r2, r3
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801216e:	2b00      	cmp	r3, #0
 8012170:	d00e      	beq.n	8012190 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012176:	2b00      	cmp	r3, #0
 8012178:	d10a      	bne.n	8012190 <tcp_enqueue_flags+0x1b0>
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801217e:	2b00      	cmp	r3, #0
 8012180:	d106      	bne.n	8012190 <tcp_enqueue_flags+0x1b0>
 8012182:	4b06      	ldr	r3, [pc, #24]	; (801219c <tcp_enqueue_flags+0x1bc>)
 8012184:	f240 4265 	movw	r2, #1125	; 0x465
 8012188:	490b      	ldr	r1, [pc, #44]	; (80121b8 <tcp_enqueue_flags+0x1d8>)
 801218a:	4806      	ldr	r0, [pc, #24]	; (80121a4 <tcp_enqueue_flags+0x1c4>)
 801218c:	f006 fa18 	bl	80185c0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012190:	2300      	movs	r3, #0
}
 8012192:	4618      	mov	r0, r3
 8012194:	3720      	adds	r7, #32
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
 801219a:	bf00      	nop
 801219c:	0801bf38 	.word	0x0801bf38
 80121a0:	0801c35c 	.word	0x0801c35c
 80121a4:	0801bf8c 	.word	0x0801bf8c
 80121a8:	0801c3b4 	.word	0x0801c3b4
 80121ac:	0801c3d4 	.word	0x0801c3d4
 80121b0:	0801c410 	.word	0x0801c410
 80121b4:	0801c428 	.word	0x0801c428
 80121b8:	0801c454 	.word	0x0801c454

080121bc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80121bc:	b5b0      	push	{r4, r5, r7, lr}
 80121be:	b08a      	sub	sp, #40	; 0x28
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d106      	bne.n	80121d8 <tcp_output+0x1c>
 80121ca:	4b8a      	ldr	r3, [pc, #552]	; (80123f4 <tcp_output+0x238>)
 80121cc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80121d0:	4989      	ldr	r1, [pc, #548]	; (80123f8 <tcp_output+0x23c>)
 80121d2:	488a      	ldr	r0, [pc, #552]	; (80123fc <tcp_output+0x240>)
 80121d4:	f006 f9f4 	bl	80185c0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	7d1b      	ldrb	r3, [r3, #20]
 80121dc:	2b01      	cmp	r3, #1
 80121de:	d106      	bne.n	80121ee <tcp_output+0x32>
 80121e0:	4b84      	ldr	r3, [pc, #528]	; (80123f4 <tcp_output+0x238>)
 80121e2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80121e6:	4986      	ldr	r1, [pc, #536]	; (8012400 <tcp_output+0x244>)
 80121e8:	4884      	ldr	r0, [pc, #528]	; (80123fc <tcp_output+0x240>)
 80121ea:	f006 f9e9 	bl	80185c0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80121ee:	4b85      	ldr	r3, [pc, #532]	; (8012404 <tcp_output+0x248>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d101      	bne.n	80121fc <tcp_output+0x40>
    return ERR_OK;
 80121f8:	2300      	movs	r3, #0
 80121fa:	e1ce      	b.n	801259a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012208:	4293      	cmp	r3, r2
 801220a:	bf28      	it	cs
 801220c:	4613      	movcs	r3, r2
 801220e:	b29b      	uxth	r3, r3
 8012210:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012216:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801221a:	2b00      	cmp	r3, #0
 801221c:	d10b      	bne.n	8012236 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	8b5b      	ldrh	r3, [r3, #26]
 8012222:	f003 0302 	and.w	r3, r3, #2
 8012226:	2b00      	cmp	r3, #0
 8012228:	f000 81aa 	beq.w	8012580 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f000 fdcb 	bl	8012dc8 <tcp_send_empty_ack>
 8012232:	4603      	mov	r3, r0
 8012234:	e1b1      	b.n	801259a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012236:	6879      	ldr	r1, [r7, #4]
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	3304      	adds	r3, #4
 801223c:	461a      	mov	r2, r3
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f7ff f824 	bl	801128c <tcp_route>
 8012244:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012246:	697b      	ldr	r3, [r7, #20]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d102      	bne.n	8012252 <tcp_output+0x96>
    return ERR_RTE;
 801224c:	f06f 0303 	mvn.w	r3, #3
 8012250:	e1a3      	b.n	801259a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d003      	beq.n	8012260 <tcp_output+0xa4>
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d111      	bne.n	8012284 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d002      	beq.n	801226c <tcp_output+0xb0>
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	3304      	adds	r3, #4
 801226a:	e000      	b.n	801226e <tcp_output+0xb2>
 801226c:	2300      	movs	r3, #0
 801226e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d102      	bne.n	801227c <tcp_output+0xc0>
      return ERR_RTE;
 8012276:	f06f 0303 	mvn.w	r3, #3
 801227a:	e18e      	b.n	801259a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801227c:	693b      	ldr	r3, [r7, #16]
 801227e:	681a      	ldr	r2, [r3, #0]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012286:	68db      	ldr	r3, [r3, #12]
 8012288:	685b      	ldr	r3, [r3, #4]
 801228a:	4618      	mov	r0, r3
 801228c:	f7f8 ff8d 	bl	800b1aa <lwip_htonl>
 8012290:	4602      	mov	r2, r0
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012296:	1ad3      	subs	r3, r2, r3
 8012298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801229a:	8912      	ldrh	r2, [r2, #8]
 801229c:	4413      	add	r3, r2
 801229e:	69ba      	ldr	r2, [r7, #24]
 80122a0:	429a      	cmp	r2, r3
 80122a2:	d227      	bcs.n	80122f4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80122aa:	461a      	mov	r2, r3
 80122ac:	69bb      	ldr	r3, [r7, #24]
 80122ae:	4293      	cmp	r3, r2
 80122b0:	d114      	bne.n	80122dc <tcp_output+0x120>
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d110      	bne.n	80122dc <tcp_output+0x120>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d10b      	bne.n	80122dc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2200      	movs	r2, #0
 80122c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2201      	movs	r2, #1
 80122d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2200      	movs	r2, #0
 80122d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	8b5b      	ldrh	r3, [r3, #26]
 80122e0:	f003 0302 	and.w	r3, r3, #2
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	f000 814d 	beq.w	8012584 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80122ea:	6878      	ldr	r0, [r7, #4]
 80122ec:	f000 fd6c 	bl	8012dc8 <tcp_send_empty_ack>
 80122f0:	4603      	mov	r3, r0
 80122f2:	e152      	b.n	801259a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2200      	movs	r2, #0
 80122f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012300:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012302:	6a3b      	ldr	r3, [r7, #32]
 8012304:	2b00      	cmp	r3, #0
 8012306:	f000 811c 	beq.w	8012542 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801230a:	e002      	b.n	8012312 <tcp_output+0x156>
 801230c:	6a3b      	ldr	r3, [r7, #32]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	623b      	str	r3, [r7, #32]
 8012312:	6a3b      	ldr	r3, [r7, #32]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d1f8      	bne.n	801230c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801231a:	e112      	b.n	8012542 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	899b      	ldrh	r3, [r3, #12]
 8012322:	b29b      	uxth	r3, r3
 8012324:	4618      	mov	r0, r3
 8012326:	f7f8 ff2b 	bl	800b180 <lwip_htons>
 801232a:	4603      	mov	r3, r0
 801232c:	b2db      	uxtb	r3, r3
 801232e:	f003 0304 	and.w	r3, r3, #4
 8012332:	2b00      	cmp	r3, #0
 8012334:	d006      	beq.n	8012344 <tcp_output+0x188>
 8012336:	4b2f      	ldr	r3, [pc, #188]	; (80123f4 <tcp_output+0x238>)
 8012338:	f240 5236 	movw	r2, #1334	; 0x536
 801233c:	4932      	ldr	r1, [pc, #200]	; (8012408 <tcp_output+0x24c>)
 801233e:	482f      	ldr	r0, [pc, #188]	; (80123fc <tcp_output+0x240>)
 8012340:	f006 f93e 	bl	80185c0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012348:	2b00      	cmp	r3, #0
 801234a:	d01f      	beq.n	801238c <tcp_output+0x1d0>
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	8b5b      	ldrh	r3, [r3, #26]
 8012350:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012354:	2b00      	cmp	r3, #0
 8012356:	d119      	bne.n	801238c <tcp_output+0x1d0>
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801235c:	2b00      	cmp	r3, #0
 801235e:	d00b      	beq.n	8012378 <tcp_output+0x1bc>
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d110      	bne.n	801238c <tcp_output+0x1d0>
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801236e:	891a      	ldrh	r2, [r3, #8]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012374:	429a      	cmp	r2, r3
 8012376:	d209      	bcs.n	801238c <tcp_output+0x1d0>
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801237e:	2b00      	cmp	r3, #0
 8012380:	d004      	beq.n	801238c <tcp_output+0x1d0>
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012388:	2b08      	cmp	r3, #8
 801238a:	d901      	bls.n	8012390 <tcp_output+0x1d4>
 801238c:	2301      	movs	r3, #1
 801238e:	e000      	b.n	8012392 <tcp_output+0x1d6>
 8012390:	2300      	movs	r3, #0
 8012392:	2b00      	cmp	r3, #0
 8012394:	d106      	bne.n	80123a4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	8b5b      	ldrh	r3, [r3, #26]
 801239a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801239e:	2b00      	cmp	r3, #0
 80123a0:	f000 80e4 	beq.w	801256c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	7d1b      	ldrb	r3, [r3, #20]
 80123a8:	2b02      	cmp	r3, #2
 80123aa:	d00d      	beq.n	80123c8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80123ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ae:	68db      	ldr	r3, [r3, #12]
 80123b0:	899b      	ldrh	r3, [r3, #12]
 80123b2:	b29c      	uxth	r4, r3
 80123b4:	2010      	movs	r0, #16
 80123b6:	f7f8 fee3 	bl	800b180 <lwip_htons>
 80123ba:	4603      	mov	r3, r0
 80123bc:	461a      	mov	r2, r3
 80123be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c0:	68db      	ldr	r3, [r3, #12]
 80123c2:	4322      	orrs	r2, r4
 80123c4:	b292      	uxth	r2, r2
 80123c6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80123c8:	697a      	ldr	r2, [r7, #20]
 80123ca:	6879      	ldr	r1, [r7, #4]
 80123cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123ce:	f000 f909 	bl	80125e4 <tcp_output_segment>
 80123d2:	4603      	mov	r3, r0
 80123d4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80123d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d016      	beq.n	801240c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	8b5b      	ldrh	r3, [r3, #26]
 80123e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123e6:	b29a      	uxth	r2, r3
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	835a      	strh	r2, [r3, #26]
      return err;
 80123ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123f0:	e0d3      	b.n	801259a <tcp_output+0x3de>
 80123f2:	bf00      	nop
 80123f4:	0801bf38 	.word	0x0801bf38
 80123f8:	0801c47c 	.word	0x0801c47c
 80123fc:	0801bf8c 	.word	0x0801bf8c
 8012400:	0801c494 	.word	0x0801c494
 8012404:	200115ac 	.word	0x200115ac
 8012408:	0801c4bc 	.word	0x0801c4bc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240e:	681a      	ldr	r2, [r3, #0]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	7d1b      	ldrb	r3, [r3, #20]
 8012418:	2b02      	cmp	r3, #2
 801241a:	d006      	beq.n	801242a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	8b5b      	ldrh	r3, [r3, #26]
 8012420:	f023 0303 	bic.w	r3, r3, #3
 8012424:	b29a      	uxth	r2, r3
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242c:	68db      	ldr	r3, [r3, #12]
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	4618      	mov	r0, r3
 8012432:	f7f8 feba 	bl	800b1aa <lwip_htonl>
 8012436:	4604      	mov	r4, r0
 8012438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243a:	891b      	ldrh	r3, [r3, #8]
 801243c:	461d      	mov	r5, r3
 801243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012440:	68db      	ldr	r3, [r3, #12]
 8012442:	899b      	ldrh	r3, [r3, #12]
 8012444:	b29b      	uxth	r3, r3
 8012446:	4618      	mov	r0, r3
 8012448:	f7f8 fe9a 	bl	800b180 <lwip_htons>
 801244c:	4603      	mov	r3, r0
 801244e:	b2db      	uxtb	r3, r3
 8012450:	f003 0303 	and.w	r3, r3, #3
 8012454:	2b00      	cmp	r3, #0
 8012456:	d001      	beq.n	801245c <tcp_output+0x2a0>
 8012458:	2301      	movs	r3, #1
 801245a:	e000      	b.n	801245e <tcp_output+0x2a2>
 801245c:	2300      	movs	r3, #0
 801245e:	442b      	add	r3, r5
 8012460:	4423      	add	r3, r4
 8012462:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	1ad3      	subs	r3, r2, r3
 801246c:	2b00      	cmp	r3, #0
 801246e:	da02      	bge.n	8012476 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	68ba      	ldr	r2, [r7, #8]
 8012474:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012478:	891b      	ldrh	r3, [r3, #8]
 801247a:	461c      	mov	r4, r3
 801247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247e:	68db      	ldr	r3, [r3, #12]
 8012480:	899b      	ldrh	r3, [r3, #12]
 8012482:	b29b      	uxth	r3, r3
 8012484:	4618      	mov	r0, r3
 8012486:	f7f8 fe7b 	bl	800b180 <lwip_htons>
 801248a:	4603      	mov	r3, r0
 801248c:	b2db      	uxtb	r3, r3
 801248e:	f003 0303 	and.w	r3, r3, #3
 8012492:	2b00      	cmp	r3, #0
 8012494:	d001      	beq.n	801249a <tcp_output+0x2de>
 8012496:	2301      	movs	r3, #1
 8012498:	e000      	b.n	801249c <tcp_output+0x2e0>
 801249a:	2300      	movs	r3, #0
 801249c:	4423      	add	r3, r4
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d049      	beq.n	8012536 <tcp_output+0x37a>
      seg->next = NULL;
 80124a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a4:	2200      	movs	r2, #0
 80124a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d105      	bne.n	80124bc <tcp_output+0x300>
        pcb->unacked = seg;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124b4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80124b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b8:	623b      	str	r3, [r7, #32]
 80124ba:	e03f      	b.n	801253c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80124bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124be:	68db      	ldr	r3, [r3, #12]
 80124c0:	685b      	ldr	r3, [r3, #4]
 80124c2:	4618      	mov	r0, r3
 80124c4:	f7f8 fe71 	bl	800b1aa <lwip_htonl>
 80124c8:	4604      	mov	r4, r0
 80124ca:	6a3b      	ldr	r3, [r7, #32]
 80124cc:	68db      	ldr	r3, [r3, #12]
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	4618      	mov	r0, r3
 80124d2:	f7f8 fe6a 	bl	800b1aa <lwip_htonl>
 80124d6:	4603      	mov	r3, r0
 80124d8:	1ae3      	subs	r3, r4, r3
 80124da:	2b00      	cmp	r3, #0
 80124dc:	da24      	bge.n	8012528 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	3370      	adds	r3, #112	; 0x70
 80124e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80124e4:	e002      	b.n	80124ec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80124e6:	69fb      	ldr	r3, [r7, #28]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80124ec:	69fb      	ldr	r3, [r7, #28]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d011      	beq.n	8012518 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80124f4:	69fb      	ldr	r3, [r7, #28]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	685b      	ldr	r3, [r3, #4]
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7f8 fe54 	bl	800b1aa <lwip_htonl>
 8012502:	4604      	mov	r4, r0
 8012504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012506:	68db      	ldr	r3, [r3, #12]
 8012508:	685b      	ldr	r3, [r3, #4]
 801250a:	4618      	mov	r0, r3
 801250c:	f7f8 fe4d 	bl	800b1aa <lwip_htonl>
 8012510:	4603      	mov	r3, r0
 8012512:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012514:	2b00      	cmp	r3, #0
 8012516:	dbe6      	blt.n	80124e6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012518:	69fb      	ldr	r3, [r7, #28]
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801251e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012520:	69fb      	ldr	r3, [r7, #28]
 8012522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012524:	601a      	str	r2, [r3, #0]
 8012526:	e009      	b.n	801253c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012528:	6a3b      	ldr	r3, [r7, #32]
 801252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801252c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801252e:	6a3b      	ldr	r3, [r7, #32]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	623b      	str	r3, [r7, #32]
 8012534:	e002      	b.n	801253c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012538:	f7fb fefb 	bl	800e332 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012540:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012544:	2b00      	cmp	r3, #0
 8012546:	d012      	beq.n	801256e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	4618      	mov	r0, r3
 8012550:	f7f8 fe2b 	bl	800b1aa <lwip_htonl>
 8012554:	4602      	mov	r2, r0
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801255a:	1ad3      	subs	r3, r2, r3
 801255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801255e:	8912      	ldrh	r2, [r2, #8]
 8012560:	4413      	add	r3, r2
  while (seg != NULL &&
 8012562:	69ba      	ldr	r2, [r7, #24]
 8012564:	429a      	cmp	r2, r3
 8012566:	f4bf aed9 	bcs.w	801231c <tcp_output+0x160>
 801256a:	e000      	b.n	801256e <tcp_output+0x3b2>
      break;
 801256c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012572:	2b00      	cmp	r3, #0
 8012574:	d108      	bne.n	8012588 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2200      	movs	r2, #0
 801257a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801257e:	e004      	b.n	801258a <tcp_output+0x3ce>
    goto output_done;
 8012580:	bf00      	nop
 8012582:	e002      	b.n	801258a <tcp_output+0x3ce>
    goto output_done;
 8012584:	bf00      	nop
 8012586:	e000      	b.n	801258a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012588:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	8b5b      	ldrh	r3, [r3, #26]
 801258e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012592:	b29a      	uxth	r2, r3
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012598:	2300      	movs	r3, #0
}
 801259a:	4618      	mov	r0, r3
 801259c:	3728      	adds	r7, #40	; 0x28
 801259e:	46bd      	mov	sp, r7
 80125a0:	bdb0      	pop	{r4, r5, r7, pc}
 80125a2:	bf00      	nop

080125a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d106      	bne.n	80125c0 <tcp_output_segment_busy+0x1c>
 80125b2:	4b09      	ldr	r3, [pc, #36]	; (80125d8 <tcp_output_segment_busy+0x34>)
 80125b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80125b8:	4908      	ldr	r1, [pc, #32]	; (80125dc <tcp_output_segment_busy+0x38>)
 80125ba:	4809      	ldr	r0, [pc, #36]	; (80125e0 <tcp_output_segment_busy+0x3c>)
 80125bc:	f006 f800 	bl	80185c0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	685b      	ldr	r3, [r3, #4]
 80125c4:	7b9b      	ldrb	r3, [r3, #14]
 80125c6:	2b01      	cmp	r3, #1
 80125c8:	d001      	beq.n	80125ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80125ca:	2301      	movs	r3, #1
 80125cc:	e000      	b.n	80125d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80125ce:	2300      	movs	r3, #0
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3708      	adds	r7, #8
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}
 80125d8:	0801bf38 	.word	0x0801bf38
 80125dc:	0801c4d4 	.word	0x0801c4d4
 80125e0:	0801bf8c 	.word	0x0801bf8c

080125e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80125e4:	b5b0      	push	{r4, r5, r7, lr}
 80125e6:	b08c      	sub	sp, #48	; 0x30
 80125e8:	af04      	add	r7, sp, #16
 80125ea:	60f8      	str	r0, [r7, #12]
 80125ec:	60b9      	str	r1, [r7, #8]
 80125ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d106      	bne.n	8012604 <tcp_output_segment+0x20>
 80125f6:	4b64      	ldr	r3, [pc, #400]	; (8012788 <tcp_output_segment+0x1a4>)
 80125f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80125fc:	4963      	ldr	r1, [pc, #396]	; (801278c <tcp_output_segment+0x1a8>)
 80125fe:	4864      	ldr	r0, [pc, #400]	; (8012790 <tcp_output_segment+0x1ac>)
 8012600:	f005 ffde 	bl	80185c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d106      	bne.n	8012618 <tcp_output_segment+0x34>
 801260a:	4b5f      	ldr	r3, [pc, #380]	; (8012788 <tcp_output_segment+0x1a4>)
 801260c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012610:	4960      	ldr	r1, [pc, #384]	; (8012794 <tcp_output_segment+0x1b0>)
 8012612:	485f      	ldr	r0, [pc, #380]	; (8012790 <tcp_output_segment+0x1ac>)
 8012614:	f005 ffd4 	bl	80185c0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d106      	bne.n	801262c <tcp_output_segment+0x48>
 801261e:	4b5a      	ldr	r3, [pc, #360]	; (8012788 <tcp_output_segment+0x1a4>)
 8012620:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012624:	495c      	ldr	r1, [pc, #368]	; (8012798 <tcp_output_segment+0x1b4>)
 8012626:	485a      	ldr	r0, [pc, #360]	; (8012790 <tcp_output_segment+0x1ac>)
 8012628:	f005 ffca 	bl	80185c0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801262c:	68f8      	ldr	r0, [r7, #12]
 801262e:	f7ff ffb9 	bl	80125a4 <tcp_output_segment_busy>
 8012632:	4603      	mov	r3, r0
 8012634:	2b00      	cmp	r3, #0
 8012636:	d001      	beq.n	801263c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012638:	2300      	movs	r3, #0
 801263a:	e0a1      	b.n	8012780 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	68dc      	ldr	r4, [r3, #12]
 8012644:	4610      	mov	r0, r2
 8012646:	f7f8 fdb0 	bl	800b1aa <lwip_htonl>
 801264a:	4603      	mov	r3, r0
 801264c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801264e:	68bb      	ldr	r3, [r7, #8]
 8012650:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	68dc      	ldr	r4, [r3, #12]
 8012656:	4610      	mov	r0, r2
 8012658:	f7f8 fd92 	bl	800b180 <lwip_htons>
 801265c:	4603      	mov	r3, r0
 801265e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012664:	68ba      	ldr	r2, [r7, #8]
 8012666:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012668:	441a      	add	r2, r3
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	68db      	ldr	r3, [r3, #12]
 8012672:	3314      	adds	r3, #20
 8012674:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	7a9b      	ldrb	r3, [r3, #10]
 801267a:	f003 0301 	and.w	r3, r3, #1
 801267e:	2b00      	cmp	r3, #0
 8012680:	d015      	beq.n	80126ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	3304      	adds	r3, #4
 8012686:	461a      	mov	r2, r3
 8012688:	6879      	ldr	r1, [r7, #4]
 801268a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801268e:	f7fc fa33 	bl	800eaf8 <tcp_eff_send_mss_netif>
 8012692:	4603      	mov	r3, r0
 8012694:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012696:	8b7b      	ldrh	r3, [r7, #26]
 8012698:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801269c:	4618      	mov	r0, r3
 801269e:	f7f8 fd84 	bl	800b1aa <lwip_htonl>
 80126a2:	4602      	mov	r2, r0
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80126a8:	69fb      	ldr	r3, [r7, #28]
 80126aa:	3304      	adds	r3, #4
 80126ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	da02      	bge.n	80126be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	2200      	movs	r2, #0
 80126bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d10c      	bne.n	80126e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80126c6:	4b35      	ldr	r3, [pc, #212]	; (801279c <tcp_output_segment+0x1b8>)
 80126c8:	681a      	ldr	r2, [r3, #0]
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	68db      	ldr	r3, [r3, #12]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7f8 fd68 	bl	800b1aa <lwip_htonl>
 80126da:	4602      	mov	r2, r0
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	68da      	ldr	r2, [r3, #12]
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	1ad3      	subs	r3, r2, r3
 80126ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	8959      	ldrh	r1, [r3, #10]
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	8b3a      	ldrh	r2, [r7, #24]
 80126fa:	1a8a      	subs	r2, r1, r2
 80126fc:	b292      	uxth	r2, r2
 80126fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	8919      	ldrh	r1, [r3, #8]
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	8b3a      	ldrh	r2, [r7, #24]
 801270c:	1a8a      	subs	r2, r1, r2
 801270e:	b292      	uxth	r2, r2
 8012710:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	68fa      	ldr	r2, [r7, #12]
 8012718:	68d2      	ldr	r2, [r2, #12]
 801271a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	68db      	ldr	r3, [r3, #12]
 8012720:	2200      	movs	r2, #0
 8012722:	741a      	strb	r2, [r3, #16]
 8012724:	2200      	movs	r2, #0
 8012726:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	68da      	ldr	r2, [r3, #12]
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	7a9b      	ldrb	r3, [r3, #10]
 8012730:	f003 0301 	and.w	r3, r3, #1
 8012734:	2b00      	cmp	r3, #0
 8012736:	d001      	beq.n	801273c <tcp_output_segment+0x158>
 8012738:	2318      	movs	r3, #24
 801273a:	e000      	b.n	801273e <tcp_output_segment+0x15a>
 801273c:	2314      	movs	r3, #20
 801273e:	4413      	add	r3, r2
 8012740:	69fa      	ldr	r2, [r7, #28]
 8012742:	429a      	cmp	r2, r3
 8012744:	d006      	beq.n	8012754 <tcp_output_segment+0x170>
 8012746:	4b10      	ldr	r3, [pc, #64]	; (8012788 <tcp_output_segment+0x1a4>)
 8012748:	f240 621c 	movw	r2, #1564	; 0x61c
 801274c:	4914      	ldr	r1, [pc, #80]	; (80127a0 <tcp_output_segment+0x1bc>)
 801274e:	4810      	ldr	r0, [pc, #64]	; (8012790 <tcp_output_segment+0x1ac>)
 8012750:	f005 ff36 	bl	80185c0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	6858      	ldr	r0, [r3, #4]
 8012758:	68b9      	ldr	r1, [r7, #8]
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	1d1c      	adds	r4, r3, #4
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	7add      	ldrb	r5, [r3, #11]
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	7a9b      	ldrb	r3, [r3, #10]
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	9202      	str	r2, [sp, #8]
 801276a:	2206      	movs	r2, #6
 801276c:	9201      	str	r2, [sp, #4]
 801276e:	9300      	str	r3, [sp, #0]
 8012770:	462b      	mov	r3, r5
 8012772:	4622      	mov	r2, r4
 8012774:	f004 fc26 	bl	8016fc4 <ip4_output_if>
 8012778:	4603      	mov	r3, r0
 801277a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801277c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012780:	4618      	mov	r0, r3
 8012782:	3720      	adds	r7, #32
 8012784:	46bd      	mov	sp, r7
 8012786:	bdb0      	pop	{r4, r5, r7, pc}
 8012788:	0801bf38 	.word	0x0801bf38
 801278c:	0801c4fc 	.word	0x0801c4fc
 8012790:	0801bf8c 	.word	0x0801bf8c
 8012794:	0801c51c 	.word	0x0801c51c
 8012798:	0801c53c 	.word	0x0801c53c
 801279c:	20011560 	.word	0x20011560
 80127a0:	0801c560 	.word	0x0801c560

080127a4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80127a4:	b5b0      	push	{r4, r5, r7, lr}
 80127a6:	b084      	sub	sp, #16
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d106      	bne.n	80127c0 <tcp_rexmit_rto_prepare+0x1c>
 80127b2:	4b31      	ldr	r3, [pc, #196]	; (8012878 <tcp_rexmit_rto_prepare+0xd4>)
 80127b4:	f240 6263 	movw	r2, #1635	; 0x663
 80127b8:	4930      	ldr	r1, [pc, #192]	; (801287c <tcp_rexmit_rto_prepare+0xd8>)
 80127ba:	4831      	ldr	r0, [pc, #196]	; (8012880 <tcp_rexmit_rto_prepare+0xdc>)
 80127bc:	f005 ff00 	bl	80185c0 <iprintf>

  if (pcb->unacked == NULL) {
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d102      	bne.n	80127ce <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80127c8:	f06f 0305 	mvn.w	r3, #5
 80127cc:	e050      	b.n	8012870 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127d2:	60fb      	str	r3, [r7, #12]
 80127d4:	e00b      	b.n	80127ee <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80127d6:	68f8      	ldr	r0, [r7, #12]
 80127d8:	f7ff fee4 	bl	80125a4 <tcp_output_segment_busy>
 80127dc:	4603      	mov	r3, r0
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d002      	beq.n	80127e8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80127e2:	f06f 0305 	mvn.w	r3, #5
 80127e6:	e043      	b.n	8012870 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	60fb      	str	r3, [r7, #12]
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d1ef      	bne.n	80127d6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80127f6:	68f8      	ldr	r0, [r7, #12]
 80127f8:	f7ff fed4 	bl	80125a4 <tcp_output_segment_busy>
 80127fc:	4603      	mov	r3, r0
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d002      	beq.n	8012808 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012802:	f06f 0305 	mvn.w	r3, #5
 8012806:	e033      	b.n	8012870 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2200      	movs	r2, #0
 801281c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	8b5b      	ldrh	r3, [r3, #26]
 8012822:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012826:	b29a      	uxth	r2, r3
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	68db      	ldr	r3, [r3, #12]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	4618      	mov	r0, r3
 8012834:	f7f8 fcb9 	bl	800b1aa <lwip_htonl>
 8012838:	4604      	mov	r4, r0
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	891b      	ldrh	r3, [r3, #8]
 801283e:	461d      	mov	r5, r3
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	68db      	ldr	r3, [r3, #12]
 8012844:	899b      	ldrh	r3, [r3, #12]
 8012846:	b29b      	uxth	r3, r3
 8012848:	4618      	mov	r0, r3
 801284a:	f7f8 fc99 	bl	800b180 <lwip_htons>
 801284e:	4603      	mov	r3, r0
 8012850:	b2db      	uxtb	r3, r3
 8012852:	f003 0303 	and.w	r3, r3, #3
 8012856:	2b00      	cmp	r3, #0
 8012858:	d001      	beq.n	801285e <tcp_rexmit_rto_prepare+0xba>
 801285a:	2301      	movs	r3, #1
 801285c:	e000      	b.n	8012860 <tcp_rexmit_rto_prepare+0xbc>
 801285e:	2300      	movs	r3, #0
 8012860:	442b      	add	r3, r5
 8012862:	18e2      	adds	r2, r4, r3
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2200      	movs	r2, #0
 801286c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801286e:	2300      	movs	r3, #0
}
 8012870:	4618      	mov	r0, r3
 8012872:	3710      	adds	r7, #16
 8012874:	46bd      	mov	sp, r7
 8012876:	bdb0      	pop	{r4, r5, r7, pc}
 8012878:	0801bf38 	.word	0x0801bf38
 801287c:	0801c574 	.word	0x0801c574
 8012880:	0801bf8c 	.word	0x0801bf8c

08012884 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d106      	bne.n	80128a0 <tcp_rexmit_rto_commit+0x1c>
 8012892:	4b0d      	ldr	r3, [pc, #52]	; (80128c8 <tcp_rexmit_rto_commit+0x44>)
 8012894:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012898:	490c      	ldr	r1, [pc, #48]	; (80128cc <tcp_rexmit_rto_commit+0x48>)
 801289a:	480d      	ldr	r0, [pc, #52]	; (80128d0 <tcp_rexmit_rto_commit+0x4c>)
 801289c:	f005 fe90 	bl	80185c0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128a6:	2bff      	cmp	r3, #255	; 0xff
 80128a8:	d007      	beq.n	80128ba <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128b0:	3301      	adds	r3, #1
 80128b2:	b2da      	uxtb	r2, r3
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f7ff fc7e 	bl	80121bc <tcp_output>
}
 80128c0:	bf00      	nop
 80128c2:	3708      	adds	r7, #8
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	0801bf38 	.word	0x0801bf38
 80128cc:	0801c598 	.word	0x0801c598
 80128d0:	0801bf8c 	.word	0x0801bf8c

080128d4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b082      	sub	sp, #8
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d106      	bne.n	80128f0 <tcp_rexmit_rto+0x1c>
 80128e2:	4b0a      	ldr	r3, [pc, #40]	; (801290c <tcp_rexmit_rto+0x38>)
 80128e4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80128e8:	4909      	ldr	r1, [pc, #36]	; (8012910 <tcp_rexmit_rto+0x3c>)
 80128ea:	480a      	ldr	r0, [pc, #40]	; (8012914 <tcp_rexmit_rto+0x40>)
 80128ec:	f005 fe68 	bl	80185c0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f7ff ff57 	bl	80127a4 <tcp_rexmit_rto_prepare>
 80128f6:	4603      	mov	r3, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d102      	bne.n	8012902 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f7ff ffc1 	bl	8012884 <tcp_rexmit_rto_commit>
  }
}
 8012902:	bf00      	nop
 8012904:	3708      	adds	r7, #8
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	bf00      	nop
 801290c:	0801bf38 	.word	0x0801bf38
 8012910:	0801c5bc 	.word	0x0801c5bc
 8012914:	0801bf8c 	.word	0x0801bf8c

08012918 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012918:	b590      	push	{r4, r7, lr}
 801291a:	b085      	sub	sp, #20
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d106      	bne.n	8012934 <tcp_rexmit+0x1c>
 8012926:	4b2f      	ldr	r3, [pc, #188]	; (80129e4 <tcp_rexmit+0xcc>)
 8012928:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801292c:	492e      	ldr	r1, [pc, #184]	; (80129e8 <tcp_rexmit+0xd0>)
 801292e:	482f      	ldr	r0, [pc, #188]	; (80129ec <tcp_rexmit+0xd4>)
 8012930:	f005 fe46 	bl	80185c0 <iprintf>

  if (pcb->unacked == NULL) {
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012938:	2b00      	cmp	r3, #0
 801293a:	d102      	bne.n	8012942 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801293c:	f06f 0305 	mvn.w	r3, #5
 8012940:	e04c      	b.n	80129dc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012946:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012948:	68b8      	ldr	r0, [r7, #8]
 801294a:	f7ff fe2b 	bl	80125a4 <tcp_output_segment_busy>
 801294e:	4603      	mov	r3, r0
 8012950:	2b00      	cmp	r3, #0
 8012952:	d002      	beq.n	801295a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012954:	f06f 0305 	mvn.w	r3, #5
 8012958:	e040      	b.n	80129dc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	681a      	ldr	r2, [r3, #0]
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	336c      	adds	r3, #108	; 0x6c
 8012966:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012968:	e002      	b.n	8012970 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d011      	beq.n	801299c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	68db      	ldr	r3, [r3, #12]
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	4618      	mov	r0, r3
 8012982:	f7f8 fc12 	bl	800b1aa <lwip_htonl>
 8012986:	4604      	mov	r4, r0
 8012988:	68bb      	ldr	r3, [r7, #8]
 801298a:	68db      	ldr	r3, [r3, #12]
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	4618      	mov	r0, r3
 8012990:	f7f8 fc0b 	bl	800b1aa <lwip_htonl>
 8012994:	4603      	mov	r3, r0
 8012996:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012998:	2b00      	cmp	r3, #0
 801299a:	dbe6      	blt.n	801296a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	681a      	ldr	r2, [r3, #0]
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	68ba      	ldr	r2, [r7, #8]
 80129a8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d103      	bne.n	80129ba <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	2200      	movs	r2, #0
 80129b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80129c0:	2bff      	cmp	r3, #255	; 0xff
 80129c2:	d007      	beq.n	80129d4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80129ca:	3301      	adds	r3, #1
 80129cc:	b2da      	uxtb	r2, r3
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2200      	movs	r2, #0
 80129d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80129da:	2300      	movs	r3, #0
}
 80129dc:	4618      	mov	r0, r3
 80129de:	3714      	adds	r7, #20
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd90      	pop	{r4, r7, pc}
 80129e4:	0801bf38 	.word	0x0801bf38
 80129e8:	0801c5d8 	.word	0x0801c5d8
 80129ec:	0801bf8c 	.word	0x0801bf8c

080129f0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d106      	bne.n	8012a0c <tcp_rexmit_fast+0x1c>
 80129fe:	4b2a      	ldr	r3, [pc, #168]	; (8012aa8 <tcp_rexmit_fast+0xb8>)
 8012a00:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012a04:	4929      	ldr	r1, [pc, #164]	; (8012aac <tcp_rexmit_fast+0xbc>)
 8012a06:	482a      	ldr	r0, [pc, #168]	; (8012ab0 <tcp_rexmit_fast+0xc0>)
 8012a08:	f005 fdda 	bl	80185c0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d044      	beq.n	8012a9e <tcp_rexmit_fast+0xae>
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	8b5b      	ldrh	r3, [r3, #26]
 8012a18:	f003 0304 	and.w	r3, r3, #4
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d13e      	bne.n	8012a9e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f7ff ff79 	bl	8012918 <tcp_rexmit>
 8012a26:	4603      	mov	r3, r0
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d138      	bne.n	8012a9e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012a38:	4293      	cmp	r3, r2
 8012a3a:	bf28      	it	cs
 8012a3c:	4613      	movcs	r3, r2
 8012a3e:	b29b      	uxth	r3, r3
 8012a40:	0fda      	lsrs	r2, r3, #31
 8012a42:	4413      	add	r3, r2
 8012a44:	105b      	asrs	r3, r3, #1
 8012a46:	b29a      	uxth	r2, r3
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012a54:	461a      	mov	r2, r3
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a5a:	005b      	lsls	r3, r3, #1
 8012a5c:	429a      	cmp	r2, r3
 8012a5e:	d206      	bcs.n	8012a6e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a64:	005b      	lsls	r3, r3, #1
 8012a66:	b29a      	uxth	r2, r3
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a78:	4619      	mov	r1, r3
 8012a7a:	0049      	lsls	r1, r1, #1
 8012a7c:	440b      	add	r3, r1
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	4413      	add	r3, r2
 8012a82:	b29a      	uxth	r2, r3
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	8b5b      	ldrh	r3, [r3, #26]
 8012a8e:	f043 0304 	orr.w	r3, r3, #4
 8012a92:	b29a      	uxth	r2, r3
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012a9e:	bf00      	nop
 8012aa0:	3708      	adds	r7, #8
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bd80      	pop	{r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	0801bf38 	.word	0x0801bf38
 8012aac:	0801c5f0 	.word	0x0801c5f0
 8012ab0:	0801bf8c 	.word	0x0801bf8c

08012ab4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b086      	sub	sp, #24
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	607b      	str	r3, [r7, #4]
 8012abe:	460b      	mov	r3, r1
 8012ac0:	817b      	strh	r3, [r7, #10]
 8012ac2:	4613      	mov	r3, r2
 8012ac4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012ac6:	897a      	ldrh	r2, [r7, #10]
 8012ac8:	893b      	ldrh	r3, [r7, #8]
 8012aca:	4413      	add	r3, r2
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	3314      	adds	r3, #20
 8012ad0:	b29b      	uxth	r3, r3
 8012ad2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	2022      	movs	r0, #34	; 0x22
 8012ada:	f7f9 fca1 	bl	800c420 <pbuf_alloc>
 8012ade:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d04d      	beq.n	8012b82 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012ae6:	897b      	ldrh	r3, [r7, #10]
 8012ae8:	3313      	adds	r3, #19
 8012aea:	697a      	ldr	r2, [r7, #20]
 8012aec:	8952      	ldrh	r2, [r2, #10]
 8012aee:	4293      	cmp	r3, r2
 8012af0:	db06      	blt.n	8012b00 <tcp_output_alloc_header_common+0x4c>
 8012af2:	4b26      	ldr	r3, [pc, #152]	; (8012b8c <tcp_output_alloc_header_common+0xd8>)
 8012af4:	f240 7223 	movw	r2, #1827	; 0x723
 8012af8:	4925      	ldr	r1, [pc, #148]	; (8012b90 <tcp_output_alloc_header_common+0xdc>)
 8012afa:	4826      	ldr	r0, [pc, #152]	; (8012b94 <tcp_output_alloc_header_common+0xe0>)
 8012afc:	f005 fd60 	bl	80185c0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012b06:	8c3b      	ldrh	r3, [r7, #32]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f7f8 fb39 	bl	800b180 <lwip_htons>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	461a      	mov	r2, r3
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7f8 fb31 	bl	800b180 <lwip_htons>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	461a      	mov	r2, r3
 8012b22:	693b      	ldr	r3, [r7, #16]
 8012b24:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	687a      	ldr	r2, [r7, #4]
 8012b2a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012b2c:	68f8      	ldr	r0, [r7, #12]
 8012b2e:	f7f8 fb3c 	bl	800b1aa <lwip_htonl>
 8012b32:	4602      	mov	r2, r0
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012b38:	897b      	ldrh	r3, [r7, #10]
 8012b3a:	089b      	lsrs	r3, r3, #2
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	3305      	adds	r3, #5
 8012b40:	b29b      	uxth	r3, r3
 8012b42:	031b      	lsls	r3, r3, #12
 8012b44:	b29a      	uxth	r2, r3
 8012b46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012b4a:	b29b      	uxth	r3, r3
 8012b4c:	4313      	orrs	r3, r2
 8012b4e:	b29b      	uxth	r3, r3
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7f8 fb15 	bl	800b180 <lwip_htons>
 8012b56:	4603      	mov	r3, r0
 8012b58:	461a      	mov	r2, r3
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012b5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7f8 fb0d 	bl	800b180 <lwip_htons>
 8012b66:	4603      	mov	r3, r0
 8012b68:	461a      	mov	r2, r3
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	2200      	movs	r2, #0
 8012b72:	741a      	strb	r2, [r3, #16]
 8012b74:	2200      	movs	r2, #0
 8012b76:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	749a      	strb	r2, [r3, #18]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012b82:	697b      	ldr	r3, [r7, #20]
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3718      	adds	r7, #24
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	0801bf38 	.word	0x0801bf38
 8012b90:	0801c610 	.word	0x0801c610
 8012b94:	0801bf8c 	.word	0x0801bf8c

08012b98 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012b98:	b5b0      	push	{r4, r5, r7, lr}
 8012b9a:	b08a      	sub	sp, #40	; 0x28
 8012b9c:	af04      	add	r7, sp, #16
 8012b9e:	60f8      	str	r0, [r7, #12]
 8012ba0:	607b      	str	r3, [r7, #4]
 8012ba2:	460b      	mov	r3, r1
 8012ba4:	817b      	strh	r3, [r7, #10]
 8012ba6:	4613      	mov	r3, r2
 8012ba8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d106      	bne.n	8012bbe <tcp_output_alloc_header+0x26>
 8012bb0:	4b15      	ldr	r3, [pc, #84]	; (8012c08 <tcp_output_alloc_header+0x70>)
 8012bb2:	f240 7242 	movw	r2, #1858	; 0x742
 8012bb6:	4915      	ldr	r1, [pc, #84]	; (8012c0c <tcp_output_alloc_header+0x74>)
 8012bb8:	4815      	ldr	r0, [pc, #84]	; (8012c10 <tcp_output_alloc_header+0x78>)
 8012bba:	f005 fd01 	bl	80185c0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	8adb      	ldrh	r3, [r3, #22]
 8012bc6:	68fa      	ldr	r2, [r7, #12]
 8012bc8:	8b12      	ldrh	r2, [r2, #24]
 8012bca:	68f9      	ldr	r1, [r7, #12]
 8012bcc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012bce:	893d      	ldrh	r5, [r7, #8]
 8012bd0:	897c      	ldrh	r4, [r7, #10]
 8012bd2:	9103      	str	r1, [sp, #12]
 8012bd4:	2110      	movs	r1, #16
 8012bd6:	9102      	str	r1, [sp, #8]
 8012bd8:	9201      	str	r2, [sp, #4]
 8012bda:	9300      	str	r3, [sp, #0]
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	462a      	mov	r2, r5
 8012be0:	4621      	mov	r1, r4
 8012be2:	f7ff ff67 	bl	8012ab4 <tcp_output_alloc_header_common>
 8012be6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d006      	beq.n	8012bfc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bf2:	68fa      	ldr	r2, [r7, #12]
 8012bf4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012bf6:	441a      	add	r2, r3
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012bfc:	697b      	ldr	r3, [r7, #20]
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3718      	adds	r7, #24
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bdb0      	pop	{r4, r5, r7, pc}
 8012c06:	bf00      	nop
 8012c08:	0801bf38 	.word	0x0801bf38
 8012c0c:	0801c640 	.word	0x0801c640
 8012c10:	0801bf8c 	.word	0x0801bf8c

08012c14 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b088      	sub	sp, #32
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	60f8      	str	r0, [r7, #12]
 8012c1c:	60b9      	str	r1, [r7, #8]
 8012c1e:	4611      	mov	r1, r2
 8012c20:	461a      	mov	r2, r3
 8012c22:	460b      	mov	r3, r1
 8012c24:	71fb      	strb	r3, [r7, #7]
 8012c26:	4613      	mov	r3, r2
 8012c28:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d106      	bne.n	8012c42 <tcp_output_fill_options+0x2e>
 8012c34:	4b12      	ldr	r3, [pc, #72]	; (8012c80 <tcp_output_fill_options+0x6c>)
 8012c36:	f240 7256 	movw	r2, #1878	; 0x756
 8012c3a:	4912      	ldr	r1, [pc, #72]	; (8012c84 <tcp_output_fill_options+0x70>)
 8012c3c:	4812      	ldr	r0, [pc, #72]	; (8012c88 <tcp_output_fill_options+0x74>)
 8012c3e:	f005 fcbf 	bl	80185c0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	685b      	ldr	r3, [r3, #4]
 8012c46:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012c48:	69bb      	ldr	r3, [r7, #24]
 8012c4a:	3314      	adds	r3, #20
 8012c4c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012c4e:	8bfb      	ldrh	r3, [r7, #30]
 8012c50:	009b      	lsls	r3, r3, #2
 8012c52:	461a      	mov	r2, r3
 8012c54:	79fb      	ldrb	r3, [r7, #7]
 8012c56:	009b      	lsls	r3, r3, #2
 8012c58:	f003 0304 	and.w	r3, r3, #4
 8012c5c:	4413      	add	r3, r2
 8012c5e:	3314      	adds	r3, #20
 8012c60:	69ba      	ldr	r2, [r7, #24]
 8012c62:	4413      	add	r3, r2
 8012c64:	697a      	ldr	r2, [r7, #20]
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d006      	beq.n	8012c78 <tcp_output_fill_options+0x64>
 8012c6a:	4b05      	ldr	r3, [pc, #20]	; (8012c80 <tcp_output_fill_options+0x6c>)
 8012c6c:	f240 7275 	movw	r2, #1909	; 0x775
 8012c70:	4906      	ldr	r1, [pc, #24]	; (8012c8c <tcp_output_fill_options+0x78>)
 8012c72:	4805      	ldr	r0, [pc, #20]	; (8012c88 <tcp_output_fill_options+0x74>)
 8012c74:	f005 fca4 	bl	80185c0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012c78:	bf00      	nop
 8012c7a:	3720      	adds	r7, #32
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	0801bf38 	.word	0x0801bf38
 8012c84:	0801c668 	.word	0x0801c668
 8012c88:	0801bf8c 	.word	0x0801bf8c
 8012c8c:	0801c560 	.word	0x0801c560

08012c90 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b08a      	sub	sp, #40	; 0x28
 8012c94:	af04      	add	r7, sp, #16
 8012c96:	60f8      	str	r0, [r7, #12]
 8012c98:	60b9      	str	r1, [r7, #8]
 8012c9a:	607a      	str	r2, [r7, #4]
 8012c9c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d106      	bne.n	8012cb2 <tcp_output_control_segment+0x22>
 8012ca4:	4b1c      	ldr	r3, [pc, #112]	; (8012d18 <tcp_output_control_segment+0x88>)
 8012ca6:	f240 7287 	movw	r2, #1927	; 0x787
 8012caa:	491c      	ldr	r1, [pc, #112]	; (8012d1c <tcp_output_control_segment+0x8c>)
 8012cac:	481c      	ldr	r0, [pc, #112]	; (8012d20 <tcp_output_control_segment+0x90>)
 8012cae:	f005 fc87 	bl	80185c0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012cb2:	683a      	ldr	r2, [r7, #0]
 8012cb4:	6879      	ldr	r1, [r7, #4]
 8012cb6:	68f8      	ldr	r0, [r7, #12]
 8012cb8:	f7fe fae8 	bl	801128c <tcp_route>
 8012cbc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d102      	bne.n	8012cca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012cc4:	23fc      	movs	r3, #252	; 0xfc
 8012cc6:	75fb      	strb	r3, [r7, #23]
 8012cc8:	e01c      	b.n	8012d04 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d006      	beq.n	8012cde <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	7adb      	ldrb	r3, [r3, #11]
 8012cd4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	7a9b      	ldrb	r3, [r3, #10]
 8012cda:	757b      	strb	r3, [r7, #21]
 8012cdc:	e003      	b.n	8012ce6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012cde:	23ff      	movs	r3, #255	; 0xff
 8012ce0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012ce6:	7dba      	ldrb	r2, [r7, #22]
 8012ce8:	693b      	ldr	r3, [r7, #16]
 8012cea:	9302      	str	r3, [sp, #8]
 8012cec:	2306      	movs	r3, #6
 8012cee:	9301      	str	r3, [sp, #4]
 8012cf0:	7d7b      	ldrb	r3, [r7, #21]
 8012cf2:	9300      	str	r3, [sp, #0]
 8012cf4:	4613      	mov	r3, r2
 8012cf6:	683a      	ldr	r2, [r7, #0]
 8012cf8:	6879      	ldr	r1, [r7, #4]
 8012cfa:	68b8      	ldr	r0, [r7, #8]
 8012cfc:	f004 f962 	bl	8016fc4 <ip4_output_if>
 8012d00:	4603      	mov	r3, r0
 8012d02:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012d04:	68b8      	ldr	r0, [r7, #8]
 8012d06:	f7f9 fe6f 	bl	800c9e8 <pbuf_free>
  return err;
 8012d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3718      	adds	r7, #24
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	0801bf38 	.word	0x0801bf38
 8012d1c:	0801c690 	.word	0x0801c690
 8012d20:	0801bf8c 	.word	0x0801bf8c

08012d24 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012d24:	b590      	push	{r4, r7, lr}
 8012d26:	b08b      	sub	sp, #44	; 0x2c
 8012d28:	af04      	add	r7, sp, #16
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	60b9      	str	r1, [r7, #8]
 8012d2e:	607a      	str	r2, [r7, #4]
 8012d30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d106      	bne.n	8012d46 <tcp_rst+0x22>
 8012d38:	4b1f      	ldr	r3, [pc, #124]	; (8012db8 <tcp_rst+0x94>)
 8012d3a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012d3e:	491f      	ldr	r1, [pc, #124]	; (8012dbc <tcp_rst+0x98>)
 8012d40:	481f      	ldr	r0, [pc, #124]	; (8012dc0 <tcp_rst+0x9c>)
 8012d42:	f005 fc3d 	bl	80185c0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d106      	bne.n	8012d5a <tcp_rst+0x36>
 8012d4c:	4b1a      	ldr	r3, [pc, #104]	; (8012db8 <tcp_rst+0x94>)
 8012d4e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012d52:	491c      	ldr	r1, [pc, #112]	; (8012dc4 <tcp_rst+0xa0>)
 8012d54:	481a      	ldr	r0, [pc, #104]	; (8012dc0 <tcp_rst+0x9c>)
 8012d56:	f005 fc33 	bl	80185c0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012d5e:	f246 0308 	movw	r3, #24584	; 0x6008
 8012d62:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012d64:	7dfb      	ldrb	r3, [r7, #23]
 8012d66:	b29c      	uxth	r4, r3
 8012d68:	68b8      	ldr	r0, [r7, #8]
 8012d6a:	f7f8 fa1e 	bl	800b1aa <lwip_htonl>
 8012d6e:	4602      	mov	r2, r0
 8012d70:	8abb      	ldrh	r3, [r7, #20]
 8012d72:	9303      	str	r3, [sp, #12]
 8012d74:	2314      	movs	r3, #20
 8012d76:	9302      	str	r3, [sp, #8]
 8012d78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012d7a:	9301      	str	r3, [sp, #4]
 8012d7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012d7e:	9300      	str	r3, [sp, #0]
 8012d80:	4613      	mov	r3, r2
 8012d82:	2200      	movs	r2, #0
 8012d84:	4621      	mov	r1, r4
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f7ff fe94 	bl	8012ab4 <tcp_output_alloc_header_common>
 8012d8c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012d8e:	693b      	ldr	r3, [r7, #16]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d00c      	beq.n	8012dae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d94:	7dfb      	ldrb	r3, [r7, #23]
 8012d96:	2200      	movs	r2, #0
 8012d98:	6939      	ldr	r1, [r7, #16]
 8012d9a:	68f8      	ldr	r0, [r7, #12]
 8012d9c:	f7ff ff3a 	bl	8012c14 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da2:	683a      	ldr	r2, [r7, #0]
 8012da4:	6939      	ldr	r1, [r7, #16]
 8012da6:	68f8      	ldr	r0, [r7, #12]
 8012da8:	f7ff ff72 	bl	8012c90 <tcp_output_control_segment>
 8012dac:	e000      	b.n	8012db0 <tcp_rst+0x8c>
    return;
 8012dae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012db0:	371c      	adds	r7, #28
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd90      	pop	{r4, r7, pc}
 8012db6:	bf00      	nop
 8012db8:	0801bf38 	.word	0x0801bf38
 8012dbc:	0801c6bc 	.word	0x0801c6bc
 8012dc0:	0801bf8c 	.word	0x0801bf8c
 8012dc4:	0801c6d8 	.word	0x0801c6d8

08012dc8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012dc8:	b590      	push	{r4, r7, lr}
 8012dca:	b087      	sub	sp, #28
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d106      	bne.n	8012dec <tcp_send_empty_ack+0x24>
 8012dde:	4b28      	ldr	r3, [pc, #160]	; (8012e80 <tcp_send_empty_ack+0xb8>)
 8012de0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012de4:	4927      	ldr	r1, [pc, #156]	; (8012e84 <tcp_send_empty_ack+0xbc>)
 8012de6:	4828      	ldr	r0, [pc, #160]	; (8012e88 <tcp_send_empty_ack+0xc0>)
 8012de8:	f005 fbea 	bl	80185c0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012dec:	7dfb      	ldrb	r3, [r7, #23]
 8012dee:	009b      	lsls	r3, r3, #2
 8012df0:	b2db      	uxtb	r3, r3
 8012df2:	f003 0304 	and.w	r3, r3, #4
 8012df6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012df8:	7d7b      	ldrb	r3, [r7, #21]
 8012dfa:	b29c      	uxth	r4, r3
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7f8 f9d2 	bl	800b1aa <lwip_htonl>
 8012e06:	4603      	mov	r3, r0
 8012e08:	2200      	movs	r2, #0
 8012e0a:	4621      	mov	r1, r4
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	f7ff fec3 	bl	8012b98 <tcp_output_alloc_header>
 8012e12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d109      	bne.n	8012e2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	8b5b      	ldrh	r3, [r3, #26]
 8012e1e:	f043 0303 	orr.w	r3, r3, #3
 8012e22:	b29a      	uxth	r2, r3
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012e28:	f06f 0301 	mvn.w	r3, #1
 8012e2c:	e023      	b.n	8012e76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012e2e:	7dbb      	ldrb	r3, [r7, #22]
 8012e30:	7dfa      	ldrb	r2, [r7, #23]
 8012e32:	6939      	ldr	r1, [r7, #16]
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f7ff feed 	bl	8012c14 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012e3a:	687a      	ldr	r2, [r7, #4]
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	3304      	adds	r3, #4
 8012e40:	6939      	ldr	r1, [r7, #16]
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f7ff ff24 	bl	8012c90 <tcp_output_control_segment>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d007      	beq.n	8012e64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	8b5b      	ldrh	r3, [r3, #26]
 8012e58:	f043 0303 	orr.w	r3, r3, #3
 8012e5c:	b29a      	uxth	r2, r3
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	835a      	strh	r2, [r3, #26]
 8012e62:	e006      	b.n	8012e72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	8b5b      	ldrh	r3, [r3, #26]
 8012e68:	f023 0303 	bic.w	r3, r3, #3
 8012e6c:	b29a      	uxth	r2, r3
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	371c      	adds	r7, #28
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd90      	pop	{r4, r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	0801bf38 	.word	0x0801bf38
 8012e84:	0801c6f4 	.word	0x0801c6f4
 8012e88:	0801bf8c 	.word	0x0801bf8c

08012e8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012e8c:	b590      	push	{r4, r7, lr}
 8012e8e:	b087      	sub	sp, #28
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012e94:	2300      	movs	r3, #0
 8012e96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d106      	bne.n	8012eac <tcp_keepalive+0x20>
 8012e9e:	4b18      	ldr	r3, [pc, #96]	; (8012f00 <tcp_keepalive+0x74>)
 8012ea0:	f640 0224 	movw	r2, #2084	; 0x824
 8012ea4:	4917      	ldr	r1, [pc, #92]	; (8012f04 <tcp_keepalive+0x78>)
 8012ea6:	4818      	ldr	r0, [pc, #96]	; (8012f08 <tcp_keepalive+0x7c>)
 8012ea8:	f005 fb8a 	bl	80185c0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012eac:	7dfb      	ldrb	r3, [r7, #23]
 8012eae:	b29c      	uxth	r4, r3
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012eb4:	3b01      	subs	r3, #1
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7f8 f977 	bl	800b1aa <lwip_htonl>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	4621      	mov	r1, r4
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f7ff fe68 	bl	8012b98 <tcp_output_alloc_header>
 8012ec8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012eca:	693b      	ldr	r3, [r7, #16]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d102      	bne.n	8012ed6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ed4:	e010      	b.n	8012ef8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ed6:	7dfb      	ldrb	r3, [r7, #23]
 8012ed8:	2200      	movs	r2, #0
 8012eda:	6939      	ldr	r1, [r7, #16]
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	f7ff fe99 	bl	8012c14 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012ee2:	687a      	ldr	r2, [r7, #4]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	3304      	adds	r3, #4
 8012ee8:	6939      	ldr	r1, [r7, #16]
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f7ff fed0 	bl	8012c90 <tcp_output_control_segment>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	371c      	adds	r7, #28
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd90      	pop	{r4, r7, pc}
 8012f00:	0801bf38 	.word	0x0801bf38
 8012f04:	0801c714 	.word	0x0801c714
 8012f08:	0801bf8c 	.word	0x0801bf8c

08012f0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012f0c:	b590      	push	{r4, r7, lr}
 8012f0e:	b08b      	sub	sp, #44	; 0x2c
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012f14:	2300      	movs	r3, #0
 8012f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d106      	bne.n	8012f2e <tcp_zero_window_probe+0x22>
 8012f20:	4b4c      	ldr	r3, [pc, #304]	; (8013054 <tcp_zero_window_probe+0x148>)
 8012f22:	f640 024f 	movw	r2, #2127	; 0x84f
 8012f26:	494c      	ldr	r1, [pc, #304]	; (8013058 <tcp_zero_window_probe+0x14c>)
 8012f28:	484c      	ldr	r0, [pc, #304]	; (801305c <tcp_zero_window_probe+0x150>)
 8012f2a:	f005 fb49 	bl	80185c0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012f34:	6a3b      	ldr	r3, [r7, #32]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d101      	bne.n	8012f3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	e086      	b.n	801304c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012f44:	2bff      	cmp	r3, #255	; 0xff
 8012f46:	d007      	beq.n	8012f58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012f4e:	3301      	adds	r3, #1
 8012f50:	b2da      	uxtb	r2, r3
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012f58:	6a3b      	ldr	r3, [r7, #32]
 8012f5a:	68db      	ldr	r3, [r3, #12]
 8012f5c:	899b      	ldrh	r3, [r3, #12]
 8012f5e:	b29b      	uxth	r3, r3
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7f8 f90d 	bl	800b180 <lwip_htons>
 8012f66:	4603      	mov	r3, r0
 8012f68:	b2db      	uxtb	r3, r3
 8012f6a:	f003 0301 	and.w	r3, r3, #1
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d005      	beq.n	8012f7e <tcp_zero_window_probe+0x72>
 8012f72:	6a3b      	ldr	r3, [r7, #32]
 8012f74:	891b      	ldrh	r3, [r3, #8]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d101      	bne.n	8012f7e <tcp_zero_window_probe+0x72>
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	e000      	b.n	8012f80 <tcp_zero_window_probe+0x74>
 8012f7e:	2300      	movs	r3, #0
 8012f80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012f82:	7ffb      	ldrb	r3, [r7, #31]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	bf0c      	ite	eq
 8012f88:	2301      	moveq	r3, #1
 8012f8a:	2300      	movne	r3, #0
 8012f8c:	b2db      	uxtb	r3, r3
 8012f8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f94:	b299      	uxth	r1, r3
 8012f96:	6a3b      	ldr	r3, [r7, #32]
 8012f98:	68db      	ldr	r3, [r3, #12]
 8012f9a:	685b      	ldr	r3, [r3, #4]
 8012f9c:	8bba      	ldrh	r2, [r7, #28]
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f7ff fdfa 	bl	8012b98 <tcp_output_alloc_header>
 8012fa4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d102      	bne.n	8012fb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012fac:	f04f 33ff 	mov.w	r3, #4294967295
 8012fb0:	e04c      	b.n	801304c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012fb2:	69bb      	ldr	r3, [r7, #24]
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012fb8:	7ffb      	ldrb	r3, [r7, #31]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d011      	beq.n	8012fe2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	899b      	ldrh	r3, [r3, #12]
 8012fc2:	b29b      	uxth	r3, r3
 8012fc4:	b21b      	sxth	r3, r3
 8012fc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012fca:	b21c      	sxth	r4, r3
 8012fcc:	2011      	movs	r0, #17
 8012fce:	f7f8 f8d7 	bl	800b180 <lwip_htons>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	b21b      	sxth	r3, r3
 8012fd6:	4323      	orrs	r3, r4
 8012fd8:	b21b      	sxth	r3, r3
 8012fda:	b29a      	uxth	r2, r3
 8012fdc:	697b      	ldr	r3, [r7, #20]
 8012fde:	819a      	strh	r2, [r3, #12]
 8012fe0:	e010      	b.n	8013004 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012fe2:	69bb      	ldr	r3, [r7, #24]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	3314      	adds	r3, #20
 8012fe8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012fea:	6a3b      	ldr	r3, [r7, #32]
 8012fec:	6858      	ldr	r0, [r3, #4]
 8012fee:	6a3b      	ldr	r3, [r7, #32]
 8012ff0:	685b      	ldr	r3, [r3, #4]
 8012ff2:	891a      	ldrh	r2, [r3, #8]
 8012ff4:	6a3b      	ldr	r3, [r7, #32]
 8012ff6:	891b      	ldrh	r3, [r3, #8]
 8012ff8:	1ad3      	subs	r3, r2, r3
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	6939      	ldr	r1, [r7, #16]
 8013000:	f7f9 fef8 	bl	800cdf4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013004:	6a3b      	ldr	r3, [r7, #32]
 8013006:	68db      	ldr	r3, [r3, #12]
 8013008:	685b      	ldr	r3, [r3, #4]
 801300a:	4618      	mov	r0, r3
 801300c:	f7f8 f8cd 	bl	800b1aa <lwip_htonl>
 8013010:	4603      	mov	r3, r0
 8013012:	3301      	adds	r3, #1
 8013014:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	1ad3      	subs	r3, r2, r3
 801301e:	2b00      	cmp	r3, #0
 8013020:	da02      	bge.n	8013028 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	68fa      	ldr	r2, [r7, #12]
 8013026:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801302c:	2200      	movs	r2, #0
 801302e:	69b9      	ldr	r1, [r7, #24]
 8013030:	6878      	ldr	r0, [r7, #4]
 8013032:	f7ff fdef 	bl	8012c14 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013036:	687a      	ldr	r2, [r7, #4]
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	3304      	adds	r3, #4
 801303c:	69b9      	ldr	r1, [r7, #24]
 801303e:	6878      	ldr	r0, [r7, #4]
 8013040:	f7ff fe26 	bl	8012c90 <tcp_output_control_segment>
 8013044:	4603      	mov	r3, r0
 8013046:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013048:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801304c:	4618      	mov	r0, r3
 801304e:	372c      	adds	r7, #44	; 0x2c
 8013050:	46bd      	mov	sp, r7
 8013052:	bd90      	pop	{r4, r7, pc}
 8013054:	0801bf38 	.word	0x0801bf38
 8013058:	0801c730 	.word	0x0801c730
 801305c:	0801bf8c 	.word	0x0801bf8c

08013060 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b082      	sub	sp, #8
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013068:	f7f9 ffb2 	bl	800cfd0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801306c:	4b0a      	ldr	r3, [pc, #40]	; (8013098 <tcpip_tcp_timer+0x38>)
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d103      	bne.n	801307c <tcpip_tcp_timer+0x1c>
 8013074:	4b09      	ldr	r3, [pc, #36]	; (801309c <tcpip_tcp_timer+0x3c>)
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d005      	beq.n	8013088 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801307c:	2200      	movs	r2, #0
 801307e:	4908      	ldr	r1, [pc, #32]	; (80130a0 <tcpip_tcp_timer+0x40>)
 8013080:	20fa      	movs	r0, #250	; 0xfa
 8013082:	f000 f8f3 	bl	801326c <sys_timeout>
 8013086:	e003      	b.n	8013090 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013088:	4b06      	ldr	r3, [pc, #24]	; (80130a4 <tcpip_tcp_timer+0x44>)
 801308a:	2200      	movs	r2, #0
 801308c:	601a      	str	r2, [r3, #0]
  }
}
 801308e:	bf00      	nop
 8013090:	bf00      	nop
 8013092:	3708      	adds	r7, #8
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}
 8013098:	2001156c 	.word	0x2001156c
 801309c:	20011570 	.word	0x20011570
 80130a0:	08013061 	.word	0x08013061
 80130a4:	200115b8 	.word	0x200115b8

080130a8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80130ac:	4b0a      	ldr	r3, [pc, #40]	; (80130d8 <tcp_timer_needed+0x30>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d10f      	bne.n	80130d4 <tcp_timer_needed+0x2c>
 80130b4:	4b09      	ldr	r3, [pc, #36]	; (80130dc <tcp_timer_needed+0x34>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d103      	bne.n	80130c4 <tcp_timer_needed+0x1c>
 80130bc:	4b08      	ldr	r3, [pc, #32]	; (80130e0 <tcp_timer_needed+0x38>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d007      	beq.n	80130d4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80130c4:	4b04      	ldr	r3, [pc, #16]	; (80130d8 <tcp_timer_needed+0x30>)
 80130c6:	2201      	movs	r2, #1
 80130c8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80130ca:	2200      	movs	r2, #0
 80130cc:	4905      	ldr	r1, [pc, #20]	; (80130e4 <tcp_timer_needed+0x3c>)
 80130ce:	20fa      	movs	r0, #250	; 0xfa
 80130d0:	f000 f8cc 	bl	801326c <sys_timeout>
  }
}
 80130d4:	bf00      	nop
 80130d6:	bd80      	pop	{r7, pc}
 80130d8:	200115b8 	.word	0x200115b8
 80130dc:	2001156c 	.word	0x2001156c
 80130e0:	20011570 	.word	0x20011570
 80130e4:	08013061 	.word	0x08013061

080130e8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b086      	sub	sp, #24
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	60f8      	str	r0, [r7, #12]
 80130f0:	60b9      	str	r1, [r7, #8]
 80130f2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80130f4:	200a      	movs	r0, #10
 80130f6:	f7f8 fd51 	bl	800bb9c <memp_malloc>
 80130fa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80130fc:	693b      	ldr	r3, [r7, #16]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d109      	bne.n	8013116 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d151      	bne.n	80131ac <sys_timeout_abs+0xc4>
 8013108:	4b2a      	ldr	r3, [pc, #168]	; (80131b4 <sys_timeout_abs+0xcc>)
 801310a:	22be      	movs	r2, #190	; 0xbe
 801310c:	492a      	ldr	r1, [pc, #168]	; (80131b8 <sys_timeout_abs+0xd0>)
 801310e:	482b      	ldr	r0, [pc, #172]	; (80131bc <sys_timeout_abs+0xd4>)
 8013110:	f005 fa56 	bl	80185c0 <iprintf>
    return;
 8013114:	e04a      	b.n	80131ac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013116:	693b      	ldr	r3, [r7, #16]
 8013118:	2200      	movs	r2, #0
 801311a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801311c:	693b      	ldr	r3, [r7, #16]
 801311e:	68ba      	ldr	r2, [r7, #8]
 8013120:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	687a      	ldr	r2, [r7, #4]
 8013126:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013128:	693b      	ldr	r3, [r7, #16]
 801312a:	68fa      	ldr	r2, [r7, #12]
 801312c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801312e:	4b24      	ldr	r3, [pc, #144]	; (80131c0 <sys_timeout_abs+0xd8>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d103      	bne.n	801313e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013136:	4a22      	ldr	r2, [pc, #136]	; (80131c0 <sys_timeout_abs+0xd8>)
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	6013      	str	r3, [r2, #0]
    return;
 801313c:	e037      	b.n	80131ae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801313e:	693b      	ldr	r3, [r7, #16]
 8013140:	685a      	ldr	r2, [r3, #4]
 8013142:	4b1f      	ldr	r3, [pc, #124]	; (80131c0 <sys_timeout_abs+0xd8>)
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	685b      	ldr	r3, [r3, #4]
 8013148:	1ad3      	subs	r3, r2, r3
 801314a:	0fdb      	lsrs	r3, r3, #31
 801314c:	f003 0301 	and.w	r3, r3, #1
 8013150:	b2db      	uxtb	r3, r3
 8013152:	2b00      	cmp	r3, #0
 8013154:	d007      	beq.n	8013166 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013156:	4b1a      	ldr	r3, [pc, #104]	; (80131c0 <sys_timeout_abs+0xd8>)
 8013158:	681a      	ldr	r2, [r3, #0]
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801315e:	4a18      	ldr	r2, [pc, #96]	; (80131c0 <sys_timeout_abs+0xd8>)
 8013160:	693b      	ldr	r3, [r7, #16]
 8013162:	6013      	str	r3, [r2, #0]
 8013164:	e023      	b.n	80131ae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013166:	4b16      	ldr	r3, [pc, #88]	; (80131c0 <sys_timeout_abs+0xd8>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	617b      	str	r3, [r7, #20]
 801316c:	e01a      	b.n	80131a4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d00b      	beq.n	801318e <sys_timeout_abs+0xa6>
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	685a      	ldr	r2, [r3, #4]
 801317a:	697b      	ldr	r3, [r7, #20]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	1ad3      	subs	r3, r2, r3
 8013182:	0fdb      	lsrs	r3, r3, #31
 8013184:	f003 0301 	and.w	r3, r3, #1
 8013188:	b2db      	uxtb	r3, r3
 801318a:	2b00      	cmp	r3, #0
 801318c:	d007      	beq.n	801319e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	681a      	ldr	r2, [r3, #0]
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	693a      	ldr	r2, [r7, #16]
 801319a:	601a      	str	r2, [r3, #0]
        break;
 801319c:	e007      	b.n	80131ae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	617b      	str	r3, [r7, #20]
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d1e1      	bne.n	801316e <sys_timeout_abs+0x86>
 80131aa:	e000      	b.n	80131ae <sys_timeout_abs+0xc6>
    return;
 80131ac:	bf00      	nop
      }
    }
  }
}
 80131ae:	3718      	adds	r7, #24
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	0801c754 	.word	0x0801c754
 80131b8:	0801c788 	.word	0x0801c788
 80131bc:	0801c7c8 	.word	0x0801c7c8
 80131c0:	200115b0 	.word	0x200115b0

080131c4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b086      	sub	sp, #24
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	685b      	ldr	r3, [r3, #4]
 80131d4:	4798      	blx	r3

  now = sys_now();
 80131d6:	f7f1 fc87 	bl	8004ae8 <sys_now>
 80131da:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	681a      	ldr	r2, [r3, #0]
 80131e0:	4b0f      	ldr	r3, [pc, #60]	; (8013220 <lwip_cyclic_timer+0x5c>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	4413      	add	r3, r2
 80131e6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80131e8:	68fa      	ldr	r2, [r7, #12]
 80131ea:	693b      	ldr	r3, [r7, #16]
 80131ec:	1ad3      	subs	r3, r2, r3
 80131ee:	0fdb      	lsrs	r3, r3, #31
 80131f0:	f003 0301 	and.w	r3, r3, #1
 80131f4:	b2db      	uxtb	r3, r3
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d009      	beq.n	801320e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	681a      	ldr	r2, [r3, #0]
 80131fe:	693b      	ldr	r3, [r7, #16]
 8013200:	4413      	add	r3, r2
 8013202:	687a      	ldr	r2, [r7, #4]
 8013204:	4907      	ldr	r1, [pc, #28]	; (8013224 <lwip_cyclic_timer+0x60>)
 8013206:	4618      	mov	r0, r3
 8013208:	f7ff ff6e 	bl	80130e8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801320c:	e004      	b.n	8013218 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801320e:	687a      	ldr	r2, [r7, #4]
 8013210:	4904      	ldr	r1, [pc, #16]	; (8013224 <lwip_cyclic_timer+0x60>)
 8013212:	68f8      	ldr	r0, [r7, #12]
 8013214:	f7ff ff68 	bl	80130e8 <sys_timeout_abs>
}
 8013218:	bf00      	nop
 801321a:	3718      	adds	r7, #24
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}
 8013220:	200115b4 	.word	0x200115b4
 8013224:	080131c5 	.word	0x080131c5

08013228 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b082      	sub	sp, #8
 801322c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801322e:	2301      	movs	r3, #1
 8013230:	607b      	str	r3, [r7, #4]
 8013232:	e00e      	b.n	8013252 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013234:	4a0b      	ldr	r2, [pc, #44]	; (8013264 <sys_timeouts_init+0x3c>)
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	00db      	lsls	r3, r3, #3
 8013240:	4a08      	ldr	r2, [pc, #32]	; (8013264 <sys_timeouts_init+0x3c>)
 8013242:	4413      	add	r3, r2
 8013244:	461a      	mov	r2, r3
 8013246:	4908      	ldr	r1, [pc, #32]	; (8013268 <sys_timeouts_init+0x40>)
 8013248:	f000 f810 	bl	801326c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	3301      	adds	r3, #1
 8013250:	607b      	str	r3, [r7, #4]
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2b04      	cmp	r3, #4
 8013256:	d9ed      	bls.n	8013234 <sys_timeouts_init+0xc>
  }
}
 8013258:	bf00      	nop
 801325a:	bf00      	nop
 801325c:	3708      	adds	r7, #8
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}
 8013262:	bf00      	nop
 8013264:	0802785c 	.word	0x0802785c
 8013268:	080131c5 	.word	0x080131c5

0801326c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b086      	sub	sp, #24
 8013270:	af00      	add	r7, sp, #0
 8013272:	60f8      	str	r0, [r7, #12]
 8013274:	60b9      	str	r1, [r7, #8]
 8013276:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801327e:	d306      	bcc.n	801328e <sys_timeout+0x22>
 8013280:	4b0a      	ldr	r3, [pc, #40]	; (80132ac <sys_timeout+0x40>)
 8013282:	f240 1229 	movw	r2, #297	; 0x129
 8013286:	490a      	ldr	r1, [pc, #40]	; (80132b0 <sys_timeout+0x44>)
 8013288:	480a      	ldr	r0, [pc, #40]	; (80132b4 <sys_timeout+0x48>)
 801328a:	f005 f999 	bl	80185c0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801328e:	f7f1 fc2b 	bl	8004ae8 <sys_now>
 8013292:	4602      	mov	r2, r0
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	4413      	add	r3, r2
 8013298:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801329a:	687a      	ldr	r2, [r7, #4]
 801329c:	68b9      	ldr	r1, [r7, #8]
 801329e:	6978      	ldr	r0, [r7, #20]
 80132a0:	f7ff ff22 	bl	80130e8 <sys_timeout_abs>
#endif
}
 80132a4:	bf00      	nop
 80132a6:	3718      	adds	r7, #24
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	0801c754 	.word	0x0801c754
 80132b0:	0801c7f0 	.word	0x0801c7f0
 80132b4:	0801c7c8 	.word	0x0801c7c8

080132b8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b084      	sub	sp, #16
 80132bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80132be:	f7f1 fc13 	bl	8004ae8 <sys_now>
 80132c2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80132c4:	4b17      	ldr	r3, [pc, #92]	; (8013324 <sys_check_timeouts+0x6c>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d022      	beq.n	8013316 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	685b      	ldr	r3, [r3, #4]
 80132d4:	68fa      	ldr	r2, [r7, #12]
 80132d6:	1ad3      	subs	r3, r2, r3
 80132d8:	0fdb      	lsrs	r3, r3, #31
 80132da:	f003 0301 	and.w	r3, r3, #1
 80132de:	b2db      	uxtb	r3, r3
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d11a      	bne.n	801331a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	4a0e      	ldr	r2, [pc, #56]	; (8013324 <sys_check_timeouts+0x6c>)
 80132ea:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	689b      	ldr	r3, [r3, #8]
 80132f0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	68db      	ldr	r3, [r3, #12]
 80132f6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	685b      	ldr	r3, [r3, #4]
 80132fc:	4a0a      	ldr	r2, [pc, #40]	; (8013328 <sys_check_timeouts+0x70>)
 80132fe:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013300:	68b9      	ldr	r1, [r7, #8]
 8013302:	200a      	movs	r0, #10
 8013304:	f7f8 fcc0 	bl	800bc88 <memp_free>
    if (handler != NULL) {
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d0da      	beq.n	80132c4 <sys_check_timeouts+0xc>
      handler(arg);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	6838      	ldr	r0, [r7, #0]
 8013312:	4798      	blx	r3
  do {
 8013314:	e7d6      	b.n	80132c4 <sys_check_timeouts+0xc>
      return;
 8013316:	bf00      	nop
 8013318:	e000      	b.n	801331c <sys_check_timeouts+0x64>
      return;
 801331a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801331c:	3710      	adds	r7, #16
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	200115b0 	.word	0x200115b0
 8013328:	200115b4 	.word	0x200115b4

0801332c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013332:	4b16      	ldr	r3, [pc, #88]	; (801338c <sys_timeouts_sleeptime+0x60>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d102      	bne.n	8013340 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801333a:	f04f 33ff 	mov.w	r3, #4294967295
 801333e:	e020      	b.n	8013382 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013340:	f7f1 fbd2 	bl	8004ae8 <sys_now>
 8013344:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013346:	4b11      	ldr	r3, [pc, #68]	; (801338c <sys_timeouts_sleeptime+0x60>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	685a      	ldr	r2, [r3, #4]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	1ad3      	subs	r3, r2, r3
 8013350:	0fdb      	lsrs	r3, r3, #31
 8013352:	f003 0301 	and.w	r3, r3, #1
 8013356:	b2db      	uxtb	r3, r3
 8013358:	2b00      	cmp	r3, #0
 801335a:	d001      	beq.n	8013360 <sys_timeouts_sleeptime+0x34>
    return 0;
 801335c:	2300      	movs	r3, #0
 801335e:	e010      	b.n	8013382 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013360:	4b0a      	ldr	r3, [pc, #40]	; (801338c <sys_timeouts_sleeptime+0x60>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	685a      	ldr	r2, [r3, #4]
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	1ad3      	subs	r3, r2, r3
 801336a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	2b00      	cmp	r3, #0
 8013370:	da06      	bge.n	8013380 <sys_timeouts_sleeptime+0x54>
 8013372:	4b07      	ldr	r3, [pc, #28]	; (8013390 <sys_timeouts_sleeptime+0x64>)
 8013374:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013378:	4906      	ldr	r1, [pc, #24]	; (8013394 <sys_timeouts_sleeptime+0x68>)
 801337a:	4807      	ldr	r0, [pc, #28]	; (8013398 <sys_timeouts_sleeptime+0x6c>)
 801337c:	f005 f920 	bl	80185c0 <iprintf>
    return ret;
 8013380:	683b      	ldr	r3, [r7, #0]
  }
}
 8013382:	4618      	mov	r0, r3
 8013384:	3708      	adds	r7, #8
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	200115b0 	.word	0x200115b0
 8013390:	0801c754 	.word	0x0801c754
 8013394:	0801c828 	.word	0x0801c828
 8013398:	0801c7c8 	.word	0x0801c7c8

0801339c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80133a0:	f005 f820 	bl	80183e4 <rand>
 80133a4:	4603      	mov	r3, r0
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80133ac:	b29b      	uxth	r3, r3
 80133ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80133b2:	b29a      	uxth	r2, r3
 80133b4:	4b01      	ldr	r3, [pc, #4]	; (80133bc <udp_init+0x20>)
 80133b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80133b8:	bf00      	nop
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	2000002c 	.word	0x2000002c

080133c0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80133c0:	b480      	push	{r7}
 80133c2:	b083      	sub	sp, #12
 80133c4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80133c6:	2300      	movs	r3, #0
 80133c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80133ca:	4b17      	ldr	r3, [pc, #92]	; (8013428 <udp_new_port+0x68>)
 80133cc:	881b      	ldrh	r3, [r3, #0]
 80133ce:	1c5a      	adds	r2, r3, #1
 80133d0:	b291      	uxth	r1, r2
 80133d2:	4a15      	ldr	r2, [pc, #84]	; (8013428 <udp_new_port+0x68>)
 80133d4:	8011      	strh	r1, [r2, #0]
 80133d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133da:	4293      	cmp	r3, r2
 80133dc:	d103      	bne.n	80133e6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80133de:	4b12      	ldr	r3, [pc, #72]	; (8013428 <udp_new_port+0x68>)
 80133e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80133e4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80133e6:	4b11      	ldr	r3, [pc, #68]	; (801342c <udp_new_port+0x6c>)
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	603b      	str	r3, [r7, #0]
 80133ec:	e011      	b.n	8013412 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	8a5a      	ldrh	r2, [r3, #18]
 80133f2:	4b0d      	ldr	r3, [pc, #52]	; (8013428 <udp_new_port+0x68>)
 80133f4:	881b      	ldrh	r3, [r3, #0]
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d108      	bne.n	801340c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80133fa:	88fb      	ldrh	r3, [r7, #6]
 80133fc:	3301      	adds	r3, #1
 80133fe:	80fb      	strh	r3, [r7, #6]
 8013400:	88fb      	ldrh	r3, [r7, #6]
 8013402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013406:	d3e0      	bcc.n	80133ca <udp_new_port+0xa>
        return 0;
 8013408:	2300      	movs	r3, #0
 801340a:	e007      	b.n	801341c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	68db      	ldr	r3, [r3, #12]
 8013410:	603b      	str	r3, [r7, #0]
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d1ea      	bne.n	80133ee <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013418:	4b03      	ldr	r3, [pc, #12]	; (8013428 <udp_new_port+0x68>)
 801341a:	881b      	ldrh	r3, [r3, #0]
}
 801341c:	4618      	mov	r0, r3
 801341e:	370c      	adds	r7, #12
 8013420:	46bd      	mov	sp, r7
 8013422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013426:	4770      	bx	lr
 8013428:	2000002c 	.word	0x2000002c
 801342c:	200115bc 	.word	0x200115bc

08013430 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b084      	sub	sp, #16
 8013434:	af00      	add	r7, sp, #0
 8013436:	60f8      	str	r0, [r7, #12]
 8013438:	60b9      	str	r1, [r7, #8]
 801343a:	4613      	mov	r3, r2
 801343c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d105      	bne.n	8013450 <udp_input_local_match+0x20>
 8013444:	4b27      	ldr	r3, [pc, #156]	; (80134e4 <udp_input_local_match+0xb4>)
 8013446:	2287      	movs	r2, #135	; 0x87
 8013448:	4927      	ldr	r1, [pc, #156]	; (80134e8 <udp_input_local_match+0xb8>)
 801344a:	4828      	ldr	r0, [pc, #160]	; (80134ec <udp_input_local_match+0xbc>)
 801344c:	f005 f8b8 	bl	80185c0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d105      	bne.n	8013462 <udp_input_local_match+0x32>
 8013456:	4b23      	ldr	r3, [pc, #140]	; (80134e4 <udp_input_local_match+0xb4>)
 8013458:	2288      	movs	r2, #136	; 0x88
 801345a:	4925      	ldr	r1, [pc, #148]	; (80134f0 <udp_input_local_match+0xc0>)
 801345c:	4823      	ldr	r0, [pc, #140]	; (80134ec <udp_input_local_match+0xbc>)
 801345e:	f005 f8af 	bl	80185c0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	7a1b      	ldrb	r3, [r3, #8]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d00b      	beq.n	8013482 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	7a1a      	ldrb	r2, [r3, #8]
 801346e:	4b21      	ldr	r3, [pc, #132]	; (80134f4 <udp_input_local_match+0xc4>)
 8013470:	685b      	ldr	r3, [r3, #4]
 8013472:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013476:	3301      	adds	r3, #1
 8013478:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801347a:	429a      	cmp	r2, r3
 801347c:	d001      	beq.n	8013482 <udp_input_local_match+0x52>
    return 0;
 801347e:	2300      	movs	r3, #0
 8013480:	e02b      	b.n	80134da <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013482:	79fb      	ldrb	r3, [r7, #7]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d018      	beq.n	80134ba <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d013      	beq.n	80134b6 <udp_input_local_match+0x86>
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d00f      	beq.n	80134b6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013496:	4b17      	ldr	r3, [pc, #92]	; (80134f4 <udp_input_local_match+0xc4>)
 8013498:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801349a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801349e:	d00a      	beq.n	80134b6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	681a      	ldr	r2, [r3, #0]
 80134a4:	4b13      	ldr	r3, [pc, #76]	; (80134f4 <udp_input_local_match+0xc4>)
 80134a6:	695b      	ldr	r3, [r3, #20]
 80134a8:	405a      	eors	r2, r3
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	3308      	adds	r3, #8
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d110      	bne.n	80134d8 <udp_input_local_match+0xa8>
          return 1;
 80134b6:	2301      	movs	r3, #1
 80134b8:	e00f      	b.n	80134da <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d009      	beq.n	80134d4 <udp_input_local_match+0xa4>
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d005      	beq.n	80134d4 <udp_input_local_match+0xa4>
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	681a      	ldr	r2, [r3, #0]
 80134cc:	4b09      	ldr	r3, [pc, #36]	; (80134f4 <udp_input_local_match+0xc4>)
 80134ce:	695b      	ldr	r3, [r3, #20]
 80134d0:	429a      	cmp	r2, r3
 80134d2:	d101      	bne.n	80134d8 <udp_input_local_match+0xa8>
        return 1;
 80134d4:	2301      	movs	r3, #1
 80134d6:	e000      	b.n	80134da <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80134d8:	2300      	movs	r3, #0
}
 80134da:	4618      	mov	r0, r3
 80134dc:	3710      	adds	r7, #16
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
 80134e2:	bf00      	nop
 80134e4:	0801c83c 	.word	0x0801c83c
 80134e8:	0801c86c 	.word	0x0801c86c
 80134ec:	0801c890 	.word	0x0801c890
 80134f0:	0801c8b8 	.word	0x0801c8b8
 80134f4:	2000ddec 	.word	0x2000ddec

080134f8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80134f8:	b590      	push	{r4, r7, lr}
 80134fa:	b08d      	sub	sp, #52	; 0x34
 80134fc:	af02      	add	r7, sp, #8
 80134fe:	6078      	str	r0, [r7, #4]
 8013500:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013502:	2300      	movs	r3, #0
 8013504:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d105      	bne.n	8013518 <udp_input+0x20>
 801350c:	4b7c      	ldr	r3, [pc, #496]	; (8013700 <udp_input+0x208>)
 801350e:	22cf      	movs	r2, #207	; 0xcf
 8013510:	497c      	ldr	r1, [pc, #496]	; (8013704 <udp_input+0x20c>)
 8013512:	487d      	ldr	r0, [pc, #500]	; (8013708 <udp_input+0x210>)
 8013514:	f005 f854 	bl	80185c0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d105      	bne.n	801352a <udp_input+0x32>
 801351e:	4b78      	ldr	r3, [pc, #480]	; (8013700 <udp_input+0x208>)
 8013520:	22d0      	movs	r2, #208	; 0xd0
 8013522:	497a      	ldr	r1, [pc, #488]	; (801370c <udp_input+0x214>)
 8013524:	4878      	ldr	r0, [pc, #480]	; (8013708 <udp_input+0x210>)
 8013526:	f005 f84b 	bl	80185c0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	895b      	ldrh	r3, [r3, #10]
 801352e:	2b07      	cmp	r3, #7
 8013530:	d803      	bhi.n	801353a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f7f9 fa58 	bl	800c9e8 <pbuf_free>
    goto end;
 8013538:	e0de      	b.n	80136f8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	685b      	ldr	r3, [r3, #4]
 801353e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013540:	4b73      	ldr	r3, [pc, #460]	; (8013710 <udp_input+0x218>)
 8013542:	695b      	ldr	r3, [r3, #20]
 8013544:	4a72      	ldr	r2, [pc, #456]	; (8013710 <udp_input+0x218>)
 8013546:	6812      	ldr	r2, [r2, #0]
 8013548:	4611      	mov	r1, r2
 801354a:	4618      	mov	r0, r3
 801354c:	f003 fe12 	bl	8017174 <ip4_addr_isbroadcast_u32>
 8013550:	4603      	mov	r3, r0
 8013552:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	881b      	ldrh	r3, [r3, #0]
 8013558:	b29b      	uxth	r3, r3
 801355a:	4618      	mov	r0, r3
 801355c:	f7f7 fe10 	bl	800b180 <lwip_htons>
 8013560:	4603      	mov	r3, r0
 8013562:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	885b      	ldrh	r3, [r3, #2]
 8013568:	b29b      	uxth	r3, r3
 801356a:	4618      	mov	r0, r3
 801356c:	f7f7 fe08 	bl	800b180 <lwip_htons>
 8013570:	4603      	mov	r3, r0
 8013572:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013574:	2300      	movs	r3, #0
 8013576:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013578:	2300      	movs	r3, #0
 801357a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801357c:	2300      	movs	r3, #0
 801357e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013580:	4b64      	ldr	r3, [pc, #400]	; (8013714 <udp_input+0x21c>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	627b      	str	r3, [r7, #36]	; 0x24
 8013586:	e054      	b.n	8013632 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801358a:	8a5b      	ldrh	r3, [r3, #18]
 801358c:	89fa      	ldrh	r2, [r7, #14]
 801358e:	429a      	cmp	r2, r3
 8013590:	d14a      	bne.n	8013628 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013592:	7cfb      	ldrb	r3, [r7, #19]
 8013594:	461a      	mov	r2, r3
 8013596:	6839      	ldr	r1, [r7, #0]
 8013598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801359a:	f7ff ff49 	bl	8013430 <udp_input_local_match>
 801359e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d041      	beq.n	8013628 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80135a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a6:	7c1b      	ldrb	r3, [r3, #16]
 80135a8:	f003 0304 	and.w	r3, r3, #4
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d11d      	bne.n	80135ec <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d102      	bne.n	80135bc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80135b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135b8:	61fb      	str	r3, [r7, #28]
 80135ba:	e017      	b.n	80135ec <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80135bc:	7cfb      	ldrb	r3, [r7, #19]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d014      	beq.n	80135ec <udp_input+0xf4>
 80135c2:	4b53      	ldr	r3, [pc, #332]	; (8013710 <udp_input+0x218>)
 80135c4:	695b      	ldr	r3, [r3, #20]
 80135c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135ca:	d10f      	bne.n	80135ec <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80135cc:	69fb      	ldr	r3, [r7, #28]
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	3304      	adds	r3, #4
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d008      	beq.n	80135ec <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80135da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135dc:	681a      	ldr	r2, [r3, #0]
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	3304      	adds	r3, #4
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d101      	bne.n	80135ec <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80135e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ea:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80135ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ee:	8a9b      	ldrh	r3, [r3, #20]
 80135f0:	8a3a      	ldrh	r2, [r7, #16]
 80135f2:	429a      	cmp	r2, r3
 80135f4:	d118      	bne.n	8013628 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80135f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135f8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d005      	beq.n	801360a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80135fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013600:	685a      	ldr	r2, [r3, #4]
 8013602:	4b43      	ldr	r3, [pc, #268]	; (8013710 <udp_input+0x218>)
 8013604:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013606:	429a      	cmp	r2, r3
 8013608:	d10e      	bne.n	8013628 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801360a:	6a3b      	ldr	r3, [r7, #32]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d014      	beq.n	801363a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013612:	68da      	ldr	r2, [r3, #12]
 8013614:	6a3b      	ldr	r3, [r7, #32]
 8013616:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013618:	4b3e      	ldr	r3, [pc, #248]	; (8013714 <udp_input+0x21c>)
 801361a:	681a      	ldr	r2, [r3, #0]
 801361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801361e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013620:	4a3c      	ldr	r2, [pc, #240]	; (8013714 <udp_input+0x21c>)
 8013622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013624:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013626:	e008      	b.n	801363a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801362a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801362e:	68db      	ldr	r3, [r3, #12]
 8013630:	627b      	str	r3, [r7, #36]	; 0x24
 8013632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013634:	2b00      	cmp	r3, #0
 8013636:	d1a7      	bne.n	8013588 <udp_input+0x90>
 8013638:	e000      	b.n	801363c <udp_input+0x144>
        break;
 801363a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801363e:	2b00      	cmp	r3, #0
 8013640:	d101      	bne.n	8013646 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013642:	69fb      	ldr	r3, [r7, #28]
 8013644:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013648:	2b00      	cmp	r3, #0
 801364a:	d002      	beq.n	8013652 <udp_input+0x15a>
    for_us = 1;
 801364c:	2301      	movs	r3, #1
 801364e:	76fb      	strb	r3, [r7, #27]
 8013650:	e00a      	b.n	8013668 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	3304      	adds	r3, #4
 8013656:	681a      	ldr	r2, [r3, #0]
 8013658:	4b2d      	ldr	r3, [pc, #180]	; (8013710 <udp_input+0x218>)
 801365a:	695b      	ldr	r3, [r3, #20]
 801365c:	429a      	cmp	r2, r3
 801365e:	bf0c      	ite	eq
 8013660:	2301      	moveq	r3, #1
 8013662:	2300      	movne	r3, #0
 8013664:	b2db      	uxtb	r3, r3
 8013666:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013668:	7efb      	ldrb	r3, [r7, #27]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d041      	beq.n	80136f2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801366e:	2108      	movs	r1, #8
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f7f9 f933 	bl	800c8dc <pbuf_remove_header>
 8013676:	4603      	mov	r3, r0
 8013678:	2b00      	cmp	r3, #0
 801367a:	d00a      	beq.n	8013692 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801367c:	4b20      	ldr	r3, [pc, #128]	; (8013700 <udp_input+0x208>)
 801367e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013682:	4925      	ldr	r1, [pc, #148]	; (8013718 <udp_input+0x220>)
 8013684:	4820      	ldr	r0, [pc, #128]	; (8013708 <udp_input+0x210>)
 8013686:	f004 ff9b 	bl	80185c0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801368a:	6878      	ldr	r0, [r7, #4]
 801368c:	f7f9 f9ac 	bl	800c9e8 <pbuf_free>
      goto end;
 8013690:	e032      	b.n	80136f8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013694:	2b00      	cmp	r3, #0
 8013696:	d012      	beq.n	80136be <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801369a:	699b      	ldr	r3, [r3, #24]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d00a      	beq.n	80136b6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80136a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a2:	699c      	ldr	r4, [r3, #24]
 80136a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a6:	69d8      	ldr	r0, [r3, #28]
 80136a8:	8a3b      	ldrh	r3, [r7, #16]
 80136aa:	9300      	str	r3, [sp, #0]
 80136ac:	4b1b      	ldr	r3, [pc, #108]	; (801371c <udp_input+0x224>)
 80136ae:	687a      	ldr	r2, [r7, #4]
 80136b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80136b2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80136b4:	e021      	b.n	80136fa <udp_input+0x202>
        pbuf_free(p);
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f7f9 f996 	bl	800c9e8 <pbuf_free>
        goto end;
 80136bc:	e01c      	b.n	80136f8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80136be:	7cfb      	ldrb	r3, [r7, #19]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d112      	bne.n	80136ea <udp_input+0x1f2>
 80136c4:	4b12      	ldr	r3, [pc, #72]	; (8013710 <udp_input+0x218>)
 80136c6:	695b      	ldr	r3, [r3, #20]
 80136c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80136cc:	2be0      	cmp	r3, #224	; 0xe0
 80136ce:	d00c      	beq.n	80136ea <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80136d0:	4b0f      	ldr	r3, [pc, #60]	; (8013710 <udp_input+0x218>)
 80136d2:	899b      	ldrh	r3, [r3, #12]
 80136d4:	3308      	adds	r3, #8
 80136d6:	b29b      	uxth	r3, r3
 80136d8:	b21b      	sxth	r3, r3
 80136da:	4619      	mov	r1, r3
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f7f9 f970 	bl	800c9c2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80136e2:	2103      	movs	r1, #3
 80136e4:	6878      	ldr	r0, [r7, #4]
 80136e6:	f003 fa07 	bl	8016af8 <icmp_dest_unreach>
      pbuf_free(p);
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	f7f9 f97c 	bl	800c9e8 <pbuf_free>
  return;
 80136f0:	e003      	b.n	80136fa <udp_input+0x202>
    pbuf_free(p);
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f7f9 f978 	bl	800c9e8 <pbuf_free>
  return;
 80136f8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80136fa:	372c      	adds	r7, #44	; 0x2c
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd90      	pop	{r4, r7, pc}
 8013700:	0801c83c 	.word	0x0801c83c
 8013704:	0801c8e0 	.word	0x0801c8e0
 8013708:	0801c890 	.word	0x0801c890
 801370c:	0801c8f8 	.word	0x0801c8f8
 8013710:	2000ddec 	.word	0x2000ddec
 8013714:	200115bc 	.word	0x200115bc
 8013718:	0801c914 	.word	0x0801c914
 801371c:	2000ddfc 	.word	0x2000ddfc

08013720 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b088      	sub	sp, #32
 8013724:	af02      	add	r7, sp, #8
 8013726:	60f8      	str	r0, [r7, #12]
 8013728:	60b9      	str	r1, [r7, #8]
 801372a:	607a      	str	r2, [r7, #4]
 801372c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d109      	bne.n	8013748 <udp_sendto_if+0x28>
 8013734:	4b2e      	ldr	r3, [pc, #184]	; (80137f0 <udp_sendto_if+0xd0>)
 8013736:	f44f 7220 	mov.w	r2, #640	; 0x280
 801373a:	492e      	ldr	r1, [pc, #184]	; (80137f4 <udp_sendto_if+0xd4>)
 801373c:	482e      	ldr	r0, [pc, #184]	; (80137f8 <udp_sendto_if+0xd8>)
 801373e:	f004 ff3f 	bl	80185c0 <iprintf>
 8013742:	f06f 030f 	mvn.w	r3, #15
 8013746:	e04f      	b.n	80137e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d109      	bne.n	8013762 <udp_sendto_if+0x42>
 801374e:	4b28      	ldr	r3, [pc, #160]	; (80137f0 <udp_sendto_if+0xd0>)
 8013750:	f240 2281 	movw	r2, #641	; 0x281
 8013754:	4929      	ldr	r1, [pc, #164]	; (80137fc <udp_sendto_if+0xdc>)
 8013756:	4828      	ldr	r0, [pc, #160]	; (80137f8 <udp_sendto_if+0xd8>)
 8013758:	f004 ff32 	bl	80185c0 <iprintf>
 801375c:	f06f 030f 	mvn.w	r3, #15
 8013760:	e042      	b.n	80137e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d109      	bne.n	801377c <udp_sendto_if+0x5c>
 8013768:	4b21      	ldr	r3, [pc, #132]	; (80137f0 <udp_sendto_if+0xd0>)
 801376a:	f240 2282 	movw	r2, #642	; 0x282
 801376e:	4924      	ldr	r1, [pc, #144]	; (8013800 <udp_sendto_if+0xe0>)
 8013770:	4821      	ldr	r0, [pc, #132]	; (80137f8 <udp_sendto_if+0xd8>)
 8013772:	f004 ff25 	bl	80185c0 <iprintf>
 8013776:	f06f 030f 	mvn.w	r3, #15
 801377a:	e035      	b.n	80137e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801377c:	6a3b      	ldr	r3, [r7, #32]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d109      	bne.n	8013796 <udp_sendto_if+0x76>
 8013782:	4b1b      	ldr	r3, [pc, #108]	; (80137f0 <udp_sendto_if+0xd0>)
 8013784:	f240 2283 	movw	r2, #643	; 0x283
 8013788:	491e      	ldr	r1, [pc, #120]	; (8013804 <udp_sendto_if+0xe4>)
 801378a:	481b      	ldr	r0, [pc, #108]	; (80137f8 <udp_sendto_if+0xd8>)
 801378c:	f004 ff18 	bl	80185c0 <iprintf>
 8013790:	f06f 030f 	mvn.w	r3, #15
 8013794:	e028      	b.n	80137e8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d009      	beq.n	80137b0 <udp_sendto_if+0x90>
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d005      	beq.n	80137b0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80137ac:	2be0      	cmp	r3, #224	; 0xe0
 80137ae:	d103      	bne.n	80137b8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80137b0:	6a3b      	ldr	r3, [r7, #32]
 80137b2:	3304      	adds	r3, #4
 80137b4:	617b      	str	r3, [r7, #20]
 80137b6:	e00b      	b.n	80137d0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	681a      	ldr	r2, [r3, #0]
 80137bc:	6a3b      	ldr	r3, [r7, #32]
 80137be:	3304      	adds	r3, #4
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d002      	beq.n	80137cc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80137c6:	f06f 0303 	mvn.w	r3, #3
 80137ca:	e00d      	b.n	80137e8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80137d0:	887a      	ldrh	r2, [r7, #2]
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	9301      	str	r3, [sp, #4]
 80137d6:	6a3b      	ldr	r3, [r7, #32]
 80137d8:	9300      	str	r3, [sp, #0]
 80137da:	4613      	mov	r3, r2
 80137dc:	687a      	ldr	r2, [r7, #4]
 80137de:	68b9      	ldr	r1, [r7, #8]
 80137e0:	68f8      	ldr	r0, [r7, #12]
 80137e2:	f000 f811 	bl	8013808 <udp_sendto_if_src>
 80137e6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	3718      	adds	r7, #24
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}
 80137f0:	0801c83c 	.word	0x0801c83c
 80137f4:	0801c9b0 	.word	0x0801c9b0
 80137f8:	0801c890 	.word	0x0801c890
 80137fc:	0801c9cc 	.word	0x0801c9cc
 8013800:	0801c9e8 	.word	0x0801c9e8
 8013804:	0801ca08 	.word	0x0801ca08

08013808 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b08c      	sub	sp, #48	; 0x30
 801380c:	af04      	add	r7, sp, #16
 801380e:	60f8      	str	r0, [r7, #12]
 8013810:	60b9      	str	r1, [r7, #8]
 8013812:	607a      	str	r2, [r7, #4]
 8013814:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d109      	bne.n	8013830 <udp_sendto_if_src+0x28>
 801381c:	4b65      	ldr	r3, [pc, #404]	; (80139b4 <udp_sendto_if_src+0x1ac>)
 801381e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013822:	4965      	ldr	r1, [pc, #404]	; (80139b8 <udp_sendto_if_src+0x1b0>)
 8013824:	4865      	ldr	r0, [pc, #404]	; (80139bc <udp_sendto_if_src+0x1b4>)
 8013826:	f004 fecb 	bl	80185c0 <iprintf>
 801382a:	f06f 030f 	mvn.w	r3, #15
 801382e:	e0bc      	b.n	80139aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d109      	bne.n	801384a <udp_sendto_if_src+0x42>
 8013836:	4b5f      	ldr	r3, [pc, #380]	; (80139b4 <udp_sendto_if_src+0x1ac>)
 8013838:	f240 22d2 	movw	r2, #722	; 0x2d2
 801383c:	4960      	ldr	r1, [pc, #384]	; (80139c0 <udp_sendto_if_src+0x1b8>)
 801383e:	485f      	ldr	r0, [pc, #380]	; (80139bc <udp_sendto_if_src+0x1b4>)
 8013840:	f004 febe 	bl	80185c0 <iprintf>
 8013844:	f06f 030f 	mvn.w	r3, #15
 8013848:	e0af      	b.n	80139aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d109      	bne.n	8013864 <udp_sendto_if_src+0x5c>
 8013850:	4b58      	ldr	r3, [pc, #352]	; (80139b4 <udp_sendto_if_src+0x1ac>)
 8013852:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013856:	495b      	ldr	r1, [pc, #364]	; (80139c4 <udp_sendto_if_src+0x1bc>)
 8013858:	4858      	ldr	r0, [pc, #352]	; (80139bc <udp_sendto_if_src+0x1b4>)
 801385a:	f004 feb1 	bl	80185c0 <iprintf>
 801385e:	f06f 030f 	mvn.w	r3, #15
 8013862:	e0a2      	b.n	80139aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013866:	2b00      	cmp	r3, #0
 8013868:	d109      	bne.n	801387e <udp_sendto_if_src+0x76>
 801386a:	4b52      	ldr	r3, [pc, #328]	; (80139b4 <udp_sendto_if_src+0x1ac>)
 801386c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013870:	4955      	ldr	r1, [pc, #340]	; (80139c8 <udp_sendto_if_src+0x1c0>)
 8013872:	4852      	ldr	r0, [pc, #328]	; (80139bc <udp_sendto_if_src+0x1b4>)
 8013874:	f004 fea4 	bl	80185c0 <iprintf>
 8013878:	f06f 030f 	mvn.w	r3, #15
 801387c:	e095      	b.n	80139aa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013880:	2b00      	cmp	r3, #0
 8013882:	d109      	bne.n	8013898 <udp_sendto_if_src+0x90>
 8013884:	4b4b      	ldr	r3, [pc, #300]	; (80139b4 <udp_sendto_if_src+0x1ac>)
 8013886:	f240 22d5 	movw	r2, #725	; 0x2d5
 801388a:	4950      	ldr	r1, [pc, #320]	; (80139cc <udp_sendto_if_src+0x1c4>)
 801388c:	484b      	ldr	r0, [pc, #300]	; (80139bc <udp_sendto_if_src+0x1b4>)
 801388e:	f004 fe97 	bl	80185c0 <iprintf>
 8013892:	f06f 030f 	mvn.w	r3, #15
 8013896:	e088      	b.n	80139aa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	8a5b      	ldrh	r3, [r3, #18]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d10f      	bne.n	80138c0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80138a0:	68f9      	ldr	r1, [r7, #12]
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	8a5b      	ldrh	r3, [r3, #18]
 80138a6:	461a      	mov	r2, r3
 80138a8:	68f8      	ldr	r0, [r7, #12]
 80138aa:	f000 f893 	bl	80139d4 <udp_bind>
 80138ae:	4603      	mov	r3, r0
 80138b0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80138b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d002      	beq.n	80138c0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80138ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80138be:	e074      	b.n	80139aa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80138c0:	68bb      	ldr	r3, [r7, #8]
 80138c2:	891b      	ldrh	r3, [r3, #8]
 80138c4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80138c8:	4293      	cmp	r3, r2
 80138ca:	d902      	bls.n	80138d2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80138cc:	f04f 33ff 	mov.w	r3, #4294967295
 80138d0:	e06b      	b.n	80139aa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80138d2:	2108      	movs	r1, #8
 80138d4:	68b8      	ldr	r0, [r7, #8]
 80138d6:	f7f8 fff1 	bl	800c8bc <pbuf_add_header>
 80138da:	4603      	mov	r3, r0
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d015      	beq.n	801390c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80138e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80138e4:	2108      	movs	r1, #8
 80138e6:	2022      	movs	r0, #34	; 0x22
 80138e8:	f7f8 fd9a 	bl	800c420 <pbuf_alloc>
 80138ec:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80138ee:	69fb      	ldr	r3, [r7, #28]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d102      	bne.n	80138fa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80138f4:	f04f 33ff 	mov.w	r3, #4294967295
 80138f8:	e057      	b.n	80139aa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80138fa:	68bb      	ldr	r3, [r7, #8]
 80138fc:	891b      	ldrh	r3, [r3, #8]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d006      	beq.n	8013910 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013902:	68b9      	ldr	r1, [r7, #8]
 8013904:	69f8      	ldr	r0, [r7, #28]
 8013906:	f7f9 f993 	bl	800cc30 <pbuf_chain>
 801390a:	e001      	b.n	8013910 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013910:	69fb      	ldr	r3, [r7, #28]
 8013912:	895b      	ldrh	r3, [r3, #10]
 8013914:	2b07      	cmp	r3, #7
 8013916:	d806      	bhi.n	8013926 <udp_sendto_if_src+0x11e>
 8013918:	4b26      	ldr	r3, [pc, #152]	; (80139b4 <udp_sendto_if_src+0x1ac>)
 801391a:	f240 320d 	movw	r2, #781	; 0x30d
 801391e:	492c      	ldr	r1, [pc, #176]	; (80139d0 <udp_sendto_if_src+0x1c8>)
 8013920:	4826      	ldr	r0, [pc, #152]	; (80139bc <udp_sendto_if_src+0x1b4>)
 8013922:	f004 fe4d 	bl	80185c0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013926:	69fb      	ldr	r3, [r7, #28]
 8013928:	685b      	ldr	r3, [r3, #4]
 801392a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	8a5b      	ldrh	r3, [r3, #18]
 8013930:	4618      	mov	r0, r3
 8013932:	f7f7 fc25 	bl	800b180 <lwip_htons>
 8013936:	4603      	mov	r3, r0
 8013938:	461a      	mov	r2, r3
 801393a:	697b      	ldr	r3, [r7, #20]
 801393c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801393e:	887b      	ldrh	r3, [r7, #2]
 8013940:	4618      	mov	r0, r3
 8013942:	f7f7 fc1d 	bl	800b180 <lwip_htons>
 8013946:	4603      	mov	r3, r0
 8013948:	461a      	mov	r2, r3
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	2200      	movs	r2, #0
 8013952:	719a      	strb	r2, [r3, #6]
 8013954:	2200      	movs	r2, #0
 8013956:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013958:	69fb      	ldr	r3, [r7, #28]
 801395a:	891b      	ldrh	r3, [r3, #8]
 801395c:	4618      	mov	r0, r3
 801395e:	f7f7 fc0f 	bl	800b180 <lwip_htons>
 8013962:	4603      	mov	r3, r0
 8013964:	461a      	mov	r2, r3
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801396a:	2311      	movs	r3, #17
 801396c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	7adb      	ldrb	r3, [r3, #11]
 8013972:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	7a9b      	ldrb	r3, [r3, #10]
 8013978:	7cb9      	ldrb	r1, [r7, #18]
 801397a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801397c:	9202      	str	r2, [sp, #8]
 801397e:	7cfa      	ldrb	r2, [r7, #19]
 8013980:	9201      	str	r2, [sp, #4]
 8013982:	9300      	str	r3, [sp, #0]
 8013984:	460b      	mov	r3, r1
 8013986:	687a      	ldr	r2, [r7, #4]
 8013988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801398a:	69f8      	ldr	r0, [r7, #28]
 801398c:	f003 fb44 	bl	8017018 <ip4_output_if_src>
 8013990:	4603      	mov	r3, r0
 8013992:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013994:	69fa      	ldr	r2, [r7, #28]
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	429a      	cmp	r2, r3
 801399a:	d004      	beq.n	80139a6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801399c:	69f8      	ldr	r0, [r7, #28]
 801399e:	f7f9 f823 	bl	800c9e8 <pbuf_free>
    q = NULL;
 80139a2:	2300      	movs	r3, #0
 80139a4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80139a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	3720      	adds	r7, #32
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
 80139b2:	bf00      	nop
 80139b4:	0801c83c 	.word	0x0801c83c
 80139b8:	0801ca28 	.word	0x0801ca28
 80139bc:	0801c890 	.word	0x0801c890
 80139c0:	0801ca48 	.word	0x0801ca48
 80139c4:	0801ca68 	.word	0x0801ca68
 80139c8:	0801ca8c 	.word	0x0801ca8c
 80139cc:	0801cab0 	.word	0x0801cab0
 80139d0:	0801cad4 	.word	0x0801cad4

080139d4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b086      	sub	sp, #24
 80139d8:	af00      	add	r7, sp, #0
 80139da:	60f8      	str	r0, [r7, #12]
 80139dc:	60b9      	str	r1, [r7, #8]
 80139de:	4613      	mov	r3, r2
 80139e0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d101      	bne.n	80139ec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80139e8:	4b39      	ldr	r3, [pc, #228]	; (8013ad0 <udp_bind+0xfc>)
 80139ea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d109      	bne.n	8013a06 <udp_bind+0x32>
 80139f2:	4b38      	ldr	r3, [pc, #224]	; (8013ad4 <udp_bind+0x100>)
 80139f4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80139f8:	4937      	ldr	r1, [pc, #220]	; (8013ad8 <udp_bind+0x104>)
 80139fa:	4838      	ldr	r0, [pc, #224]	; (8013adc <udp_bind+0x108>)
 80139fc:	f004 fde0 	bl	80185c0 <iprintf>
 8013a00:	f06f 030f 	mvn.w	r3, #15
 8013a04:	e060      	b.n	8013ac8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013a06:	2300      	movs	r3, #0
 8013a08:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013a0a:	4b35      	ldr	r3, [pc, #212]	; (8013ae0 <udp_bind+0x10c>)
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	617b      	str	r3, [r7, #20]
 8013a10:	e009      	b.n	8013a26 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013a12:	68fa      	ldr	r2, [r7, #12]
 8013a14:	697b      	ldr	r3, [r7, #20]
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d102      	bne.n	8013a20 <udp_bind+0x4c>
      rebind = 1;
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	74fb      	strb	r3, [r7, #19]
      break;
 8013a1e:	e005      	b.n	8013a2c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013a20:	697b      	ldr	r3, [r7, #20]
 8013a22:	68db      	ldr	r3, [r3, #12]
 8013a24:	617b      	str	r3, [r7, #20]
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d1f2      	bne.n	8013a12 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013a2c:	88fb      	ldrh	r3, [r7, #6]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d109      	bne.n	8013a46 <udp_bind+0x72>
    port = udp_new_port();
 8013a32:	f7ff fcc5 	bl	80133c0 <udp_new_port>
 8013a36:	4603      	mov	r3, r0
 8013a38:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013a3a:	88fb      	ldrh	r3, [r7, #6]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d12c      	bne.n	8013a9a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013a40:	f06f 0307 	mvn.w	r3, #7
 8013a44:	e040      	b.n	8013ac8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013a46:	4b26      	ldr	r3, [pc, #152]	; (8013ae0 <udp_bind+0x10c>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	617b      	str	r3, [r7, #20]
 8013a4c:	e022      	b.n	8013a94 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013a4e:	68fa      	ldr	r2, [r7, #12]
 8013a50:	697b      	ldr	r3, [r7, #20]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d01b      	beq.n	8013a8e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	8a5b      	ldrh	r3, [r3, #18]
 8013a5a:	88fa      	ldrh	r2, [r7, #6]
 8013a5c:	429a      	cmp	r2, r3
 8013a5e:	d116      	bne.n	8013a8e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013a60:	697b      	ldr	r3, [r7, #20]
 8013a62:	681a      	ldr	r2, [r3, #0]
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d00d      	beq.n	8013a88 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d00a      	beq.n	8013a88 <udp_bind+0xb4>
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d006      	beq.n	8013a88 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013a7a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d003      	beq.n	8013a88 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013a80:	697b      	ldr	r3, [r7, #20]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d102      	bne.n	8013a8e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013a88:	f06f 0307 	mvn.w	r3, #7
 8013a8c:	e01c      	b.n	8013ac8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013a8e:	697b      	ldr	r3, [r7, #20]
 8013a90:	68db      	ldr	r3, [r3, #12]
 8013a92:	617b      	str	r3, [r7, #20]
 8013a94:	697b      	ldr	r3, [r7, #20]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d1d9      	bne.n	8013a4e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d002      	beq.n	8013aa6 <udp_bind+0xd2>
 8013aa0:	68bb      	ldr	r3, [r7, #8]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	e000      	b.n	8013aa8 <udp_bind+0xd4>
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	68fa      	ldr	r2, [r7, #12]
 8013aaa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	88fa      	ldrh	r2, [r7, #6]
 8013ab0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013ab2:	7cfb      	ldrb	r3, [r7, #19]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d106      	bne.n	8013ac6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013ab8:	4b09      	ldr	r3, [pc, #36]	; (8013ae0 <udp_bind+0x10c>)
 8013aba:	681a      	ldr	r2, [r3, #0]
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013ac0:	4a07      	ldr	r2, [pc, #28]	; (8013ae0 <udp_bind+0x10c>)
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013ac6:	2300      	movs	r3, #0
}
 8013ac8:	4618      	mov	r0, r3
 8013aca:	3718      	adds	r7, #24
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}
 8013ad0:	08027884 	.word	0x08027884
 8013ad4:	0801c83c 	.word	0x0801c83c
 8013ad8:	0801cb04 	.word	0x0801cb04
 8013adc:	0801c890 	.word	0x0801c890
 8013ae0:	200115bc 	.word	0x200115bc

08013ae4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b086      	sub	sp, #24
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	60f8      	str	r0, [r7, #12]
 8013aec:	60b9      	str	r1, [r7, #8]
 8013aee:	4613      	mov	r3, r2
 8013af0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d109      	bne.n	8013b0c <udp_connect+0x28>
 8013af8:	4b2c      	ldr	r3, [pc, #176]	; (8013bac <udp_connect+0xc8>)
 8013afa:	f240 4235 	movw	r2, #1077	; 0x435
 8013afe:	492c      	ldr	r1, [pc, #176]	; (8013bb0 <udp_connect+0xcc>)
 8013b00:	482c      	ldr	r0, [pc, #176]	; (8013bb4 <udp_connect+0xd0>)
 8013b02:	f004 fd5d 	bl	80185c0 <iprintf>
 8013b06:	f06f 030f 	mvn.w	r3, #15
 8013b0a:	e04b      	b.n	8013ba4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d109      	bne.n	8013b26 <udp_connect+0x42>
 8013b12:	4b26      	ldr	r3, [pc, #152]	; (8013bac <udp_connect+0xc8>)
 8013b14:	f240 4236 	movw	r2, #1078	; 0x436
 8013b18:	4927      	ldr	r1, [pc, #156]	; (8013bb8 <udp_connect+0xd4>)
 8013b1a:	4826      	ldr	r0, [pc, #152]	; (8013bb4 <udp_connect+0xd0>)
 8013b1c:	f004 fd50 	bl	80185c0 <iprintf>
 8013b20:	f06f 030f 	mvn.w	r3, #15
 8013b24:	e03e      	b.n	8013ba4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	8a5b      	ldrh	r3, [r3, #18]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d10f      	bne.n	8013b4e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013b2e:	68f9      	ldr	r1, [r7, #12]
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	8a5b      	ldrh	r3, [r3, #18]
 8013b34:	461a      	mov	r2, r3
 8013b36:	68f8      	ldr	r0, [r7, #12]
 8013b38:	f7ff ff4c 	bl	80139d4 <udp_bind>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013b40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d002      	beq.n	8013b4e <udp_connect+0x6a>
      return err;
 8013b48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b4c:	e02a      	b.n	8013ba4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013b4e:	68bb      	ldr	r3, [r7, #8]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d002      	beq.n	8013b5a <udp_connect+0x76>
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	e000      	b.n	8013b5c <udp_connect+0x78>
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	68fa      	ldr	r2, [r7, #12]
 8013b5e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	88fa      	ldrh	r2, [r7, #6]
 8013b64:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	7c1b      	ldrb	r3, [r3, #16]
 8013b6a:	f043 0304 	orr.w	r3, r3, #4
 8013b6e:	b2da      	uxtb	r2, r3
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b74:	4b11      	ldr	r3, [pc, #68]	; (8013bbc <udp_connect+0xd8>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	617b      	str	r3, [r7, #20]
 8013b7a:	e008      	b.n	8013b8e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013b7c:	68fa      	ldr	r2, [r7, #12]
 8013b7e:	697b      	ldr	r3, [r7, #20]
 8013b80:	429a      	cmp	r2, r3
 8013b82:	d101      	bne.n	8013b88 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013b84:	2300      	movs	r3, #0
 8013b86:	e00d      	b.n	8013ba4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	68db      	ldr	r3, [r3, #12]
 8013b8c:	617b      	str	r3, [r7, #20]
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d1f3      	bne.n	8013b7c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013b94:	4b09      	ldr	r3, [pc, #36]	; (8013bbc <udp_connect+0xd8>)
 8013b96:	681a      	ldr	r2, [r3, #0]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013b9c:	4a07      	ldr	r2, [pc, #28]	; (8013bbc <udp_connect+0xd8>)
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013ba2:	2300      	movs	r3, #0
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3718      	adds	r7, #24
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}
 8013bac:	0801c83c 	.word	0x0801c83c
 8013bb0:	0801cb1c 	.word	0x0801cb1c
 8013bb4:	0801c890 	.word	0x0801c890
 8013bb8:	0801cb38 	.word	0x0801cb38
 8013bbc:	200115bc 	.word	0x200115bc

08013bc0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b084      	sub	sp, #16
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	60f8      	str	r0, [r7, #12]
 8013bc8:	60b9      	str	r1, [r7, #8]
 8013bca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d107      	bne.n	8013be2 <udp_recv+0x22>
 8013bd2:	4b08      	ldr	r3, [pc, #32]	; (8013bf4 <udp_recv+0x34>)
 8013bd4:	f240 428a 	movw	r2, #1162	; 0x48a
 8013bd8:	4907      	ldr	r1, [pc, #28]	; (8013bf8 <udp_recv+0x38>)
 8013bda:	4808      	ldr	r0, [pc, #32]	; (8013bfc <udp_recv+0x3c>)
 8013bdc:	f004 fcf0 	bl	80185c0 <iprintf>
 8013be0:	e005      	b.n	8013bee <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	68ba      	ldr	r2, [r7, #8]
 8013be6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	687a      	ldr	r2, [r7, #4]
 8013bec:	61da      	str	r2, [r3, #28]
}
 8013bee:	3710      	adds	r7, #16
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	0801c83c 	.word	0x0801c83c
 8013bf8:	0801cb70 	.word	0x0801cb70
 8013bfc:	0801c890 	.word	0x0801c890

08013c00 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d107      	bne.n	8013c1e <udp_remove+0x1e>
 8013c0e:	4b19      	ldr	r3, [pc, #100]	; (8013c74 <udp_remove+0x74>)
 8013c10:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013c14:	4918      	ldr	r1, [pc, #96]	; (8013c78 <udp_remove+0x78>)
 8013c16:	4819      	ldr	r0, [pc, #100]	; (8013c7c <udp_remove+0x7c>)
 8013c18:	f004 fcd2 	bl	80185c0 <iprintf>
 8013c1c:	e026      	b.n	8013c6c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013c1e:	4b18      	ldr	r3, [pc, #96]	; (8013c80 <udp_remove+0x80>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	429a      	cmp	r2, r3
 8013c26:	d105      	bne.n	8013c34 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013c28:	4b15      	ldr	r3, [pc, #84]	; (8013c80 <udp_remove+0x80>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	68db      	ldr	r3, [r3, #12]
 8013c2e:	4a14      	ldr	r2, [pc, #80]	; (8013c80 <udp_remove+0x80>)
 8013c30:	6013      	str	r3, [r2, #0]
 8013c32:	e017      	b.n	8013c64 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013c34:	4b12      	ldr	r3, [pc, #72]	; (8013c80 <udp_remove+0x80>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	60fb      	str	r3, [r7, #12]
 8013c3a:	e010      	b.n	8013c5e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	68db      	ldr	r3, [r3, #12]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d009      	beq.n	8013c58 <udp_remove+0x58>
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	687a      	ldr	r2, [r7, #4]
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	d104      	bne.n	8013c58 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	68da      	ldr	r2, [r3, #12]
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	60da      	str	r2, [r3, #12]
        break;
 8013c56:	e005      	b.n	8013c64 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	68db      	ldr	r3, [r3, #12]
 8013c5c:	60fb      	str	r3, [r7, #12]
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d1eb      	bne.n	8013c3c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013c64:	6879      	ldr	r1, [r7, #4]
 8013c66:	2000      	movs	r0, #0
 8013c68:	f7f8 f80e 	bl	800bc88 <memp_free>
}
 8013c6c:	3710      	adds	r7, #16
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}
 8013c72:	bf00      	nop
 8013c74:	0801c83c 	.word	0x0801c83c
 8013c78:	0801cb88 	.word	0x0801cb88
 8013c7c:	0801c890 	.word	0x0801c890
 8013c80:	200115bc 	.word	0x200115bc

08013c84 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b082      	sub	sp, #8
 8013c88:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013c8a:	2000      	movs	r0, #0
 8013c8c:	f7f7 ff86 	bl	800bb9c <memp_malloc>
 8013c90:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d007      	beq.n	8013ca8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013c98:	2220      	movs	r2, #32
 8013c9a:	2100      	movs	r1, #0
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f004 fd2e 	bl	80186fe <memset>
    pcb->ttl = UDP_TTL;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	22ff      	movs	r2, #255	; 0xff
 8013ca6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013ca8:	687b      	ldr	r3, [r7, #4]
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	3708      	adds	r7, #8
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd80      	pop	{r7, pc}

08013cb2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013cb2:	b580      	push	{r7, lr}
 8013cb4:	b084      	sub	sp, #16
 8013cb6:	af00      	add	r7, sp, #0
 8013cb8:	4603      	mov	r3, r0
 8013cba:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013cbc:	f7ff ffe2 	bl	8013c84 <udp_new>
 8013cc0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013cc2:	68fb      	ldr	r3, [r7, #12]
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	3710      	adds	r7, #16
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}

08013ccc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013ccc:	b480      	push	{r7}
 8013cce:	b085      	sub	sp, #20
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d01e      	beq.n	8013d1a <udp_netif_ip_addr_changed+0x4e>
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d01a      	beq.n	8013d1a <udp_netif_ip_addr_changed+0x4e>
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d017      	beq.n	8013d1a <udp_netif_ip_addr_changed+0x4e>
 8013cea:	683b      	ldr	r3, [r7, #0]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d013      	beq.n	8013d1a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013cf2:	4b0d      	ldr	r3, [pc, #52]	; (8013d28 <udp_netif_ip_addr_changed+0x5c>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	60fb      	str	r3, [r7, #12]
 8013cf8:	e00c      	b.n	8013d14 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	681a      	ldr	r2, [r3, #0]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d103      	bne.n	8013d0e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013d06:	683b      	ldr	r3, [r7, #0]
 8013d08:	681a      	ldr	r2, [r3, #0]
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	68db      	ldr	r3, [r3, #12]
 8013d12:	60fb      	str	r3, [r7, #12]
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d1ef      	bne.n	8013cfa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013d1a:	bf00      	nop
 8013d1c:	3714      	adds	r7, #20
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d24:	4770      	bx	lr
 8013d26:	bf00      	nop
 8013d28:	200115bc 	.word	0x200115bc

08013d2c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013d30:	4b20      	ldr	r3, [pc, #128]	; (8013db4 <dhcp_inc_pcb_refcount+0x88>)
 8013d32:	781b      	ldrb	r3, [r3, #0]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d133      	bne.n	8013da0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013d38:	4b1f      	ldr	r3, [pc, #124]	; (8013db8 <dhcp_inc_pcb_refcount+0x8c>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d005      	beq.n	8013d4c <dhcp_inc_pcb_refcount+0x20>
 8013d40:	4b1e      	ldr	r3, [pc, #120]	; (8013dbc <dhcp_inc_pcb_refcount+0x90>)
 8013d42:	22e5      	movs	r2, #229	; 0xe5
 8013d44:	491e      	ldr	r1, [pc, #120]	; (8013dc0 <dhcp_inc_pcb_refcount+0x94>)
 8013d46:	481f      	ldr	r0, [pc, #124]	; (8013dc4 <dhcp_inc_pcb_refcount+0x98>)
 8013d48:	f004 fc3a 	bl	80185c0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013d4c:	f7ff ff9a 	bl	8013c84 <udp_new>
 8013d50:	4603      	mov	r3, r0
 8013d52:	4a19      	ldr	r2, [pc, #100]	; (8013db8 <dhcp_inc_pcb_refcount+0x8c>)
 8013d54:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8013d56:	4b18      	ldr	r3, [pc, #96]	; (8013db8 <dhcp_inc_pcb_refcount+0x8c>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d102      	bne.n	8013d64 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8013d62:	e024      	b.n	8013dae <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013d64:	4b14      	ldr	r3, [pc, #80]	; (8013db8 <dhcp_inc_pcb_refcount+0x8c>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	7a5a      	ldrb	r2, [r3, #9]
 8013d6a:	4b13      	ldr	r3, [pc, #76]	; (8013db8 <dhcp_inc_pcb_refcount+0x8c>)
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	f042 0220 	orr.w	r2, r2, #32
 8013d72:	b2d2      	uxtb	r2, r2
 8013d74:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013d76:	4b10      	ldr	r3, [pc, #64]	; (8013db8 <dhcp_inc_pcb_refcount+0x8c>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	2244      	movs	r2, #68	; 0x44
 8013d7c:	4912      	ldr	r1, [pc, #72]	; (8013dc8 <dhcp_inc_pcb_refcount+0x9c>)
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7ff fe28 	bl	80139d4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013d84:	4b0c      	ldr	r3, [pc, #48]	; (8013db8 <dhcp_inc_pcb_refcount+0x8c>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	2243      	movs	r2, #67	; 0x43
 8013d8a:	490f      	ldr	r1, [pc, #60]	; (8013dc8 <dhcp_inc_pcb_refcount+0x9c>)
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f7ff fea9 	bl	8013ae4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013d92:	4b09      	ldr	r3, [pc, #36]	; (8013db8 <dhcp_inc_pcb_refcount+0x8c>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	2200      	movs	r2, #0
 8013d98:	490c      	ldr	r1, [pc, #48]	; (8013dcc <dhcp_inc_pcb_refcount+0xa0>)
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7ff ff10 	bl	8013bc0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013da0:	4b04      	ldr	r3, [pc, #16]	; (8013db4 <dhcp_inc_pcb_refcount+0x88>)
 8013da2:	781b      	ldrb	r3, [r3, #0]
 8013da4:	3301      	adds	r3, #1
 8013da6:	b2da      	uxtb	r2, r3
 8013da8:	4b02      	ldr	r3, [pc, #8]	; (8013db4 <dhcp_inc_pcb_refcount+0x88>)
 8013daa:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013dac:	2300      	movs	r3, #0
}
 8013dae:	4618      	mov	r0, r3
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	200115ec 	.word	0x200115ec
 8013db8:	200115e8 	.word	0x200115e8
 8013dbc:	0801cba0 	.word	0x0801cba0
 8013dc0:	0801cbd8 	.word	0x0801cbd8
 8013dc4:	0801cc00 	.word	0x0801cc00
 8013dc8:	08027884 	.word	0x08027884
 8013dcc:	08015661 	.word	0x08015661

08013dd0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013dd4:	4b0e      	ldr	r3, [pc, #56]	; (8013e10 <dhcp_dec_pcb_refcount+0x40>)
 8013dd6:	781b      	ldrb	r3, [r3, #0]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d105      	bne.n	8013de8 <dhcp_dec_pcb_refcount+0x18>
 8013ddc:	4b0d      	ldr	r3, [pc, #52]	; (8013e14 <dhcp_dec_pcb_refcount+0x44>)
 8013dde:	22ff      	movs	r2, #255	; 0xff
 8013de0:	490d      	ldr	r1, [pc, #52]	; (8013e18 <dhcp_dec_pcb_refcount+0x48>)
 8013de2:	480e      	ldr	r0, [pc, #56]	; (8013e1c <dhcp_dec_pcb_refcount+0x4c>)
 8013de4:	f004 fbec 	bl	80185c0 <iprintf>
  dhcp_pcb_refcount--;
 8013de8:	4b09      	ldr	r3, [pc, #36]	; (8013e10 <dhcp_dec_pcb_refcount+0x40>)
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	3b01      	subs	r3, #1
 8013dee:	b2da      	uxtb	r2, r3
 8013df0:	4b07      	ldr	r3, [pc, #28]	; (8013e10 <dhcp_dec_pcb_refcount+0x40>)
 8013df2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013df4:	4b06      	ldr	r3, [pc, #24]	; (8013e10 <dhcp_dec_pcb_refcount+0x40>)
 8013df6:	781b      	ldrb	r3, [r3, #0]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d107      	bne.n	8013e0c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013dfc:	4b08      	ldr	r3, [pc, #32]	; (8013e20 <dhcp_dec_pcb_refcount+0x50>)
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7ff fefd 	bl	8013c00 <udp_remove>
    dhcp_pcb = NULL;
 8013e06:	4b06      	ldr	r3, [pc, #24]	; (8013e20 <dhcp_dec_pcb_refcount+0x50>)
 8013e08:	2200      	movs	r2, #0
 8013e0a:	601a      	str	r2, [r3, #0]
  }
}
 8013e0c:	bf00      	nop
 8013e0e:	bd80      	pop	{r7, pc}
 8013e10:	200115ec 	.word	0x200115ec
 8013e14:	0801cba0 	.word	0x0801cba0
 8013e18:	0801cc28 	.word	0x0801cc28
 8013e1c:	0801cc00 	.word	0x0801cc00
 8013e20:	200115e8 	.word	0x200115e8

08013e24 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b084      	sub	sp, #16
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e30:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013e32:	210c      	movs	r1, #12
 8013e34:	68f8      	ldr	r0, [r7, #12]
 8013e36:	f001 f855 	bl	8014ee4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013e3a:	4b06      	ldr	r3, [pc, #24]	; (8013e54 <dhcp_handle_nak+0x30>)
 8013e3c:	4a05      	ldr	r2, [pc, #20]	; (8013e54 <dhcp_handle_nak+0x30>)
 8013e3e:	4905      	ldr	r1, [pc, #20]	; (8013e54 <dhcp_handle_nak+0x30>)
 8013e40:	6878      	ldr	r0, [r7, #4]
 8013e42:	f7f8 f8c3 	bl	800bfcc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013e46:	6878      	ldr	r0, [r7, #4]
 8013e48:	f000 fc48 	bl	80146dc <dhcp_discover>
}
 8013e4c:	bf00      	nop
 8013e4e:	3710      	adds	r7, #16
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}
 8013e54:	08027884 	.word	0x08027884

08013e58 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b084      	sub	sp, #16
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e64:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013e66:	2108      	movs	r1, #8
 8013e68:	68f8      	ldr	r0, [r7, #12]
 8013e6a:	f001 f83b 	bl	8014ee4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	331c      	adds	r3, #28
 8013e72:	2200      	movs	r2, #0
 8013e74:	4619      	mov	r1, r3
 8013e76:	6878      	ldr	r0, [r7, #4]
 8013e78:	f002 fb3c 	bl	80164f4 <etharp_query>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	799b      	ldrb	r3, [r3, #6]
 8013e84:	2bff      	cmp	r3, #255	; 0xff
 8013e86:	d005      	beq.n	8013e94 <dhcp_check+0x3c>
    dhcp->tries++;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	799b      	ldrb	r3, [r3, #6]
 8013e8c:	3301      	adds	r3, #1
 8013e8e:	b2da      	uxtb	r2, r3
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013e94:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013e98:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013e9a:	893b      	ldrh	r3, [r7, #8]
 8013e9c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013ea0:	4a06      	ldr	r2, [pc, #24]	; (8013ebc <dhcp_check+0x64>)
 8013ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8013ea6:	1152      	asrs	r2, r2, #5
 8013ea8:	17db      	asrs	r3, r3, #31
 8013eaa:	1ad3      	subs	r3, r2, r3
 8013eac:	b29a      	uxth	r2, r3
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013eb2:	bf00      	nop
 8013eb4:	3710      	adds	r7, #16
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}
 8013eba:	bf00      	nop
 8013ebc:	10624dd3 	.word	0x10624dd3

08013ec0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b084      	sub	sp, #16
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ece:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013ed0:	4b0c      	ldr	r3, [pc, #48]	; (8013f04 <dhcp_handle_offer+0x44>)
 8013ed2:	789b      	ldrb	r3, [r3, #2]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d011      	beq.n	8013efc <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	2200      	movs	r2, #0
 8013edc:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013ede:	4b0a      	ldr	r3, [pc, #40]	; (8013f08 <dhcp_handle_offer+0x48>)
 8013ee0:	689b      	ldr	r3, [r3, #8]
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7f7 f961 	bl	800b1aa <lwip_htonl>
 8013ee8:	4602      	mov	r2, r0
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013eee:	683b      	ldr	r3, [r7, #0]
 8013ef0:	691a      	ldr	r2, [r3, #16]
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f000 f808 	bl	8013f0c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013efc:	bf00      	nop
 8013efe:	3710      	adds	r7, #16
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}
 8013f04:	200115e0 	.word	0x200115e0
 8013f08:	200115c0 	.word	0x200115c0

08013f0c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013f0c:	b5b0      	push	{r4, r5, r7, lr}
 8013f0e:	b08a      	sub	sp, #40	; 0x28
 8013f10:	af02      	add	r7, sp, #8
 8013f12:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d109      	bne.n	8013f2e <dhcp_select+0x22>
 8013f1a:	4b71      	ldr	r3, [pc, #452]	; (80140e0 <dhcp_select+0x1d4>)
 8013f1c:	f240 1277 	movw	r2, #375	; 0x177
 8013f20:	4970      	ldr	r1, [pc, #448]	; (80140e4 <dhcp_select+0x1d8>)
 8013f22:	4871      	ldr	r0, [pc, #452]	; (80140e8 <dhcp_select+0x1dc>)
 8013f24:	f004 fb4c 	bl	80185c0 <iprintf>
 8013f28:	f06f 030f 	mvn.w	r3, #15
 8013f2c:	e0d3      	b.n	80140d6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f32:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013f34:	69bb      	ldr	r3, [r7, #24]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d109      	bne.n	8013f4e <dhcp_select+0x42>
 8013f3a:	4b69      	ldr	r3, [pc, #420]	; (80140e0 <dhcp_select+0x1d4>)
 8013f3c:	f240 1279 	movw	r2, #377	; 0x179
 8013f40:	496a      	ldr	r1, [pc, #424]	; (80140ec <dhcp_select+0x1e0>)
 8013f42:	4869      	ldr	r0, [pc, #420]	; (80140e8 <dhcp_select+0x1dc>)
 8013f44:	f004 fb3c 	bl	80185c0 <iprintf>
 8013f48:	f06f 0305 	mvn.w	r3, #5
 8013f4c:	e0c3      	b.n	80140d6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013f4e:	2101      	movs	r1, #1
 8013f50:	69b8      	ldr	r0, [r7, #24]
 8013f52:	f000 ffc7 	bl	8014ee4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013f56:	f107 030c 	add.w	r3, r7, #12
 8013f5a:	2203      	movs	r2, #3
 8013f5c:	69b9      	ldr	r1, [r7, #24]
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f001 fc4c 	bl	80157fc <dhcp_create_msg>
 8013f64:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013f66:	697b      	ldr	r3, [r7, #20]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	f000 8085 	beq.w	8014078 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013f6e:	697b      	ldr	r3, [r7, #20]
 8013f70:	685b      	ldr	r3, [r3, #4]
 8013f72:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013f74:	89b8      	ldrh	r0, [r7, #12]
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f7c:	2302      	movs	r3, #2
 8013f7e:	2239      	movs	r2, #57	; 0x39
 8013f80:	f000 ffca 	bl	8014f18 <dhcp_option>
 8013f84:	4603      	mov	r3, r0
 8013f86:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013f88:	89b8      	ldrh	r0, [r7, #12]
 8013f8a:	693b      	ldr	r3, [r7, #16]
 8013f8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013f94:	461a      	mov	r2, r3
 8013f96:	f001 f819 	bl	8014fcc <dhcp_option_short>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013f9e:	89b8      	ldrh	r0, [r7, #12]
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013fa6:	2304      	movs	r3, #4
 8013fa8:	2232      	movs	r2, #50	; 0x32
 8013faa:	f000 ffb5 	bl	8014f18 <dhcp_option>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013fb2:	89bc      	ldrh	r4, [r7, #12]
 8013fb4:	693b      	ldr	r3, [r7, #16]
 8013fb6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013fba:	69bb      	ldr	r3, [r7, #24]
 8013fbc:	69db      	ldr	r3, [r3, #28]
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7f7 f8f3 	bl	800b1aa <lwip_htonl>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	4629      	mov	r1, r5
 8013fca:	4620      	mov	r0, r4
 8013fcc:	f001 f830 	bl	8015030 <dhcp_option_long>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013fd4:	89b8      	ldrh	r0, [r7, #12]
 8013fd6:	693b      	ldr	r3, [r7, #16]
 8013fd8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013fdc:	2304      	movs	r3, #4
 8013fde:	2236      	movs	r2, #54	; 0x36
 8013fe0:	f000 ff9a 	bl	8014f18 <dhcp_option>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013fe8:	89bc      	ldrh	r4, [r7, #12]
 8013fea:	693b      	ldr	r3, [r7, #16]
 8013fec:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013ff0:	69bb      	ldr	r3, [r7, #24]
 8013ff2:	699b      	ldr	r3, [r3, #24]
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7f7 f8d8 	bl	800b1aa <lwip_htonl>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	461a      	mov	r2, r3
 8013ffe:	4629      	mov	r1, r5
 8014000:	4620      	mov	r0, r4
 8014002:	f001 f815 	bl	8015030 <dhcp_option_long>
 8014006:	4603      	mov	r3, r0
 8014008:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801400a:	89b8      	ldrh	r0, [r7, #12]
 801400c:	693b      	ldr	r3, [r7, #16]
 801400e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014012:	2303      	movs	r3, #3
 8014014:	2237      	movs	r2, #55	; 0x37
 8014016:	f000 ff7f 	bl	8014f18 <dhcp_option>
 801401a:	4603      	mov	r3, r0
 801401c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801401e:	2300      	movs	r3, #0
 8014020:	77bb      	strb	r3, [r7, #30]
 8014022:	e00e      	b.n	8014042 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014024:	89b8      	ldrh	r0, [r7, #12]
 8014026:	693b      	ldr	r3, [r7, #16]
 8014028:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801402c:	7fbb      	ldrb	r3, [r7, #30]
 801402e:	4a30      	ldr	r2, [pc, #192]	; (80140f0 <dhcp_select+0x1e4>)
 8014030:	5cd3      	ldrb	r3, [r2, r3]
 8014032:	461a      	mov	r2, r3
 8014034:	f000 ffa4 	bl	8014f80 <dhcp_option_byte>
 8014038:	4603      	mov	r3, r0
 801403a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801403c:	7fbb      	ldrb	r3, [r7, #30]
 801403e:	3301      	adds	r3, #1
 8014040:	77bb      	strb	r3, [r7, #30]
 8014042:	7fbb      	ldrb	r3, [r7, #30]
 8014044:	2b02      	cmp	r3, #2
 8014046:	d9ed      	bls.n	8014024 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014048:	89b8      	ldrh	r0, [r7, #12]
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	33f0      	adds	r3, #240	; 0xf0
 801404e:	697a      	ldr	r2, [r7, #20]
 8014050:	4619      	mov	r1, r3
 8014052:	f001 fca9 	bl	80159a8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014056:	4b27      	ldr	r3, [pc, #156]	; (80140f4 <dhcp_select+0x1e8>)
 8014058:	6818      	ldr	r0, [r3, #0]
 801405a:	4b27      	ldr	r3, [pc, #156]	; (80140f8 <dhcp_select+0x1ec>)
 801405c:	9301      	str	r3, [sp, #4]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	9300      	str	r3, [sp, #0]
 8014062:	2343      	movs	r3, #67	; 0x43
 8014064:	4a25      	ldr	r2, [pc, #148]	; (80140fc <dhcp_select+0x1f0>)
 8014066:	6979      	ldr	r1, [r7, #20]
 8014068:	f7ff fbce 	bl	8013808 <udp_sendto_if_src>
 801406c:	4603      	mov	r3, r0
 801406e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014070:	6978      	ldr	r0, [r7, #20]
 8014072:	f7f8 fcb9 	bl	800c9e8 <pbuf_free>
 8014076:	e001      	b.n	801407c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014078:	23ff      	movs	r3, #255	; 0xff
 801407a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801407c:	69bb      	ldr	r3, [r7, #24]
 801407e:	799b      	ldrb	r3, [r3, #6]
 8014080:	2bff      	cmp	r3, #255	; 0xff
 8014082:	d005      	beq.n	8014090 <dhcp_select+0x184>
    dhcp->tries++;
 8014084:	69bb      	ldr	r3, [r7, #24]
 8014086:	799b      	ldrb	r3, [r3, #6]
 8014088:	3301      	adds	r3, #1
 801408a:	b2da      	uxtb	r2, r3
 801408c:	69bb      	ldr	r3, [r7, #24]
 801408e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014090:	69bb      	ldr	r3, [r7, #24]
 8014092:	799b      	ldrb	r3, [r3, #6]
 8014094:	2b05      	cmp	r3, #5
 8014096:	d80d      	bhi.n	80140b4 <dhcp_select+0x1a8>
 8014098:	69bb      	ldr	r3, [r7, #24]
 801409a:	799b      	ldrb	r3, [r3, #6]
 801409c:	461a      	mov	r2, r3
 801409e:	2301      	movs	r3, #1
 80140a0:	4093      	lsls	r3, r2
 80140a2:	b29b      	uxth	r3, r3
 80140a4:	461a      	mov	r2, r3
 80140a6:	0152      	lsls	r2, r2, #5
 80140a8:	1ad2      	subs	r2, r2, r3
 80140aa:	0092      	lsls	r2, r2, #2
 80140ac:	4413      	add	r3, r2
 80140ae:	00db      	lsls	r3, r3, #3
 80140b0:	b29b      	uxth	r3, r3
 80140b2:	e001      	b.n	80140b8 <dhcp_select+0x1ac>
 80140b4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80140b8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80140ba:	89fb      	ldrh	r3, [r7, #14]
 80140bc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80140c0:	4a0f      	ldr	r2, [pc, #60]	; (8014100 <dhcp_select+0x1f4>)
 80140c2:	fb82 1203 	smull	r1, r2, r2, r3
 80140c6:	1152      	asrs	r2, r2, #5
 80140c8:	17db      	asrs	r3, r3, #31
 80140ca:	1ad3      	subs	r3, r2, r3
 80140cc:	b29a      	uxth	r2, r3
 80140ce:	69bb      	ldr	r3, [r7, #24]
 80140d0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80140d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3720      	adds	r7, #32
 80140da:	46bd      	mov	sp, r7
 80140dc:	bdb0      	pop	{r4, r5, r7, pc}
 80140de:	bf00      	nop
 80140e0:	0801cba0 	.word	0x0801cba0
 80140e4:	0801cc4c 	.word	0x0801cc4c
 80140e8:	0801cc00 	.word	0x0801cc00
 80140ec:	0801cc68 	.word	0x0801cc68
 80140f0:	20000030 	.word	0x20000030
 80140f4:	200115e8 	.word	0x200115e8
 80140f8:	08027884 	.word	0x08027884
 80140fc:	08027888 	.word	0x08027888
 8014100:	10624dd3 	.word	0x10624dd3

08014104 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b082      	sub	sp, #8
 8014108:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801410a:	4b27      	ldr	r3, [pc, #156]	; (80141a8 <dhcp_coarse_tmr+0xa4>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	607b      	str	r3, [r7, #4]
 8014110:	e042      	b.n	8014198 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014116:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d039      	beq.n	8014192 <dhcp_coarse_tmr+0x8e>
 801411e:	683b      	ldr	r3, [r7, #0]
 8014120:	795b      	ldrb	r3, [r3, #5]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d035      	beq.n	8014192 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	8a9b      	ldrh	r3, [r3, #20]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d012      	beq.n	8014154 <dhcp_coarse_tmr+0x50>
 801412e:	683b      	ldr	r3, [r7, #0]
 8014130:	8a5b      	ldrh	r3, [r3, #18]
 8014132:	3301      	adds	r3, #1
 8014134:	b29a      	uxth	r2, r3
 8014136:	683b      	ldr	r3, [r7, #0]
 8014138:	825a      	strh	r2, [r3, #18]
 801413a:	683b      	ldr	r3, [r7, #0]
 801413c:	8a5a      	ldrh	r2, [r3, #18]
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	8a9b      	ldrh	r3, [r3, #20]
 8014142:	429a      	cmp	r2, r3
 8014144:	d106      	bne.n	8014154 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014146:	6878      	ldr	r0, [r7, #4]
 8014148:	f000 fe32 	bl	8014db0 <dhcp_release_and_stop>
        dhcp_start(netif);
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 f969 	bl	8014424 <dhcp_start>
 8014152:	e01e      	b.n	8014192 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	8a1b      	ldrh	r3, [r3, #16]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d00b      	beq.n	8014174 <dhcp_coarse_tmr+0x70>
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	8a1b      	ldrh	r3, [r3, #16]
 8014160:	1e5a      	subs	r2, r3, #1
 8014162:	b291      	uxth	r1, r2
 8014164:	683a      	ldr	r2, [r7, #0]
 8014166:	8211      	strh	r1, [r2, #16]
 8014168:	2b01      	cmp	r3, #1
 801416a:	d103      	bne.n	8014174 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f000 f8c6 	bl	80142fe <dhcp_t2_timeout>
 8014172:	e00e      	b.n	8014192 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	89db      	ldrh	r3, [r3, #14]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d00a      	beq.n	8014192 <dhcp_coarse_tmr+0x8e>
 801417c:	683b      	ldr	r3, [r7, #0]
 801417e:	89db      	ldrh	r3, [r3, #14]
 8014180:	1e5a      	subs	r2, r3, #1
 8014182:	b291      	uxth	r1, r2
 8014184:	683a      	ldr	r2, [r7, #0]
 8014186:	81d1      	strh	r1, [r2, #14]
 8014188:	2b01      	cmp	r3, #1
 801418a:	d102      	bne.n	8014192 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f000 f888 	bl	80142a2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	607b      	str	r3, [r7, #4]
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d1b9      	bne.n	8014112 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801419e:	bf00      	nop
 80141a0:	bf00      	nop
 80141a2:	3708      	adds	r7, #8
 80141a4:	46bd      	mov	sp, r7
 80141a6:	bd80      	pop	{r7, pc}
 80141a8:	20011554 	.word	0x20011554

080141ac <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80141b2:	4b16      	ldr	r3, [pc, #88]	; (801420c <dhcp_fine_tmr+0x60>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	607b      	str	r3, [r7, #4]
 80141b8:	e020      	b.n	80141fc <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141be:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80141c0:	683b      	ldr	r3, [r7, #0]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d017      	beq.n	80141f6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	891b      	ldrh	r3, [r3, #8]
 80141ca:	2b01      	cmp	r3, #1
 80141cc:	d906      	bls.n	80141dc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	891b      	ldrh	r3, [r3, #8]
 80141d2:	3b01      	subs	r3, #1
 80141d4:	b29a      	uxth	r2, r3
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	811a      	strh	r2, [r3, #8]
 80141da:	e00c      	b.n	80141f6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80141dc:	683b      	ldr	r3, [r7, #0]
 80141de:	891b      	ldrh	r3, [r3, #8]
 80141e0:	2b01      	cmp	r3, #1
 80141e2:	d108      	bne.n	80141f6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	891b      	ldrh	r3, [r3, #8]
 80141e8:	3b01      	subs	r3, #1
 80141ea:	b29a      	uxth	r2, r3
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f000 f80d 	bl	8014210 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	607b      	str	r3, [r7, #4]
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d1db      	bne.n	80141ba <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014202:	bf00      	nop
 8014204:	bf00      	nop
 8014206:	3708      	adds	r7, #8
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}
 801420c:	20011554 	.word	0x20011554

08014210 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b084      	sub	sp, #16
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801421c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	795b      	ldrb	r3, [r3, #5]
 8014222:	2b0c      	cmp	r3, #12
 8014224:	d003      	beq.n	801422e <dhcp_timeout+0x1e>
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	795b      	ldrb	r3, [r3, #5]
 801422a:	2b06      	cmp	r3, #6
 801422c:	d103      	bne.n	8014236 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f000 fa54 	bl	80146dc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014234:	e031      	b.n	801429a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	795b      	ldrb	r3, [r3, #5]
 801423a:	2b01      	cmp	r3, #1
 801423c:	d10e      	bne.n	801425c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	799b      	ldrb	r3, [r3, #6]
 8014242:	2b05      	cmp	r3, #5
 8014244:	d803      	bhi.n	801424e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f7ff fe60 	bl	8013f0c <dhcp_select>
}
 801424c:	e025      	b.n	801429a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f000 fdae 	bl	8014db0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f000 f8e5 	bl	8014424 <dhcp_start>
}
 801425a:	e01e      	b.n	801429a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	795b      	ldrb	r3, [r3, #5]
 8014260:	2b08      	cmp	r3, #8
 8014262:	d10b      	bne.n	801427c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	799b      	ldrb	r3, [r3, #6]
 8014268:	2b01      	cmp	r3, #1
 801426a:	d803      	bhi.n	8014274 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f7ff fdf3 	bl	8013e58 <dhcp_check>
}
 8014272:	e012      	b.n	801429a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f000 fad3 	bl	8014820 <dhcp_bind>
}
 801427a:	e00e      	b.n	801429a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	795b      	ldrb	r3, [r3, #5]
 8014280:	2b03      	cmp	r3, #3
 8014282:	d10a      	bne.n	801429a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	799b      	ldrb	r3, [r3, #6]
 8014288:	2b01      	cmp	r3, #1
 801428a:	d803      	bhi.n	8014294 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f000 fcd9 	bl	8014c44 <dhcp_reboot>
}
 8014292:	e002      	b.n	801429a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014294:	6878      	ldr	r0, [r7, #4]
 8014296:	f000 fa21 	bl	80146dc <dhcp_discover>
}
 801429a:	bf00      	nop
 801429c:	3710      	adds	r7, #16
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}

080142a2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80142a2:	b580      	push	{r7, lr}
 80142a4:	b084      	sub	sp, #16
 80142a6:	af00      	add	r7, sp, #0
 80142a8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	795b      	ldrb	r3, [r3, #5]
 80142b4:	2b01      	cmp	r3, #1
 80142b6:	d007      	beq.n	80142c8 <dhcp_t1_timeout+0x26>
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	795b      	ldrb	r3, [r3, #5]
 80142bc:	2b0a      	cmp	r3, #10
 80142be:	d003      	beq.n	80142c8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80142c4:	2b05      	cmp	r3, #5
 80142c6:	d116      	bne.n	80142f6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f000 fb83 	bl	80149d4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	899b      	ldrh	r3, [r3, #12]
 80142d2:	461a      	mov	r2, r3
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	8a5b      	ldrh	r3, [r3, #18]
 80142d8:	1ad3      	subs	r3, r2, r3
 80142da:	2b01      	cmp	r3, #1
 80142dc:	dd0b      	ble.n	80142f6 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	899b      	ldrh	r3, [r3, #12]
 80142e2:	461a      	mov	r2, r3
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	8a5b      	ldrh	r3, [r3, #18]
 80142e8:	1ad3      	subs	r3, r2, r3
 80142ea:	0fda      	lsrs	r2, r3, #31
 80142ec:	4413      	add	r3, r2
 80142ee:	105b      	asrs	r3, r3, #1
 80142f0:	b29a      	uxth	r2, r3
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80142f6:	bf00      	nop
 80142f8:	3710      	adds	r7, #16
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}

080142fe <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80142fe:	b580      	push	{r7, lr}
 8014300:	b084      	sub	sp, #16
 8014302:	af00      	add	r7, sp, #0
 8014304:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801430a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	795b      	ldrb	r3, [r3, #5]
 8014310:	2b01      	cmp	r3, #1
 8014312:	d00b      	beq.n	801432c <dhcp_t2_timeout+0x2e>
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	795b      	ldrb	r3, [r3, #5]
 8014318:	2b0a      	cmp	r3, #10
 801431a:	d007      	beq.n	801432c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014320:	2b05      	cmp	r3, #5
 8014322:	d003      	beq.n	801432c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	795b      	ldrb	r3, [r3, #5]
 8014328:	2b04      	cmp	r3, #4
 801432a:	d116      	bne.n	801435a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801432c:	6878      	ldr	r0, [r7, #4]
 801432e:	f000 fbed 	bl	8014b0c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	8a9b      	ldrh	r3, [r3, #20]
 8014336:	461a      	mov	r2, r3
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	8a5b      	ldrh	r3, [r3, #18]
 801433c:	1ad3      	subs	r3, r2, r3
 801433e:	2b01      	cmp	r3, #1
 8014340:	dd0b      	ble.n	801435a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	8a9b      	ldrh	r3, [r3, #20]
 8014346:	461a      	mov	r2, r3
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	8a5b      	ldrh	r3, [r3, #18]
 801434c:	1ad3      	subs	r3, r2, r3
 801434e:	0fda      	lsrs	r2, r3, #31
 8014350:	4413      	add	r3, r2
 8014352:	105b      	asrs	r3, r3, #1
 8014354:	b29a      	uxth	r2, r3
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801435a:	bf00      	nop
 801435c:	3710      	adds	r7, #16
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}
	...

08014364 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b084      	sub	sp, #16
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
 801436c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014372:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	2200      	movs	r2, #0
 8014378:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	2200      	movs	r2, #0
 801437e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014380:	4b26      	ldr	r3, [pc, #152]	; (801441c <dhcp_handle_ack+0xb8>)
 8014382:	78db      	ldrb	r3, [r3, #3]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d003      	beq.n	8014390 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014388:	4b25      	ldr	r3, [pc, #148]	; (8014420 <dhcp_handle_ack+0xbc>)
 801438a:	68da      	ldr	r2, [r3, #12]
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014390:	4b22      	ldr	r3, [pc, #136]	; (801441c <dhcp_handle_ack+0xb8>)
 8014392:	791b      	ldrb	r3, [r3, #4]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d004      	beq.n	80143a2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014398:	4b21      	ldr	r3, [pc, #132]	; (8014420 <dhcp_handle_ack+0xbc>)
 801439a:	691a      	ldr	r2, [r3, #16]
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	62da      	str	r2, [r3, #44]	; 0x2c
 80143a0:	e004      	b.n	80143ac <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143a6:	085a      	lsrs	r2, r3, #1
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80143ac:	4b1b      	ldr	r3, [pc, #108]	; (801441c <dhcp_handle_ack+0xb8>)
 80143ae:	795b      	ldrb	r3, [r3, #5]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d004      	beq.n	80143be <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80143b4:	4b1a      	ldr	r3, [pc, #104]	; (8014420 <dhcp_handle_ack+0xbc>)
 80143b6:	695a      	ldr	r2, [r3, #20]
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	631a      	str	r2, [r3, #48]	; 0x30
 80143bc:	e007      	b.n	80143ce <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80143c2:	4613      	mov	r3, r2
 80143c4:	00db      	lsls	r3, r3, #3
 80143c6:	1a9b      	subs	r3, r3, r2
 80143c8:	08da      	lsrs	r2, r3, #3
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	691a      	ldr	r2, [r3, #16]
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80143d6:	4b11      	ldr	r3, [pc, #68]	; (801441c <dhcp_handle_ack+0xb8>)
 80143d8:	799b      	ldrb	r3, [r3, #6]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d00b      	beq.n	80143f6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80143de:	4b10      	ldr	r3, [pc, #64]	; (8014420 <dhcp_handle_ack+0xbc>)
 80143e0:	699b      	ldr	r3, [r3, #24]
 80143e2:	4618      	mov	r0, r3
 80143e4:	f7f6 fee1 	bl	800b1aa <lwip_htonl>
 80143e8:	4602      	mov	r2, r0
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	2201      	movs	r2, #1
 80143f2:	71da      	strb	r2, [r3, #7]
 80143f4:	e002      	b.n	80143fc <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	2200      	movs	r2, #0
 80143fa:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80143fc:	4b07      	ldr	r3, [pc, #28]	; (801441c <dhcp_handle_ack+0xb8>)
 80143fe:	79db      	ldrb	r3, [r3, #7]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d007      	beq.n	8014414 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014404:	4b06      	ldr	r3, [pc, #24]	; (8014420 <dhcp_handle_ack+0xbc>)
 8014406:	69db      	ldr	r3, [r3, #28]
 8014408:	4618      	mov	r0, r3
 801440a:	f7f6 fece 	bl	800b1aa <lwip_htonl>
 801440e:	4602      	mov	r2, r0
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014414:	bf00      	nop
 8014416:	3710      	adds	r7, #16
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}
 801441c:	200115e0 	.word	0x200115e0
 8014420:	200115c0 	.word	0x200115c0

08014424 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b084      	sub	sp, #16
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d109      	bne.n	8014446 <dhcp_start+0x22>
 8014432:	4b37      	ldr	r3, [pc, #220]	; (8014510 <dhcp_start+0xec>)
 8014434:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014438:	4936      	ldr	r1, [pc, #216]	; (8014514 <dhcp_start+0xf0>)
 801443a:	4837      	ldr	r0, [pc, #220]	; (8014518 <dhcp_start+0xf4>)
 801443c:	f004 f8c0 	bl	80185c0 <iprintf>
 8014440:	f06f 030f 	mvn.w	r3, #15
 8014444:	e060      	b.n	8014508 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801444c:	f003 0301 	and.w	r3, r3, #1
 8014450:	2b00      	cmp	r3, #0
 8014452:	d109      	bne.n	8014468 <dhcp_start+0x44>
 8014454:	4b2e      	ldr	r3, [pc, #184]	; (8014510 <dhcp_start+0xec>)
 8014456:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801445a:	4930      	ldr	r1, [pc, #192]	; (801451c <dhcp_start+0xf8>)
 801445c:	482e      	ldr	r0, [pc, #184]	; (8014518 <dhcp_start+0xf4>)
 801445e:	f004 f8af 	bl	80185c0 <iprintf>
 8014462:	f06f 030f 	mvn.w	r3, #15
 8014466:	e04f      	b.n	8014508 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801446c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014472:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014476:	d202      	bcs.n	801447e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014478:	f04f 33ff 	mov.w	r3, #4294967295
 801447c:	e044      	b.n	8014508 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d10d      	bne.n	80144a0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014484:	2034      	movs	r0, #52	; 0x34
 8014486:	f7f7 f9e5 	bl	800b854 <mem_malloc>
 801448a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d102      	bne.n	8014498 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014492:	f04f 33ff 	mov.w	r3, #4294967295
 8014496:	e037      	b.n	8014508 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	68fa      	ldr	r2, [r7, #12]
 801449c:	625a      	str	r2, [r3, #36]	; 0x24
 801449e:	e005      	b.n	80144ac <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	791b      	ldrb	r3, [r3, #4]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d001      	beq.n	80144ac <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80144a8:	f7ff fc92 	bl	8013dd0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80144ac:	2234      	movs	r2, #52	; 0x34
 80144ae:	2100      	movs	r1, #0
 80144b0:	68f8      	ldr	r0, [r7, #12]
 80144b2:	f004 f924 	bl	80186fe <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80144b6:	f7ff fc39 	bl	8013d2c <dhcp_inc_pcb_refcount>
 80144ba:	4603      	mov	r3, r0
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d002      	beq.n	80144c6 <dhcp_start+0xa2>
    return ERR_MEM;
 80144c0:	f04f 33ff 	mov.w	r3, #4294967295
 80144c4:	e020      	b.n	8014508 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	2201      	movs	r2, #1
 80144ca:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80144d2:	f003 0304 	and.w	r3, r3, #4
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d105      	bne.n	80144e6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80144da:	2102      	movs	r1, #2
 80144dc:	68f8      	ldr	r0, [r7, #12]
 80144de:	f000 fd01 	bl	8014ee4 <dhcp_set_state>
    return ERR_OK;
 80144e2:	2300      	movs	r3, #0
 80144e4:	e010      	b.n	8014508 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80144e6:	6878      	ldr	r0, [r7, #4]
 80144e8:	f000 f8f8 	bl	80146dc <dhcp_discover>
 80144ec:	4603      	mov	r3, r0
 80144ee:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80144f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d005      	beq.n	8014504 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f000 fc59 	bl	8014db0 <dhcp_release_and_stop>
    return ERR_MEM;
 80144fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014502:	e001      	b.n	8014508 <dhcp_start+0xe4>
  }
  return result;
 8014504:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014508:	4618      	mov	r0, r3
 801450a:	3710      	adds	r7, #16
 801450c:	46bd      	mov	sp, r7
 801450e:	bd80      	pop	{r7, pc}
 8014510:	0801cba0 	.word	0x0801cba0
 8014514:	0801cc84 	.word	0x0801cc84
 8014518:	0801cc00 	.word	0x0801cc00
 801451c:	0801ccc8 	.word	0x0801ccc8

08014520 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b084      	sub	sp, #16
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801452c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d025      	beq.n	8014580 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	795b      	ldrb	r3, [r3, #5]
 8014538:	2b0a      	cmp	r3, #10
 801453a:	d008      	beq.n	801454e <dhcp_network_changed+0x2e>
 801453c:	2b0a      	cmp	r3, #10
 801453e:	dc0d      	bgt.n	801455c <dhcp_network_changed+0x3c>
 8014540:	2b00      	cmp	r3, #0
 8014542:	d01f      	beq.n	8014584 <dhcp_network_changed+0x64>
 8014544:	2b00      	cmp	r3, #0
 8014546:	db09      	blt.n	801455c <dhcp_network_changed+0x3c>
 8014548:	3b03      	subs	r3, #3
 801454a:	2b02      	cmp	r3, #2
 801454c:	d806      	bhi.n	801455c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	2200      	movs	r2, #0
 8014552:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	f000 fb75 	bl	8014c44 <dhcp_reboot>
      break;
 801455a:	e014      	b.n	8014586 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	795b      	ldrb	r3, [r3, #5]
 8014560:	2b0c      	cmp	r3, #12
 8014562:	d906      	bls.n	8014572 <dhcp_network_changed+0x52>
 8014564:	4b09      	ldr	r3, [pc, #36]	; (801458c <dhcp_network_changed+0x6c>)
 8014566:	f240 326d 	movw	r2, #877	; 0x36d
 801456a:	4909      	ldr	r1, [pc, #36]	; (8014590 <dhcp_network_changed+0x70>)
 801456c:	4809      	ldr	r0, [pc, #36]	; (8014594 <dhcp_network_changed+0x74>)
 801456e:	f004 f827 	bl	80185c0 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	2200      	movs	r2, #0
 8014576:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014578:	6878      	ldr	r0, [r7, #4]
 801457a:	f000 f8af 	bl	80146dc <dhcp_discover>
      break;
 801457e:	e002      	b.n	8014586 <dhcp_network_changed+0x66>
    return;
 8014580:	bf00      	nop
 8014582:	e000      	b.n	8014586 <dhcp_network_changed+0x66>
      break;
 8014584:	bf00      	nop
  }
}
 8014586:	3710      	adds	r7, #16
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}
 801458c:	0801cba0 	.word	0x0801cba0
 8014590:	0801ccec 	.word	0x0801ccec
 8014594:	0801cc00 	.word	0x0801cc00

08014598 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b084      	sub	sp, #16
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
 80145a0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d107      	bne.n	80145b8 <dhcp_arp_reply+0x20>
 80145a8:	4b0e      	ldr	r3, [pc, #56]	; (80145e4 <dhcp_arp_reply+0x4c>)
 80145aa:	f240 328b 	movw	r2, #907	; 0x38b
 80145ae:	490e      	ldr	r1, [pc, #56]	; (80145e8 <dhcp_arp_reply+0x50>)
 80145b0:	480e      	ldr	r0, [pc, #56]	; (80145ec <dhcp_arp_reply+0x54>)
 80145b2:	f004 f805 	bl	80185c0 <iprintf>
 80145b6:	e012      	b.n	80145de <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145bc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d00c      	beq.n	80145de <dhcp_arp_reply+0x46>
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	795b      	ldrb	r3, [r3, #5]
 80145c8:	2b08      	cmp	r3, #8
 80145ca:	d108      	bne.n	80145de <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	681a      	ldr	r2, [r3, #0]
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	69db      	ldr	r3, [r3, #28]
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d102      	bne.n	80145de <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f000 f809 	bl	80145f0 <dhcp_decline>
    }
  }
}
 80145de:	3710      	adds	r7, #16
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}
 80145e4:	0801cba0 	.word	0x0801cba0
 80145e8:	0801cc84 	.word	0x0801cc84
 80145ec:	0801cc00 	.word	0x0801cc00

080145f0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80145f0:	b5b0      	push	{r4, r5, r7, lr}
 80145f2:	b08a      	sub	sp, #40	; 0x28
 80145f4:	af02      	add	r7, sp, #8
 80145f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145fc:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80145fe:	210c      	movs	r1, #12
 8014600:	69b8      	ldr	r0, [r7, #24]
 8014602:	f000 fc6f 	bl	8014ee4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014606:	f107 030c 	add.w	r3, r7, #12
 801460a:	2204      	movs	r2, #4
 801460c:	69b9      	ldr	r1, [r7, #24]
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f001 f8f4 	bl	80157fc <dhcp_create_msg>
 8014614:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d035      	beq.n	8014688 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801461c:	697b      	ldr	r3, [r7, #20]
 801461e:	685b      	ldr	r3, [r3, #4]
 8014620:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014622:	89b8      	ldrh	r0, [r7, #12]
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801462a:	2304      	movs	r3, #4
 801462c:	2232      	movs	r2, #50	; 0x32
 801462e:	f000 fc73 	bl	8014f18 <dhcp_option>
 8014632:	4603      	mov	r3, r0
 8014634:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014636:	89bc      	ldrh	r4, [r7, #12]
 8014638:	693b      	ldr	r3, [r7, #16]
 801463a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801463e:	69bb      	ldr	r3, [r7, #24]
 8014640:	69db      	ldr	r3, [r3, #28]
 8014642:	4618      	mov	r0, r3
 8014644:	f7f6 fdb1 	bl	800b1aa <lwip_htonl>
 8014648:	4603      	mov	r3, r0
 801464a:	461a      	mov	r2, r3
 801464c:	4629      	mov	r1, r5
 801464e:	4620      	mov	r0, r4
 8014650:	f000 fcee 	bl	8015030 <dhcp_option_long>
 8014654:	4603      	mov	r3, r0
 8014656:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014658:	89b8      	ldrh	r0, [r7, #12]
 801465a:	693b      	ldr	r3, [r7, #16]
 801465c:	33f0      	adds	r3, #240	; 0xf0
 801465e:	697a      	ldr	r2, [r7, #20]
 8014660:	4619      	mov	r1, r3
 8014662:	f001 f9a1 	bl	80159a8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014666:	4b19      	ldr	r3, [pc, #100]	; (80146cc <dhcp_decline+0xdc>)
 8014668:	6818      	ldr	r0, [r3, #0]
 801466a:	4b19      	ldr	r3, [pc, #100]	; (80146d0 <dhcp_decline+0xe0>)
 801466c:	9301      	str	r3, [sp, #4]
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	9300      	str	r3, [sp, #0]
 8014672:	2343      	movs	r3, #67	; 0x43
 8014674:	4a17      	ldr	r2, [pc, #92]	; (80146d4 <dhcp_decline+0xe4>)
 8014676:	6979      	ldr	r1, [r7, #20]
 8014678:	f7ff f8c6 	bl	8013808 <udp_sendto_if_src>
 801467c:	4603      	mov	r3, r0
 801467e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014680:	6978      	ldr	r0, [r7, #20]
 8014682:	f7f8 f9b1 	bl	800c9e8 <pbuf_free>
 8014686:	e001      	b.n	801468c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014688:	23ff      	movs	r3, #255	; 0xff
 801468a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801468c:	69bb      	ldr	r3, [r7, #24]
 801468e:	799b      	ldrb	r3, [r3, #6]
 8014690:	2bff      	cmp	r3, #255	; 0xff
 8014692:	d005      	beq.n	80146a0 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014694:	69bb      	ldr	r3, [r7, #24]
 8014696:	799b      	ldrb	r3, [r3, #6]
 8014698:	3301      	adds	r3, #1
 801469a:	b2da      	uxtb	r2, r3
 801469c:	69bb      	ldr	r3, [r7, #24]
 801469e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80146a0:	f242 7310 	movw	r3, #10000	; 0x2710
 80146a4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80146a6:	89fb      	ldrh	r3, [r7, #14]
 80146a8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80146ac:	4a0a      	ldr	r2, [pc, #40]	; (80146d8 <dhcp_decline+0xe8>)
 80146ae:	fb82 1203 	smull	r1, r2, r2, r3
 80146b2:	1152      	asrs	r2, r2, #5
 80146b4:	17db      	asrs	r3, r3, #31
 80146b6:	1ad3      	subs	r3, r2, r3
 80146b8:	b29a      	uxth	r2, r3
 80146ba:	69bb      	ldr	r3, [r7, #24]
 80146bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80146be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	3720      	adds	r7, #32
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bdb0      	pop	{r4, r5, r7, pc}
 80146ca:	bf00      	nop
 80146cc:	200115e8 	.word	0x200115e8
 80146d0:	08027884 	.word	0x08027884
 80146d4:	08027888 	.word	0x08027888
 80146d8:	10624dd3 	.word	0x10624dd3

080146dc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b08a      	sub	sp, #40	; 0x28
 80146e0:	af02      	add	r7, sp, #8
 80146e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146e8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80146ea:	2300      	movs	r3, #0
 80146ec:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80146ee:	69bb      	ldr	r3, [r7, #24]
 80146f0:	2200      	movs	r2, #0
 80146f2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80146f4:	2106      	movs	r1, #6
 80146f6:	69b8      	ldr	r0, [r7, #24]
 80146f8:	f000 fbf4 	bl	8014ee4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80146fc:	f107 0308 	add.w	r3, r7, #8
 8014700:	2201      	movs	r2, #1
 8014702:	69b9      	ldr	r1, [r7, #24]
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f001 f879 	bl	80157fc <dhcp_create_msg>
 801470a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801470c:	693b      	ldr	r3, [r7, #16]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d04b      	beq.n	80147aa <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	685b      	ldr	r3, [r3, #4]
 8014716:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014718:	8938      	ldrh	r0, [r7, #8]
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014720:	2302      	movs	r3, #2
 8014722:	2239      	movs	r2, #57	; 0x39
 8014724:	f000 fbf8 	bl	8014f18 <dhcp_option>
 8014728:	4603      	mov	r3, r0
 801472a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801472c:	8938      	ldrh	r0, [r7, #8]
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014738:	461a      	mov	r2, r3
 801473a:	f000 fc47 	bl	8014fcc <dhcp_option_short>
 801473e:	4603      	mov	r3, r0
 8014740:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014742:	8938      	ldrh	r0, [r7, #8]
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801474a:	2303      	movs	r3, #3
 801474c:	2237      	movs	r2, #55	; 0x37
 801474e:	f000 fbe3 	bl	8014f18 <dhcp_option>
 8014752:	4603      	mov	r3, r0
 8014754:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014756:	2300      	movs	r3, #0
 8014758:	77fb      	strb	r3, [r7, #31]
 801475a:	e00e      	b.n	801477a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801475c:	8938      	ldrh	r0, [r7, #8]
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014764:	7ffb      	ldrb	r3, [r7, #31]
 8014766:	4a29      	ldr	r2, [pc, #164]	; (801480c <dhcp_discover+0x130>)
 8014768:	5cd3      	ldrb	r3, [r2, r3]
 801476a:	461a      	mov	r2, r3
 801476c:	f000 fc08 	bl	8014f80 <dhcp_option_byte>
 8014770:	4603      	mov	r3, r0
 8014772:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014774:	7ffb      	ldrb	r3, [r7, #31]
 8014776:	3301      	adds	r3, #1
 8014778:	77fb      	strb	r3, [r7, #31]
 801477a:	7ffb      	ldrb	r3, [r7, #31]
 801477c:	2b02      	cmp	r3, #2
 801477e:	d9ed      	bls.n	801475c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014780:	8938      	ldrh	r0, [r7, #8]
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	33f0      	adds	r3, #240	; 0xf0
 8014786:	693a      	ldr	r2, [r7, #16]
 8014788:	4619      	mov	r1, r3
 801478a:	f001 f90d 	bl	80159a8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801478e:	4b20      	ldr	r3, [pc, #128]	; (8014810 <dhcp_discover+0x134>)
 8014790:	6818      	ldr	r0, [r3, #0]
 8014792:	4b20      	ldr	r3, [pc, #128]	; (8014814 <dhcp_discover+0x138>)
 8014794:	9301      	str	r3, [sp, #4]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	9300      	str	r3, [sp, #0]
 801479a:	2343      	movs	r3, #67	; 0x43
 801479c:	4a1e      	ldr	r2, [pc, #120]	; (8014818 <dhcp_discover+0x13c>)
 801479e:	6939      	ldr	r1, [r7, #16]
 80147a0:	f7ff f832 	bl	8013808 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80147a4:	6938      	ldr	r0, [r7, #16]
 80147a6:	f7f8 f91f 	bl	800c9e8 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80147aa:	69bb      	ldr	r3, [r7, #24]
 80147ac:	799b      	ldrb	r3, [r3, #6]
 80147ae:	2bff      	cmp	r3, #255	; 0xff
 80147b0:	d005      	beq.n	80147be <dhcp_discover+0xe2>
    dhcp->tries++;
 80147b2:	69bb      	ldr	r3, [r7, #24]
 80147b4:	799b      	ldrb	r3, [r3, #6]
 80147b6:	3301      	adds	r3, #1
 80147b8:	b2da      	uxtb	r2, r3
 80147ba:	69bb      	ldr	r3, [r7, #24]
 80147bc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80147be:	69bb      	ldr	r3, [r7, #24]
 80147c0:	799b      	ldrb	r3, [r3, #6]
 80147c2:	2b05      	cmp	r3, #5
 80147c4:	d80d      	bhi.n	80147e2 <dhcp_discover+0x106>
 80147c6:	69bb      	ldr	r3, [r7, #24]
 80147c8:	799b      	ldrb	r3, [r3, #6]
 80147ca:	461a      	mov	r2, r3
 80147cc:	2301      	movs	r3, #1
 80147ce:	4093      	lsls	r3, r2
 80147d0:	b29b      	uxth	r3, r3
 80147d2:	461a      	mov	r2, r3
 80147d4:	0152      	lsls	r2, r2, #5
 80147d6:	1ad2      	subs	r2, r2, r3
 80147d8:	0092      	lsls	r2, r2, #2
 80147da:	4413      	add	r3, r2
 80147dc:	00db      	lsls	r3, r3, #3
 80147de:	b29b      	uxth	r3, r3
 80147e0:	e001      	b.n	80147e6 <dhcp_discover+0x10a>
 80147e2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80147e6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80147e8:	897b      	ldrh	r3, [r7, #10]
 80147ea:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80147ee:	4a0b      	ldr	r2, [pc, #44]	; (801481c <dhcp_discover+0x140>)
 80147f0:	fb82 1203 	smull	r1, r2, r2, r3
 80147f4:	1152      	asrs	r2, r2, #5
 80147f6:	17db      	asrs	r3, r3, #31
 80147f8:	1ad3      	subs	r3, r2, r3
 80147fa:	b29a      	uxth	r2, r3
 80147fc:	69bb      	ldr	r3, [r7, #24]
 80147fe:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014800:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014804:	4618      	mov	r0, r3
 8014806:	3720      	adds	r7, #32
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}
 801480c:	20000030 	.word	0x20000030
 8014810:	200115e8 	.word	0x200115e8
 8014814:	08027884 	.word	0x08027884
 8014818:	08027888 	.word	0x08027888
 801481c:	10624dd3 	.word	0x10624dd3

08014820 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b088      	sub	sp, #32
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d107      	bne.n	801483e <dhcp_bind+0x1e>
 801482e:	4b64      	ldr	r3, [pc, #400]	; (80149c0 <dhcp_bind+0x1a0>)
 8014830:	f240 4215 	movw	r2, #1045	; 0x415
 8014834:	4963      	ldr	r1, [pc, #396]	; (80149c4 <dhcp_bind+0x1a4>)
 8014836:	4864      	ldr	r0, [pc, #400]	; (80149c8 <dhcp_bind+0x1a8>)
 8014838:	f003 fec2 	bl	80185c0 <iprintf>
 801483c:	e0bc      	b.n	80149b8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014842:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014844:	69bb      	ldr	r3, [r7, #24]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d107      	bne.n	801485a <dhcp_bind+0x3a>
 801484a:	4b5d      	ldr	r3, [pc, #372]	; (80149c0 <dhcp_bind+0x1a0>)
 801484c:	f240 4217 	movw	r2, #1047	; 0x417
 8014850:	495e      	ldr	r1, [pc, #376]	; (80149cc <dhcp_bind+0x1ac>)
 8014852:	485d      	ldr	r0, [pc, #372]	; (80149c8 <dhcp_bind+0x1a8>)
 8014854:	f003 feb4 	bl	80185c0 <iprintf>
 8014858:	e0ae      	b.n	80149b8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801485a:	69bb      	ldr	r3, [r7, #24]
 801485c:	2200      	movs	r2, #0
 801485e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014860:	69bb      	ldr	r3, [r7, #24]
 8014862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014868:	d019      	beq.n	801489e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801486a:	69bb      	ldr	r3, [r7, #24]
 801486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801486e:	331e      	adds	r3, #30
 8014870:	4a57      	ldr	r2, [pc, #348]	; (80149d0 <dhcp_bind+0x1b0>)
 8014872:	fba2 2303 	umull	r2, r3, r2, r3
 8014876:	095b      	lsrs	r3, r3, #5
 8014878:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801487a:	69fb      	ldr	r3, [r7, #28]
 801487c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014880:	d302      	bcc.n	8014888 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014886:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014888:	69fb      	ldr	r3, [r7, #28]
 801488a:	b29a      	uxth	r2, r3
 801488c:	69bb      	ldr	r3, [r7, #24]
 801488e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014890:	69bb      	ldr	r3, [r7, #24]
 8014892:	8a9b      	ldrh	r3, [r3, #20]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d102      	bne.n	801489e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014898:	69bb      	ldr	r3, [r7, #24]
 801489a:	2201      	movs	r2, #1
 801489c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801489e:	69bb      	ldr	r3, [r7, #24]
 80148a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148a6:	d01d      	beq.n	80148e4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80148a8:	69bb      	ldr	r3, [r7, #24]
 80148aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148ac:	331e      	adds	r3, #30
 80148ae:	4a48      	ldr	r2, [pc, #288]	; (80149d0 <dhcp_bind+0x1b0>)
 80148b0:	fba2 2303 	umull	r2, r3, r2, r3
 80148b4:	095b      	lsrs	r3, r3, #5
 80148b6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80148b8:	69fb      	ldr	r3, [r7, #28]
 80148ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80148be:	d302      	bcc.n	80148c6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80148c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80148c4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80148c6:	69fb      	ldr	r3, [r7, #28]
 80148c8:	b29a      	uxth	r2, r3
 80148ca:	69bb      	ldr	r3, [r7, #24]
 80148cc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80148ce:	69bb      	ldr	r3, [r7, #24]
 80148d0:	895b      	ldrh	r3, [r3, #10]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d102      	bne.n	80148dc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80148d6:	69bb      	ldr	r3, [r7, #24]
 80148d8:	2201      	movs	r2, #1
 80148da:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80148dc:	69bb      	ldr	r3, [r7, #24]
 80148de:	895a      	ldrh	r2, [r3, #10]
 80148e0:	69bb      	ldr	r3, [r7, #24]
 80148e2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80148e4:	69bb      	ldr	r3, [r7, #24]
 80148e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148ec:	d01d      	beq.n	801492a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80148ee:	69bb      	ldr	r3, [r7, #24]
 80148f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148f2:	331e      	adds	r3, #30
 80148f4:	4a36      	ldr	r2, [pc, #216]	; (80149d0 <dhcp_bind+0x1b0>)
 80148f6:	fba2 2303 	umull	r2, r3, r2, r3
 80148fa:	095b      	lsrs	r3, r3, #5
 80148fc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80148fe:	69fb      	ldr	r3, [r7, #28]
 8014900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014904:	d302      	bcc.n	801490c <dhcp_bind+0xec>
      timeout = 0xffff;
 8014906:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801490a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801490c:	69fb      	ldr	r3, [r7, #28]
 801490e:	b29a      	uxth	r2, r3
 8014910:	69bb      	ldr	r3, [r7, #24]
 8014912:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014914:	69bb      	ldr	r3, [r7, #24]
 8014916:	899b      	ldrh	r3, [r3, #12]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d102      	bne.n	8014922 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801491c:	69bb      	ldr	r3, [r7, #24]
 801491e:	2201      	movs	r2, #1
 8014920:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014922:	69bb      	ldr	r3, [r7, #24]
 8014924:	899a      	ldrh	r2, [r3, #12]
 8014926:	69bb      	ldr	r3, [r7, #24]
 8014928:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801492a:	69bb      	ldr	r3, [r7, #24]
 801492c:	895a      	ldrh	r2, [r3, #10]
 801492e:	69bb      	ldr	r3, [r7, #24]
 8014930:	899b      	ldrh	r3, [r3, #12]
 8014932:	429a      	cmp	r2, r3
 8014934:	d306      	bcc.n	8014944 <dhcp_bind+0x124>
 8014936:	69bb      	ldr	r3, [r7, #24]
 8014938:	899b      	ldrh	r3, [r3, #12]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d002      	beq.n	8014944 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801493e:	69bb      	ldr	r3, [r7, #24]
 8014940:	2200      	movs	r2, #0
 8014942:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014944:	69bb      	ldr	r3, [r7, #24]
 8014946:	79db      	ldrb	r3, [r3, #7]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d003      	beq.n	8014954 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801494c:	69bb      	ldr	r3, [r7, #24]
 801494e:	6a1b      	ldr	r3, [r3, #32]
 8014950:	613b      	str	r3, [r7, #16]
 8014952:	e014      	b.n	801497e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014954:	69bb      	ldr	r3, [r7, #24]
 8014956:	331c      	adds	r3, #28
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801495c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014960:	2b00      	cmp	r3, #0
 8014962:	db02      	blt.n	801496a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014964:	23ff      	movs	r3, #255	; 0xff
 8014966:	613b      	str	r3, [r7, #16]
 8014968:	e009      	b.n	801497e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801496a:	7dfb      	ldrb	r3, [r7, #23]
 801496c:	2bbf      	cmp	r3, #191	; 0xbf
 801496e:	d903      	bls.n	8014978 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014970:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014974:	613b      	str	r3, [r7, #16]
 8014976:	e002      	b.n	801497e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801497c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801497e:	69bb      	ldr	r3, [r7, #24]
 8014980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014982:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d108      	bne.n	801499c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801498a:	69bb      	ldr	r3, [r7, #24]
 801498c:	69da      	ldr	r2, [r3, #28]
 801498e:	693b      	ldr	r3, [r7, #16]
 8014990:	4013      	ands	r3, r2
 8014992:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801499a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801499c:	210a      	movs	r1, #10
 801499e:	69b8      	ldr	r0, [r7, #24]
 80149a0:	f000 faa0 	bl	8014ee4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80149a4:	69bb      	ldr	r3, [r7, #24]
 80149a6:	f103 011c 	add.w	r1, r3, #28
 80149aa:	f107 030c 	add.w	r3, r7, #12
 80149ae:	f107 0210 	add.w	r2, r7, #16
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f7f7 fb0a 	bl	800bfcc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80149b8:	3720      	adds	r7, #32
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}
 80149be:	bf00      	nop
 80149c0:	0801cba0 	.word	0x0801cba0
 80149c4:	0801cd00 	.word	0x0801cd00
 80149c8:	0801cc00 	.word	0x0801cc00
 80149cc:	0801cd1c 	.word	0x0801cd1c
 80149d0:	88888889 	.word	0x88888889

080149d4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b08a      	sub	sp, #40	; 0x28
 80149d8:	af02      	add	r7, sp, #8
 80149da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149e0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80149e2:	2105      	movs	r1, #5
 80149e4:	69b8      	ldr	r0, [r7, #24]
 80149e6:	f000 fa7d 	bl	8014ee4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80149ea:	f107 030c 	add.w	r3, r7, #12
 80149ee:	2203      	movs	r2, #3
 80149f0:	69b9      	ldr	r1, [r7, #24]
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f000 ff02 	bl	80157fc <dhcp_create_msg>
 80149f8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d04e      	beq.n	8014a9e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014a00:	697b      	ldr	r3, [r7, #20]
 8014a02:	685b      	ldr	r3, [r3, #4]
 8014a04:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014a06:	89b8      	ldrh	r0, [r7, #12]
 8014a08:	693b      	ldr	r3, [r7, #16]
 8014a0a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a0e:	2302      	movs	r3, #2
 8014a10:	2239      	movs	r2, #57	; 0x39
 8014a12:	f000 fa81 	bl	8014f18 <dhcp_option>
 8014a16:	4603      	mov	r3, r0
 8014a18:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014a1a:	89b8      	ldrh	r0, [r7, #12]
 8014a1c:	693b      	ldr	r3, [r7, #16]
 8014a1e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014a26:	461a      	mov	r2, r3
 8014a28:	f000 fad0 	bl	8014fcc <dhcp_option_short>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014a30:	89b8      	ldrh	r0, [r7, #12]
 8014a32:	693b      	ldr	r3, [r7, #16]
 8014a34:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a38:	2303      	movs	r3, #3
 8014a3a:	2237      	movs	r2, #55	; 0x37
 8014a3c:	f000 fa6c 	bl	8014f18 <dhcp_option>
 8014a40:	4603      	mov	r3, r0
 8014a42:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014a44:	2300      	movs	r3, #0
 8014a46:	77bb      	strb	r3, [r7, #30]
 8014a48:	e00e      	b.n	8014a68 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014a4a:	89b8      	ldrh	r0, [r7, #12]
 8014a4c:	693b      	ldr	r3, [r7, #16]
 8014a4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a52:	7fbb      	ldrb	r3, [r7, #30]
 8014a54:	4a2a      	ldr	r2, [pc, #168]	; (8014b00 <dhcp_renew+0x12c>)
 8014a56:	5cd3      	ldrb	r3, [r2, r3]
 8014a58:	461a      	mov	r2, r3
 8014a5a:	f000 fa91 	bl	8014f80 <dhcp_option_byte>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014a62:	7fbb      	ldrb	r3, [r7, #30]
 8014a64:	3301      	adds	r3, #1
 8014a66:	77bb      	strb	r3, [r7, #30]
 8014a68:	7fbb      	ldrb	r3, [r7, #30]
 8014a6a:	2b02      	cmp	r3, #2
 8014a6c:	d9ed      	bls.n	8014a4a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014a6e:	89b8      	ldrh	r0, [r7, #12]
 8014a70:	693b      	ldr	r3, [r7, #16]
 8014a72:	33f0      	adds	r3, #240	; 0xf0
 8014a74:	697a      	ldr	r2, [r7, #20]
 8014a76:	4619      	mov	r1, r3
 8014a78:	f000 ff96 	bl	80159a8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014a7c:	4b21      	ldr	r3, [pc, #132]	; (8014b04 <dhcp_renew+0x130>)
 8014a7e:	6818      	ldr	r0, [r3, #0]
 8014a80:	69bb      	ldr	r3, [r7, #24]
 8014a82:	f103 0218 	add.w	r2, r3, #24
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	9300      	str	r3, [sp, #0]
 8014a8a:	2343      	movs	r3, #67	; 0x43
 8014a8c:	6979      	ldr	r1, [r7, #20]
 8014a8e:	f7fe fe47 	bl	8013720 <udp_sendto_if>
 8014a92:	4603      	mov	r3, r0
 8014a94:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014a96:	6978      	ldr	r0, [r7, #20]
 8014a98:	f7f7 ffa6 	bl	800c9e8 <pbuf_free>
 8014a9c:	e001      	b.n	8014aa2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014a9e:	23ff      	movs	r3, #255	; 0xff
 8014aa0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014aa2:	69bb      	ldr	r3, [r7, #24]
 8014aa4:	799b      	ldrb	r3, [r3, #6]
 8014aa6:	2bff      	cmp	r3, #255	; 0xff
 8014aa8:	d005      	beq.n	8014ab6 <dhcp_renew+0xe2>
    dhcp->tries++;
 8014aaa:	69bb      	ldr	r3, [r7, #24]
 8014aac:	799b      	ldrb	r3, [r3, #6]
 8014aae:	3301      	adds	r3, #1
 8014ab0:	b2da      	uxtb	r2, r3
 8014ab2:	69bb      	ldr	r3, [r7, #24]
 8014ab4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8014ab6:	69bb      	ldr	r3, [r7, #24]
 8014ab8:	799b      	ldrb	r3, [r3, #6]
 8014aba:	2b09      	cmp	r3, #9
 8014abc:	d80a      	bhi.n	8014ad4 <dhcp_renew+0x100>
 8014abe:	69bb      	ldr	r3, [r7, #24]
 8014ac0:	799b      	ldrb	r3, [r3, #6]
 8014ac2:	b29b      	uxth	r3, r3
 8014ac4:	461a      	mov	r2, r3
 8014ac6:	0152      	lsls	r2, r2, #5
 8014ac8:	1ad2      	subs	r2, r2, r3
 8014aca:	0092      	lsls	r2, r2, #2
 8014acc:	4413      	add	r3, r2
 8014ace:	011b      	lsls	r3, r3, #4
 8014ad0:	b29b      	uxth	r3, r3
 8014ad2:	e001      	b.n	8014ad8 <dhcp_renew+0x104>
 8014ad4:	f644 6320 	movw	r3, #20000	; 0x4e20
 8014ad8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014ada:	89fb      	ldrh	r3, [r7, #14]
 8014adc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014ae0:	4a09      	ldr	r2, [pc, #36]	; (8014b08 <dhcp_renew+0x134>)
 8014ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8014ae6:	1152      	asrs	r2, r2, #5
 8014ae8:	17db      	asrs	r3, r3, #31
 8014aea:	1ad3      	subs	r3, r2, r3
 8014aec:	b29a      	uxth	r2, r3
 8014aee:	69bb      	ldr	r3, [r7, #24]
 8014af0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014af2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014af6:	4618      	mov	r0, r3
 8014af8:	3720      	adds	r7, #32
 8014afa:	46bd      	mov	sp, r7
 8014afc:	bd80      	pop	{r7, pc}
 8014afe:	bf00      	nop
 8014b00:	20000030 	.word	0x20000030
 8014b04:	200115e8 	.word	0x200115e8
 8014b08:	10624dd3 	.word	0x10624dd3

08014b0c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b08a      	sub	sp, #40	; 0x28
 8014b10:	af02      	add	r7, sp, #8
 8014b12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b18:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8014b1a:	2104      	movs	r1, #4
 8014b1c:	69b8      	ldr	r0, [r7, #24]
 8014b1e:	f000 f9e1 	bl	8014ee4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014b22:	f107 030c 	add.w	r3, r7, #12
 8014b26:	2203      	movs	r2, #3
 8014b28:	69b9      	ldr	r1, [r7, #24]
 8014b2a:	6878      	ldr	r0, [r7, #4]
 8014b2c:	f000 fe66 	bl	80157fc <dhcp_create_msg>
 8014b30:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d04c      	beq.n	8014bd2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	685b      	ldr	r3, [r3, #4]
 8014b3c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014b3e:	89b8      	ldrh	r0, [r7, #12]
 8014b40:	693b      	ldr	r3, [r7, #16]
 8014b42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b46:	2302      	movs	r3, #2
 8014b48:	2239      	movs	r2, #57	; 0x39
 8014b4a:	f000 f9e5 	bl	8014f18 <dhcp_option>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014b52:	89b8      	ldrh	r0, [r7, #12]
 8014b54:	693b      	ldr	r3, [r7, #16]
 8014b56:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014b5e:	461a      	mov	r2, r3
 8014b60:	f000 fa34 	bl	8014fcc <dhcp_option_short>
 8014b64:	4603      	mov	r3, r0
 8014b66:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014b68:	89b8      	ldrh	r0, [r7, #12]
 8014b6a:	693b      	ldr	r3, [r7, #16]
 8014b6c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b70:	2303      	movs	r3, #3
 8014b72:	2237      	movs	r2, #55	; 0x37
 8014b74:	f000 f9d0 	bl	8014f18 <dhcp_option>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	77bb      	strb	r3, [r7, #30]
 8014b80:	e00e      	b.n	8014ba0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014b82:	89b8      	ldrh	r0, [r7, #12]
 8014b84:	693b      	ldr	r3, [r7, #16]
 8014b86:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b8a:	7fbb      	ldrb	r3, [r7, #30]
 8014b8c:	4a29      	ldr	r2, [pc, #164]	; (8014c34 <dhcp_rebind+0x128>)
 8014b8e:	5cd3      	ldrb	r3, [r2, r3]
 8014b90:	461a      	mov	r2, r3
 8014b92:	f000 f9f5 	bl	8014f80 <dhcp_option_byte>
 8014b96:	4603      	mov	r3, r0
 8014b98:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014b9a:	7fbb      	ldrb	r3, [r7, #30]
 8014b9c:	3301      	adds	r3, #1
 8014b9e:	77bb      	strb	r3, [r7, #30]
 8014ba0:	7fbb      	ldrb	r3, [r7, #30]
 8014ba2:	2b02      	cmp	r3, #2
 8014ba4:	d9ed      	bls.n	8014b82 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014ba6:	89b8      	ldrh	r0, [r7, #12]
 8014ba8:	693b      	ldr	r3, [r7, #16]
 8014baa:	33f0      	adds	r3, #240	; 0xf0
 8014bac:	697a      	ldr	r2, [r7, #20]
 8014bae:	4619      	mov	r1, r3
 8014bb0:	f000 fefa 	bl	80159a8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014bb4:	4b20      	ldr	r3, [pc, #128]	; (8014c38 <dhcp_rebind+0x12c>)
 8014bb6:	6818      	ldr	r0, [r3, #0]
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	9300      	str	r3, [sp, #0]
 8014bbc:	2343      	movs	r3, #67	; 0x43
 8014bbe:	4a1f      	ldr	r2, [pc, #124]	; (8014c3c <dhcp_rebind+0x130>)
 8014bc0:	6979      	ldr	r1, [r7, #20]
 8014bc2:	f7fe fdad 	bl	8013720 <udp_sendto_if>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014bca:	6978      	ldr	r0, [r7, #20]
 8014bcc:	f7f7 ff0c 	bl	800c9e8 <pbuf_free>
 8014bd0:	e001      	b.n	8014bd6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014bd2:	23ff      	movs	r3, #255	; 0xff
 8014bd4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014bd6:	69bb      	ldr	r3, [r7, #24]
 8014bd8:	799b      	ldrb	r3, [r3, #6]
 8014bda:	2bff      	cmp	r3, #255	; 0xff
 8014bdc:	d005      	beq.n	8014bea <dhcp_rebind+0xde>
    dhcp->tries++;
 8014bde:	69bb      	ldr	r3, [r7, #24]
 8014be0:	799b      	ldrb	r3, [r3, #6]
 8014be2:	3301      	adds	r3, #1
 8014be4:	b2da      	uxtb	r2, r3
 8014be6:	69bb      	ldr	r3, [r7, #24]
 8014be8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014bea:	69bb      	ldr	r3, [r7, #24]
 8014bec:	799b      	ldrb	r3, [r3, #6]
 8014bee:	2b09      	cmp	r3, #9
 8014bf0:	d80a      	bhi.n	8014c08 <dhcp_rebind+0xfc>
 8014bf2:	69bb      	ldr	r3, [r7, #24]
 8014bf4:	799b      	ldrb	r3, [r3, #6]
 8014bf6:	b29b      	uxth	r3, r3
 8014bf8:	461a      	mov	r2, r3
 8014bfa:	0152      	lsls	r2, r2, #5
 8014bfc:	1ad2      	subs	r2, r2, r3
 8014bfe:	0092      	lsls	r2, r2, #2
 8014c00:	4413      	add	r3, r2
 8014c02:	00db      	lsls	r3, r3, #3
 8014c04:	b29b      	uxth	r3, r3
 8014c06:	e001      	b.n	8014c0c <dhcp_rebind+0x100>
 8014c08:	f242 7310 	movw	r3, #10000	; 0x2710
 8014c0c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014c0e:	89fb      	ldrh	r3, [r7, #14]
 8014c10:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014c14:	4a0a      	ldr	r2, [pc, #40]	; (8014c40 <dhcp_rebind+0x134>)
 8014c16:	fb82 1203 	smull	r1, r2, r2, r3
 8014c1a:	1152      	asrs	r2, r2, #5
 8014c1c:	17db      	asrs	r3, r3, #31
 8014c1e:	1ad3      	subs	r3, r2, r3
 8014c20:	b29a      	uxth	r2, r3
 8014c22:	69bb      	ldr	r3, [r7, #24]
 8014c24:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014c26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	3720      	adds	r7, #32
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}
 8014c32:	bf00      	nop
 8014c34:	20000030 	.word	0x20000030
 8014c38:	200115e8 	.word	0x200115e8
 8014c3c:	08027888 	.word	0x08027888
 8014c40:	10624dd3 	.word	0x10624dd3

08014c44 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014c44:	b5b0      	push	{r4, r5, r7, lr}
 8014c46:	b08a      	sub	sp, #40	; 0x28
 8014c48:	af02      	add	r7, sp, #8
 8014c4a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c50:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014c52:	2103      	movs	r1, #3
 8014c54:	69b8      	ldr	r0, [r7, #24]
 8014c56:	f000 f945 	bl	8014ee4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014c5a:	f107 030c 	add.w	r3, r7, #12
 8014c5e:	2203      	movs	r2, #3
 8014c60:	69b9      	ldr	r1, [r7, #24]
 8014c62:	6878      	ldr	r0, [r7, #4]
 8014c64:	f000 fdca 	bl	80157fc <dhcp_create_msg>
 8014c68:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d066      	beq.n	8014d3e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014c70:	697b      	ldr	r3, [r7, #20]
 8014c72:	685b      	ldr	r3, [r3, #4]
 8014c74:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014c76:	89b8      	ldrh	r0, [r7, #12]
 8014c78:	693b      	ldr	r3, [r7, #16]
 8014c7a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c7e:	2302      	movs	r3, #2
 8014c80:	2239      	movs	r2, #57	; 0x39
 8014c82:	f000 f949 	bl	8014f18 <dhcp_option>
 8014c86:	4603      	mov	r3, r0
 8014c88:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8014c8a:	89b8      	ldrh	r0, [r7, #12]
 8014c8c:	693b      	ldr	r3, [r7, #16]
 8014c8e:	33f0      	adds	r3, #240	; 0xf0
 8014c90:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014c94:	4619      	mov	r1, r3
 8014c96:	f000 f999 	bl	8014fcc <dhcp_option_short>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014c9e:	89b8      	ldrh	r0, [r7, #12]
 8014ca0:	693b      	ldr	r3, [r7, #16]
 8014ca2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ca6:	2304      	movs	r3, #4
 8014ca8:	2232      	movs	r2, #50	; 0x32
 8014caa:	f000 f935 	bl	8014f18 <dhcp_option>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014cb2:	89bc      	ldrh	r4, [r7, #12]
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014cba:	69bb      	ldr	r3, [r7, #24]
 8014cbc:	69db      	ldr	r3, [r3, #28]
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f7f6 fa73 	bl	800b1aa <lwip_htonl>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	4629      	mov	r1, r5
 8014cca:	4620      	mov	r0, r4
 8014ccc:	f000 f9b0 	bl	8015030 <dhcp_option_long>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014cd4:	89b8      	ldrh	r0, [r7, #12]
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cdc:	2303      	movs	r3, #3
 8014cde:	2237      	movs	r2, #55	; 0x37
 8014ce0:	f000 f91a 	bl	8014f18 <dhcp_option>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ce8:	2300      	movs	r3, #0
 8014cea:	77bb      	strb	r3, [r7, #30]
 8014cec:	e00e      	b.n	8014d0c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014cee:	89b8      	ldrh	r0, [r7, #12]
 8014cf0:	693b      	ldr	r3, [r7, #16]
 8014cf2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cf6:	7fbb      	ldrb	r3, [r7, #30]
 8014cf8:	4a29      	ldr	r2, [pc, #164]	; (8014da0 <dhcp_reboot+0x15c>)
 8014cfa:	5cd3      	ldrb	r3, [r2, r3]
 8014cfc:	461a      	mov	r2, r3
 8014cfe:	f000 f93f 	bl	8014f80 <dhcp_option_byte>
 8014d02:	4603      	mov	r3, r0
 8014d04:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014d06:	7fbb      	ldrb	r3, [r7, #30]
 8014d08:	3301      	adds	r3, #1
 8014d0a:	77bb      	strb	r3, [r7, #30]
 8014d0c:	7fbb      	ldrb	r3, [r7, #30]
 8014d0e:	2b02      	cmp	r3, #2
 8014d10:	d9ed      	bls.n	8014cee <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014d12:	89b8      	ldrh	r0, [r7, #12]
 8014d14:	693b      	ldr	r3, [r7, #16]
 8014d16:	33f0      	adds	r3, #240	; 0xf0
 8014d18:	697a      	ldr	r2, [r7, #20]
 8014d1a:	4619      	mov	r1, r3
 8014d1c:	f000 fe44 	bl	80159a8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014d20:	4b20      	ldr	r3, [pc, #128]	; (8014da4 <dhcp_reboot+0x160>)
 8014d22:	6818      	ldr	r0, [r3, #0]
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	9300      	str	r3, [sp, #0]
 8014d28:	2343      	movs	r3, #67	; 0x43
 8014d2a:	4a1f      	ldr	r2, [pc, #124]	; (8014da8 <dhcp_reboot+0x164>)
 8014d2c:	6979      	ldr	r1, [r7, #20]
 8014d2e:	f7fe fcf7 	bl	8013720 <udp_sendto_if>
 8014d32:	4603      	mov	r3, r0
 8014d34:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014d36:	6978      	ldr	r0, [r7, #20]
 8014d38:	f7f7 fe56 	bl	800c9e8 <pbuf_free>
 8014d3c:	e001      	b.n	8014d42 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014d3e:	23ff      	movs	r3, #255	; 0xff
 8014d40:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014d42:	69bb      	ldr	r3, [r7, #24]
 8014d44:	799b      	ldrb	r3, [r3, #6]
 8014d46:	2bff      	cmp	r3, #255	; 0xff
 8014d48:	d005      	beq.n	8014d56 <dhcp_reboot+0x112>
    dhcp->tries++;
 8014d4a:	69bb      	ldr	r3, [r7, #24]
 8014d4c:	799b      	ldrb	r3, [r3, #6]
 8014d4e:	3301      	adds	r3, #1
 8014d50:	b2da      	uxtb	r2, r3
 8014d52:	69bb      	ldr	r3, [r7, #24]
 8014d54:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014d56:	69bb      	ldr	r3, [r7, #24]
 8014d58:	799b      	ldrb	r3, [r3, #6]
 8014d5a:	2b09      	cmp	r3, #9
 8014d5c:	d80a      	bhi.n	8014d74 <dhcp_reboot+0x130>
 8014d5e:	69bb      	ldr	r3, [r7, #24]
 8014d60:	799b      	ldrb	r3, [r3, #6]
 8014d62:	b29b      	uxth	r3, r3
 8014d64:	461a      	mov	r2, r3
 8014d66:	0152      	lsls	r2, r2, #5
 8014d68:	1ad2      	subs	r2, r2, r3
 8014d6a:	0092      	lsls	r2, r2, #2
 8014d6c:	4413      	add	r3, r2
 8014d6e:	00db      	lsls	r3, r3, #3
 8014d70:	b29b      	uxth	r3, r3
 8014d72:	e001      	b.n	8014d78 <dhcp_reboot+0x134>
 8014d74:	f242 7310 	movw	r3, #10000	; 0x2710
 8014d78:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014d7a:	89fb      	ldrh	r3, [r7, #14]
 8014d7c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014d80:	4a0a      	ldr	r2, [pc, #40]	; (8014dac <dhcp_reboot+0x168>)
 8014d82:	fb82 1203 	smull	r1, r2, r2, r3
 8014d86:	1152      	asrs	r2, r2, #5
 8014d88:	17db      	asrs	r3, r3, #31
 8014d8a:	1ad3      	subs	r3, r2, r3
 8014d8c:	b29a      	uxth	r2, r3
 8014d8e:	69bb      	ldr	r3, [r7, #24]
 8014d90:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014d92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014d96:	4618      	mov	r0, r3
 8014d98:	3720      	adds	r7, #32
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8014d9e:	bf00      	nop
 8014da0:	20000030 	.word	0x20000030
 8014da4:	200115e8 	.word	0x200115e8
 8014da8:	08027888 	.word	0x08027888
 8014dac:	10624dd3 	.word	0x10624dd3

08014db0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014db0:	b5b0      	push	{r4, r5, r7, lr}
 8014db2:	b08a      	sub	sp, #40	; 0x28
 8014db4:	af02      	add	r7, sp, #8
 8014db6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dbc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014dbe:	69fb      	ldr	r3, [r7, #28]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f000 8084 	beq.w	8014ece <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014dc6:	69fb      	ldr	r3, [r7, #28]
 8014dc8:	795b      	ldrb	r3, [r3, #5]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	f000 8081 	beq.w	8014ed2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014dd0:	69fb      	ldr	r3, [r7, #28]
 8014dd2:	699b      	ldr	r3, [r3, #24]
 8014dd4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014dd6:	69fb      	ldr	r3, [r7, #28]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014ddc:	69fb      	ldr	r3, [r7, #28]
 8014dde:	2200      	movs	r2, #0
 8014de0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014de2:	69fb      	ldr	r3, [r7, #28]
 8014de4:	2200      	movs	r2, #0
 8014de6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014de8:	69fb      	ldr	r3, [r7, #28]
 8014dea:	2200      	movs	r2, #0
 8014dec:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014dee:	69fb      	ldr	r3, [r7, #28]
 8014df0:	2200      	movs	r2, #0
 8014df2:	631a      	str	r2, [r3, #48]	; 0x30
 8014df4:	69fb      	ldr	r3, [r7, #28]
 8014df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014df8:	69fb      	ldr	r3, [r7, #28]
 8014dfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8014dfc:	69fb      	ldr	r3, [r7, #28]
 8014dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e00:	69fb      	ldr	r3, [r7, #28]
 8014e02:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014e04:	69fb      	ldr	r3, [r7, #28]
 8014e06:	2200      	movs	r2, #0
 8014e08:	829a      	strh	r2, [r3, #20]
 8014e0a:	69fb      	ldr	r3, [r7, #28]
 8014e0c:	8a9a      	ldrh	r2, [r3, #20]
 8014e0e:	69fb      	ldr	r3, [r7, #28]
 8014e10:	825a      	strh	r2, [r3, #18]
 8014e12:	69fb      	ldr	r3, [r7, #28]
 8014e14:	8a5a      	ldrh	r2, [r3, #18]
 8014e16:	69fb      	ldr	r3, [r7, #28]
 8014e18:	821a      	strh	r2, [r3, #16]
 8014e1a:	69fb      	ldr	r3, [r7, #28]
 8014e1c:	8a1a      	ldrh	r2, [r3, #16]
 8014e1e:	69fb      	ldr	r3, [r7, #28]
 8014e20:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f000 fdee 	bl	8015a04 <dhcp_supplied_address>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d03b      	beq.n	8014ea6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014e2e:	f107 030e 	add.w	r3, r7, #14
 8014e32:	2207      	movs	r2, #7
 8014e34:	69f9      	ldr	r1, [r7, #28]
 8014e36:	6878      	ldr	r0, [r7, #4]
 8014e38:	f000 fce0 	bl	80157fc <dhcp_create_msg>
 8014e3c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014e3e:	69bb      	ldr	r3, [r7, #24]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d030      	beq.n	8014ea6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014e44:	69bb      	ldr	r3, [r7, #24]
 8014e46:	685b      	ldr	r3, [r3, #4]
 8014e48:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014e4a:	89f8      	ldrh	r0, [r7, #14]
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e52:	2304      	movs	r3, #4
 8014e54:	2236      	movs	r2, #54	; 0x36
 8014e56:	f000 f85f 	bl	8014f18 <dhcp_option>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014e5e:	89fc      	ldrh	r4, [r7, #14]
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014e66:	693b      	ldr	r3, [r7, #16]
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f7f6 f99e 	bl	800b1aa <lwip_htonl>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	461a      	mov	r2, r3
 8014e72:	4629      	mov	r1, r5
 8014e74:	4620      	mov	r0, r4
 8014e76:	f000 f8db 	bl	8015030 <dhcp_option_long>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014e7e:	89f8      	ldrh	r0, [r7, #14]
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	33f0      	adds	r3, #240	; 0xf0
 8014e84:	69ba      	ldr	r2, [r7, #24]
 8014e86:	4619      	mov	r1, r3
 8014e88:	f000 fd8e 	bl	80159a8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014e8c:	4b13      	ldr	r3, [pc, #76]	; (8014edc <dhcp_release_and_stop+0x12c>)
 8014e8e:	6818      	ldr	r0, [r3, #0]
 8014e90:	f107 0210 	add.w	r2, r7, #16
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	9300      	str	r3, [sp, #0]
 8014e98:	2343      	movs	r3, #67	; 0x43
 8014e9a:	69b9      	ldr	r1, [r7, #24]
 8014e9c:	f7fe fc40 	bl	8013720 <udp_sendto_if>
      pbuf_free(p_out);
 8014ea0:	69b8      	ldr	r0, [r7, #24]
 8014ea2:	f7f7 fda1 	bl	800c9e8 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014ea6:	4b0e      	ldr	r3, [pc, #56]	; (8014ee0 <dhcp_release_and_stop+0x130>)
 8014ea8:	4a0d      	ldr	r2, [pc, #52]	; (8014ee0 <dhcp_release_and_stop+0x130>)
 8014eaa:	490d      	ldr	r1, [pc, #52]	; (8014ee0 <dhcp_release_and_stop+0x130>)
 8014eac:	6878      	ldr	r0, [r7, #4]
 8014eae:	f7f7 f88d 	bl	800bfcc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014eb2:	2100      	movs	r1, #0
 8014eb4:	69f8      	ldr	r0, [r7, #28]
 8014eb6:	f000 f815 	bl	8014ee4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014eba:	69fb      	ldr	r3, [r7, #28]
 8014ebc:	791b      	ldrb	r3, [r3, #4]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d008      	beq.n	8014ed4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014ec2:	f7fe ff85 	bl	8013dd0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014ec6:	69fb      	ldr	r3, [r7, #28]
 8014ec8:	2200      	movs	r2, #0
 8014eca:	711a      	strb	r2, [r3, #4]
 8014ecc:	e002      	b.n	8014ed4 <dhcp_release_and_stop+0x124>
    return;
 8014ece:	bf00      	nop
 8014ed0:	e000      	b.n	8014ed4 <dhcp_release_and_stop+0x124>
    return;
 8014ed2:	bf00      	nop
  }
}
 8014ed4:	3720      	adds	r7, #32
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8014eda:	bf00      	nop
 8014edc:	200115e8 	.word	0x200115e8
 8014ee0:	08027884 	.word	0x08027884

08014ee4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b083      	sub	sp, #12
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
 8014eec:	460b      	mov	r3, r1
 8014eee:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	795b      	ldrb	r3, [r3, #5]
 8014ef4:	78fa      	ldrb	r2, [r7, #3]
 8014ef6:	429a      	cmp	r2, r3
 8014ef8:	d008      	beq.n	8014f0c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	78fa      	ldrb	r2, [r7, #3]
 8014efe:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2200      	movs	r2, #0
 8014f04:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2200      	movs	r2, #0
 8014f0a:	811a      	strh	r2, [r3, #8]
  }
}
 8014f0c:	bf00      	nop
 8014f0e:	370c      	adds	r7, #12
 8014f10:	46bd      	mov	sp, r7
 8014f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f16:	4770      	bx	lr

08014f18 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6039      	str	r1, [r7, #0]
 8014f20:	4611      	mov	r1, r2
 8014f22:	461a      	mov	r2, r3
 8014f24:	4603      	mov	r3, r0
 8014f26:	80fb      	strh	r3, [r7, #6]
 8014f28:	460b      	mov	r3, r1
 8014f2a:	717b      	strb	r3, [r7, #5]
 8014f2c:	4613      	mov	r3, r2
 8014f2e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014f30:	88fa      	ldrh	r2, [r7, #6]
 8014f32:	793b      	ldrb	r3, [r7, #4]
 8014f34:	4413      	add	r3, r2
 8014f36:	3302      	adds	r3, #2
 8014f38:	2b44      	cmp	r3, #68	; 0x44
 8014f3a:	d906      	bls.n	8014f4a <dhcp_option+0x32>
 8014f3c:	4b0d      	ldr	r3, [pc, #52]	; (8014f74 <dhcp_option+0x5c>)
 8014f3e:	f240 529a 	movw	r2, #1434	; 0x59a
 8014f42:	490d      	ldr	r1, [pc, #52]	; (8014f78 <dhcp_option+0x60>)
 8014f44:	480d      	ldr	r0, [pc, #52]	; (8014f7c <dhcp_option+0x64>)
 8014f46:	f003 fb3b 	bl	80185c0 <iprintf>
  options[options_out_len++] = option_type;
 8014f4a:	88fb      	ldrh	r3, [r7, #6]
 8014f4c:	1c5a      	adds	r2, r3, #1
 8014f4e:	80fa      	strh	r2, [r7, #6]
 8014f50:	461a      	mov	r2, r3
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	4413      	add	r3, r2
 8014f56:	797a      	ldrb	r2, [r7, #5]
 8014f58:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014f5a:	88fb      	ldrh	r3, [r7, #6]
 8014f5c:	1c5a      	adds	r2, r3, #1
 8014f5e:	80fa      	strh	r2, [r7, #6]
 8014f60:	461a      	mov	r2, r3
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	4413      	add	r3, r2
 8014f66:	793a      	ldrb	r2, [r7, #4]
 8014f68:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014f6a:	88fb      	ldrh	r3, [r7, #6]
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	3708      	adds	r7, #8
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	0801cba0 	.word	0x0801cba0
 8014f78:	0801cd34 	.word	0x0801cd34
 8014f7c:	0801cc00 	.word	0x0801cc00

08014f80 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b082      	sub	sp, #8
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	4603      	mov	r3, r0
 8014f88:	6039      	str	r1, [r7, #0]
 8014f8a:	80fb      	strh	r3, [r7, #6]
 8014f8c:	4613      	mov	r3, r2
 8014f8e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014f90:	88fb      	ldrh	r3, [r7, #6]
 8014f92:	2b43      	cmp	r3, #67	; 0x43
 8014f94:	d906      	bls.n	8014fa4 <dhcp_option_byte+0x24>
 8014f96:	4b0a      	ldr	r3, [pc, #40]	; (8014fc0 <dhcp_option_byte+0x40>)
 8014f98:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014f9c:	4909      	ldr	r1, [pc, #36]	; (8014fc4 <dhcp_option_byte+0x44>)
 8014f9e:	480a      	ldr	r0, [pc, #40]	; (8014fc8 <dhcp_option_byte+0x48>)
 8014fa0:	f003 fb0e 	bl	80185c0 <iprintf>
  options[options_out_len++] = value;
 8014fa4:	88fb      	ldrh	r3, [r7, #6]
 8014fa6:	1c5a      	adds	r2, r3, #1
 8014fa8:	80fa      	strh	r2, [r7, #6]
 8014faa:	461a      	mov	r2, r3
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	4413      	add	r3, r2
 8014fb0:	797a      	ldrb	r2, [r7, #5]
 8014fb2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014fb4:	88fb      	ldrh	r3, [r7, #6]
}
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	3708      	adds	r7, #8
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	bd80      	pop	{r7, pc}
 8014fbe:	bf00      	nop
 8014fc0:	0801cba0 	.word	0x0801cba0
 8014fc4:	0801cd78 	.word	0x0801cd78
 8014fc8:	0801cc00 	.word	0x0801cc00

08014fcc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b082      	sub	sp, #8
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	6039      	str	r1, [r7, #0]
 8014fd6:	80fb      	strh	r3, [r7, #6]
 8014fd8:	4613      	mov	r3, r2
 8014fda:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014fdc:	88fb      	ldrh	r3, [r7, #6]
 8014fde:	3302      	adds	r3, #2
 8014fe0:	2b44      	cmp	r3, #68	; 0x44
 8014fe2:	d906      	bls.n	8014ff2 <dhcp_option_short+0x26>
 8014fe4:	4b0f      	ldr	r3, [pc, #60]	; (8015024 <dhcp_option_short+0x58>)
 8014fe6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014fea:	490f      	ldr	r1, [pc, #60]	; (8015028 <dhcp_option_short+0x5c>)
 8014fec:	480f      	ldr	r0, [pc, #60]	; (801502c <dhcp_option_short+0x60>)
 8014fee:	f003 fae7 	bl	80185c0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014ff2:	88bb      	ldrh	r3, [r7, #4]
 8014ff4:	0a1b      	lsrs	r3, r3, #8
 8014ff6:	b29a      	uxth	r2, r3
 8014ff8:	88fb      	ldrh	r3, [r7, #6]
 8014ffa:	1c59      	adds	r1, r3, #1
 8014ffc:	80f9      	strh	r1, [r7, #6]
 8014ffe:	4619      	mov	r1, r3
 8015000:	683b      	ldr	r3, [r7, #0]
 8015002:	440b      	add	r3, r1
 8015004:	b2d2      	uxtb	r2, r2
 8015006:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015008:	88fb      	ldrh	r3, [r7, #6]
 801500a:	1c5a      	adds	r2, r3, #1
 801500c:	80fa      	strh	r2, [r7, #6]
 801500e:	461a      	mov	r2, r3
 8015010:	683b      	ldr	r3, [r7, #0]
 8015012:	4413      	add	r3, r2
 8015014:	88ba      	ldrh	r2, [r7, #4]
 8015016:	b2d2      	uxtb	r2, r2
 8015018:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801501a:	88fb      	ldrh	r3, [r7, #6]
}
 801501c:	4618      	mov	r0, r3
 801501e:	3708      	adds	r7, #8
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}
 8015024:	0801cba0 	.word	0x0801cba0
 8015028:	0801cdb0 	.word	0x0801cdb0
 801502c:	0801cc00 	.word	0x0801cc00

08015030 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b084      	sub	sp, #16
 8015034:	af00      	add	r7, sp, #0
 8015036:	4603      	mov	r3, r0
 8015038:	60b9      	str	r1, [r7, #8]
 801503a:	607a      	str	r2, [r7, #4]
 801503c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801503e:	89fb      	ldrh	r3, [r7, #14]
 8015040:	3304      	adds	r3, #4
 8015042:	2b44      	cmp	r3, #68	; 0x44
 8015044:	d906      	bls.n	8015054 <dhcp_option_long+0x24>
 8015046:	4b19      	ldr	r3, [pc, #100]	; (80150ac <dhcp_option_long+0x7c>)
 8015048:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801504c:	4918      	ldr	r1, [pc, #96]	; (80150b0 <dhcp_option_long+0x80>)
 801504e:	4819      	ldr	r0, [pc, #100]	; (80150b4 <dhcp_option_long+0x84>)
 8015050:	f003 fab6 	bl	80185c0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	0e1a      	lsrs	r2, r3, #24
 8015058:	89fb      	ldrh	r3, [r7, #14]
 801505a:	1c59      	adds	r1, r3, #1
 801505c:	81f9      	strh	r1, [r7, #14]
 801505e:	4619      	mov	r1, r3
 8015060:	68bb      	ldr	r3, [r7, #8]
 8015062:	440b      	add	r3, r1
 8015064:	b2d2      	uxtb	r2, r2
 8015066:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	0c1a      	lsrs	r2, r3, #16
 801506c:	89fb      	ldrh	r3, [r7, #14]
 801506e:	1c59      	adds	r1, r3, #1
 8015070:	81f9      	strh	r1, [r7, #14]
 8015072:	4619      	mov	r1, r3
 8015074:	68bb      	ldr	r3, [r7, #8]
 8015076:	440b      	add	r3, r1
 8015078:	b2d2      	uxtb	r2, r2
 801507a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	0a1a      	lsrs	r2, r3, #8
 8015080:	89fb      	ldrh	r3, [r7, #14]
 8015082:	1c59      	adds	r1, r3, #1
 8015084:	81f9      	strh	r1, [r7, #14]
 8015086:	4619      	mov	r1, r3
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	440b      	add	r3, r1
 801508c:	b2d2      	uxtb	r2, r2
 801508e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015090:	89fb      	ldrh	r3, [r7, #14]
 8015092:	1c5a      	adds	r2, r3, #1
 8015094:	81fa      	strh	r2, [r7, #14]
 8015096:	461a      	mov	r2, r3
 8015098:	68bb      	ldr	r3, [r7, #8]
 801509a:	4413      	add	r3, r2
 801509c:	687a      	ldr	r2, [r7, #4]
 801509e:	b2d2      	uxtb	r2, r2
 80150a0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80150a2:	89fb      	ldrh	r3, [r7, #14]
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	3710      	adds	r7, #16
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	0801cba0 	.word	0x0801cba0
 80150b0:	0801cdec 	.word	0x0801cdec
 80150b4:	0801cc00 	.word	0x0801cc00

080150b8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b090      	sub	sp, #64	; 0x40
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
 80150c0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80150c2:	2300      	movs	r3, #0
 80150c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80150c6:	2300      	movs	r3, #0
 80150c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80150ca:	2208      	movs	r2, #8
 80150cc:	2100      	movs	r1, #0
 80150ce:	48b5      	ldr	r0, [pc, #724]	; (80153a4 <dhcp_parse_reply+0x2ec>)
 80150d0:	f003 fb15 	bl	80186fe <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	895b      	ldrh	r3, [r3, #10]
 80150d8:	2b2b      	cmp	r3, #43	; 0x2b
 80150da:	d802      	bhi.n	80150e2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80150dc:	f06f 0301 	mvn.w	r3, #1
 80150e0:	e2a7      	b.n	8015632 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	685b      	ldr	r3, [r3, #4]
 80150e6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80150e8:	23f0      	movs	r3, #240	; 0xf0
 80150ea:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	891b      	ldrh	r3, [r3, #8]
 80150f0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80150f6:	e00c      	b.n	8015112 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80150f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150fa:	895b      	ldrh	r3, [r3, #10]
 80150fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80150fe:	1ad3      	subs	r3, r2, r3
 8015100:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015104:	895b      	ldrh	r3, [r3, #10]
 8015106:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015108:	1ad3      	subs	r3, r2, r3
 801510a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015114:	2b00      	cmp	r3, #0
 8015116:	d004      	beq.n	8015122 <dhcp_parse_reply+0x6a>
 8015118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801511a:	895b      	ldrh	r3, [r3, #10]
 801511c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801511e:	429a      	cmp	r2, r3
 8015120:	d2ea      	bcs.n	80150f8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015124:	2b00      	cmp	r3, #0
 8015126:	d102      	bne.n	801512e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015128:	f06f 0301 	mvn.w	r3, #1
 801512c:	e281      	b.n	8015632 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801512e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015130:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015132:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015134:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015138:	685b      	ldr	r3, [r3, #4]
 801513a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801513c:	e239      	b.n	80155b2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801513e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015142:	4413      	add	r3, r2
 8015144:	781b      	ldrb	r3, [r3, #0]
 8015146:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015148:	2300      	movs	r3, #0
 801514a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801514e:	f04f 33ff 	mov.w	r3, #4294967295
 8015152:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015154:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015156:	3302      	adds	r3, #2
 8015158:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801515a:	8bfa      	ldrh	r2, [r7, #30]
 801515c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801515e:	429a      	cmp	r2, r3
 8015160:	d202      	bcs.n	8015168 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015162:	f06f 0301 	mvn.w	r3, #1
 8015166:	e264      	b.n	8015632 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015168:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801516a:	3301      	adds	r3, #1
 801516c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801516e:	8952      	ldrh	r2, [r2, #10]
 8015170:	4293      	cmp	r3, r2
 8015172:	da07      	bge.n	8015184 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015174:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015176:	3301      	adds	r3, #1
 8015178:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801517a:	4413      	add	r3, r2
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015182:	e00b      	b.n	801519c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d004      	beq.n	8015196 <dhcp_parse_reply+0xde>
 801518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	685b      	ldr	r3, [r3, #4]
 8015192:	781b      	ldrb	r3, [r3, #0]
 8015194:	e000      	b.n	8015198 <dhcp_parse_reply+0xe0>
 8015196:	2300      	movs	r3, #0
 8015198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801519c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80151a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80151a4:	7dfb      	ldrb	r3, [r7, #23]
 80151a6:	2b3b      	cmp	r3, #59	; 0x3b
 80151a8:	f200 812c 	bhi.w	8015404 <dhcp_parse_reply+0x34c>
 80151ac:	a201      	add	r2, pc, #4	; (adr r2, 80151b4 <dhcp_parse_reply+0xfc>)
 80151ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151b2:	bf00      	nop
 80151b4:	080152a5 	.word	0x080152a5
 80151b8:	080152b5 	.word	0x080152b5
 80151bc:	08015405 	.word	0x08015405
 80151c0:	080152d7 	.word	0x080152d7
 80151c4:	08015405 	.word	0x08015405
 80151c8:	08015405 	.word	0x08015405
 80151cc:	08015405 	.word	0x08015405
 80151d0:	08015405 	.word	0x08015405
 80151d4:	08015405 	.word	0x08015405
 80151d8:	08015405 	.word	0x08015405
 80151dc:	08015405 	.word	0x08015405
 80151e0:	08015405 	.word	0x08015405
 80151e4:	08015405 	.word	0x08015405
 80151e8:	08015405 	.word	0x08015405
 80151ec:	08015405 	.word	0x08015405
 80151f0:	08015405 	.word	0x08015405
 80151f4:	08015405 	.word	0x08015405
 80151f8:	08015405 	.word	0x08015405
 80151fc:	08015405 	.word	0x08015405
 8015200:	08015405 	.word	0x08015405
 8015204:	08015405 	.word	0x08015405
 8015208:	08015405 	.word	0x08015405
 801520c:	08015405 	.word	0x08015405
 8015210:	08015405 	.word	0x08015405
 8015214:	08015405 	.word	0x08015405
 8015218:	08015405 	.word	0x08015405
 801521c:	08015405 	.word	0x08015405
 8015220:	08015405 	.word	0x08015405
 8015224:	08015405 	.word	0x08015405
 8015228:	08015405 	.word	0x08015405
 801522c:	08015405 	.word	0x08015405
 8015230:	08015405 	.word	0x08015405
 8015234:	08015405 	.word	0x08015405
 8015238:	08015405 	.word	0x08015405
 801523c:	08015405 	.word	0x08015405
 8015240:	08015405 	.word	0x08015405
 8015244:	08015405 	.word	0x08015405
 8015248:	08015405 	.word	0x08015405
 801524c:	08015405 	.word	0x08015405
 8015250:	08015405 	.word	0x08015405
 8015254:	08015405 	.word	0x08015405
 8015258:	08015405 	.word	0x08015405
 801525c:	08015405 	.word	0x08015405
 8015260:	08015405 	.word	0x08015405
 8015264:	08015405 	.word	0x08015405
 8015268:	08015405 	.word	0x08015405
 801526c:	08015405 	.word	0x08015405
 8015270:	08015405 	.word	0x08015405
 8015274:	08015405 	.word	0x08015405
 8015278:	08015405 	.word	0x08015405
 801527c:	08015405 	.word	0x08015405
 8015280:	08015303 	.word	0x08015303
 8015284:	08015325 	.word	0x08015325
 8015288:	08015361 	.word	0x08015361
 801528c:	08015383 	.word	0x08015383
 8015290:	08015405 	.word	0x08015405
 8015294:	08015405 	.word	0x08015405
 8015298:	08015405 	.word	0x08015405
 801529c:	080153c1 	.word	0x080153c1
 80152a0:	080153e3 	.word	0x080153e3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80152a4:	2300      	movs	r3, #0
 80152a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80152aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80152ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80152b2:	e0ab      	b.n	801540c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80152b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80152b8:	2b04      	cmp	r3, #4
 80152ba:	d009      	beq.n	80152d0 <dhcp_parse_reply+0x218>
 80152bc:	4b3a      	ldr	r3, [pc, #232]	; (80153a8 <dhcp_parse_reply+0x2f0>)
 80152be:	f240 622e 	movw	r2, #1582	; 0x62e
 80152c2:	493a      	ldr	r1, [pc, #232]	; (80153ac <dhcp_parse_reply+0x2f4>)
 80152c4:	483a      	ldr	r0, [pc, #232]	; (80153b0 <dhcp_parse_reply+0x2f8>)
 80152c6:	f003 f97b 	bl	80185c0 <iprintf>
 80152ca:	f06f 0305 	mvn.w	r3, #5
 80152ce:	e1b0      	b.n	8015632 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80152d0:	2306      	movs	r3, #6
 80152d2:	623b      	str	r3, [r7, #32]
        break;
 80152d4:	e09a      	b.n	801540c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80152d6:	2304      	movs	r3, #4
 80152d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80152dc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80152e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d209      	bcs.n	80152fc <dhcp_parse_reply+0x244>
 80152e8:	4b2f      	ldr	r3, [pc, #188]	; (80153a8 <dhcp_parse_reply+0x2f0>)
 80152ea:	f240 6233 	movw	r2, #1587	; 0x633
 80152ee:	4931      	ldr	r1, [pc, #196]	; (80153b4 <dhcp_parse_reply+0x2fc>)
 80152f0:	482f      	ldr	r0, [pc, #188]	; (80153b0 <dhcp_parse_reply+0x2f8>)
 80152f2:	f003 f965 	bl	80185c0 <iprintf>
 80152f6:	f06f 0305 	mvn.w	r3, #5
 80152fa:	e19a      	b.n	8015632 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80152fc:	2307      	movs	r3, #7
 80152fe:	623b      	str	r3, [r7, #32]
        break;
 8015300:	e084      	b.n	801540c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015306:	2b04      	cmp	r3, #4
 8015308:	d009      	beq.n	801531e <dhcp_parse_reply+0x266>
 801530a:	4b27      	ldr	r3, [pc, #156]	; (80153a8 <dhcp_parse_reply+0x2f0>)
 801530c:	f240 6241 	movw	r2, #1601	; 0x641
 8015310:	4926      	ldr	r1, [pc, #152]	; (80153ac <dhcp_parse_reply+0x2f4>)
 8015312:	4827      	ldr	r0, [pc, #156]	; (80153b0 <dhcp_parse_reply+0x2f8>)
 8015314:	f003 f954 	bl	80185c0 <iprintf>
 8015318:	f06f 0305 	mvn.w	r3, #5
 801531c:	e189      	b.n	8015632 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801531e:	2303      	movs	r3, #3
 8015320:	623b      	str	r3, [r7, #32]
        break;
 8015322:	e073      	b.n	801540c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015328:	2b01      	cmp	r3, #1
 801532a:	d009      	beq.n	8015340 <dhcp_parse_reply+0x288>
 801532c:	4b1e      	ldr	r3, [pc, #120]	; (80153a8 <dhcp_parse_reply+0x2f0>)
 801532e:	f240 624f 	movw	r2, #1615	; 0x64f
 8015332:	4921      	ldr	r1, [pc, #132]	; (80153b8 <dhcp_parse_reply+0x300>)
 8015334:	481e      	ldr	r0, [pc, #120]	; (80153b0 <dhcp_parse_reply+0x2f8>)
 8015336:	f003 f943 	bl	80185c0 <iprintf>
 801533a:	f06f 0305 	mvn.w	r3, #5
 801533e:	e178      	b.n	8015632 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015340:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015342:	2bf0      	cmp	r3, #240	; 0xf0
 8015344:	d009      	beq.n	801535a <dhcp_parse_reply+0x2a2>
 8015346:	4b18      	ldr	r3, [pc, #96]	; (80153a8 <dhcp_parse_reply+0x2f0>)
 8015348:	f240 6251 	movw	r2, #1617	; 0x651
 801534c:	491b      	ldr	r1, [pc, #108]	; (80153bc <dhcp_parse_reply+0x304>)
 801534e:	4818      	ldr	r0, [pc, #96]	; (80153b0 <dhcp_parse_reply+0x2f8>)
 8015350:	f003 f936 	bl	80185c0 <iprintf>
 8015354:	f06f 0305 	mvn.w	r3, #5
 8015358:	e16b      	b.n	8015632 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801535a:	2300      	movs	r3, #0
 801535c:	623b      	str	r3, [r7, #32]
        break;
 801535e:	e055      	b.n	801540c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015364:	2b01      	cmp	r3, #1
 8015366:	d009      	beq.n	801537c <dhcp_parse_reply+0x2c4>
 8015368:	4b0f      	ldr	r3, [pc, #60]	; (80153a8 <dhcp_parse_reply+0x2f0>)
 801536a:	f240 6255 	movw	r2, #1621	; 0x655
 801536e:	4912      	ldr	r1, [pc, #72]	; (80153b8 <dhcp_parse_reply+0x300>)
 8015370:	480f      	ldr	r0, [pc, #60]	; (80153b0 <dhcp_parse_reply+0x2f8>)
 8015372:	f003 f925 	bl	80185c0 <iprintf>
 8015376:	f06f 0305 	mvn.w	r3, #5
 801537a:	e15a      	b.n	8015632 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801537c:	2301      	movs	r3, #1
 801537e:	623b      	str	r3, [r7, #32]
        break;
 8015380:	e044      	b.n	801540c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015386:	2b04      	cmp	r3, #4
 8015388:	d009      	beq.n	801539e <dhcp_parse_reply+0x2e6>
 801538a:	4b07      	ldr	r3, [pc, #28]	; (80153a8 <dhcp_parse_reply+0x2f0>)
 801538c:	f240 6259 	movw	r2, #1625	; 0x659
 8015390:	4906      	ldr	r1, [pc, #24]	; (80153ac <dhcp_parse_reply+0x2f4>)
 8015392:	4807      	ldr	r0, [pc, #28]	; (80153b0 <dhcp_parse_reply+0x2f8>)
 8015394:	f003 f914 	bl	80185c0 <iprintf>
 8015398:	f06f 0305 	mvn.w	r3, #5
 801539c:	e149      	b.n	8015632 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801539e:	2302      	movs	r3, #2
 80153a0:	623b      	str	r3, [r7, #32]
        break;
 80153a2:	e033      	b.n	801540c <dhcp_parse_reply+0x354>
 80153a4:	200115e0 	.word	0x200115e0
 80153a8:	0801cba0 	.word	0x0801cba0
 80153ac:	0801ce28 	.word	0x0801ce28
 80153b0:	0801cc00 	.word	0x0801cc00
 80153b4:	0801ce34 	.word	0x0801ce34
 80153b8:	0801ce48 	.word	0x0801ce48
 80153bc:	0801ce54 	.word	0x0801ce54
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80153c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153c4:	2b04      	cmp	r3, #4
 80153c6:	d009      	beq.n	80153dc <dhcp_parse_reply+0x324>
 80153c8:	4b9c      	ldr	r3, [pc, #624]	; (801563c <dhcp_parse_reply+0x584>)
 80153ca:	f240 625d 	movw	r2, #1629	; 0x65d
 80153ce:	499c      	ldr	r1, [pc, #624]	; (8015640 <dhcp_parse_reply+0x588>)
 80153d0:	489c      	ldr	r0, [pc, #624]	; (8015644 <dhcp_parse_reply+0x58c>)
 80153d2:	f003 f8f5 	bl	80185c0 <iprintf>
 80153d6:	f06f 0305 	mvn.w	r3, #5
 80153da:	e12a      	b.n	8015632 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80153dc:	2304      	movs	r3, #4
 80153de:	623b      	str	r3, [r7, #32]
        break;
 80153e0:	e014      	b.n	801540c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80153e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153e6:	2b04      	cmp	r3, #4
 80153e8:	d009      	beq.n	80153fe <dhcp_parse_reply+0x346>
 80153ea:	4b94      	ldr	r3, [pc, #592]	; (801563c <dhcp_parse_reply+0x584>)
 80153ec:	f240 6261 	movw	r2, #1633	; 0x661
 80153f0:	4993      	ldr	r1, [pc, #588]	; (8015640 <dhcp_parse_reply+0x588>)
 80153f2:	4894      	ldr	r0, [pc, #592]	; (8015644 <dhcp_parse_reply+0x58c>)
 80153f4:	f003 f8e4 	bl	80185c0 <iprintf>
 80153f8:	f06f 0305 	mvn.w	r3, #5
 80153fc:	e119      	b.n	8015632 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80153fe:	2305      	movs	r3, #5
 8015400:	623b      	str	r3, [r7, #32]
        break;
 8015402:	e003      	b.n	801540c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015404:	2300      	movs	r3, #0
 8015406:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801540a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801540c:	7dfb      	ldrb	r3, [r7, #23]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d103      	bne.n	801541a <dhcp_parse_reply+0x362>
      offset++;
 8015412:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015414:	3301      	adds	r3, #1
 8015416:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015418:	e0a1      	b.n	801555e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801541a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801541c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015420:	4413      	add	r3, r2
 8015422:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8015426:	4293      	cmp	r3, r2
 8015428:	dd02      	ble.n	8015430 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801542a:	f06f 0301 	mvn.w	r3, #1
 801542e:	e100      	b.n	8015632 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015434:	b29a      	uxth	r2, r3
 8015436:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015438:	4413      	add	r3, r2
 801543a:	b29b      	uxth	r3, r3
 801543c:	3302      	adds	r3, #2
 801543e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8015440:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015444:	2b00      	cmp	r3, #0
 8015446:	f000 808a 	beq.w	801555e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801544a:	2300      	movs	r3, #0
 801544c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801544e:	6a3b      	ldr	r3, [r7, #32]
 8015450:	2b00      	cmp	r3, #0
 8015452:	db02      	blt.n	801545a <dhcp_parse_reply+0x3a2>
 8015454:	6a3b      	ldr	r3, [r7, #32]
 8015456:	2b07      	cmp	r3, #7
 8015458:	dd06      	ble.n	8015468 <dhcp_parse_reply+0x3b0>
 801545a:	4b78      	ldr	r3, [pc, #480]	; (801563c <dhcp_parse_reply+0x584>)
 801545c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8015460:	4979      	ldr	r1, [pc, #484]	; (8015648 <dhcp_parse_reply+0x590>)
 8015462:	4878      	ldr	r0, [pc, #480]	; (8015644 <dhcp_parse_reply+0x58c>)
 8015464:	f003 f8ac 	bl	80185c0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015468:	4a78      	ldr	r2, [pc, #480]	; (801564c <dhcp_parse_reply+0x594>)
 801546a:	6a3b      	ldr	r3, [r7, #32]
 801546c:	4413      	add	r3, r2
 801546e:	781b      	ldrb	r3, [r3, #0]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d174      	bne.n	801555e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015474:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015478:	2b04      	cmp	r3, #4
 801547a:	bf28      	it	cs
 801547c:	2304      	movcs	r3, #4
 801547e:	b2db      	uxtb	r3, r3
 8015480:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015482:	8bfb      	ldrh	r3, [r7, #30]
 8015484:	8aba      	ldrh	r2, [r7, #20]
 8015486:	f107 0108 	add.w	r1, r7, #8
 801548a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801548c:	f7f7 fcb2 	bl	800cdf4 <pbuf_copy_partial>
 8015490:	4603      	mov	r3, r0
 8015492:	461a      	mov	r2, r3
 8015494:	8abb      	ldrh	r3, [r7, #20]
 8015496:	4293      	cmp	r3, r2
 8015498:	d002      	beq.n	80154a0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801549a:	f06f 0301 	mvn.w	r3, #1
 801549e:	e0c8      	b.n	8015632 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80154a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80154a4:	2b04      	cmp	r3, #4
 80154a6:	d933      	bls.n	8015510 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80154a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80154ac:	f003 0303 	and.w	r3, r3, #3
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d009      	beq.n	80154ca <dhcp_parse_reply+0x412>
 80154b6:	4b61      	ldr	r3, [pc, #388]	; (801563c <dhcp_parse_reply+0x584>)
 80154b8:	f240 6281 	movw	r2, #1665	; 0x681
 80154bc:	4964      	ldr	r1, [pc, #400]	; (8015650 <dhcp_parse_reply+0x598>)
 80154be:	4861      	ldr	r0, [pc, #388]	; (8015644 <dhcp_parse_reply+0x58c>)
 80154c0:	f003 f87e 	bl	80185c0 <iprintf>
 80154c4:	f06f 0305 	mvn.w	r3, #5
 80154c8:	e0b3      	b.n	8015632 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80154ca:	4a60      	ldr	r2, [pc, #384]	; (801564c <dhcp_parse_reply+0x594>)
 80154cc:	6a3b      	ldr	r3, [r7, #32]
 80154ce:	4413      	add	r3, r2
 80154d0:	2201      	movs	r2, #1
 80154d2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7f5 fe67 	bl	800b1aa <lwip_htonl>
 80154dc:	4602      	mov	r2, r0
 80154de:	495d      	ldr	r1, [pc, #372]	; (8015654 <dhcp_parse_reply+0x59c>)
 80154e0:	6a3b      	ldr	r3, [r7, #32]
 80154e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80154e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80154ea:	3b04      	subs	r3, #4
 80154ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80154f0:	8bfb      	ldrh	r3, [r7, #30]
 80154f2:	3304      	adds	r3, #4
 80154f4:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80154f6:	8a7a      	ldrh	r2, [r7, #18]
 80154f8:	8bfb      	ldrh	r3, [r7, #30]
 80154fa:	429a      	cmp	r2, r3
 80154fc:	d202      	bcs.n	8015504 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80154fe:	f06f 0301 	mvn.w	r3, #1
 8015502:	e096      	b.n	8015632 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015504:	8a7b      	ldrh	r3, [r7, #18]
 8015506:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015508:	6a3b      	ldr	r3, [r7, #32]
 801550a:	3301      	adds	r3, #1
 801550c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801550e:	e79e      	b.n	801544e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015510:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015514:	2b04      	cmp	r3, #4
 8015516:	d106      	bne.n	8015526 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015518:	68bb      	ldr	r3, [r7, #8]
 801551a:	4618      	mov	r0, r3
 801551c:	f7f5 fe45 	bl	800b1aa <lwip_htonl>
 8015520:	4603      	mov	r3, r0
 8015522:	60bb      	str	r3, [r7, #8]
 8015524:	e011      	b.n	801554a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015526:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801552a:	2b01      	cmp	r3, #1
 801552c:	d009      	beq.n	8015542 <dhcp_parse_reply+0x48a>
 801552e:	4b43      	ldr	r3, [pc, #268]	; (801563c <dhcp_parse_reply+0x584>)
 8015530:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015534:	4948      	ldr	r1, [pc, #288]	; (8015658 <dhcp_parse_reply+0x5a0>)
 8015536:	4843      	ldr	r0, [pc, #268]	; (8015644 <dhcp_parse_reply+0x58c>)
 8015538:	f003 f842 	bl	80185c0 <iprintf>
 801553c:	f06f 0305 	mvn.w	r3, #5
 8015540:	e077      	b.n	8015632 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015542:	f107 0308 	add.w	r3, r7, #8
 8015546:	781b      	ldrb	r3, [r3, #0]
 8015548:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801554a:	4a40      	ldr	r2, [pc, #256]	; (801564c <dhcp_parse_reply+0x594>)
 801554c:	6a3b      	ldr	r3, [r7, #32]
 801554e:	4413      	add	r3, r2
 8015550:	2201      	movs	r2, #1
 8015552:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015554:	68ba      	ldr	r2, [r7, #8]
 8015556:	493f      	ldr	r1, [pc, #252]	; (8015654 <dhcp_parse_reply+0x59c>)
 8015558:	6a3b      	ldr	r3, [r7, #32]
 801555a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015560:	895b      	ldrh	r3, [r3, #10]
 8015562:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015564:	429a      	cmp	r2, r3
 8015566:	d324      	bcc.n	80155b2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801556a:	895b      	ldrh	r3, [r3, #10]
 801556c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801556e:	1ad3      	subs	r3, r2, r3
 8015570:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015574:	895b      	ldrh	r3, [r3, #10]
 8015576:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015578:	1ad3      	subs	r3, r2, r3
 801557a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801557c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801557e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015580:	429a      	cmp	r2, r3
 8015582:	d213      	bcs.n	80155ac <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801558c:	2b00      	cmp	r3, #0
 801558e:	d109      	bne.n	80155a4 <dhcp_parse_reply+0x4ec>
 8015590:	4b2a      	ldr	r3, [pc, #168]	; (801563c <dhcp_parse_reply+0x584>)
 8015592:	f240 629d 	movw	r2, #1693	; 0x69d
 8015596:	4931      	ldr	r1, [pc, #196]	; (801565c <dhcp_parse_reply+0x5a4>)
 8015598:	482a      	ldr	r0, [pc, #168]	; (8015644 <dhcp_parse_reply+0x58c>)
 801559a:	f003 f811 	bl	80185c0 <iprintf>
 801559e:	f06f 0305 	mvn.w	r3, #5
 80155a2:	e046      	b.n	8015632 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80155a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155a6:	685b      	ldr	r3, [r3, #4]
 80155a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80155aa:	e002      	b.n	80155b2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80155ac:	f06f 0301 	mvn.w	r3, #1
 80155b0:	e03f      	b.n	8015632 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80155b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d00a      	beq.n	80155ce <dhcp_parse_reply+0x516>
 80155b8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80155ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80155bc:	429a      	cmp	r2, r3
 80155be:	d206      	bcs.n	80155ce <dhcp_parse_reply+0x516>
 80155c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80155c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80155c4:	4413      	add	r3, r2
 80155c6:	781b      	ldrb	r3, [r3, #0]
 80155c8:	2bff      	cmp	r3, #255	; 0xff
 80155ca:	f47f adb8 	bne.w	801513e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80155ce:	4b1f      	ldr	r3, [pc, #124]	; (801564c <dhcp_parse_reply+0x594>)
 80155d0:	781b      	ldrb	r3, [r3, #0]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d018      	beq.n	8015608 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80155d6:	4b1f      	ldr	r3, [pc, #124]	; (8015654 <dhcp_parse_reply+0x59c>)
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80155dc:	4b1b      	ldr	r3, [pc, #108]	; (801564c <dhcp_parse_reply+0x594>)
 80155de:	2200      	movs	r2, #0
 80155e0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	2b01      	cmp	r3, #1
 80155e6:	d102      	bne.n	80155ee <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80155e8:	2301      	movs	r3, #1
 80155ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80155ec:	e00c      	b.n	8015608 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	2b02      	cmp	r3, #2
 80155f2:	d102      	bne.n	80155fa <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80155f4:	2301      	movs	r3, #1
 80155f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80155f8:	e006      	b.n	8015608 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	2b03      	cmp	r3, #3
 80155fe:	d103      	bne.n	8015608 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015600:	2301      	movs	r3, #1
 8015602:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015604:	2301      	movs	r3, #1
 8015606:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801560a:	2b00      	cmp	r3, #0
 801560c:	d006      	beq.n	801561c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801560e:	2300      	movs	r3, #0
 8015610:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015612:	236c      	movs	r3, #108	; 0x6c
 8015614:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015616:	23ec      	movs	r3, #236	; 0xec
 8015618:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801561a:	e56a      	b.n	80150f2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801561e:	2b00      	cmp	r3, #0
 8015620:	d006      	beq.n	8015630 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015622:	2300      	movs	r3, #0
 8015624:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015626:	232c      	movs	r3, #44	; 0x2c
 8015628:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801562a:	236c      	movs	r3, #108	; 0x6c
 801562c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801562e:	e560      	b.n	80150f2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015630:	2300      	movs	r3, #0
}
 8015632:	4618      	mov	r0, r3
 8015634:	3740      	adds	r7, #64	; 0x40
 8015636:	46bd      	mov	sp, r7
 8015638:	bd80      	pop	{r7, pc}
 801563a:	bf00      	nop
 801563c:	0801cba0 	.word	0x0801cba0
 8015640:	0801ce28 	.word	0x0801ce28
 8015644:	0801cc00 	.word	0x0801cc00
 8015648:	0801ce6c 	.word	0x0801ce6c
 801564c:	200115e0 	.word	0x200115e0
 8015650:	0801ce80 	.word	0x0801ce80
 8015654:	200115c0 	.word	0x200115c0
 8015658:	0801ce98 	.word	0x0801ce98
 801565c:	0801ceac 	.word	0x0801ceac

08015660 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b08a      	sub	sp, #40	; 0x28
 8015664:	af00      	add	r7, sp, #0
 8015666:	60f8      	str	r0, [r7, #12]
 8015668:	60b9      	str	r1, [r7, #8]
 801566a:	607a      	str	r2, [r7, #4]
 801566c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801566e:	4b60      	ldr	r3, [pc, #384]	; (80157f0 <dhcp_recv+0x190>)
 8015670:	685b      	ldr	r3, [r3, #4]
 8015672:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015674:	6a3b      	ldr	r3, [r7, #32]
 8015676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015678:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	685b      	ldr	r3, [r3, #4]
 801567e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015680:	69fb      	ldr	r3, [r7, #28]
 8015682:	2b00      	cmp	r3, #0
 8015684:	f000 809d 	beq.w	80157c2 <dhcp_recv+0x162>
 8015688:	69fb      	ldr	r3, [r7, #28]
 801568a:	791b      	ldrb	r3, [r3, #4]
 801568c:	2b00      	cmp	r3, #0
 801568e:	f000 8098 	beq.w	80157c2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	895b      	ldrh	r3, [r3, #10]
 8015696:	2b2b      	cmp	r3, #43	; 0x2b
 8015698:	f240 8095 	bls.w	80157c6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801569c:	69bb      	ldr	r3, [r7, #24]
 801569e:	781b      	ldrb	r3, [r3, #0]
 80156a0:	2b02      	cmp	r3, #2
 80156a2:	f040 8092 	bne.w	80157ca <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80156a6:	2300      	movs	r3, #0
 80156a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156ac:	e012      	b.n	80156d4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80156ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156b2:	6a3a      	ldr	r2, [r7, #32]
 80156b4:	4413      	add	r3, r2
 80156b6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80156ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156be:	69b9      	ldr	r1, [r7, #24]
 80156c0:	440b      	add	r3, r1
 80156c2:	7f1b      	ldrb	r3, [r3, #28]
 80156c4:	429a      	cmp	r2, r3
 80156c6:	f040 8082 	bne.w	80157ce <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80156ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156ce:	3301      	adds	r3, #1
 80156d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156d4:	6a3b      	ldr	r3, [r7, #32]
 80156d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80156da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80156de:	429a      	cmp	r2, r3
 80156e0:	d203      	bcs.n	80156ea <dhcp_recv+0x8a>
 80156e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156e6:	2b05      	cmp	r3, #5
 80156e8:	d9e1      	bls.n	80156ae <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80156ea:	69bb      	ldr	r3, [r7, #24]
 80156ec:	685b      	ldr	r3, [r3, #4]
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7f5 fd5b 	bl	800b1aa <lwip_htonl>
 80156f4:	4602      	mov	r2, r0
 80156f6:	69fb      	ldr	r3, [r7, #28]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d169      	bne.n	80157d2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80156fe:	69f9      	ldr	r1, [r7, #28]
 8015700:	6878      	ldr	r0, [r7, #4]
 8015702:	f7ff fcd9 	bl	80150b8 <dhcp_parse_reply>
 8015706:	4603      	mov	r3, r0
 8015708:	2b00      	cmp	r3, #0
 801570a:	d164      	bne.n	80157d6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801570c:	4b39      	ldr	r3, [pc, #228]	; (80157f4 <dhcp_recv+0x194>)
 801570e:	785b      	ldrb	r3, [r3, #1]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d062      	beq.n	80157da <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	685b      	ldr	r3, [r3, #4]
 8015718:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801571a:	4b37      	ldr	r3, [pc, #220]	; (80157f8 <dhcp_recv+0x198>)
 801571c:	685b      	ldr	r3, [r3, #4]
 801571e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015720:	7cfb      	ldrb	r3, [r7, #19]
 8015722:	2b05      	cmp	r3, #5
 8015724:	d12a      	bne.n	801577c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015726:	69fb      	ldr	r3, [r7, #28]
 8015728:	795b      	ldrb	r3, [r3, #5]
 801572a:	2b01      	cmp	r3, #1
 801572c:	d112      	bne.n	8015754 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801572e:	6979      	ldr	r1, [r7, #20]
 8015730:	6a38      	ldr	r0, [r7, #32]
 8015732:	f7fe fe17 	bl	8014364 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015736:	6a3b      	ldr	r3, [r7, #32]
 8015738:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801573c:	f003 0308 	and.w	r3, r3, #8
 8015740:	2b00      	cmp	r3, #0
 8015742:	d003      	beq.n	801574c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015744:	6a38      	ldr	r0, [r7, #32]
 8015746:	f7fe fb87 	bl	8013e58 <dhcp_check>
 801574a:	e049      	b.n	80157e0 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801574c:	6a38      	ldr	r0, [r7, #32]
 801574e:	f7ff f867 	bl	8014820 <dhcp_bind>
 8015752:	e045      	b.n	80157e0 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015754:	69fb      	ldr	r3, [r7, #28]
 8015756:	795b      	ldrb	r3, [r3, #5]
 8015758:	2b03      	cmp	r3, #3
 801575a:	d007      	beq.n	801576c <dhcp_recv+0x10c>
 801575c:	69fb      	ldr	r3, [r7, #28]
 801575e:	795b      	ldrb	r3, [r3, #5]
 8015760:	2b04      	cmp	r3, #4
 8015762:	d003      	beq.n	801576c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015764:	69fb      	ldr	r3, [r7, #28]
 8015766:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015768:	2b05      	cmp	r3, #5
 801576a:	d139      	bne.n	80157e0 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801576c:	6979      	ldr	r1, [r7, #20]
 801576e:	6a38      	ldr	r0, [r7, #32]
 8015770:	f7fe fdf8 	bl	8014364 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015774:	6a38      	ldr	r0, [r7, #32]
 8015776:	f7ff f853 	bl	8014820 <dhcp_bind>
 801577a:	e031      	b.n	80157e0 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801577c:	7cfb      	ldrb	r3, [r7, #19]
 801577e:	2b06      	cmp	r3, #6
 8015780:	d113      	bne.n	80157aa <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015782:	69fb      	ldr	r3, [r7, #28]
 8015784:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015786:	2b03      	cmp	r3, #3
 8015788:	d00b      	beq.n	80157a2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801578a:	69fb      	ldr	r3, [r7, #28]
 801578c:	795b      	ldrb	r3, [r3, #5]
 801578e:	2b01      	cmp	r3, #1
 8015790:	d007      	beq.n	80157a2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015792:	69fb      	ldr	r3, [r7, #28]
 8015794:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015796:	2b04      	cmp	r3, #4
 8015798:	d003      	beq.n	80157a2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801579a:	69fb      	ldr	r3, [r7, #28]
 801579c:	795b      	ldrb	r3, [r3, #5]
 801579e:	2b05      	cmp	r3, #5
 80157a0:	d103      	bne.n	80157aa <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80157a2:	6a38      	ldr	r0, [r7, #32]
 80157a4:	f7fe fb3e 	bl	8013e24 <dhcp_handle_nak>
 80157a8:	e01a      	b.n	80157e0 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80157aa:	7cfb      	ldrb	r3, [r7, #19]
 80157ac:	2b02      	cmp	r3, #2
 80157ae:	d116      	bne.n	80157de <dhcp_recv+0x17e>
 80157b0:	69fb      	ldr	r3, [r7, #28]
 80157b2:	795b      	ldrb	r3, [r3, #5]
 80157b4:	2b06      	cmp	r3, #6
 80157b6:	d112      	bne.n	80157de <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80157b8:	6979      	ldr	r1, [r7, #20]
 80157ba:	6a38      	ldr	r0, [r7, #32]
 80157bc:	f7fe fb80 	bl	8013ec0 <dhcp_handle_offer>
 80157c0:	e00e      	b.n	80157e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80157c2:	bf00      	nop
 80157c4:	e00c      	b.n	80157e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80157c6:	bf00      	nop
 80157c8:	e00a      	b.n	80157e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80157ca:	bf00      	nop
 80157cc:	e008      	b.n	80157e0 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80157ce:	bf00      	nop
 80157d0:	e006      	b.n	80157e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80157d2:	bf00      	nop
 80157d4:	e004      	b.n	80157e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80157d6:	bf00      	nop
 80157d8:	e002      	b.n	80157e0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80157da:	bf00      	nop
 80157dc:	e000      	b.n	80157e0 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80157de:	bf00      	nop
  pbuf_free(p);
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f7f7 f901 	bl	800c9e8 <pbuf_free>
}
 80157e6:	bf00      	nop
 80157e8:	3728      	adds	r7, #40	; 0x28
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}
 80157ee:	bf00      	nop
 80157f0:	2000ddec 	.word	0x2000ddec
 80157f4:	200115e0 	.word	0x200115e0
 80157f8:	200115c0 	.word	0x200115c0

080157fc <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b088      	sub	sp, #32
 8015800:	af00      	add	r7, sp, #0
 8015802:	60f8      	str	r0, [r7, #12]
 8015804:	60b9      	str	r1, [r7, #8]
 8015806:	603b      	str	r3, [r7, #0]
 8015808:	4613      	mov	r3, r2
 801580a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d108      	bne.n	8015824 <dhcp_create_msg+0x28>
 8015812:	4b5f      	ldr	r3, [pc, #380]	; (8015990 <dhcp_create_msg+0x194>)
 8015814:	f240 7269 	movw	r2, #1897	; 0x769
 8015818:	495e      	ldr	r1, [pc, #376]	; (8015994 <dhcp_create_msg+0x198>)
 801581a:	485f      	ldr	r0, [pc, #380]	; (8015998 <dhcp_create_msg+0x19c>)
 801581c:	f002 fed0 	bl	80185c0 <iprintf>
 8015820:	2300      	movs	r3, #0
 8015822:	e0b1      	b.n	8015988 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015824:	68bb      	ldr	r3, [r7, #8]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d108      	bne.n	801583c <dhcp_create_msg+0x40>
 801582a:	4b59      	ldr	r3, [pc, #356]	; (8015990 <dhcp_create_msg+0x194>)
 801582c:	f240 726a 	movw	r2, #1898	; 0x76a
 8015830:	495a      	ldr	r1, [pc, #360]	; (801599c <dhcp_create_msg+0x1a0>)
 8015832:	4859      	ldr	r0, [pc, #356]	; (8015998 <dhcp_create_msg+0x19c>)
 8015834:	f002 fec4 	bl	80185c0 <iprintf>
 8015838:	2300      	movs	r3, #0
 801583a:	e0a5      	b.n	8015988 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801583c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015840:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015844:	2036      	movs	r0, #54	; 0x36
 8015846:	f7f6 fdeb 	bl	800c420 <pbuf_alloc>
 801584a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801584c:	69bb      	ldr	r3, [r7, #24]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d101      	bne.n	8015856 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015852:	2300      	movs	r3, #0
 8015854:	e098      	b.n	8015988 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015856:	69bb      	ldr	r3, [r7, #24]
 8015858:	895b      	ldrh	r3, [r3, #10]
 801585a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801585e:	d206      	bcs.n	801586e <dhcp_create_msg+0x72>
 8015860:	4b4b      	ldr	r3, [pc, #300]	; (8015990 <dhcp_create_msg+0x194>)
 8015862:	f240 7271 	movw	r2, #1905	; 0x771
 8015866:	494e      	ldr	r1, [pc, #312]	; (80159a0 <dhcp_create_msg+0x1a4>)
 8015868:	484b      	ldr	r0, [pc, #300]	; (8015998 <dhcp_create_msg+0x19c>)
 801586a:	f002 fea9 	bl	80185c0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801586e:	79fb      	ldrb	r3, [r7, #7]
 8015870:	2b03      	cmp	r3, #3
 8015872:	d103      	bne.n	801587c <dhcp_create_msg+0x80>
 8015874:	68bb      	ldr	r3, [r7, #8]
 8015876:	795b      	ldrb	r3, [r3, #5]
 8015878:	2b03      	cmp	r3, #3
 801587a:	d10d      	bne.n	8015898 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801587c:	68bb      	ldr	r3, [r7, #8]
 801587e:	799b      	ldrb	r3, [r3, #6]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d105      	bne.n	8015890 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015884:	f002 fdae 	bl	80183e4 <rand>
 8015888:	4603      	mov	r3, r0
 801588a:	461a      	mov	r2, r3
 801588c:	4b45      	ldr	r3, [pc, #276]	; (80159a4 <dhcp_create_msg+0x1a8>)
 801588e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015890:	4b44      	ldr	r3, [pc, #272]	; (80159a4 <dhcp_create_msg+0x1a8>)
 8015892:	681a      	ldr	r2, [r3, #0]
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015898:	69bb      	ldr	r3, [r7, #24]
 801589a:	685b      	ldr	r3, [r3, #4]
 801589c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801589e:	f44f 729a 	mov.w	r2, #308	; 0x134
 80158a2:	2100      	movs	r1, #0
 80158a4:	6978      	ldr	r0, [r7, #20]
 80158a6:	f002 ff2a 	bl	80186fe <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80158aa:	697b      	ldr	r3, [r7, #20]
 80158ac:	2201      	movs	r2, #1
 80158ae:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80158b0:	697b      	ldr	r3, [r7, #20]
 80158b2:	2201      	movs	r2, #1
 80158b4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	4618      	mov	r0, r3
 80158c6:	f7f5 fc70 	bl	800b1aa <lwip_htonl>
 80158ca:	4602      	mov	r2, r0
 80158cc:	697b      	ldr	r3, [r7, #20]
 80158ce:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80158d0:	79fb      	ldrb	r3, [r7, #7]
 80158d2:	2b08      	cmp	r3, #8
 80158d4:	d010      	beq.n	80158f8 <dhcp_create_msg+0xfc>
 80158d6:	79fb      	ldrb	r3, [r7, #7]
 80158d8:	2b04      	cmp	r3, #4
 80158da:	d00d      	beq.n	80158f8 <dhcp_create_msg+0xfc>
 80158dc:	79fb      	ldrb	r3, [r7, #7]
 80158de:	2b07      	cmp	r3, #7
 80158e0:	d00a      	beq.n	80158f8 <dhcp_create_msg+0xfc>
 80158e2:	79fb      	ldrb	r3, [r7, #7]
 80158e4:	2b03      	cmp	r3, #3
 80158e6:	d10c      	bne.n	8015902 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80158ec:	2b05      	cmp	r3, #5
 80158ee:	d003      	beq.n	80158f8 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	795b      	ldrb	r3, [r3, #5]
 80158f4:	2b04      	cmp	r3, #4
 80158f6:	d104      	bne.n	8015902 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	3304      	adds	r3, #4
 80158fc:	681a      	ldr	r2, [r3, #0]
 80158fe:	697b      	ldr	r3, [r7, #20]
 8015900:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015902:	2300      	movs	r3, #0
 8015904:	83fb      	strh	r3, [r7, #30]
 8015906:	e00c      	b.n	8015922 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015908:	8bfa      	ldrh	r2, [r7, #30]
 801590a:	8bfb      	ldrh	r3, [r7, #30]
 801590c:	68f9      	ldr	r1, [r7, #12]
 801590e:	440a      	add	r2, r1
 8015910:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015914:	697a      	ldr	r2, [r7, #20]
 8015916:	4413      	add	r3, r2
 8015918:	460a      	mov	r2, r1
 801591a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801591c:	8bfb      	ldrh	r3, [r7, #30]
 801591e:	3301      	adds	r3, #1
 8015920:	83fb      	strh	r3, [r7, #30]
 8015922:	8bfb      	ldrh	r3, [r7, #30]
 8015924:	2b05      	cmp	r3, #5
 8015926:	d9ef      	bls.n	8015908 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015928:	697b      	ldr	r3, [r7, #20]
 801592a:	2200      	movs	r2, #0
 801592c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015930:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015934:	2200      	movs	r2, #0
 8015936:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801593a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801593e:	2200      	movs	r2, #0
 8015940:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015944:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015948:	2200      	movs	r2, #0
 801594a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801594e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015958:	2301      	movs	r3, #1
 801595a:	2235      	movs	r2, #53	; 0x35
 801595c:	2000      	movs	r0, #0
 801595e:	f7ff fadb 	bl	8014f18 <dhcp_option>
 8015962:	4603      	mov	r3, r0
 8015964:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015966:	697b      	ldr	r3, [r7, #20]
 8015968:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801596c:	79fa      	ldrb	r2, [r7, #7]
 801596e:	8a7b      	ldrh	r3, [r7, #18]
 8015970:	4618      	mov	r0, r3
 8015972:	f7ff fb05 	bl	8014f80 <dhcp_option_byte>
 8015976:	4603      	mov	r3, r0
 8015978:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d002      	beq.n	8015986 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	8a7a      	ldrh	r2, [r7, #18]
 8015984:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015986:	69bb      	ldr	r3, [r7, #24]
}
 8015988:	4618      	mov	r0, r3
 801598a:	3720      	adds	r7, #32
 801598c:	46bd      	mov	sp, r7
 801598e:	bd80      	pop	{r7, pc}
 8015990:	0801cba0 	.word	0x0801cba0
 8015994:	0801cec0 	.word	0x0801cec0
 8015998:	0801cc00 	.word	0x0801cc00
 801599c:	0801cee0 	.word	0x0801cee0
 80159a0:	0801cf00 	.word	0x0801cf00
 80159a4:	200115f0 	.word	0x200115f0

080159a8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b084      	sub	sp, #16
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	4603      	mov	r3, r0
 80159b0:	60b9      	str	r1, [r7, #8]
 80159b2:	607a      	str	r2, [r7, #4]
 80159b4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80159b6:	89fb      	ldrh	r3, [r7, #14]
 80159b8:	1c5a      	adds	r2, r3, #1
 80159ba:	81fa      	strh	r2, [r7, #14]
 80159bc:	461a      	mov	r2, r3
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	4413      	add	r3, r2
 80159c2:	22ff      	movs	r2, #255	; 0xff
 80159c4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80159c6:	e007      	b.n	80159d8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80159c8:	89fb      	ldrh	r3, [r7, #14]
 80159ca:	1c5a      	adds	r2, r3, #1
 80159cc:	81fa      	strh	r2, [r7, #14]
 80159ce:	461a      	mov	r2, r3
 80159d0:	68bb      	ldr	r3, [r7, #8]
 80159d2:	4413      	add	r3, r2
 80159d4:	2200      	movs	r2, #0
 80159d6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80159d8:	89fb      	ldrh	r3, [r7, #14]
 80159da:	2b43      	cmp	r3, #67	; 0x43
 80159dc:	d904      	bls.n	80159e8 <dhcp_option_trailer+0x40>
 80159de:	89fb      	ldrh	r3, [r7, #14]
 80159e0:	f003 0303 	and.w	r3, r3, #3
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d002      	beq.n	80159ee <dhcp_option_trailer+0x46>
 80159e8:	89fb      	ldrh	r3, [r7, #14]
 80159ea:	2b43      	cmp	r3, #67	; 0x43
 80159ec:	d9ec      	bls.n	80159c8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80159ee:	89fb      	ldrh	r3, [r7, #14]
 80159f0:	33f0      	adds	r3, #240	; 0xf0
 80159f2:	b29b      	uxth	r3, r3
 80159f4:	4619      	mov	r1, r3
 80159f6:	6878      	ldr	r0, [r7, #4]
 80159f8:	f7f6 fe70 	bl	800c6dc <pbuf_realloc>
}
 80159fc:	bf00      	nop
 80159fe:	3710      	adds	r7, #16
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd80      	pop	{r7, pc}

08015a04 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015a04:	b480      	push	{r7}
 8015a06:	b085      	sub	sp, #20
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d017      	beq.n	8015a42 <dhcp_supplied_address+0x3e>
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d013      	beq.n	8015a42 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a1e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	795b      	ldrb	r3, [r3, #5]
 8015a24:	2b0a      	cmp	r3, #10
 8015a26:	d007      	beq.n	8015a38 <dhcp_supplied_address+0x34>
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	795b      	ldrb	r3, [r3, #5]
 8015a2c:	2b05      	cmp	r3, #5
 8015a2e:	d003      	beq.n	8015a38 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015a34:	2b04      	cmp	r3, #4
 8015a36:	d101      	bne.n	8015a3c <dhcp_supplied_address+0x38>
 8015a38:	2301      	movs	r3, #1
 8015a3a:	e000      	b.n	8015a3e <dhcp_supplied_address+0x3a>
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	b2db      	uxtb	r3, r3
 8015a40:	e000      	b.n	8015a44 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015a42:	2300      	movs	r3, #0
}
 8015a44:	4618      	mov	r0, r3
 8015a46:	3714      	adds	r7, #20
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4e:	4770      	bx	lr

08015a50 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b082      	sub	sp, #8
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015a58:	4915      	ldr	r1, [pc, #84]	; (8015ab0 <etharp_free_entry+0x60>)
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	4613      	mov	r3, r2
 8015a5e:	005b      	lsls	r3, r3, #1
 8015a60:	4413      	add	r3, r2
 8015a62:	00db      	lsls	r3, r3, #3
 8015a64:	440b      	add	r3, r1
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d013      	beq.n	8015a94 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015a6c:	4910      	ldr	r1, [pc, #64]	; (8015ab0 <etharp_free_entry+0x60>)
 8015a6e:	687a      	ldr	r2, [r7, #4]
 8015a70:	4613      	mov	r3, r2
 8015a72:	005b      	lsls	r3, r3, #1
 8015a74:	4413      	add	r3, r2
 8015a76:	00db      	lsls	r3, r3, #3
 8015a78:	440b      	add	r3, r1
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f7f6 ffb3 	bl	800c9e8 <pbuf_free>
    arp_table[i].q = NULL;
 8015a82:	490b      	ldr	r1, [pc, #44]	; (8015ab0 <etharp_free_entry+0x60>)
 8015a84:	687a      	ldr	r2, [r7, #4]
 8015a86:	4613      	mov	r3, r2
 8015a88:	005b      	lsls	r3, r3, #1
 8015a8a:	4413      	add	r3, r2
 8015a8c:	00db      	lsls	r3, r3, #3
 8015a8e:	440b      	add	r3, r1
 8015a90:	2200      	movs	r2, #0
 8015a92:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015a94:	4906      	ldr	r1, [pc, #24]	; (8015ab0 <etharp_free_entry+0x60>)
 8015a96:	687a      	ldr	r2, [r7, #4]
 8015a98:	4613      	mov	r3, r2
 8015a9a:	005b      	lsls	r3, r3, #1
 8015a9c:	4413      	add	r3, r2
 8015a9e:	00db      	lsls	r3, r3, #3
 8015aa0:	440b      	add	r3, r1
 8015aa2:	3314      	adds	r3, #20
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015aa8:	bf00      	nop
 8015aaa:	3708      	adds	r7, #8
 8015aac:	46bd      	mov	sp, r7
 8015aae:	bd80      	pop	{r7, pc}
 8015ab0:	200115f4 	.word	0x200115f4

08015ab4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015aba:	2300      	movs	r3, #0
 8015abc:	607b      	str	r3, [r7, #4]
 8015abe:	e096      	b.n	8015bee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015ac0:	494f      	ldr	r1, [pc, #316]	; (8015c00 <etharp_tmr+0x14c>)
 8015ac2:	687a      	ldr	r2, [r7, #4]
 8015ac4:	4613      	mov	r3, r2
 8015ac6:	005b      	lsls	r3, r3, #1
 8015ac8:	4413      	add	r3, r2
 8015aca:	00db      	lsls	r3, r3, #3
 8015acc:	440b      	add	r3, r1
 8015ace:	3314      	adds	r3, #20
 8015ad0:	781b      	ldrb	r3, [r3, #0]
 8015ad2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015ad4:	78fb      	ldrb	r3, [r7, #3]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	f000 8086 	beq.w	8015be8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015adc:	4948      	ldr	r1, [pc, #288]	; (8015c00 <etharp_tmr+0x14c>)
 8015ade:	687a      	ldr	r2, [r7, #4]
 8015ae0:	4613      	mov	r3, r2
 8015ae2:	005b      	lsls	r3, r3, #1
 8015ae4:	4413      	add	r3, r2
 8015ae6:	00db      	lsls	r3, r3, #3
 8015ae8:	440b      	add	r3, r1
 8015aea:	3312      	adds	r3, #18
 8015aec:	881b      	ldrh	r3, [r3, #0]
 8015aee:	3301      	adds	r3, #1
 8015af0:	b298      	uxth	r0, r3
 8015af2:	4943      	ldr	r1, [pc, #268]	; (8015c00 <etharp_tmr+0x14c>)
 8015af4:	687a      	ldr	r2, [r7, #4]
 8015af6:	4613      	mov	r3, r2
 8015af8:	005b      	lsls	r3, r3, #1
 8015afa:	4413      	add	r3, r2
 8015afc:	00db      	lsls	r3, r3, #3
 8015afe:	440b      	add	r3, r1
 8015b00:	3312      	adds	r3, #18
 8015b02:	4602      	mov	r2, r0
 8015b04:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015b06:	493e      	ldr	r1, [pc, #248]	; (8015c00 <etharp_tmr+0x14c>)
 8015b08:	687a      	ldr	r2, [r7, #4]
 8015b0a:	4613      	mov	r3, r2
 8015b0c:	005b      	lsls	r3, r3, #1
 8015b0e:	4413      	add	r3, r2
 8015b10:	00db      	lsls	r3, r3, #3
 8015b12:	440b      	add	r3, r1
 8015b14:	3312      	adds	r3, #18
 8015b16:	881b      	ldrh	r3, [r3, #0]
 8015b18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015b1c:	d215      	bcs.n	8015b4a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015b1e:	4938      	ldr	r1, [pc, #224]	; (8015c00 <etharp_tmr+0x14c>)
 8015b20:	687a      	ldr	r2, [r7, #4]
 8015b22:	4613      	mov	r3, r2
 8015b24:	005b      	lsls	r3, r3, #1
 8015b26:	4413      	add	r3, r2
 8015b28:	00db      	lsls	r3, r3, #3
 8015b2a:	440b      	add	r3, r1
 8015b2c:	3314      	adds	r3, #20
 8015b2e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015b30:	2b01      	cmp	r3, #1
 8015b32:	d10e      	bne.n	8015b52 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015b34:	4932      	ldr	r1, [pc, #200]	; (8015c00 <etharp_tmr+0x14c>)
 8015b36:	687a      	ldr	r2, [r7, #4]
 8015b38:	4613      	mov	r3, r2
 8015b3a:	005b      	lsls	r3, r3, #1
 8015b3c:	4413      	add	r3, r2
 8015b3e:	00db      	lsls	r3, r3, #3
 8015b40:	440b      	add	r3, r1
 8015b42:	3312      	adds	r3, #18
 8015b44:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015b46:	2b04      	cmp	r3, #4
 8015b48:	d903      	bls.n	8015b52 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015b4a:	6878      	ldr	r0, [r7, #4]
 8015b4c:	f7ff ff80 	bl	8015a50 <etharp_free_entry>
 8015b50:	e04a      	b.n	8015be8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015b52:	492b      	ldr	r1, [pc, #172]	; (8015c00 <etharp_tmr+0x14c>)
 8015b54:	687a      	ldr	r2, [r7, #4]
 8015b56:	4613      	mov	r3, r2
 8015b58:	005b      	lsls	r3, r3, #1
 8015b5a:	4413      	add	r3, r2
 8015b5c:	00db      	lsls	r3, r3, #3
 8015b5e:	440b      	add	r3, r1
 8015b60:	3314      	adds	r3, #20
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	2b03      	cmp	r3, #3
 8015b66:	d10a      	bne.n	8015b7e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015b68:	4925      	ldr	r1, [pc, #148]	; (8015c00 <etharp_tmr+0x14c>)
 8015b6a:	687a      	ldr	r2, [r7, #4]
 8015b6c:	4613      	mov	r3, r2
 8015b6e:	005b      	lsls	r3, r3, #1
 8015b70:	4413      	add	r3, r2
 8015b72:	00db      	lsls	r3, r3, #3
 8015b74:	440b      	add	r3, r1
 8015b76:	3314      	adds	r3, #20
 8015b78:	2204      	movs	r2, #4
 8015b7a:	701a      	strb	r2, [r3, #0]
 8015b7c:	e034      	b.n	8015be8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015b7e:	4920      	ldr	r1, [pc, #128]	; (8015c00 <etharp_tmr+0x14c>)
 8015b80:	687a      	ldr	r2, [r7, #4]
 8015b82:	4613      	mov	r3, r2
 8015b84:	005b      	lsls	r3, r3, #1
 8015b86:	4413      	add	r3, r2
 8015b88:	00db      	lsls	r3, r3, #3
 8015b8a:	440b      	add	r3, r1
 8015b8c:	3314      	adds	r3, #20
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	2b04      	cmp	r3, #4
 8015b92:	d10a      	bne.n	8015baa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015b94:	491a      	ldr	r1, [pc, #104]	; (8015c00 <etharp_tmr+0x14c>)
 8015b96:	687a      	ldr	r2, [r7, #4]
 8015b98:	4613      	mov	r3, r2
 8015b9a:	005b      	lsls	r3, r3, #1
 8015b9c:	4413      	add	r3, r2
 8015b9e:	00db      	lsls	r3, r3, #3
 8015ba0:	440b      	add	r3, r1
 8015ba2:	3314      	adds	r3, #20
 8015ba4:	2202      	movs	r2, #2
 8015ba6:	701a      	strb	r2, [r3, #0]
 8015ba8:	e01e      	b.n	8015be8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015baa:	4915      	ldr	r1, [pc, #84]	; (8015c00 <etharp_tmr+0x14c>)
 8015bac:	687a      	ldr	r2, [r7, #4]
 8015bae:	4613      	mov	r3, r2
 8015bb0:	005b      	lsls	r3, r3, #1
 8015bb2:	4413      	add	r3, r2
 8015bb4:	00db      	lsls	r3, r3, #3
 8015bb6:	440b      	add	r3, r1
 8015bb8:	3314      	adds	r3, #20
 8015bba:	781b      	ldrb	r3, [r3, #0]
 8015bbc:	2b01      	cmp	r3, #1
 8015bbe:	d113      	bne.n	8015be8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015bc0:	490f      	ldr	r1, [pc, #60]	; (8015c00 <etharp_tmr+0x14c>)
 8015bc2:	687a      	ldr	r2, [r7, #4]
 8015bc4:	4613      	mov	r3, r2
 8015bc6:	005b      	lsls	r3, r3, #1
 8015bc8:	4413      	add	r3, r2
 8015bca:	00db      	lsls	r3, r3, #3
 8015bcc:	440b      	add	r3, r1
 8015bce:	3308      	adds	r3, #8
 8015bd0:	6818      	ldr	r0, [r3, #0]
 8015bd2:	687a      	ldr	r2, [r7, #4]
 8015bd4:	4613      	mov	r3, r2
 8015bd6:	005b      	lsls	r3, r3, #1
 8015bd8:	4413      	add	r3, r2
 8015bda:	00db      	lsls	r3, r3, #3
 8015bdc:	4a08      	ldr	r2, [pc, #32]	; (8015c00 <etharp_tmr+0x14c>)
 8015bde:	4413      	add	r3, r2
 8015be0:	3304      	adds	r3, #4
 8015be2:	4619      	mov	r1, r3
 8015be4:	f000 fe72 	bl	80168cc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	3301      	adds	r3, #1
 8015bec:	607b      	str	r3, [r7, #4]
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2b09      	cmp	r3, #9
 8015bf2:	f77f af65 	ble.w	8015ac0 <etharp_tmr+0xc>
      }
    }
  }
}
 8015bf6:	bf00      	nop
 8015bf8:	bf00      	nop
 8015bfa:	3708      	adds	r7, #8
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd80      	pop	{r7, pc}
 8015c00:	200115f4 	.word	0x200115f4

08015c04 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b08a      	sub	sp, #40	; 0x28
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	60f8      	str	r0, [r7, #12]
 8015c0c:	460b      	mov	r3, r1
 8015c0e:	607a      	str	r2, [r7, #4]
 8015c10:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015c12:	230a      	movs	r3, #10
 8015c14:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015c16:	230a      	movs	r3, #10
 8015c18:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015c1a:	230a      	movs	r3, #10
 8015c1c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015c22:	230a      	movs	r3, #10
 8015c24:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015c26:	2300      	movs	r3, #0
 8015c28:	83bb      	strh	r3, [r7, #28]
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	837b      	strh	r3, [r7, #26]
 8015c2e:	2300      	movs	r3, #0
 8015c30:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015c32:	2300      	movs	r3, #0
 8015c34:	843b      	strh	r3, [r7, #32]
 8015c36:	e0ae      	b.n	8015d96 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015c38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c3c:	49a6      	ldr	r1, [pc, #664]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015c3e:	4613      	mov	r3, r2
 8015c40:	005b      	lsls	r3, r3, #1
 8015c42:	4413      	add	r3, r2
 8015c44:	00db      	lsls	r3, r3, #3
 8015c46:	440b      	add	r3, r1
 8015c48:	3314      	adds	r3, #20
 8015c4a:	781b      	ldrb	r3, [r3, #0]
 8015c4c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015c4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015c52:	2b0a      	cmp	r3, #10
 8015c54:	d105      	bne.n	8015c62 <etharp_find_entry+0x5e>
 8015c56:	7dfb      	ldrb	r3, [r7, #23]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d102      	bne.n	8015c62 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015c5c:	8c3b      	ldrh	r3, [r7, #32]
 8015c5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015c60:	e095      	b.n	8015d8e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015c62:	7dfb      	ldrb	r3, [r7, #23]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	f000 8092 	beq.w	8015d8e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015c6a:	7dfb      	ldrb	r3, [r7, #23]
 8015c6c:	2b01      	cmp	r3, #1
 8015c6e:	d009      	beq.n	8015c84 <etharp_find_entry+0x80>
 8015c70:	7dfb      	ldrb	r3, [r7, #23]
 8015c72:	2b01      	cmp	r3, #1
 8015c74:	d806      	bhi.n	8015c84 <etharp_find_entry+0x80>
 8015c76:	4b99      	ldr	r3, [pc, #612]	; (8015edc <etharp_find_entry+0x2d8>)
 8015c78:	f240 1223 	movw	r2, #291	; 0x123
 8015c7c:	4998      	ldr	r1, [pc, #608]	; (8015ee0 <etharp_find_entry+0x2dc>)
 8015c7e:	4899      	ldr	r0, [pc, #612]	; (8015ee4 <etharp_find_entry+0x2e0>)
 8015c80:	f002 fc9e 	bl	80185c0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d020      	beq.n	8015ccc <etharp_find_entry+0xc8>
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	6819      	ldr	r1, [r3, #0]
 8015c8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c92:	4891      	ldr	r0, [pc, #580]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015c94:	4613      	mov	r3, r2
 8015c96:	005b      	lsls	r3, r3, #1
 8015c98:	4413      	add	r3, r2
 8015c9a:	00db      	lsls	r3, r3, #3
 8015c9c:	4403      	add	r3, r0
 8015c9e:	3304      	adds	r3, #4
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	4299      	cmp	r1, r3
 8015ca4:	d112      	bne.n	8015ccc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d00c      	beq.n	8015cc6 <etharp_find_entry+0xc2>
 8015cac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cb0:	4989      	ldr	r1, [pc, #548]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015cb2:	4613      	mov	r3, r2
 8015cb4:	005b      	lsls	r3, r3, #1
 8015cb6:	4413      	add	r3, r2
 8015cb8:	00db      	lsls	r3, r3, #3
 8015cba:	440b      	add	r3, r1
 8015cbc:	3308      	adds	r3, #8
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	687a      	ldr	r2, [r7, #4]
 8015cc2:	429a      	cmp	r2, r3
 8015cc4:	d102      	bne.n	8015ccc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015cc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015cca:	e100      	b.n	8015ece <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015ccc:	7dfb      	ldrb	r3, [r7, #23]
 8015cce:	2b01      	cmp	r3, #1
 8015cd0:	d140      	bne.n	8015d54 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015cd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cd6:	4980      	ldr	r1, [pc, #512]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015cd8:	4613      	mov	r3, r2
 8015cda:	005b      	lsls	r3, r3, #1
 8015cdc:	4413      	add	r3, r2
 8015cde:	00db      	lsls	r3, r3, #3
 8015ce0:	440b      	add	r3, r1
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d01a      	beq.n	8015d1e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015ce8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cec:	497a      	ldr	r1, [pc, #488]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015cee:	4613      	mov	r3, r2
 8015cf0:	005b      	lsls	r3, r3, #1
 8015cf2:	4413      	add	r3, r2
 8015cf4:	00db      	lsls	r3, r3, #3
 8015cf6:	440b      	add	r3, r1
 8015cf8:	3312      	adds	r3, #18
 8015cfa:	881b      	ldrh	r3, [r3, #0]
 8015cfc:	8bba      	ldrh	r2, [r7, #28]
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d845      	bhi.n	8015d8e <etharp_find_entry+0x18a>
            old_queue = i;
 8015d02:	8c3b      	ldrh	r3, [r7, #32]
 8015d04:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015d06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d0a:	4973      	ldr	r1, [pc, #460]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015d0c:	4613      	mov	r3, r2
 8015d0e:	005b      	lsls	r3, r3, #1
 8015d10:	4413      	add	r3, r2
 8015d12:	00db      	lsls	r3, r3, #3
 8015d14:	440b      	add	r3, r1
 8015d16:	3312      	adds	r3, #18
 8015d18:	881b      	ldrh	r3, [r3, #0]
 8015d1a:	83bb      	strh	r3, [r7, #28]
 8015d1c:	e037      	b.n	8015d8e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015d1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d22:	496d      	ldr	r1, [pc, #436]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015d24:	4613      	mov	r3, r2
 8015d26:	005b      	lsls	r3, r3, #1
 8015d28:	4413      	add	r3, r2
 8015d2a:	00db      	lsls	r3, r3, #3
 8015d2c:	440b      	add	r3, r1
 8015d2e:	3312      	adds	r3, #18
 8015d30:	881b      	ldrh	r3, [r3, #0]
 8015d32:	8b7a      	ldrh	r2, [r7, #26]
 8015d34:	429a      	cmp	r2, r3
 8015d36:	d82a      	bhi.n	8015d8e <etharp_find_entry+0x18a>
            old_pending = i;
 8015d38:	8c3b      	ldrh	r3, [r7, #32]
 8015d3a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015d3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d40:	4965      	ldr	r1, [pc, #404]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015d42:	4613      	mov	r3, r2
 8015d44:	005b      	lsls	r3, r3, #1
 8015d46:	4413      	add	r3, r2
 8015d48:	00db      	lsls	r3, r3, #3
 8015d4a:	440b      	add	r3, r1
 8015d4c:	3312      	adds	r3, #18
 8015d4e:	881b      	ldrh	r3, [r3, #0]
 8015d50:	837b      	strh	r3, [r7, #26]
 8015d52:	e01c      	b.n	8015d8e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015d54:	7dfb      	ldrb	r3, [r7, #23]
 8015d56:	2b01      	cmp	r3, #1
 8015d58:	d919      	bls.n	8015d8e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015d5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d5e:	495e      	ldr	r1, [pc, #376]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015d60:	4613      	mov	r3, r2
 8015d62:	005b      	lsls	r3, r3, #1
 8015d64:	4413      	add	r3, r2
 8015d66:	00db      	lsls	r3, r3, #3
 8015d68:	440b      	add	r3, r1
 8015d6a:	3312      	adds	r3, #18
 8015d6c:	881b      	ldrh	r3, [r3, #0]
 8015d6e:	8b3a      	ldrh	r2, [r7, #24]
 8015d70:	429a      	cmp	r2, r3
 8015d72:	d80c      	bhi.n	8015d8e <etharp_find_entry+0x18a>
            old_stable = i;
 8015d74:	8c3b      	ldrh	r3, [r7, #32]
 8015d76:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015d78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d7c:	4956      	ldr	r1, [pc, #344]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015d7e:	4613      	mov	r3, r2
 8015d80:	005b      	lsls	r3, r3, #1
 8015d82:	4413      	add	r3, r2
 8015d84:	00db      	lsls	r3, r3, #3
 8015d86:	440b      	add	r3, r1
 8015d88:	3312      	adds	r3, #18
 8015d8a:	881b      	ldrh	r3, [r3, #0]
 8015d8c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d8e:	8c3b      	ldrh	r3, [r7, #32]
 8015d90:	3301      	adds	r3, #1
 8015d92:	b29b      	uxth	r3, r3
 8015d94:	843b      	strh	r3, [r7, #32]
 8015d96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d9a:	2b09      	cmp	r3, #9
 8015d9c:	f77f af4c 	ble.w	8015c38 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015da0:	7afb      	ldrb	r3, [r7, #11]
 8015da2:	f003 0302 	and.w	r3, r3, #2
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d108      	bne.n	8015dbc <etharp_find_entry+0x1b8>
 8015daa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015dae:	2b0a      	cmp	r3, #10
 8015db0:	d107      	bne.n	8015dc2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015db2:	7afb      	ldrb	r3, [r7, #11]
 8015db4:	f003 0301 	and.w	r3, r3, #1
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d102      	bne.n	8015dc2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8015dc0:	e085      	b.n	8015ece <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015dc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015dc6:	2b09      	cmp	r3, #9
 8015dc8:	dc02      	bgt.n	8015dd0 <etharp_find_entry+0x1cc>
    i = empty;
 8015dca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015dcc:	843b      	strh	r3, [r7, #32]
 8015dce:	e039      	b.n	8015e44 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015dd0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015dd4:	2b09      	cmp	r3, #9
 8015dd6:	dc14      	bgt.n	8015e02 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015dd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015dda:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015ddc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015de0:	493d      	ldr	r1, [pc, #244]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015de2:	4613      	mov	r3, r2
 8015de4:	005b      	lsls	r3, r3, #1
 8015de6:	4413      	add	r3, r2
 8015de8:	00db      	lsls	r3, r3, #3
 8015dea:	440b      	add	r3, r1
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d018      	beq.n	8015e24 <etharp_find_entry+0x220>
 8015df2:	4b3a      	ldr	r3, [pc, #232]	; (8015edc <etharp_find_entry+0x2d8>)
 8015df4:	f240 126d 	movw	r2, #365	; 0x16d
 8015df8:	493b      	ldr	r1, [pc, #236]	; (8015ee8 <etharp_find_entry+0x2e4>)
 8015dfa:	483a      	ldr	r0, [pc, #232]	; (8015ee4 <etharp_find_entry+0x2e0>)
 8015dfc:	f002 fbe0 	bl	80185c0 <iprintf>
 8015e00:	e010      	b.n	8015e24 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015e02:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015e06:	2b09      	cmp	r3, #9
 8015e08:	dc02      	bgt.n	8015e10 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015e0c:	843b      	strh	r3, [r7, #32]
 8015e0e:	e009      	b.n	8015e24 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015e10:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015e14:	2b09      	cmp	r3, #9
 8015e16:	dc02      	bgt.n	8015e1e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015e18:	8bfb      	ldrh	r3, [r7, #30]
 8015e1a:	843b      	strh	r3, [r7, #32]
 8015e1c:	e002      	b.n	8015e24 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015e22:	e054      	b.n	8015ece <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015e24:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015e28:	2b09      	cmp	r3, #9
 8015e2a:	dd06      	ble.n	8015e3a <etharp_find_entry+0x236>
 8015e2c:	4b2b      	ldr	r3, [pc, #172]	; (8015edc <etharp_find_entry+0x2d8>)
 8015e2e:	f240 127f 	movw	r2, #383	; 0x17f
 8015e32:	492e      	ldr	r1, [pc, #184]	; (8015eec <etharp_find_entry+0x2e8>)
 8015e34:	482b      	ldr	r0, [pc, #172]	; (8015ee4 <etharp_find_entry+0x2e0>)
 8015e36:	f002 fbc3 	bl	80185c0 <iprintf>
    etharp_free_entry(i);
 8015e3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015e3e:	4618      	mov	r0, r3
 8015e40:	f7ff fe06 	bl	8015a50 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015e44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015e48:	2b09      	cmp	r3, #9
 8015e4a:	dd06      	ble.n	8015e5a <etharp_find_entry+0x256>
 8015e4c:	4b23      	ldr	r3, [pc, #140]	; (8015edc <etharp_find_entry+0x2d8>)
 8015e4e:	f240 1283 	movw	r2, #387	; 0x183
 8015e52:	4926      	ldr	r1, [pc, #152]	; (8015eec <etharp_find_entry+0x2e8>)
 8015e54:	4823      	ldr	r0, [pc, #140]	; (8015ee4 <etharp_find_entry+0x2e0>)
 8015e56:	f002 fbb3 	bl	80185c0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015e5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e5e:	491e      	ldr	r1, [pc, #120]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015e60:	4613      	mov	r3, r2
 8015e62:	005b      	lsls	r3, r3, #1
 8015e64:	4413      	add	r3, r2
 8015e66:	00db      	lsls	r3, r3, #3
 8015e68:	440b      	add	r3, r1
 8015e6a:	3314      	adds	r3, #20
 8015e6c:	781b      	ldrb	r3, [r3, #0]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d006      	beq.n	8015e80 <etharp_find_entry+0x27c>
 8015e72:	4b1a      	ldr	r3, [pc, #104]	; (8015edc <etharp_find_entry+0x2d8>)
 8015e74:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015e78:	491d      	ldr	r1, [pc, #116]	; (8015ef0 <etharp_find_entry+0x2ec>)
 8015e7a:	481a      	ldr	r0, [pc, #104]	; (8015ee4 <etharp_find_entry+0x2e0>)
 8015e7c:	f002 fba0 	bl	80185c0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d00b      	beq.n	8015e9e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015e86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	6819      	ldr	r1, [r3, #0]
 8015e8e:	4812      	ldr	r0, [pc, #72]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015e90:	4613      	mov	r3, r2
 8015e92:	005b      	lsls	r3, r3, #1
 8015e94:	4413      	add	r3, r2
 8015e96:	00db      	lsls	r3, r3, #3
 8015e98:	4403      	add	r3, r0
 8015e9a:	3304      	adds	r3, #4
 8015e9c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015e9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ea2:	490d      	ldr	r1, [pc, #52]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015ea4:	4613      	mov	r3, r2
 8015ea6:	005b      	lsls	r3, r3, #1
 8015ea8:	4413      	add	r3, r2
 8015eaa:	00db      	lsls	r3, r3, #3
 8015eac:	440b      	add	r3, r1
 8015eae:	3312      	adds	r3, #18
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015eb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015eb8:	4907      	ldr	r1, [pc, #28]	; (8015ed8 <etharp_find_entry+0x2d4>)
 8015eba:	4613      	mov	r3, r2
 8015ebc:	005b      	lsls	r3, r3, #1
 8015ebe:	4413      	add	r3, r2
 8015ec0:	00db      	lsls	r3, r3, #3
 8015ec2:	440b      	add	r3, r1
 8015ec4:	3308      	adds	r3, #8
 8015ec6:	687a      	ldr	r2, [r7, #4]
 8015ec8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015eca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	3728      	adds	r7, #40	; 0x28
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}
 8015ed6:	bf00      	nop
 8015ed8:	200115f4 	.word	0x200115f4
 8015edc:	0801cf40 	.word	0x0801cf40
 8015ee0:	0801cf78 	.word	0x0801cf78
 8015ee4:	0801cfb8 	.word	0x0801cfb8
 8015ee8:	0801cfe0 	.word	0x0801cfe0
 8015eec:	0801cff8 	.word	0x0801cff8
 8015ef0:	0801d00c 	.word	0x0801d00c

08015ef4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b088      	sub	sp, #32
 8015ef8:	af02      	add	r7, sp, #8
 8015efa:	60f8      	str	r0, [r7, #12]
 8015efc:	60b9      	str	r1, [r7, #8]
 8015efe:	607a      	str	r2, [r7, #4]
 8015f00:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015f08:	2b06      	cmp	r3, #6
 8015f0a:	d006      	beq.n	8015f1a <etharp_update_arp_entry+0x26>
 8015f0c:	4b48      	ldr	r3, [pc, #288]	; (8016030 <etharp_update_arp_entry+0x13c>)
 8015f0e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015f12:	4948      	ldr	r1, [pc, #288]	; (8016034 <etharp_update_arp_entry+0x140>)
 8015f14:	4848      	ldr	r0, [pc, #288]	; (8016038 <etharp_update_arp_entry+0x144>)
 8015f16:	f002 fb53 	bl	80185c0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d012      	beq.n	8015f46 <etharp_update_arp_entry+0x52>
 8015f20:	68bb      	ldr	r3, [r7, #8]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d00e      	beq.n	8015f46 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015f28:	68bb      	ldr	r3, [r7, #8]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	68f9      	ldr	r1, [r7, #12]
 8015f2e:	4618      	mov	r0, r3
 8015f30:	f001 f920 	bl	8017174 <ip4_addr_isbroadcast_u32>
 8015f34:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d105      	bne.n	8015f46 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015f42:	2be0      	cmp	r3, #224	; 0xe0
 8015f44:	d102      	bne.n	8015f4c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015f46:	f06f 030f 	mvn.w	r3, #15
 8015f4a:	e06c      	b.n	8016026 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015f4c:	78fb      	ldrb	r3, [r7, #3]
 8015f4e:	68fa      	ldr	r2, [r7, #12]
 8015f50:	4619      	mov	r1, r3
 8015f52:	68b8      	ldr	r0, [r7, #8]
 8015f54:	f7ff fe56 	bl	8015c04 <etharp_find_entry>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015f5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	da02      	bge.n	8015f6a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015f64:	8afb      	ldrh	r3, [r7, #22]
 8015f66:	b25b      	sxtb	r3, r3
 8015f68:	e05d      	b.n	8016026 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015f6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f6e:	4933      	ldr	r1, [pc, #204]	; (801603c <etharp_update_arp_entry+0x148>)
 8015f70:	4613      	mov	r3, r2
 8015f72:	005b      	lsls	r3, r3, #1
 8015f74:	4413      	add	r3, r2
 8015f76:	00db      	lsls	r3, r3, #3
 8015f78:	440b      	add	r3, r1
 8015f7a:	3314      	adds	r3, #20
 8015f7c:	2202      	movs	r2, #2
 8015f7e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015f80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f84:	492d      	ldr	r1, [pc, #180]	; (801603c <etharp_update_arp_entry+0x148>)
 8015f86:	4613      	mov	r3, r2
 8015f88:	005b      	lsls	r3, r3, #1
 8015f8a:	4413      	add	r3, r2
 8015f8c:	00db      	lsls	r3, r3, #3
 8015f8e:	440b      	add	r3, r1
 8015f90:	3308      	adds	r3, #8
 8015f92:	68fa      	ldr	r2, [r7, #12]
 8015f94:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015f96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f9a:	4613      	mov	r3, r2
 8015f9c:	005b      	lsls	r3, r3, #1
 8015f9e:	4413      	add	r3, r2
 8015fa0:	00db      	lsls	r3, r3, #3
 8015fa2:	3308      	adds	r3, #8
 8015fa4:	4a25      	ldr	r2, [pc, #148]	; (801603c <etharp_update_arp_entry+0x148>)
 8015fa6:	4413      	add	r3, r2
 8015fa8:	3304      	adds	r3, #4
 8015faa:	2206      	movs	r2, #6
 8015fac:	6879      	ldr	r1, [r7, #4]
 8015fae:	4618      	mov	r0, r3
 8015fb0:	f002 fd06 	bl	80189c0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015fb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015fb8:	4920      	ldr	r1, [pc, #128]	; (801603c <etharp_update_arp_entry+0x148>)
 8015fba:	4613      	mov	r3, r2
 8015fbc:	005b      	lsls	r3, r3, #1
 8015fbe:	4413      	add	r3, r2
 8015fc0:	00db      	lsls	r3, r3, #3
 8015fc2:	440b      	add	r3, r1
 8015fc4:	3312      	adds	r3, #18
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015fca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015fce:	491b      	ldr	r1, [pc, #108]	; (801603c <etharp_update_arp_entry+0x148>)
 8015fd0:	4613      	mov	r3, r2
 8015fd2:	005b      	lsls	r3, r3, #1
 8015fd4:	4413      	add	r3, r2
 8015fd6:	00db      	lsls	r3, r3, #3
 8015fd8:	440b      	add	r3, r1
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d021      	beq.n	8016024 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015fe0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015fe4:	4915      	ldr	r1, [pc, #84]	; (801603c <etharp_update_arp_entry+0x148>)
 8015fe6:	4613      	mov	r3, r2
 8015fe8:	005b      	lsls	r3, r3, #1
 8015fea:	4413      	add	r3, r2
 8015fec:	00db      	lsls	r3, r3, #3
 8015fee:	440b      	add	r3, r1
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015ff4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ff8:	4910      	ldr	r1, [pc, #64]	; (801603c <etharp_update_arp_entry+0x148>)
 8015ffa:	4613      	mov	r3, r2
 8015ffc:	005b      	lsls	r3, r3, #1
 8015ffe:	4413      	add	r3, r2
 8016000:	00db      	lsls	r3, r3, #3
 8016002:	440b      	add	r3, r1
 8016004:	2200      	movs	r2, #0
 8016006:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801600e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016012:	9300      	str	r3, [sp, #0]
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6939      	ldr	r1, [r7, #16]
 8016018:	68f8      	ldr	r0, [r7, #12]
 801601a:	f001 ffb9 	bl	8017f90 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801601e:	6938      	ldr	r0, [r7, #16]
 8016020:	f7f6 fce2 	bl	800c9e8 <pbuf_free>
  }
  return ERR_OK;
 8016024:	2300      	movs	r3, #0
}
 8016026:	4618      	mov	r0, r3
 8016028:	3718      	adds	r7, #24
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}
 801602e:	bf00      	nop
 8016030:	0801cf40 	.word	0x0801cf40
 8016034:	0801d038 	.word	0x0801d038
 8016038:	0801cfb8 	.word	0x0801cfb8
 801603c:	200115f4 	.word	0x200115f4

08016040 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b084      	sub	sp, #16
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016048:	2300      	movs	r3, #0
 801604a:	60fb      	str	r3, [r7, #12]
 801604c:	e01e      	b.n	801608c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801604e:	4913      	ldr	r1, [pc, #76]	; (801609c <etharp_cleanup_netif+0x5c>)
 8016050:	68fa      	ldr	r2, [r7, #12]
 8016052:	4613      	mov	r3, r2
 8016054:	005b      	lsls	r3, r3, #1
 8016056:	4413      	add	r3, r2
 8016058:	00db      	lsls	r3, r3, #3
 801605a:	440b      	add	r3, r1
 801605c:	3314      	adds	r3, #20
 801605e:	781b      	ldrb	r3, [r3, #0]
 8016060:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016062:	7afb      	ldrb	r3, [r7, #11]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d00e      	beq.n	8016086 <etharp_cleanup_netif+0x46>
 8016068:	490c      	ldr	r1, [pc, #48]	; (801609c <etharp_cleanup_netif+0x5c>)
 801606a:	68fa      	ldr	r2, [r7, #12]
 801606c:	4613      	mov	r3, r2
 801606e:	005b      	lsls	r3, r3, #1
 8016070:	4413      	add	r3, r2
 8016072:	00db      	lsls	r3, r3, #3
 8016074:	440b      	add	r3, r1
 8016076:	3308      	adds	r3, #8
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	687a      	ldr	r2, [r7, #4]
 801607c:	429a      	cmp	r2, r3
 801607e:	d102      	bne.n	8016086 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016080:	68f8      	ldr	r0, [r7, #12]
 8016082:	f7ff fce5 	bl	8015a50 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	3301      	adds	r3, #1
 801608a:	60fb      	str	r3, [r7, #12]
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	2b09      	cmp	r3, #9
 8016090:	dddd      	ble.n	801604e <etharp_cleanup_netif+0xe>
    }
  }
}
 8016092:	bf00      	nop
 8016094:	bf00      	nop
 8016096:	3710      	adds	r7, #16
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}
 801609c:	200115f4 	.word	0x200115f4

080160a0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80160a0:	b5b0      	push	{r4, r5, r7, lr}
 80160a2:	b08a      	sub	sp, #40	; 0x28
 80160a4:	af04      	add	r7, sp, #16
 80160a6:	6078      	str	r0, [r7, #4]
 80160a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80160aa:	683b      	ldr	r3, [r7, #0]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d107      	bne.n	80160c0 <etharp_input+0x20>
 80160b0:	4b3f      	ldr	r3, [pc, #252]	; (80161b0 <etharp_input+0x110>)
 80160b2:	f240 228a 	movw	r2, #650	; 0x28a
 80160b6:	493f      	ldr	r1, [pc, #252]	; (80161b4 <etharp_input+0x114>)
 80160b8:	483f      	ldr	r0, [pc, #252]	; (80161b8 <etharp_input+0x118>)
 80160ba:	f002 fa81 	bl	80185c0 <iprintf>
 80160be:	e074      	b.n	80161aa <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	685b      	ldr	r3, [r3, #4]
 80160c4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80160c6:	693b      	ldr	r3, [r7, #16]
 80160c8:	881b      	ldrh	r3, [r3, #0]
 80160ca:	b29b      	uxth	r3, r3
 80160cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160d0:	d10c      	bne.n	80160ec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80160d6:	2b06      	cmp	r3, #6
 80160d8:	d108      	bne.n	80160ec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80160da:	693b      	ldr	r3, [r7, #16]
 80160dc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80160de:	2b04      	cmp	r3, #4
 80160e0:	d104      	bne.n	80160ec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80160e2:	693b      	ldr	r3, [r7, #16]
 80160e4:	885b      	ldrh	r3, [r3, #2]
 80160e6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80160e8:	2b08      	cmp	r3, #8
 80160ea:	d003      	beq.n	80160f4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f7f6 fc7b 	bl	800c9e8 <pbuf_free>
    return;
 80160f2:	e05a      	b.n	80161aa <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80160f4:	693b      	ldr	r3, [r7, #16]
 80160f6:	330e      	adds	r3, #14
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80160fc:	693b      	ldr	r3, [r7, #16]
 80160fe:	3318      	adds	r3, #24
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016104:	683b      	ldr	r3, [r7, #0]
 8016106:	3304      	adds	r3, #4
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d102      	bne.n	8016114 <etharp_input+0x74>
    for_us = 0;
 801610e:	2300      	movs	r3, #0
 8016110:	75fb      	strb	r3, [r7, #23]
 8016112:	e009      	b.n	8016128 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016114:	68ba      	ldr	r2, [r7, #8]
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	3304      	adds	r3, #4
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	429a      	cmp	r2, r3
 801611e:	bf0c      	ite	eq
 8016120:	2301      	moveq	r3, #1
 8016122:	2300      	movne	r3, #0
 8016124:	b2db      	uxtb	r3, r3
 8016126:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016128:	693b      	ldr	r3, [r7, #16]
 801612a:	f103 0208 	add.w	r2, r3, #8
 801612e:	7dfb      	ldrb	r3, [r7, #23]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d001      	beq.n	8016138 <etharp_input+0x98>
 8016134:	2301      	movs	r3, #1
 8016136:	e000      	b.n	801613a <etharp_input+0x9a>
 8016138:	2302      	movs	r3, #2
 801613a:	f107 010c 	add.w	r1, r7, #12
 801613e:	6838      	ldr	r0, [r7, #0]
 8016140:	f7ff fed8 	bl	8015ef4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016144:	693b      	ldr	r3, [r7, #16]
 8016146:	88db      	ldrh	r3, [r3, #6]
 8016148:	b29b      	uxth	r3, r3
 801614a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801614e:	d003      	beq.n	8016158 <etharp_input+0xb8>
 8016150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016154:	d01e      	beq.n	8016194 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016156:	e025      	b.n	80161a4 <etharp_input+0x104>
      if (for_us) {
 8016158:	7dfb      	ldrb	r3, [r7, #23]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d021      	beq.n	80161a2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801615e:	683b      	ldr	r3, [r7, #0]
 8016160:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016164:	693b      	ldr	r3, [r7, #16]
 8016166:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801616a:	683b      	ldr	r3, [r7, #0]
 801616c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016174:	693a      	ldr	r2, [r7, #16]
 8016176:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016178:	2102      	movs	r1, #2
 801617a:	9103      	str	r1, [sp, #12]
 801617c:	f107 010c 	add.w	r1, r7, #12
 8016180:	9102      	str	r1, [sp, #8]
 8016182:	9201      	str	r2, [sp, #4]
 8016184:	9300      	str	r3, [sp, #0]
 8016186:	462b      	mov	r3, r5
 8016188:	4622      	mov	r2, r4
 801618a:	4601      	mov	r1, r0
 801618c:	6838      	ldr	r0, [r7, #0]
 801618e:	f000 faef 	bl	8016770 <etharp_raw>
      break;
 8016192:	e006      	b.n	80161a2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016194:	f107 030c 	add.w	r3, r7, #12
 8016198:	4619      	mov	r1, r3
 801619a:	6838      	ldr	r0, [r7, #0]
 801619c:	f7fe f9fc 	bl	8014598 <dhcp_arp_reply>
      break;
 80161a0:	e000      	b.n	80161a4 <etharp_input+0x104>
      break;
 80161a2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f7f6 fc1f 	bl	800c9e8 <pbuf_free>
}
 80161aa:	3718      	adds	r7, #24
 80161ac:	46bd      	mov	sp, r7
 80161ae:	bdb0      	pop	{r4, r5, r7, pc}
 80161b0:	0801cf40 	.word	0x0801cf40
 80161b4:	0801d090 	.word	0x0801d090
 80161b8:	0801cfb8 	.word	0x0801cfb8

080161bc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b086      	sub	sp, #24
 80161c0:	af02      	add	r7, sp, #8
 80161c2:	60f8      	str	r0, [r7, #12]
 80161c4:	60b9      	str	r1, [r7, #8]
 80161c6:	4613      	mov	r3, r2
 80161c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80161ca:	79fa      	ldrb	r2, [r7, #7]
 80161cc:	4944      	ldr	r1, [pc, #272]	; (80162e0 <etharp_output_to_arp_index+0x124>)
 80161ce:	4613      	mov	r3, r2
 80161d0:	005b      	lsls	r3, r3, #1
 80161d2:	4413      	add	r3, r2
 80161d4:	00db      	lsls	r3, r3, #3
 80161d6:	440b      	add	r3, r1
 80161d8:	3314      	adds	r3, #20
 80161da:	781b      	ldrb	r3, [r3, #0]
 80161dc:	2b01      	cmp	r3, #1
 80161de:	d806      	bhi.n	80161ee <etharp_output_to_arp_index+0x32>
 80161e0:	4b40      	ldr	r3, [pc, #256]	; (80162e4 <etharp_output_to_arp_index+0x128>)
 80161e2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80161e6:	4940      	ldr	r1, [pc, #256]	; (80162e8 <etharp_output_to_arp_index+0x12c>)
 80161e8:	4840      	ldr	r0, [pc, #256]	; (80162ec <etharp_output_to_arp_index+0x130>)
 80161ea:	f002 f9e9 	bl	80185c0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80161ee:	79fa      	ldrb	r2, [r7, #7]
 80161f0:	493b      	ldr	r1, [pc, #236]	; (80162e0 <etharp_output_to_arp_index+0x124>)
 80161f2:	4613      	mov	r3, r2
 80161f4:	005b      	lsls	r3, r3, #1
 80161f6:	4413      	add	r3, r2
 80161f8:	00db      	lsls	r3, r3, #3
 80161fa:	440b      	add	r3, r1
 80161fc:	3314      	adds	r3, #20
 80161fe:	781b      	ldrb	r3, [r3, #0]
 8016200:	2b02      	cmp	r3, #2
 8016202:	d153      	bne.n	80162ac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016204:	79fa      	ldrb	r2, [r7, #7]
 8016206:	4936      	ldr	r1, [pc, #216]	; (80162e0 <etharp_output_to_arp_index+0x124>)
 8016208:	4613      	mov	r3, r2
 801620a:	005b      	lsls	r3, r3, #1
 801620c:	4413      	add	r3, r2
 801620e:	00db      	lsls	r3, r3, #3
 8016210:	440b      	add	r3, r1
 8016212:	3312      	adds	r3, #18
 8016214:	881b      	ldrh	r3, [r3, #0]
 8016216:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801621a:	d919      	bls.n	8016250 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801621c:	79fa      	ldrb	r2, [r7, #7]
 801621e:	4613      	mov	r3, r2
 8016220:	005b      	lsls	r3, r3, #1
 8016222:	4413      	add	r3, r2
 8016224:	00db      	lsls	r3, r3, #3
 8016226:	4a2e      	ldr	r2, [pc, #184]	; (80162e0 <etharp_output_to_arp_index+0x124>)
 8016228:	4413      	add	r3, r2
 801622a:	3304      	adds	r3, #4
 801622c:	4619      	mov	r1, r3
 801622e:	68f8      	ldr	r0, [r7, #12]
 8016230:	f000 fb4c 	bl	80168cc <etharp_request>
 8016234:	4603      	mov	r3, r0
 8016236:	2b00      	cmp	r3, #0
 8016238:	d138      	bne.n	80162ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801623a:	79fa      	ldrb	r2, [r7, #7]
 801623c:	4928      	ldr	r1, [pc, #160]	; (80162e0 <etharp_output_to_arp_index+0x124>)
 801623e:	4613      	mov	r3, r2
 8016240:	005b      	lsls	r3, r3, #1
 8016242:	4413      	add	r3, r2
 8016244:	00db      	lsls	r3, r3, #3
 8016246:	440b      	add	r3, r1
 8016248:	3314      	adds	r3, #20
 801624a:	2203      	movs	r2, #3
 801624c:	701a      	strb	r2, [r3, #0]
 801624e:	e02d      	b.n	80162ac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016250:	79fa      	ldrb	r2, [r7, #7]
 8016252:	4923      	ldr	r1, [pc, #140]	; (80162e0 <etharp_output_to_arp_index+0x124>)
 8016254:	4613      	mov	r3, r2
 8016256:	005b      	lsls	r3, r3, #1
 8016258:	4413      	add	r3, r2
 801625a:	00db      	lsls	r3, r3, #3
 801625c:	440b      	add	r3, r1
 801625e:	3312      	adds	r3, #18
 8016260:	881b      	ldrh	r3, [r3, #0]
 8016262:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016266:	d321      	bcc.n	80162ac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016268:	79fa      	ldrb	r2, [r7, #7]
 801626a:	4613      	mov	r3, r2
 801626c:	005b      	lsls	r3, r3, #1
 801626e:	4413      	add	r3, r2
 8016270:	00db      	lsls	r3, r3, #3
 8016272:	4a1b      	ldr	r2, [pc, #108]	; (80162e0 <etharp_output_to_arp_index+0x124>)
 8016274:	4413      	add	r3, r2
 8016276:	1d19      	adds	r1, r3, #4
 8016278:	79fa      	ldrb	r2, [r7, #7]
 801627a:	4613      	mov	r3, r2
 801627c:	005b      	lsls	r3, r3, #1
 801627e:	4413      	add	r3, r2
 8016280:	00db      	lsls	r3, r3, #3
 8016282:	3308      	adds	r3, #8
 8016284:	4a16      	ldr	r2, [pc, #88]	; (80162e0 <etharp_output_to_arp_index+0x124>)
 8016286:	4413      	add	r3, r2
 8016288:	3304      	adds	r3, #4
 801628a:	461a      	mov	r2, r3
 801628c:	68f8      	ldr	r0, [r7, #12]
 801628e:	f000 fafb 	bl	8016888 <etharp_request_dst>
 8016292:	4603      	mov	r3, r0
 8016294:	2b00      	cmp	r3, #0
 8016296:	d109      	bne.n	80162ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016298:	79fa      	ldrb	r2, [r7, #7]
 801629a:	4911      	ldr	r1, [pc, #68]	; (80162e0 <etharp_output_to_arp_index+0x124>)
 801629c:	4613      	mov	r3, r2
 801629e:	005b      	lsls	r3, r3, #1
 80162a0:	4413      	add	r3, r2
 80162a2:	00db      	lsls	r3, r3, #3
 80162a4:	440b      	add	r3, r1
 80162a6:	3314      	adds	r3, #20
 80162a8:	2203      	movs	r2, #3
 80162aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80162b2:	79fa      	ldrb	r2, [r7, #7]
 80162b4:	4613      	mov	r3, r2
 80162b6:	005b      	lsls	r3, r3, #1
 80162b8:	4413      	add	r3, r2
 80162ba:	00db      	lsls	r3, r3, #3
 80162bc:	3308      	adds	r3, #8
 80162be:	4a08      	ldr	r2, [pc, #32]	; (80162e0 <etharp_output_to_arp_index+0x124>)
 80162c0:	4413      	add	r3, r2
 80162c2:	3304      	adds	r3, #4
 80162c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80162c8:	9200      	str	r2, [sp, #0]
 80162ca:	460a      	mov	r2, r1
 80162cc:	68b9      	ldr	r1, [r7, #8]
 80162ce:	68f8      	ldr	r0, [r7, #12]
 80162d0:	f001 fe5e 	bl	8017f90 <ethernet_output>
 80162d4:	4603      	mov	r3, r0
}
 80162d6:	4618      	mov	r0, r3
 80162d8:	3710      	adds	r7, #16
 80162da:	46bd      	mov	sp, r7
 80162dc:	bd80      	pop	{r7, pc}
 80162de:	bf00      	nop
 80162e0:	200115f4 	.word	0x200115f4
 80162e4:	0801cf40 	.word	0x0801cf40
 80162e8:	0801d0b0 	.word	0x0801d0b0
 80162ec:	0801cfb8 	.word	0x0801cfb8

080162f0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b08a      	sub	sp, #40	; 0x28
 80162f4:	af02      	add	r7, sp, #8
 80162f6:	60f8      	str	r0, [r7, #12]
 80162f8:	60b9      	str	r1, [r7, #8]
 80162fa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d106      	bne.n	8016314 <etharp_output+0x24>
 8016306:	4b73      	ldr	r3, [pc, #460]	; (80164d4 <etharp_output+0x1e4>)
 8016308:	f240 321e 	movw	r2, #798	; 0x31e
 801630c:	4972      	ldr	r1, [pc, #456]	; (80164d8 <etharp_output+0x1e8>)
 801630e:	4873      	ldr	r0, [pc, #460]	; (80164dc <etharp_output+0x1ec>)
 8016310:	f002 f956 	bl	80185c0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016314:	68bb      	ldr	r3, [r7, #8]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d106      	bne.n	8016328 <etharp_output+0x38>
 801631a:	4b6e      	ldr	r3, [pc, #440]	; (80164d4 <etharp_output+0x1e4>)
 801631c:	f240 321f 	movw	r2, #799	; 0x31f
 8016320:	496f      	ldr	r1, [pc, #444]	; (80164e0 <etharp_output+0x1f0>)
 8016322:	486e      	ldr	r0, [pc, #440]	; (80164dc <etharp_output+0x1ec>)
 8016324:	f002 f94c 	bl	80185c0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d106      	bne.n	801633c <etharp_output+0x4c>
 801632e:	4b69      	ldr	r3, [pc, #420]	; (80164d4 <etharp_output+0x1e4>)
 8016330:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016334:	496b      	ldr	r1, [pc, #428]	; (80164e4 <etharp_output+0x1f4>)
 8016336:	4869      	ldr	r0, [pc, #420]	; (80164dc <etharp_output+0x1ec>)
 8016338:	f002 f942 	bl	80185c0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	68f9      	ldr	r1, [r7, #12]
 8016342:	4618      	mov	r0, r3
 8016344:	f000 ff16 	bl	8017174 <ip4_addr_isbroadcast_u32>
 8016348:	4603      	mov	r3, r0
 801634a:	2b00      	cmp	r3, #0
 801634c:	d002      	beq.n	8016354 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801634e:	4b66      	ldr	r3, [pc, #408]	; (80164e8 <etharp_output+0x1f8>)
 8016350:	61fb      	str	r3, [r7, #28]
 8016352:	e0af      	b.n	80164b4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801635c:	2be0      	cmp	r3, #224	; 0xe0
 801635e:	d118      	bne.n	8016392 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016360:	2301      	movs	r3, #1
 8016362:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016364:	2300      	movs	r3, #0
 8016366:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016368:	235e      	movs	r3, #94	; 0x5e
 801636a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	3301      	adds	r3, #1
 8016370:	781b      	ldrb	r3, [r3, #0]
 8016372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016376:	b2db      	uxtb	r3, r3
 8016378:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	3302      	adds	r3, #2
 801637e:	781b      	ldrb	r3, [r3, #0]
 8016380:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	3303      	adds	r3, #3
 8016386:	781b      	ldrb	r3, [r3, #0]
 8016388:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801638a:	f107 0310 	add.w	r3, r7, #16
 801638e:	61fb      	str	r3, [r7, #28]
 8016390:	e090      	b.n	80164b4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	681a      	ldr	r2, [r3, #0]
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	3304      	adds	r3, #4
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	405a      	eors	r2, r3
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	3308      	adds	r3, #8
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	4013      	ands	r3, r2
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d012      	beq.n	80163d0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80163b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80163b4:	4293      	cmp	r3, r2
 80163b6:	d00b      	beq.n	80163d0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	330c      	adds	r3, #12
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d003      	beq.n	80163ca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	330c      	adds	r3, #12
 80163c6:	61bb      	str	r3, [r7, #24]
 80163c8:	e002      	b.n	80163d0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80163ca:	f06f 0303 	mvn.w	r3, #3
 80163ce:	e07d      	b.n	80164cc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80163d0:	4b46      	ldr	r3, [pc, #280]	; (80164ec <etharp_output+0x1fc>)
 80163d2:	781b      	ldrb	r3, [r3, #0]
 80163d4:	4619      	mov	r1, r3
 80163d6:	4a46      	ldr	r2, [pc, #280]	; (80164f0 <etharp_output+0x200>)
 80163d8:	460b      	mov	r3, r1
 80163da:	005b      	lsls	r3, r3, #1
 80163dc:	440b      	add	r3, r1
 80163de:	00db      	lsls	r3, r3, #3
 80163e0:	4413      	add	r3, r2
 80163e2:	3314      	adds	r3, #20
 80163e4:	781b      	ldrb	r3, [r3, #0]
 80163e6:	2b01      	cmp	r3, #1
 80163e8:	d925      	bls.n	8016436 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80163ea:	4b40      	ldr	r3, [pc, #256]	; (80164ec <etharp_output+0x1fc>)
 80163ec:	781b      	ldrb	r3, [r3, #0]
 80163ee:	4619      	mov	r1, r3
 80163f0:	4a3f      	ldr	r2, [pc, #252]	; (80164f0 <etharp_output+0x200>)
 80163f2:	460b      	mov	r3, r1
 80163f4:	005b      	lsls	r3, r3, #1
 80163f6:	440b      	add	r3, r1
 80163f8:	00db      	lsls	r3, r3, #3
 80163fa:	4413      	add	r3, r2
 80163fc:	3308      	adds	r3, #8
 80163fe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016400:	68fa      	ldr	r2, [r7, #12]
 8016402:	429a      	cmp	r2, r3
 8016404:	d117      	bne.n	8016436 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016406:	69bb      	ldr	r3, [r7, #24]
 8016408:	681a      	ldr	r2, [r3, #0]
 801640a:	4b38      	ldr	r3, [pc, #224]	; (80164ec <etharp_output+0x1fc>)
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	4618      	mov	r0, r3
 8016410:	4937      	ldr	r1, [pc, #220]	; (80164f0 <etharp_output+0x200>)
 8016412:	4603      	mov	r3, r0
 8016414:	005b      	lsls	r3, r3, #1
 8016416:	4403      	add	r3, r0
 8016418:	00db      	lsls	r3, r3, #3
 801641a:	440b      	add	r3, r1
 801641c:	3304      	adds	r3, #4
 801641e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016420:	429a      	cmp	r2, r3
 8016422:	d108      	bne.n	8016436 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016424:	4b31      	ldr	r3, [pc, #196]	; (80164ec <etharp_output+0x1fc>)
 8016426:	781b      	ldrb	r3, [r3, #0]
 8016428:	461a      	mov	r2, r3
 801642a:	68b9      	ldr	r1, [r7, #8]
 801642c:	68f8      	ldr	r0, [r7, #12]
 801642e:	f7ff fec5 	bl	80161bc <etharp_output_to_arp_index>
 8016432:	4603      	mov	r3, r0
 8016434:	e04a      	b.n	80164cc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016436:	2300      	movs	r3, #0
 8016438:	75fb      	strb	r3, [r7, #23]
 801643a:	e031      	b.n	80164a0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801643c:	7dfa      	ldrb	r2, [r7, #23]
 801643e:	492c      	ldr	r1, [pc, #176]	; (80164f0 <etharp_output+0x200>)
 8016440:	4613      	mov	r3, r2
 8016442:	005b      	lsls	r3, r3, #1
 8016444:	4413      	add	r3, r2
 8016446:	00db      	lsls	r3, r3, #3
 8016448:	440b      	add	r3, r1
 801644a:	3314      	adds	r3, #20
 801644c:	781b      	ldrb	r3, [r3, #0]
 801644e:	2b01      	cmp	r3, #1
 8016450:	d923      	bls.n	801649a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016452:	7dfa      	ldrb	r2, [r7, #23]
 8016454:	4926      	ldr	r1, [pc, #152]	; (80164f0 <etharp_output+0x200>)
 8016456:	4613      	mov	r3, r2
 8016458:	005b      	lsls	r3, r3, #1
 801645a:	4413      	add	r3, r2
 801645c:	00db      	lsls	r3, r3, #3
 801645e:	440b      	add	r3, r1
 8016460:	3308      	adds	r3, #8
 8016462:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016464:	68fa      	ldr	r2, [r7, #12]
 8016466:	429a      	cmp	r2, r3
 8016468:	d117      	bne.n	801649a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801646a:	69bb      	ldr	r3, [r7, #24]
 801646c:	6819      	ldr	r1, [r3, #0]
 801646e:	7dfa      	ldrb	r2, [r7, #23]
 8016470:	481f      	ldr	r0, [pc, #124]	; (80164f0 <etharp_output+0x200>)
 8016472:	4613      	mov	r3, r2
 8016474:	005b      	lsls	r3, r3, #1
 8016476:	4413      	add	r3, r2
 8016478:	00db      	lsls	r3, r3, #3
 801647a:	4403      	add	r3, r0
 801647c:	3304      	adds	r3, #4
 801647e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016480:	4299      	cmp	r1, r3
 8016482:	d10a      	bne.n	801649a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016484:	4a19      	ldr	r2, [pc, #100]	; (80164ec <etharp_output+0x1fc>)
 8016486:	7dfb      	ldrb	r3, [r7, #23]
 8016488:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801648a:	7dfb      	ldrb	r3, [r7, #23]
 801648c:	461a      	mov	r2, r3
 801648e:	68b9      	ldr	r1, [r7, #8]
 8016490:	68f8      	ldr	r0, [r7, #12]
 8016492:	f7ff fe93 	bl	80161bc <etharp_output_to_arp_index>
 8016496:	4603      	mov	r3, r0
 8016498:	e018      	b.n	80164cc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801649a:	7dfb      	ldrb	r3, [r7, #23]
 801649c:	3301      	adds	r3, #1
 801649e:	75fb      	strb	r3, [r7, #23]
 80164a0:	7dfb      	ldrb	r3, [r7, #23]
 80164a2:	2b09      	cmp	r3, #9
 80164a4:	d9ca      	bls.n	801643c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80164a6:	68ba      	ldr	r2, [r7, #8]
 80164a8:	69b9      	ldr	r1, [r7, #24]
 80164aa:	68f8      	ldr	r0, [r7, #12]
 80164ac:	f000 f822 	bl	80164f4 <etharp_query>
 80164b0:	4603      	mov	r3, r0
 80164b2:	e00b      	b.n	80164cc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80164ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80164be:	9300      	str	r3, [sp, #0]
 80164c0:	69fb      	ldr	r3, [r7, #28]
 80164c2:	68b9      	ldr	r1, [r7, #8]
 80164c4:	68f8      	ldr	r0, [r7, #12]
 80164c6:	f001 fd63 	bl	8017f90 <ethernet_output>
 80164ca:	4603      	mov	r3, r0
}
 80164cc:	4618      	mov	r0, r3
 80164ce:	3720      	adds	r7, #32
 80164d0:	46bd      	mov	sp, r7
 80164d2:	bd80      	pop	{r7, pc}
 80164d4:	0801cf40 	.word	0x0801cf40
 80164d8:	0801d090 	.word	0x0801d090
 80164dc:	0801cfb8 	.word	0x0801cfb8
 80164e0:	0801d0e0 	.word	0x0801d0e0
 80164e4:	0801d080 	.word	0x0801d080
 80164e8:	0802788c 	.word	0x0802788c
 80164ec:	200116e4 	.word	0x200116e4
 80164f0:	200115f4 	.word	0x200115f4

080164f4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b08c      	sub	sp, #48	; 0x30
 80164f8:	af02      	add	r7, sp, #8
 80164fa:	60f8      	str	r0, [r7, #12]
 80164fc:	60b9      	str	r1, [r7, #8]
 80164fe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	332a      	adds	r3, #42	; 0x2a
 8016504:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016506:	23ff      	movs	r3, #255	; 0xff
 8016508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801650c:	2300      	movs	r3, #0
 801650e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016510:	68bb      	ldr	r3, [r7, #8]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	68f9      	ldr	r1, [r7, #12]
 8016516:	4618      	mov	r0, r3
 8016518:	f000 fe2c 	bl	8017174 <ip4_addr_isbroadcast_u32>
 801651c:	4603      	mov	r3, r0
 801651e:	2b00      	cmp	r3, #0
 8016520:	d10c      	bne.n	801653c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016522:	68bb      	ldr	r3, [r7, #8]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801652a:	2be0      	cmp	r3, #224	; 0xe0
 801652c:	d006      	beq.n	801653c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801652e:	68bb      	ldr	r3, [r7, #8]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d003      	beq.n	801653c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016534:	68bb      	ldr	r3, [r7, #8]
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d102      	bne.n	8016542 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801653c:	f06f 030f 	mvn.w	r3, #15
 8016540:	e101      	b.n	8016746 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016542:	68fa      	ldr	r2, [r7, #12]
 8016544:	2101      	movs	r1, #1
 8016546:	68b8      	ldr	r0, [r7, #8]
 8016548:	f7ff fb5c 	bl	8015c04 <etharp_find_entry>
 801654c:	4603      	mov	r3, r0
 801654e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016550:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016554:	2b00      	cmp	r3, #0
 8016556:	da02      	bge.n	801655e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016558:	8a7b      	ldrh	r3, [r7, #18]
 801655a:	b25b      	sxtb	r3, r3
 801655c:	e0f3      	b.n	8016746 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801655e:	8a7b      	ldrh	r3, [r7, #18]
 8016560:	2b7e      	cmp	r3, #126	; 0x7e
 8016562:	d906      	bls.n	8016572 <etharp_query+0x7e>
 8016564:	4b7a      	ldr	r3, [pc, #488]	; (8016750 <etharp_query+0x25c>)
 8016566:	f240 32c1 	movw	r2, #961	; 0x3c1
 801656a:	497a      	ldr	r1, [pc, #488]	; (8016754 <etharp_query+0x260>)
 801656c:	487a      	ldr	r0, [pc, #488]	; (8016758 <etharp_query+0x264>)
 801656e:	f002 f827 	bl	80185c0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016572:	8a7b      	ldrh	r3, [r7, #18]
 8016574:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016576:	7c7a      	ldrb	r2, [r7, #17]
 8016578:	4978      	ldr	r1, [pc, #480]	; (801675c <etharp_query+0x268>)
 801657a:	4613      	mov	r3, r2
 801657c:	005b      	lsls	r3, r3, #1
 801657e:	4413      	add	r3, r2
 8016580:	00db      	lsls	r3, r3, #3
 8016582:	440b      	add	r3, r1
 8016584:	3314      	adds	r3, #20
 8016586:	781b      	ldrb	r3, [r3, #0]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d115      	bne.n	80165b8 <etharp_query+0xc4>
    is_new_entry = 1;
 801658c:	2301      	movs	r3, #1
 801658e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016590:	7c7a      	ldrb	r2, [r7, #17]
 8016592:	4972      	ldr	r1, [pc, #456]	; (801675c <etharp_query+0x268>)
 8016594:	4613      	mov	r3, r2
 8016596:	005b      	lsls	r3, r3, #1
 8016598:	4413      	add	r3, r2
 801659a:	00db      	lsls	r3, r3, #3
 801659c:	440b      	add	r3, r1
 801659e:	3314      	adds	r3, #20
 80165a0:	2201      	movs	r2, #1
 80165a2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80165a4:	7c7a      	ldrb	r2, [r7, #17]
 80165a6:	496d      	ldr	r1, [pc, #436]	; (801675c <etharp_query+0x268>)
 80165a8:	4613      	mov	r3, r2
 80165aa:	005b      	lsls	r3, r3, #1
 80165ac:	4413      	add	r3, r2
 80165ae:	00db      	lsls	r3, r3, #3
 80165b0:	440b      	add	r3, r1
 80165b2:	3308      	adds	r3, #8
 80165b4:	68fa      	ldr	r2, [r7, #12]
 80165b6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80165b8:	7c7a      	ldrb	r2, [r7, #17]
 80165ba:	4968      	ldr	r1, [pc, #416]	; (801675c <etharp_query+0x268>)
 80165bc:	4613      	mov	r3, r2
 80165be:	005b      	lsls	r3, r3, #1
 80165c0:	4413      	add	r3, r2
 80165c2:	00db      	lsls	r3, r3, #3
 80165c4:	440b      	add	r3, r1
 80165c6:	3314      	adds	r3, #20
 80165c8:	781b      	ldrb	r3, [r3, #0]
 80165ca:	2b01      	cmp	r3, #1
 80165cc:	d011      	beq.n	80165f2 <etharp_query+0xfe>
 80165ce:	7c7a      	ldrb	r2, [r7, #17]
 80165d0:	4962      	ldr	r1, [pc, #392]	; (801675c <etharp_query+0x268>)
 80165d2:	4613      	mov	r3, r2
 80165d4:	005b      	lsls	r3, r3, #1
 80165d6:	4413      	add	r3, r2
 80165d8:	00db      	lsls	r3, r3, #3
 80165da:	440b      	add	r3, r1
 80165dc:	3314      	adds	r3, #20
 80165de:	781b      	ldrb	r3, [r3, #0]
 80165e0:	2b01      	cmp	r3, #1
 80165e2:	d806      	bhi.n	80165f2 <etharp_query+0xfe>
 80165e4:	4b5a      	ldr	r3, [pc, #360]	; (8016750 <etharp_query+0x25c>)
 80165e6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80165ea:	495d      	ldr	r1, [pc, #372]	; (8016760 <etharp_query+0x26c>)
 80165ec:	485a      	ldr	r0, [pc, #360]	; (8016758 <etharp_query+0x264>)
 80165ee:	f001 ffe7 	bl	80185c0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80165f2:	6a3b      	ldr	r3, [r7, #32]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d102      	bne.n	80165fe <etharp_query+0x10a>
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d10c      	bne.n	8016618 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80165fe:	68b9      	ldr	r1, [r7, #8]
 8016600:	68f8      	ldr	r0, [r7, #12]
 8016602:	f000 f963 	bl	80168cc <etharp_request>
 8016606:	4603      	mov	r3, r0
 8016608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d102      	bne.n	8016618 <etharp_query+0x124>
      return result;
 8016612:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016616:	e096      	b.n	8016746 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d106      	bne.n	801662c <etharp_query+0x138>
 801661e:	4b4c      	ldr	r3, [pc, #304]	; (8016750 <etharp_query+0x25c>)
 8016620:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016624:	494f      	ldr	r1, [pc, #316]	; (8016764 <etharp_query+0x270>)
 8016626:	484c      	ldr	r0, [pc, #304]	; (8016758 <etharp_query+0x264>)
 8016628:	f001 ffca 	bl	80185c0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801662c:	7c7a      	ldrb	r2, [r7, #17]
 801662e:	494b      	ldr	r1, [pc, #300]	; (801675c <etharp_query+0x268>)
 8016630:	4613      	mov	r3, r2
 8016632:	005b      	lsls	r3, r3, #1
 8016634:	4413      	add	r3, r2
 8016636:	00db      	lsls	r3, r3, #3
 8016638:	440b      	add	r3, r1
 801663a:	3314      	adds	r3, #20
 801663c:	781b      	ldrb	r3, [r3, #0]
 801663e:	2b01      	cmp	r3, #1
 8016640:	d917      	bls.n	8016672 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016642:	4a49      	ldr	r2, [pc, #292]	; (8016768 <etharp_query+0x274>)
 8016644:	7c7b      	ldrb	r3, [r7, #17]
 8016646:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016648:	7c7a      	ldrb	r2, [r7, #17]
 801664a:	4613      	mov	r3, r2
 801664c:	005b      	lsls	r3, r3, #1
 801664e:	4413      	add	r3, r2
 8016650:	00db      	lsls	r3, r3, #3
 8016652:	3308      	adds	r3, #8
 8016654:	4a41      	ldr	r2, [pc, #260]	; (801675c <etharp_query+0x268>)
 8016656:	4413      	add	r3, r2
 8016658:	3304      	adds	r3, #4
 801665a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801665e:	9200      	str	r2, [sp, #0]
 8016660:	697a      	ldr	r2, [r7, #20]
 8016662:	6879      	ldr	r1, [r7, #4]
 8016664:	68f8      	ldr	r0, [r7, #12]
 8016666:	f001 fc93 	bl	8017f90 <ethernet_output>
 801666a:	4603      	mov	r3, r0
 801666c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016670:	e067      	b.n	8016742 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016672:	7c7a      	ldrb	r2, [r7, #17]
 8016674:	4939      	ldr	r1, [pc, #228]	; (801675c <etharp_query+0x268>)
 8016676:	4613      	mov	r3, r2
 8016678:	005b      	lsls	r3, r3, #1
 801667a:	4413      	add	r3, r2
 801667c:	00db      	lsls	r3, r3, #3
 801667e:	440b      	add	r3, r1
 8016680:	3314      	adds	r3, #20
 8016682:	781b      	ldrb	r3, [r3, #0]
 8016684:	2b01      	cmp	r3, #1
 8016686:	d15c      	bne.n	8016742 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016688:	2300      	movs	r3, #0
 801668a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016690:	e01c      	b.n	80166cc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016692:	69fb      	ldr	r3, [r7, #28]
 8016694:	895a      	ldrh	r2, [r3, #10]
 8016696:	69fb      	ldr	r3, [r7, #28]
 8016698:	891b      	ldrh	r3, [r3, #8]
 801669a:	429a      	cmp	r2, r3
 801669c:	d10a      	bne.n	80166b4 <etharp_query+0x1c0>
 801669e:	69fb      	ldr	r3, [r7, #28]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d006      	beq.n	80166b4 <etharp_query+0x1c0>
 80166a6:	4b2a      	ldr	r3, [pc, #168]	; (8016750 <etharp_query+0x25c>)
 80166a8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80166ac:	492f      	ldr	r1, [pc, #188]	; (801676c <etharp_query+0x278>)
 80166ae:	482a      	ldr	r0, [pc, #168]	; (8016758 <etharp_query+0x264>)
 80166b0:	f001 ff86 	bl	80185c0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80166b4:	69fb      	ldr	r3, [r7, #28]
 80166b6:	7b1b      	ldrb	r3, [r3, #12]
 80166b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d002      	beq.n	80166c6 <etharp_query+0x1d2>
        copy_needed = 1;
 80166c0:	2301      	movs	r3, #1
 80166c2:	61bb      	str	r3, [r7, #24]
        break;
 80166c4:	e005      	b.n	80166d2 <etharp_query+0x1de>
      }
      p = p->next;
 80166c6:	69fb      	ldr	r3, [r7, #28]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 80166cc:	69fb      	ldr	r3, [r7, #28]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d1df      	bne.n	8016692 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80166d2:	69bb      	ldr	r3, [r7, #24]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d007      	beq.n	80166e8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80166d8:	687a      	ldr	r2, [r7, #4]
 80166da:	f44f 7120 	mov.w	r1, #640	; 0x280
 80166de:	200e      	movs	r0, #14
 80166e0:	f7f6 fbfa 	bl	800ced8 <pbuf_clone>
 80166e4:	61f8      	str	r0, [r7, #28]
 80166e6:	e004      	b.n	80166f2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80166ec:	69f8      	ldr	r0, [r7, #28]
 80166ee:	f7f6 fa21 	bl	800cb34 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80166f2:	69fb      	ldr	r3, [r7, #28]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d021      	beq.n	801673c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80166f8:	7c7a      	ldrb	r2, [r7, #17]
 80166fa:	4918      	ldr	r1, [pc, #96]	; (801675c <etharp_query+0x268>)
 80166fc:	4613      	mov	r3, r2
 80166fe:	005b      	lsls	r3, r3, #1
 8016700:	4413      	add	r3, r2
 8016702:	00db      	lsls	r3, r3, #3
 8016704:	440b      	add	r3, r1
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d00a      	beq.n	8016722 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801670c:	7c7a      	ldrb	r2, [r7, #17]
 801670e:	4913      	ldr	r1, [pc, #76]	; (801675c <etharp_query+0x268>)
 8016710:	4613      	mov	r3, r2
 8016712:	005b      	lsls	r3, r3, #1
 8016714:	4413      	add	r3, r2
 8016716:	00db      	lsls	r3, r3, #3
 8016718:	440b      	add	r3, r1
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	4618      	mov	r0, r3
 801671e:	f7f6 f963 	bl	800c9e8 <pbuf_free>
      }
      arp_table[i].q = p;
 8016722:	7c7a      	ldrb	r2, [r7, #17]
 8016724:	490d      	ldr	r1, [pc, #52]	; (801675c <etharp_query+0x268>)
 8016726:	4613      	mov	r3, r2
 8016728:	005b      	lsls	r3, r3, #1
 801672a:	4413      	add	r3, r2
 801672c:	00db      	lsls	r3, r3, #3
 801672e:	440b      	add	r3, r1
 8016730:	69fa      	ldr	r2, [r7, #28]
 8016732:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016734:	2300      	movs	r3, #0
 8016736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801673a:	e002      	b.n	8016742 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801673c:	23ff      	movs	r3, #255	; 0xff
 801673e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016742:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016746:	4618      	mov	r0, r3
 8016748:	3728      	adds	r7, #40	; 0x28
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}
 801674e:	bf00      	nop
 8016750:	0801cf40 	.word	0x0801cf40
 8016754:	0801d0ec 	.word	0x0801d0ec
 8016758:	0801cfb8 	.word	0x0801cfb8
 801675c:	200115f4 	.word	0x200115f4
 8016760:	0801d0fc 	.word	0x0801d0fc
 8016764:	0801d0e0 	.word	0x0801d0e0
 8016768:	200116e4 	.word	0x200116e4
 801676c:	0801d124 	.word	0x0801d124

08016770 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b08a      	sub	sp, #40	; 0x28
 8016774:	af02      	add	r7, sp, #8
 8016776:	60f8      	str	r0, [r7, #12]
 8016778:	60b9      	str	r1, [r7, #8]
 801677a:	607a      	str	r2, [r7, #4]
 801677c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801677e:	2300      	movs	r3, #0
 8016780:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d106      	bne.n	8016796 <etharp_raw+0x26>
 8016788:	4b3a      	ldr	r3, [pc, #232]	; (8016874 <etharp_raw+0x104>)
 801678a:	f240 4257 	movw	r2, #1111	; 0x457
 801678e:	493a      	ldr	r1, [pc, #232]	; (8016878 <etharp_raw+0x108>)
 8016790:	483a      	ldr	r0, [pc, #232]	; (801687c <etharp_raw+0x10c>)
 8016792:	f001 ff15 	bl	80185c0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016796:	f44f 7220 	mov.w	r2, #640	; 0x280
 801679a:	211c      	movs	r1, #28
 801679c:	200e      	movs	r0, #14
 801679e:	f7f5 fe3f 	bl	800c420 <pbuf_alloc>
 80167a2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80167a4:	69bb      	ldr	r3, [r7, #24]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d102      	bne.n	80167b0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80167aa:	f04f 33ff 	mov.w	r3, #4294967295
 80167ae:	e05d      	b.n	801686c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80167b0:	69bb      	ldr	r3, [r7, #24]
 80167b2:	895b      	ldrh	r3, [r3, #10]
 80167b4:	2b1b      	cmp	r3, #27
 80167b6:	d806      	bhi.n	80167c6 <etharp_raw+0x56>
 80167b8:	4b2e      	ldr	r3, [pc, #184]	; (8016874 <etharp_raw+0x104>)
 80167ba:	f240 4262 	movw	r2, #1122	; 0x462
 80167be:	4930      	ldr	r1, [pc, #192]	; (8016880 <etharp_raw+0x110>)
 80167c0:	482e      	ldr	r0, [pc, #184]	; (801687c <etharp_raw+0x10c>)
 80167c2:	f001 fefd 	bl	80185c0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80167c6:	69bb      	ldr	r3, [r7, #24]
 80167c8:	685b      	ldr	r3, [r3, #4]
 80167ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80167cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80167ce:	4618      	mov	r0, r3
 80167d0:	f7f4 fcd6 	bl	800b180 <lwip_htons>
 80167d4:	4603      	mov	r3, r0
 80167d6:	461a      	mov	r2, r3
 80167d8:	697b      	ldr	r3, [r7, #20]
 80167da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80167e2:	2b06      	cmp	r3, #6
 80167e4:	d006      	beq.n	80167f4 <etharp_raw+0x84>
 80167e6:	4b23      	ldr	r3, [pc, #140]	; (8016874 <etharp_raw+0x104>)
 80167e8:	f240 4269 	movw	r2, #1129	; 0x469
 80167ec:	4925      	ldr	r1, [pc, #148]	; (8016884 <etharp_raw+0x114>)
 80167ee:	4823      	ldr	r0, [pc, #140]	; (801687c <etharp_raw+0x10c>)
 80167f0:	f001 fee6 	bl	80185c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80167f4:	697b      	ldr	r3, [r7, #20]
 80167f6:	3308      	adds	r3, #8
 80167f8:	2206      	movs	r2, #6
 80167fa:	6839      	ldr	r1, [r7, #0]
 80167fc:	4618      	mov	r0, r3
 80167fe:	f002 f8df 	bl	80189c0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016802:	697b      	ldr	r3, [r7, #20]
 8016804:	3312      	adds	r3, #18
 8016806:	2206      	movs	r2, #6
 8016808:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801680a:	4618      	mov	r0, r3
 801680c:	f002 f8d8 	bl	80189c0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016810:	697b      	ldr	r3, [r7, #20]
 8016812:	330e      	adds	r3, #14
 8016814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016816:	6812      	ldr	r2, [r2, #0]
 8016818:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801681a:	697b      	ldr	r3, [r7, #20]
 801681c:	3318      	adds	r3, #24
 801681e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016820:	6812      	ldr	r2, [r2, #0]
 8016822:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016824:	697b      	ldr	r3, [r7, #20]
 8016826:	2200      	movs	r2, #0
 8016828:	701a      	strb	r2, [r3, #0]
 801682a:	2200      	movs	r2, #0
 801682c:	f042 0201 	orr.w	r2, r2, #1
 8016830:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016832:	697b      	ldr	r3, [r7, #20]
 8016834:	2200      	movs	r2, #0
 8016836:	f042 0208 	orr.w	r2, r2, #8
 801683a:	709a      	strb	r2, [r3, #2]
 801683c:	2200      	movs	r2, #0
 801683e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016840:	697b      	ldr	r3, [r7, #20]
 8016842:	2206      	movs	r2, #6
 8016844:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016846:	697b      	ldr	r3, [r7, #20]
 8016848:	2204      	movs	r2, #4
 801684a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801684c:	f640 0306 	movw	r3, #2054	; 0x806
 8016850:	9300      	str	r3, [sp, #0]
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	68ba      	ldr	r2, [r7, #8]
 8016856:	69b9      	ldr	r1, [r7, #24]
 8016858:	68f8      	ldr	r0, [r7, #12]
 801685a:	f001 fb99 	bl	8017f90 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801685e:	69b8      	ldr	r0, [r7, #24]
 8016860:	f7f6 f8c2 	bl	800c9e8 <pbuf_free>
  p = NULL;
 8016864:	2300      	movs	r3, #0
 8016866:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016868:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801686c:	4618      	mov	r0, r3
 801686e:	3720      	adds	r7, #32
 8016870:	46bd      	mov	sp, r7
 8016872:	bd80      	pop	{r7, pc}
 8016874:	0801cf40 	.word	0x0801cf40
 8016878:	0801d090 	.word	0x0801d090
 801687c:	0801cfb8 	.word	0x0801cfb8
 8016880:	0801d140 	.word	0x0801d140
 8016884:	0801d174 	.word	0x0801d174

08016888 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b088      	sub	sp, #32
 801688c:	af04      	add	r7, sp, #16
 801688e:	60f8      	str	r0, [r7, #12]
 8016890:	60b9      	str	r1, [r7, #8]
 8016892:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80168a4:	2201      	movs	r2, #1
 80168a6:	9203      	str	r2, [sp, #12]
 80168a8:	68ba      	ldr	r2, [r7, #8]
 80168aa:	9202      	str	r2, [sp, #8]
 80168ac:	4a06      	ldr	r2, [pc, #24]	; (80168c8 <etharp_request_dst+0x40>)
 80168ae:	9201      	str	r2, [sp, #4]
 80168b0:	9300      	str	r3, [sp, #0]
 80168b2:	4603      	mov	r3, r0
 80168b4:	687a      	ldr	r2, [r7, #4]
 80168b6:	68f8      	ldr	r0, [r7, #12]
 80168b8:	f7ff ff5a 	bl	8016770 <etharp_raw>
 80168bc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80168be:	4618      	mov	r0, r3
 80168c0:	3710      	adds	r7, #16
 80168c2:	46bd      	mov	sp, r7
 80168c4:	bd80      	pop	{r7, pc}
 80168c6:	bf00      	nop
 80168c8:	08027894 	.word	0x08027894

080168cc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b082      	sub	sp, #8
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
 80168d4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80168d6:	4a05      	ldr	r2, [pc, #20]	; (80168ec <etharp_request+0x20>)
 80168d8:	6839      	ldr	r1, [r7, #0]
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f7ff ffd4 	bl	8016888 <etharp_request_dst>
 80168e0:	4603      	mov	r3, r0
}
 80168e2:	4618      	mov	r0, r3
 80168e4:	3708      	adds	r7, #8
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bd80      	pop	{r7, pc}
 80168ea:	bf00      	nop
 80168ec:	0802788c 	.word	0x0802788c

080168f0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b08e      	sub	sp, #56	; 0x38
 80168f4:	af04      	add	r7, sp, #16
 80168f6:	6078      	str	r0, [r7, #4]
 80168f8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80168fa:	4b79      	ldr	r3, [pc, #484]	; (8016ae0 <icmp_input+0x1f0>)
 80168fc:	689b      	ldr	r3, [r3, #8]
 80168fe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016902:	781b      	ldrb	r3, [r3, #0]
 8016904:	f003 030f 	and.w	r3, r3, #15
 8016908:	b2db      	uxtb	r3, r3
 801690a:	009b      	lsls	r3, r3, #2
 801690c:	b2db      	uxtb	r3, r3
 801690e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016910:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016912:	2b13      	cmp	r3, #19
 8016914:	f240 80cd 	bls.w	8016ab2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	895b      	ldrh	r3, [r3, #10]
 801691c:	2b03      	cmp	r3, #3
 801691e:	f240 80ca 	bls.w	8016ab6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	685b      	ldr	r3, [r3, #4]
 8016926:	781b      	ldrb	r3, [r3, #0]
 8016928:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801692c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016930:	2b00      	cmp	r3, #0
 8016932:	f000 80b7 	beq.w	8016aa4 <icmp_input+0x1b4>
 8016936:	2b08      	cmp	r3, #8
 8016938:	f040 80b7 	bne.w	8016aaa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801693c:	4b69      	ldr	r3, [pc, #420]	; (8016ae4 <icmp_input+0x1f4>)
 801693e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016940:	4b67      	ldr	r3, [pc, #412]	; (8016ae0 <icmp_input+0x1f0>)
 8016942:	695b      	ldr	r3, [r3, #20]
 8016944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016948:	2be0      	cmp	r3, #224	; 0xe0
 801694a:	f000 80bb 	beq.w	8016ac4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801694e:	4b64      	ldr	r3, [pc, #400]	; (8016ae0 <icmp_input+0x1f0>)
 8016950:	695b      	ldr	r3, [r3, #20]
 8016952:	4a63      	ldr	r2, [pc, #396]	; (8016ae0 <icmp_input+0x1f0>)
 8016954:	6812      	ldr	r2, [r2, #0]
 8016956:	4611      	mov	r1, r2
 8016958:	4618      	mov	r0, r3
 801695a:	f000 fc0b 	bl	8017174 <ip4_addr_isbroadcast_u32>
 801695e:	4603      	mov	r3, r0
 8016960:	2b00      	cmp	r3, #0
 8016962:	f040 80b1 	bne.w	8016ac8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	891b      	ldrh	r3, [r3, #8]
 801696a:	2b07      	cmp	r3, #7
 801696c:	f240 80a5 	bls.w	8016aba <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016970:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016972:	330e      	adds	r3, #14
 8016974:	4619      	mov	r1, r3
 8016976:	6878      	ldr	r0, [r7, #4]
 8016978:	f7f5 ffa0 	bl	800c8bc <pbuf_add_header>
 801697c:	4603      	mov	r3, r0
 801697e:	2b00      	cmp	r3, #0
 8016980:	d04b      	beq.n	8016a1a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	891a      	ldrh	r2, [r3, #8]
 8016986:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016988:	4413      	add	r3, r2
 801698a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	891b      	ldrh	r3, [r3, #8]
 8016990:	8b7a      	ldrh	r2, [r7, #26]
 8016992:	429a      	cmp	r2, r3
 8016994:	f0c0 809a 	bcc.w	8016acc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016998:	8b7b      	ldrh	r3, [r7, #26]
 801699a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801699e:	4619      	mov	r1, r3
 80169a0:	200e      	movs	r0, #14
 80169a2:	f7f5 fd3d 	bl	800c420 <pbuf_alloc>
 80169a6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80169a8:	697b      	ldr	r3, [r7, #20]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	f000 8090 	beq.w	8016ad0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80169b0:	697b      	ldr	r3, [r7, #20]
 80169b2:	895b      	ldrh	r3, [r3, #10]
 80169b4:	461a      	mov	r2, r3
 80169b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80169b8:	3308      	adds	r3, #8
 80169ba:	429a      	cmp	r2, r3
 80169bc:	d203      	bcs.n	80169c6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80169be:	6978      	ldr	r0, [r7, #20]
 80169c0:	f7f6 f812 	bl	800c9e8 <pbuf_free>
          goto icmperr;
 80169c4:	e085      	b.n	8016ad2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80169c6:	697b      	ldr	r3, [r7, #20]
 80169c8:	685b      	ldr	r3, [r3, #4]
 80169ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80169cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169ce:	4618      	mov	r0, r3
 80169d0:	f001 fff6 	bl	80189c0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80169d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80169d6:	4619      	mov	r1, r3
 80169d8:	6978      	ldr	r0, [r7, #20]
 80169da:	f7f5 ff7f 	bl	800c8dc <pbuf_remove_header>
 80169de:	4603      	mov	r3, r0
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d009      	beq.n	80169f8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80169e4:	4b40      	ldr	r3, [pc, #256]	; (8016ae8 <icmp_input+0x1f8>)
 80169e6:	22b6      	movs	r2, #182	; 0xb6
 80169e8:	4940      	ldr	r1, [pc, #256]	; (8016aec <icmp_input+0x1fc>)
 80169ea:	4841      	ldr	r0, [pc, #260]	; (8016af0 <icmp_input+0x200>)
 80169ec:	f001 fde8 	bl	80185c0 <iprintf>
          pbuf_free(r);
 80169f0:	6978      	ldr	r0, [r7, #20]
 80169f2:	f7f5 fff9 	bl	800c9e8 <pbuf_free>
          goto icmperr;
 80169f6:	e06c      	b.n	8016ad2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80169f8:	6879      	ldr	r1, [r7, #4]
 80169fa:	6978      	ldr	r0, [r7, #20]
 80169fc:	f7f6 f928 	bl	800cc50 <pbuf_copy>
 8016a00:	4603      	mov	r3, r0
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d003      	beq.n	8016a0e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016a06:	6978      	ldr	r0, [r7, #20]
 8016a08:	f7f5 ffee 	bl	800c9e8 <pbuf_free>
          goto icmperr;
 8016a0c:	e061      	b.n	8016ad2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	f7f5 ffea 	bl	800c9e8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016a14:	697b      	ldr	r3, [r7, #20]
 8016a16:	607b      	str	r3, [r7, #4]
 8016a18:	e00f      	b.n	8016a3a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016a1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a1c:	330e      	adds	r3, #14
 8016a1e:	4619      	mov	r1, r3
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f7f5 ff5b 	bl	800c8dc <pbuf_remove_header>
 8016a26:	4603      	mov	r3, r0
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d006      	beq.n	8016a3a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016a2c:	4b2e      	ldr	r3, [pc, #184]	; (8016ae8 <icmp_input+0x1f8>)
 8016a2e:	22c7      	movs	r2, #199	; 0xc7
 8016a30:	4930      	ldr	r1, [pc, #192]	; (8016af4 <icmp_input+0x204>)
 8016a32:	482f      	ldr	r0, [pc, #188]	; (8016af0 <icmp_input+0x200>)
 8016a34:	f001 fdc4 	bl	80185c0 <iprintf>
          goto icmperr;
 8016a38:	e04b      	b.n	8016ad2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	685b      	ldr	r3, [r3, #4]
 8016a3e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016a40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a42:	4619      	mov	r1, r3
 8016a44:	6878      	ldr	r0, [r7, #4]
 8016a46:	f7f5 ff39 	bl	800c8bc <pbuf_add_header>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d12b      	bne.n	8016aa8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016a56:	69fb      	ldr	r3, [r7, #28]
 8016a58:	681a      	ldr	r2, [r3, #0]
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016a5e:	4b20      	ldr	r3, [pc, #128]	; (8016ae0 <icmp_input+0x1f0>)
 8016a60:	691a      	ldr	r2, [r3, #16]
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016a66:	693b      	ldr	r3, [r7, #16]
 8016a68:	2200      	movs	r2, #0
 8016a6a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016a6c:	693b      	ldr	r3, [r7, #16]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	709a      	strb	r2, [r3, #2]
 8016a72:	2200      	movs	r2, #0
 8016a74:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	22ff      	movs	r2, #255	; 0xff
 8016a7a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	2200      	movs	r2, #0
 8016a80:	729a      	strb	r2, [r3, #10]
 8016a82:	2200      	movs	r2, #0
 8016a84:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016a86:	683b      	ldr	r3, [r7, #0]
 8016a88:	9302      	str	r3, [sp, #8]
 8016a8a:	2301      	movs	r3, #1
 8016a8c:	9301      	str	r3, [sp, #4]
 8016a8e:	2300      	movs	r3, #0
 8016a90:	9300      	str	r3, [sp, #0]
 8016a92:	23ff      	movs	r3, #255	; 0xff
 8016a94:	2200      	movs	r2, #0
 8016a96:	69f9      	ldr	r1, [r7, #28]
 8016a98:	6878      	ldr	r0, [r7, #4]
 8016a9a:	f000 fa93 	bl	8016fc4 <ip4_output_if>
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016aa2:	e001      	b.n	8016aa8 <icmp_input+0x1b8>
      break;
 8016aa4:	bf00      	nop
 8016aa6:	e000      	b.n	8016aaa <icmp_input+0x1ba>
      break;
 8016aa8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016aaa:	6878      	ldr	r0, [r7, #4]
 8016aac:	f7f5 ff9c 	bl	800c9e8 <pbuf_free>
  return;
 8016ab0:	e013      	b.n	8016ada <icmp_input+0x1ea>
    goto lenerr;
 8016ab2:	bf00      	nop
 8016ab4:	e002      	b.n	8016abc <icmp_input+0x1cc>
    goto lenerr;
 8016ab6:	bf00      	nop
 8016ab8:	e000      	b.n	8016abc <icmp_input+0x1cc>
        goto lenerr;
 8016aba:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016abc:	6878      	ldr	r0, [r7, #4]
 8016abe:	f7f5 ff93 	bl	800c9e8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016ac2:	e00a      	b.n	8016ada <icmp_input+0x1ea>
        goto icmperr;
 8016ac4:	bf00      	nop
 8016ac6:	e004      	b.n	8016ad2 <icmp_input+0x1e2>
        goto icmperr;
 8016ac8:	bf00      	nop
 8016aca:	e002      	b.n	8016ad2 <icmp_input+0x1e2>
          goto icmperr;
 8016acc:	bf00      	nop
 8016ace:	e000      	b.n	8016ad2 <icmp_input+0x1e2>
          goto icmperr;
 8016ad0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016ad2:	6878      	ldr	r0, [r7, #4]
 8016ad4:	f7f5 ff88 	bl	800c9e8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016ad8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016ada:	3728      	adds	r7, #40	; 0x28
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}
 8016ae0:	2000ddec 	.word	0x2000ddec
 8016ae4:	2000de00 	.word	0x2000de00
 8016ae8:	0801d1b8 	.word	0x0801d1b8
 8016aec:	0801d1f0 	.word	0x0801d1f0
 8016af0:	0801d228 	.word	0x0801d228
 8016af4:	0801d250 	.word	0x0801d250

08016af8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b082      	sub	sp, #8
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
 8016b00:	460b      	mov	r3, r1
 8016b02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016b04:	78fb      	ldrb	r3, [r7, #3]
 8016b06:	461a      	mov	r2, r3
 8016b08:	2103      	movs	r1, #3
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f000 f814 	bl	8016b38 <icmp_send_response>
}
 8016b10:	bf00      	nop
 8016b12:	3708      	adds	r7, #8
 8016b14:	46bd      	mov	sp, r7
 8016b16:	bd80      	pop	{r7, pc}

08016b18 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b082      	sub	sp, #8
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
 8016b20:	460b      	mov	r3, r1
 8016b22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016b24:	78fb      	ldrb	r3, [r7, #3]
 8016b26:	461a      	mov	r2, r3
 8016b28:	210b      	movs	r1, #11
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	f000 f804 	bl	8016b38 <icmp_send_response>
}
 8016b30:	bf00      	nop
 8016b32:	3708      	adds	r7, #8
 8016b34:	46bd      	mov	sp, r7
 8016b36:	bd80      	pop	{r7, pc}

08016b38 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b08c      	sub	sp, #48	; 0x30
 8016b3c:	af04      	add	r7, sp, #16
 8016b3e:	6078      	str	r0, [r7, #4]
 8016b40:	460b      	mov	r3, r1
 8016b42:	70fb      	strb	r3, [r7, #3]
 8016b44:	4613      	mov	r3, r2
 8016b46:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016b48:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016b4c:	2124      	movs	r1, #36	; 0x24
 8016b4e:	2022      	movs	r0, #34	; 0x22
 8016b50:	f7f5 fc66 	bl	800c420 <pbuf_alloc>
 8016b54:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016b56:	69fb      	ldr	r3, [r7, #28]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d04c      	beq.n	8016bf6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016b5c:	69fb      	ldr	r3, [r7, #28]
 8016b5e:	895b      	ldrh	r3, [r3, #10]
 8016b60:	2b23      	cmp	r3, #35	; 0x23
 8016b62:	d806      	bhi.n	8016b72 <icmp_send_response+0x3a>
 8016b64:	4b26      	ldr	r3, [pc, #152]	; (8016c00 <icmp_send_response+0xc8>)
 8016b66:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016b6a:	4926      	ldr	r1, [pc, #152]	; (8016c04 <icmp_send_response+0xcc>)
 8016b6c:	4826      	ldr	r0, [pc, #152]	; (8016c08 <icmp_send_response+0xd0>)
 8016b6e:	f001 fd27 	bl	80185c0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	685b      	ldr	r3, [r3, #4]
 8016b76:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016b78:	69fb      	ldr	r3, [r7, #28]
 8016b7a:	685b      	ldr	r3, [r3, #4]
 8016b7c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016b7e:	697b      	ldr	r3, [r7, #20]
 8016b80:	78fa      	ldrb	r2, [r7, #3]
 8016b82:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016b84:	697b      	ldr	r3, [r7, #20]
 8016b86:	78ba      	ldrb	r2, [r7, #2]
 8016b88:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016b8a:	697b      	ldr	r3, [r7, #20]
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	711a      	strb	r2, [r3, #4]
 8016b90:	2200      	movs	r2, #0
 8016b92:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016b94:	697b      	ldr	r3, [r7, #20]
 8016b96:	2200      	movs	r2, #0
 8016b98:	719a      	strb	r2, [r3, #6]
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016b9e:	69fb      	ldr	r3, [r7, #28]
 8016ba0:	685b      	ldr	r3, [r3, #4]
 8016ba2:	f103 0008 	add.w	r0, r3, #8
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	685b      	ldr	r3, [r3, #4]
 8016baa:	221c      	movs	r2, #28
 8016bac:	4619      	mov	r1, r3
 8016bae:	f001 ff07 	bl	80189c0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016bb2:	69bb      	ldr	r3, [r7, #24]
 8016bb4:	68db      	ldr	r3, [r3, #12]
 8016bb6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016bb8:	f107 030c 	add.w	r3, r7, #12
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f000 f825 	bl	8016c0c <ip4_route>
 8016bc2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016bc4:	693b      	ldr	r3, [r7, #16]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d011      	beq.n	8016bee <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016bca:	697b      	ldr	r3, [r7, #20]
 8016bcc:	2200      	movs	r2, #0
 8016bce:	709a      	strb	r2, [r3, #2]
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016bd4:	f107 020c 	add.w	r2, r7, #12
 8016bd8:	693b      	ldr	r3, [r7, #16]
 8016bda:	9302      	str	r3, [sp, #8]
 8016bdc:	2301      	movs	r3, #1
 8016bde:	9301      	str	r3, [sp, #4]
 8016be0:	2300      	movs	r3, #0
 8016be2:	9300      	str	r3, [sp, #0]
 8016be4:	23ff      	movs	r3, #255	; 0xff
 8016be6:	2100      	movs	r1, #0
 8016be8:	69f8      	ldr	r0, [r7, #28]
 8016bea:	f000 f9eb 	bl	8016fc4 <ip4_output_if>
  }
  pbuf_free(q);
 8016bee:	69f8      	ldr	r0, [r7, #28]
 8016bf0:	f7f5 fefa 	bl	800c9e8 <pbuf_free>
 8016bf4:	e000      	b.n	8016bf8 <icmp_send_response+0xc0>
    return;
 8016bf6:	bf00      	nop
}
 8016bf8:	3720      	adds	r7, #32
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}
 8016bfe:	bf00      	nop
 8016c00:	0801d1b8 	.word	0x0801d1b8
 8016c04:	0801d284 	.word	0x0801d284
 8016c08:	0801d228 	.word	0x0801d228

08016c0c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016c0c:	b480      	push	{r7}
 8016c0e:	b085      	sub	sp, #20
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016c14:	4b33      	ldr	r3, [pc, #204]	; (8016ce4 <ip4_route+0xd8>)
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	60fb      	str	r3, [r7, #12]
 8016c1a:	e036      	b.n	8016c8a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c22:	f003 0301 	and.w	r3, r3, #1
 8016c26:	b2db      	uxtb	r3, r3
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d02b      	beq.n	8016c84 <ip4_route+0x78>
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c32:	089b      	lsrs	r3, r3, #2
 8016c34:	f003 0301 	and.w	r3, r3, #1
 8016c38:	b2db      	uxtb	r3, r3
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d022      	beq.n	8016c84 <ip4_route+0x78>
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	3304      	adds	r3, #4
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d01d      	beq.n	8016c84 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681a      	ldr	r2, [r3, #0]
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	3304      	adds	r3, #4
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	405a      	eors	r2, r3
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	3308      	adds	r3, #8
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	4013      	ands	r3, r2
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d101      	bne.n	8016c64 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	e038      	b.n	8016cd6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016c6a:	f003 0302 	and.w	r3, r3, #2
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d108      	bne.n	8016c84 <ip4_route+0x78>
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	681a      	ldr	r2, [r3, #0]
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	330c      	adds	r3, #12
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	429a      	cmp	r2, r3
 8016c7e:	d101      	bne.n	8016c84 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	e028      	b.n	8016cd6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	60fb      	str	r3, [r7, #12]
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d1c5      	bne.n	8016c1c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c90:	4b15      	ldr	r3, [pc, #84]	; (8016ce8 <ip4_route+0xdc>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d01a      	beq.n	8016cce <ip4_route+0xc2>
 8016c98:	4b13      	ldr	r3, [pc, #76]	; (8016ce8 <ip4_route+0xdc>)
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016ca0:	f003 0301 	and.w	r3, r3, #1
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d012      	beq.n	8016cce <ip4_route+0xc2>
 8016ca8:	4b0f      	ldr	r3, [pc, #60]	; (8016ce8 <ip4_route+0xdc>)
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016cb0:	f003 0304 	and.w	r3, r3, #4
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d00a      	beq.n	8016cce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016cb8:	4b0b      	ldr	r3, [pc, #44]	; (8016ce8 <ip4_route+0xdc>)
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	3304      	adds	r3, #4
 8016cbe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d004      	beq.n	8016cce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	b2db      	uxtb	r3, r3
 8016cca:	2b7f      	cmp	r3, #127	; 0x7f
 8016ccc:	d101      	bne.n	8016cd2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016cce:	2300      	movs	r3, #0
 8016cd0:	e001      	b.n	8016cd6 <ip4_route+0xca>
  }

  return netif_default;
 8016cd2:	4b05      	ldr	r3, [pc, #20]	; (8016ce8 <ip4_route+0xdc>)
 8016cd4:	681b      	ldr	r3, [r3, #0]
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	3714      	adds	r7, #20
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce0:	4770      	bx	lr
 8016ce2:	bf00      	nop
 8016ce4:	20011554 	.word	0x20011554
 8016ce8:	20011558 	.word	0x20011558

08016cec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b082      	sub	sp, #8
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016cfa:	f003 0301 	and.w	r3, r3, #1
 8016cfe:	b2db      	uxtb	r3, r3
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d016      	beq.n	8016d32 <ip4_input_accept+0x46>
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	3304      	adds	r3, #4
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d011      	beq.n	8016d32 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016d0e:	4b0b      	ldr	r3, [pc, #44]	; (8016d3c <ip4_input_accept+0x50>)
 8016d10:	695a      	ldr	r2, [r3, #20]
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	3304      	adds	r3, #4
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	429a      	cmp	r2, r3
 8016d1a:	d008      	beq.n	8016d2e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016d1c:	4b07      	ldr	r3, [pc, #28]	; (8016d3c <ip4_input_accept+0x50>)
 8016d1e:	695b      	ldr	r3, [r3, #20]
 8016d20:	6879      	ldr	r1, [r7, #4]
 8016d22:	4618      	mov	r0, r3
 8016d24:	f000 fa26 	bl	8017174 <ip4_addr_isbroadcast_u32>
 8016d28:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d001      	beq.n	8016d32 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016d2e:	2301      	movs	r3, #1
 8016d30:	e000      	b.n	8016d34 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016d32:	2300      	movs	r3, #0
}
 8016d34:	4618      	mov	r0, r3
 8016d36:	3708      	adds	r7, #8
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	bd80      	pop	{r7, pc}
 8016d3c:	2000ddec 	.word	0x2000ddec

08016d40 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b088      	sub	sp, #32
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
 8016d48:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016d4a:	2301      	movs	r3, #1
 8016d4c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	685b      	ldr	r3, [r3, #4]
 8016d52:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016d54:	69fb      	ldr	r3, [r7, #28]
 8016d56:	781b      	ldrb	r3, [r3, #0]
 8016d58:	091b      	lsrs	r3, r3, #4
 8016d5a:	b2db      	uxtb	r3, r3
 8016d5c:	2b04      	cmp	r3, #4
 8016d5e:	d004      	beq.n	8016d6a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016d60:	6878      	ldr	r0, [r7, #4]
 8016d62:	f7f5 fe41 	bl	800c9e8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016d66:	2300      	movs	r3, #0
 8016d68:	e123      	b.n	8016fb2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016d6a:	69fb      	ldr	r3, [r7, #28]
 8016d6c:	781b      	ldrb	r3, [r3, #0]
 8016d6e:	f003 030f 	and.w	r3, r3, #15
 8016d72:	b2db      	uxtb	r3, r3
 8016d74:	009b      	lsls	r3, r3, #2
 8016d76:	b2db      	uxtb	r3, r3
 8016d78:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016d7a:	69fb      	ldr	r3, [r7, #28]
 8016d7c:	885b      	ldrh	r3, [r3, #2]
 8016d7e:	b29b      	uxth	r3, r3
 8016d80:	4618      	mov	r0, r3
 8016d82:	f7f4 f9fd 	bl	800b180 <lwip_htons>
 8016d86:	4603      	mov	r3, r0
 8016d88:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	891b      	ldrh	r3, [r3, #8]
 8016d8e:	8a3a      	ldrh	r2, [r7, #16]
 8016d90:	429a      	cmp	r2, r3
 8016d92:	d204      	bcs.n	8016d9e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016d94:	8a3b      	ldrh	r3, [r7, #16]
 8016d96:	4619      	mov	r1, r3
 8016d98:	6878      	ldr	r0, [r7, #4]
 8016d9a:	f7f5 fc9f 	bl	800c6dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	895b      	ldrh	r3, [r3, #10]
 8016da2:	8a7a      	ldrh	r2, [r7, #18]
 8016da4:	429a      	cmp	r2, r3
 8016da6:	d807      	bhi.n	8016db8 <ip4_input+0x78>
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	891b      	ldrh	r3, [r3, #8]
 8016dac:	8a3a      	ldrh	r2, [r7, #16]
 8016dae:	429a      	cmp	r2, r3
 8016db0:	d802      	bhi.n	8016db8 <ip4_input+0x78>
 8016db2:	8a7b      	ldrh	r3, [r7, #18]
 8016db4:	2b13      	cmp	r3, #19
 8016db6:	d804      	bhi.n	8016dc2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016db8:	6878      	ldr	r0, [r7, #4]
 8016dba:	f7f5 fe15 	bl	800c9e8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	e0f7      	b.n	8016fb2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016dc2:	69fb      	ldr	r3, [r7, #28]
 8016dc4:	691b      	ldr	r3, [r3, #16]
 8016dc6:	4a7d      	ldr	r2, [pc, #500]	; (8016fbc <ip4_input+0x27c>)
 8016dc8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016dca:	69fb      	ldr	r3, [r7, #28]
 8016dcc:	68db      	ldr	r3, [r3, #12]
 8016dce:	4a7b      	ldr	r2, [pc, #492]	; (8016fbc <ip4_input+0x27c>)
 8016dd0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016dd2:	4b7a      	ldr	r3, [pc, #488]	; (8016fbc <ip4_input+0x27c>)
 8016dd4:	695b      	ldr	r3, [r3, #20]
 8016dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016dda:	2be0      	cmp	r3, #224	; 0xe0
 8016ddc:	d112      	bne.n	8016e04 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016dde:	683b      	ldr	r3, [r7, #0]
 8016de0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016de4:	f003 0301 	and.w	r3, r3, #1
 8016de8:	b2db      	uxtb	r3, r3
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d007      	beq.n	8016dfe <ip4_input+0xbe>
 8016dee:	683b      	ldr	r3, [r7, #0]
 8016df0:	3304      	adds	r3, #4
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d002      	beq.n	8016dfe <ip4_input+0xbe>
      netif = inp;
 8016df8:	683b      	ldr	r3, [r7, #0]
 8016dfa:	61bb      	str	r3, [r7, #24]
 8016dfc:	e02a      	b.n	8016e54 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016dfe:	2300      	movs	r3, #0
 8016e00:	61bb      	str	r3, [r7, #24]
 8016e02:	e027      	b.n	8016e54 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016e04:	6838      	ldr	r0, [r7, #0]
 8016e06:	f7ff ff71 	bl	8016cec <ip4_input_accept>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d002      	beq.n	8016e16 <ip4_input+0xd6>
      netif = inp;
 8016e10:	683b      	ldr	r3, [r7, #0]
 8016e12:	61bb      	str	r3, [r7, #24]
 8016e14:	e01e      	b.n	8016e54 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016e16:	2300      	movs	r3, #0
 8016e18:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016e1a:	4b68      	ldr	r3, [pc, #416]	; (8016fbc <ip4_input+0x27c>)
 8016e1c:	695b      	ldr	r3, [r3, #20]
 8016e1e:	b2db      	uxtb	r3, r3
 8016e20:	2b7f      	cmp	r3, #127	; 0x7f
 8016e22:	d017      	beq.n	8016e54 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016e24:	4b66      	ldr	r3, [pc, #408]	; (8016fc0 <ip4_input+0x280>)
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	61bb      	str	r3, [r7, #24]
 8016e2a:	e00e      	b.n	8016e4a <ip4_input+0x10a>
          if (netif == inp) {
 8016e2c:	69ba      	ldr	r2, [r7, #24]
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	429a      	cmp	r2, r3
 8016e32:	d006      	beq.n	8016e42 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016e34:	69b8      	ldr	r0, [r7, #24]
 8016e36:	f7ff ff59 	bl	8016cec <ip4_input_accept>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d108      	bne.n	8016e52 <ip4_input+0x112>
 8016e40:	e000      	b.n	8016e44 <ip4_input+0x104>
            continue;
 8016e42:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016e44:	69bb      	ldr	r3, [r7, #24]
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	61bb      	str	r3, [r7, #24]
 8016e4a:	69bb      	ldr	r3, [r7, #24]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d1ed      	bne.n	8016e2c <ip4_input+0xec>
 8016e50:	e000      	b.n	8016e54 <ip4_input+0x114>
            break;
 8016e52:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016e54:	69bb      	ldr	r3, [r7, #24]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d111      	bne.n	8016e7e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016e5a:	69fb      	ldr	r3, [r7, #28]
 8016e5c:	7a5b      	ldrb	r3, [r3, #9]
 8016e5e:	2b11      	cmp	r3, #17
 8016e60:	d10d      	bne.n	8016e7e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016e62:	8a7b      	ldrh	r3, [r7, #18]
 8016e64:	69fa      	ldr	r2, [r7, #28]
 8016e66:	4413      	add	r3, r2
 8016e68:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	885b      	ldrh	r3, [r3, #2]
 8016e6e:	b29b      	uxth	r3, r3
 8016e70:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016e74:	d103      	bne.n	8016e7e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016e76:	683b      	ldr	r3, [r7, #0]
 8016e78:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016e7e:	697b      	ldr	r3, [r7, #20]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d017      	beq.n	8016eb4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016e84:	4b4d      	ldr	r3, [pc, #308]	; (8016fbc <ip4_input+0x27c>)
 8016e86:	691b      	ldr	r3, [r3, #16]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d013      	beq.n	8016eb4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016e8c:	4b4b      	ldr	r3, [pc, #300]	; (8016fbc <ip4_input+0x27c>)
 8016e8e:	691b      	ldr	r3, [r3, #16]
 8016e90:	6839      	ldr	r1, [r7, #0]
 8016e92:	4618      	mov	r0, r3
 8016e94:	f000 f96e 	bl	8017174 <ip4_addr_isbroadcast_u32>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d105      	bne.n	8016eaa <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016e9e:	4b47      	ldr	r3, [pc, #284]	; (8016fbc <ip4_input+0x27c>)
 8016ea0:	691b      	ldr	r3, [r3, #16]
 8016ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016ea6:	2be0      	cmp	r3, #224	; 0xe0
 8016ea8:	d104      	bne.n	8016eb4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016eaa:	6878      	ldr	r0, [r7, #4]
 8016eac:	f7f5 fd9c 	bl	800c9e8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	e07e      	b.n	8016fb2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016eb4:	69bb      	ldr	r3, [r7, #24]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d104      	bne.n	8016ec4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016eba:	6878      	ldr	r0, [r7, #4]
 8016ebc:	f7f5 fd94 	bl	800c9e8 <pbuf_free>
    return ERR_OK;
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	e076      	b.n	8016fb2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016ec4:	69fb      	ldr	r3, [r7, #28]
 8016ec6:	88db      	ldrh	r3, [r3, #6]
 8016ec8:	b29b      	uxth	r3, r3
 8016eca:	461a      	mov	r2, r3
 8016ecc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016ed0:	4013      	ands	r3, r2
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d00b      	beq.n	8016eee <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016ed6:	6878      	ldr	r0, [r7, #4]
 8016ed8:	f000 fc92 	bl	8017800 <ip4_reass>
 8016edc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d101      	bne.n	8016ee8 <ip4_input+0x1a8>
      return ERR_OK;
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	e064      	b.n	8016fb2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	685b      	ldr	r3, [r3, #4]
 8016eec:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016eee:	4a33      	ldr	r2, [pc, #204]	; (8016fbc <ip4_input+0x27c>)
 8016ef0:	69bb      	ldr	r3, [r7, #24]
 8016ef2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016ef4:	4a31      	ldr	r2, [pc, #196]	; (8016fbc <ip4_input+0x27c>)
 8016ef6:	683b      	ldr	r3, [r7, #0]
 8016ef8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016efa:	4a30      	ldr	r2, [pc, #192]	; (8016fbc <ip4_input+0x27c>)
 8016efc:	69fb      	ldr	r3, [r7, #28]
 8016efe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016f00:	69fb      	ldr	r3, [r7, #28]
 8016f02:	781b      	ldrb	r3, [r3, #0]
 8016f04:	f003 030f 	and.w	r3, r3, #15
 8016f08:	b2db      	uxtb	r3, r3
 8016f0a:	009b      	lsls	r3, r3, #2
 8016f0c:	b2db      	uxtb	r3, r3
 8016f0e:	b29a      	uxth	r2, r3
 8016f10:	4b2a      	ldr	r3, [pc, #168]	; (8016fbc <ip4_input+0x27c>)
 8016f12:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016f14:	8a7b      	ldrh	r3, [r7, #18]
 8016f16:	4619      	mov	r1, r3
 8016f18:	6878      	ldr	r0, [r7, #4]
 8016f1a:	f7f5 fcdf 	bl	800c8dc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016f1e:	69fb      	ldr	r3, [r7, #28]
 8016f20:	7a5b      	ldrb	r3, [r3, #9]
 8016f22:	2b11      	cmp	r3, #17
 8016f24:	d006      	beq.n	8016f34 <ip4_input+0x1f4>
 8016f26:	2b11      	cmp	r3, #17
 8016f28:	dc13      	bgt.n	8016f52 <ip4_input+0x212>
 8016f2a:	2b01      	cmp	r3, #1
 8016f2c:	d00c      	beq.n	8016f48 <ip4_input+0x208>
 8016f2e:	2b06      	cmp	r3, #6
 8016f30:	d005      	beq.n	8016f3e <ip4_input+0x1fe>
 8016f32:	e00e      	b.n	8016f52 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016f34:	6839      	ldr	r1, [r7, #0]
 8016f36:	6878      	ldr	r0, [r7, #4]
 8016f38:	f7fc fade 	bl	80134f8 <udp_input>
        break;
 8016f3c:	e026      	b.n	8016f8c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016f3e:	6839      	ldr	r1, [r7, #0]
 8016f40:	6878      	ldr	r0, [r7, #4]
 8016f42:	f7f7 fe97 	bl	800ec74 <tcp_input>
        break;
 8016f46:	e021      	b.n	8016f8c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016f48:	6839      	ldr	r1, [r7, #0]
 8016f4a:	6878      	ldr	r0, [r7, #4]
 8016f4c:	f7ff fcd0 	bl	80168f0 <icmp_input>
        break;
 8016f50:	e01c      	b.n	8016f8c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016f52:	4b1a      	ldr	r3, [pc, #104]	; (8016fbc <ip4_input+0x27c>)
 8016f54:	695b      	ldr	r3, [r3, #20]
 8016f56:	69b9      	ldr	r1, [r7, #24]
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f000 f90b 	bl	8017174 <ip4_addr_isbroadcast_u32>
 8016f5e:	4603      	mov	r3, r0
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d10f      	bne.n	8016f84 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016f64:	4b15      	ldr	r3, [pc, #84]	; (8016fbc <ip4_input+0x27c>)
 8016f66:	695b      	ldr	r3, [r3, #20]
 8016f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016f6c:	2be0      	cmp	r3, #224	; 0xe0
 8016f6e:	d009      	beq.n	8016f84 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016f70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016f74:	4619      	mov	r1, r3
 8016f76:	6878      	ldr	r0, [r7, #4]
 8016f78:	f7f5 fd23 	bl	800c9c2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016f7c:	2102      	movs	r1, #2
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f7ff fdba 	bl	8016af8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016f84:	6878      	ldr	r0, [r7, #4]
 8016f86:	f7f5 fd2f 	bl	800c9e8 <pbuf_free>
        break;
 8016f8a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016f8c:	4b0b      	ldr	r3, [pc, #44]	; (8016fbc <ip4_input+0x27c>)
 8016f8e:	2200      	movs	r2, #0
 8016f90:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016f92:	4b0a      	ldr	r3, [pc, #40]	; (8016fbc <ip4_input+0x27c>)
 8016f94:	2200      	movs	r2, #0
 8016f96:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016f98:	4b08      	ldr	r3, [pc, #32]	; (8016fbc <ip4_input+0x27c>)
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016f9e:	4b07      	ldr	r3, [pc, #28]	; (8016fbc <ip4_input+0x27c>)
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016fa4:	4b05      	ldr	r3, [pc, #20]	; (8016fbc <ip4_input+0x27c>)
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016faa:	4b04      	ldr	r3, [pc, #16]	; (8016fbc <ip4_input+0x27c>)
 8016fac:	2200      	movs	r2, #0
 8016fae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016fb0:	2300      	movs	r3, #0
}
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	3720      	adds	r7, #32
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}
 8016fba:	bf00      	nop
 8016fbc:	2000ddec 	.word	0x2000ddec
 8016fc0:	20011554 	.word	0x20011554

08016fc4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b08a      	sub	sp, #40	; 0x28
 8016fc8:	af04      	add	r7, sp, #16
 8016fca:	60f8      	str	r0, [r7, #12]
 8016fcc:	60b9      	str	r1, [r7, #8]
 8016fce:	607a      	str	r2, [r7, #4]
 8016fd0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016fd2:	68bb      	ldr	r3, [r7, #8]
 8016fd4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d009      	beq.n	8016ff0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016fdc:	68bb      	ldr	r3, [r7, #8]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d003      	beq.n	8016fea <ip4_output_if+0x26>
 8016fe2:	68bb      	ldr	r3, [r7, #8]
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d102      	bne.n	8016ff0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fec:	3304      	adds	r3, #4
 8016fee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016ff0:	78fa      	ldrb	r2, [r7, #3]
 8016ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ff4:	9302      	str	r3, [sp, #8]
 8016ff6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016ffa:	9301      	str	r3, [sp, #4]
 8016ffc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017000:	9300      	str	r3, [sp, #0]
 8017002:	4613      	mov	r3, r2
 8017004:	687a      	ldr	r2, [r7, #4]
 8017006:	6979      	ldr	r1, [r7, #20]
 8017008:	68f8      	ldr	r0, [r7, #12]
 801700a:	f000 f805 	bl	8017018 <ip4_output_if_src>
 801700e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017010:	4618      	mov	r0, r3
 8017012:	3718      	adds	r7, #24
 8017014:	46bd      	mov	sp, r7
 8017016:	bd80      	pop	{r7, pc}

08017018 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b088      	sub	sp, #32
 801701c:	af00      	add	r7, sp, #0
 801701e:	60f8      	str	r0, [r7, #12]
 8017020:	60b9      	str	r1, [r7, #8]
 8017022:	607a      	str	r2, [r7, #4]
 8017024:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	7b9b      	ldrb	r3, [r3, #14]
 801702a:	2b01      	cmp	r3, #1
 801702c:	d006      	beq.n	801703c <ip4_output_if_src+0x24>
 801702e:	4b4b      	ldr	r3, [pc, #300]	; (801715c <ip4_output_if_src+0x144>)
 8017030:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017034:	494a      	ldr	r1, [pc, #296]	; (8017160 <ip4_output_if_src+0x148>)
 8017036:	484b      	ldr	r0, [pc, #300]	; (8017164 <ip4_output_if_src+0x14c>)
 8017038:	f001 fac2 	bl	80185c0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d060      	beq.n	8017104 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017042:	2314      	movs	r3, #20
 8017044:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017046:	2114      	movs	r1, #20
 8017048:	68f8      	ldr	r0, [r7, #12]
 801704a:	f7f5 fc37 	bl	800c8bc <pbuf_add_header>
 801704e:	4603      	mov	r3, r0
 8017050:	2b00      	cmp	r3, #0
 8017052:	d002      	beq.n	801705a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017054:	f06f 0301 	mvn.w	r3, #1
 8017058:	e07c      	b.n	8017154 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	685b      	ldr	r3, [r3, #4]
 801705e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	895b      	ldrh	r3, [r3, #10]
 8017064:	2b13      	cmp	r3, #19
 8017066:	d806      	bhi.n	8017076 <ip4_output_if_src+0x5e>
 8017068:	4b3c      	ldr	r3, [pc, #240]	; (801715c <ip4_output_if_src+0x144>)
 801706a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801706e:	493e      	ldr	r1, [pc, #248]	; (8017168 <ip4_output_if_src+0x150>)
 8017070:	483c      	ldr	r0, [pc, #240]	; (8017164 <ip4_output_if_src+0x14c>)
 8017072:	f001 faa5 	bl	80185c0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017076:	69fb      	ldr	r3, [r7, #28]
 8017078:	78fa      	ldrb	r2, [r7, #3]
 801707a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801707c:	69fb      	ldr	r3, [r7, #28]
 801707e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017082:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	681a      	ldr	r2, [r3, #0]
 8017088:	69fb      	ldr	r3, [r7, #28]
 801708a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801708c:	8b7b      	ldrh	r3, [r7, #26]
 801708e:	089b      	lsrs	r3, r3, #2
 8017090:	b29b      	uxth	r3, r3
 8017092:	b2db      	uxtb	r3, r3
 8017094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017098:	b2da      	uxtb	r2, r3
 801709a:	69fb      	ldr	r3, [r7, #28]
 801709c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801709e:	69fb      	ldr	r3, [r7, #28]
 80170a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80170a4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	891b      	ldrh	r3, [r3, #8]
 80170aa:	4618      	mov	r0, r3
 80170ac:	f7f4 f868 	bl	800b180 <lwip_htons>
 80170b0:	4603      	mov	r3, r0
 80170b2:	461a      	mov	r2, r3
 80170b4:	69fb      	ldr	r3, [r7, #28]
 80170b6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80170b8:	69fb      	ldr	r3, [r7, #28]
 80170ba:	2200      	movs	r2, #0
 80170bc:	719a      	strb	r2, [r3, #6]
 80170be:	2200      	movs	r2, #0
 80170c0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80170c2:	4b2a      	ldr	r3, [pc, #168]	; (801716c <ip4_output_if_src+0x154>)
 80170c4:	881b      	ldrh	r3, [r3, #0]
 80170c6:	4618      	mov	r0, r3
 80170c8:	f7f4 f85a 	bl	800b180 <lwip_htons>
 80170cc:	4603      	mov	r3, r0
 80170ce:	461a      	mov	r2, r3
 80170d0:	69fb      	ldr	r3, [r7, #28]
 80170d2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80170d4:	4b25      	ldr	r3, [pc, #148]	; (801716c <ip4_output_if_src+0x154>)
 80170d6:	881b      	ldrh	r3, [r3, #0]
 80170d8:	3301      	adds	r3, #1
 80170da:	b29a      	uxth	r2, r3
 80170dc:	4b23      	ldr	r3, [pc, #140]	; (801716c <ip4_output_if_src+0x154>)
 80170de:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80170e0:	68bb      	ldr	r3, [r7, #8]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d104      	bne.n	80170f0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80170e6:	4b22      	ldr	r3, [pc, #136]	; (8017170 <ip4_output_if_src+0x158>)
 80170e8:	681a      	ldr	r2, [r3, #0]
 80170ea:	69fb      	ldr	r3, [r7, #28]
 80170ec:	60da      	str	r2, [r3, #12]
 80170ee:	e003      	b.n	80170f8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80170f0:	68bb      	ldr	r3, [r7, #8]
 80170f2:	681a      	ldr	r2, [r3, #0]
 80170f4:	69fb      	ldr	r3, [r7, #28]
 80170f6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80170f8:	69fb      	ldr	r3, [r7, #28]
 80170fa:	2200      	movs	r2, #0
 80170fc:	729a      	strb	r2, [r3, #10]
 80170fe:	2200      	movs	r2, #0
 8017100:	72da      	strb	r2, [r3, #11]
 8017102:	e00f      	b.n	8017124 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	895b      	ldrh	r3, [r3, #10]
 8017108:	2b13      	cmp	r3, #19
 801710a:	d802      	bhi.n	8017112 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801710c:	f06f 0301 	mvn.w	r3, #1
 8017110:	e020      	b.n	8017154 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	685b      	ldr	r3, [r3, #4]
 8017116:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017118:	69fb      	ldr	r3, [r7, #28]
 801711a:	691b      	ldr	r3, [r3, #16]
 801711c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801711e:	f107 0314 	add.w	r3, r7, #20
 8017122:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017128:	2b00      	cmp	r3, #0
 801712a:	d00c      	beq.n	8017146 <ip4_output_if_src+0x12e>
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	891a      	ldrh	r2, [r3, #8]
 8017130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017134:	429a      	cmp	r2, r3
 8017136:	d906      	bls.n	8017146 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017138:	687a      	ldr	r2, [r7, #4]
 801713a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801713c:	68f8      	ldr	r0, [r7, #12]
 801713e:	f000 fd53 	bl	8017be8 <ip4_frag>
 8017142:	4603      	mov	r3, r0
 8017144:	e006      	b.n	8017154 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017148:	695b      	ldr	r3, [r3, #20]
 801714a:	687a      	ldr	r2, [r7, #4]
 801714c:	68f9      	ldr	r1, [r7, #12]
 801714e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017150:	4798      	blx	r3
 8017152:	4603      	mov	r3, r0
}
 8017154:	4618      	mov	r0, r3
 8017156:	3720      	adds	r7, #32
 8017158:	46bd      	mov	sp, r7
 801715a:	bd80      	pop	{r7, pc}
 801715c:	0801d2b0 	.word	0x0801d2b0
 8017160:	0801d2e4 	.word	0x0801d2e4
 8017164:	0801d2f0 	.word	0x0801d2f0
 8017168:	0801d318 	.word	0x0801d318
 801716c:	200116e6 	.word	0x200116e6
 8017170:	08027884 	.word	0x08027884

08017174 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017174:	b480      	push	{r7}
 8017176:	b085      	sub	sp, #20
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017188:	d002      	beq.n	8017190 <ip4_addr_isbroadcast_u32+0x1c>
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d101      	bne.n	8017194 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017190:	2301      	movs	r3, #1
 8017192:	e02a      	b.n	80171ea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017194:	683b      	ldr	r3, [r7, #0]
 8017196:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801719a:	f003 0302 	and.w	r3, r3, #2
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d101      	bne.n	80171a6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80171a2:	2300      	movs	r3, #0
 80171a4:	e021      	b.n	80171ea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80171a6:	683b      	ldr	r3, [r7, #0]
 80171a8:	3304      	adds	r3, #4
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	687a      	ldr	r2, [r7, #4]
 80171ae:	429a      	cmp	r2, r3
 80171b0:	d101      	bne.n	80171b6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80171b2:	2300      	movs	r3, #0
 80171b4:	e019      	b.n	80171ea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80171b6:	68fa      	ldr	r2, [r7, #12]
 80171b8:	683b      	ldr	r3, [r7, #0]
 80171ba:	3304      	adds	r3, #4
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	405a      	eors	r2, r3
 80171c0:	683b      	ldr	r3, [r7, #0]
 80171c2:	3308      	adds	r3, #8
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	4013      	ands	r3, r2
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d10d      	bne.n	80171e8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80171cc:	683b      	ldr	r3, [r7, #0]
 80171ce:	3308      	adds	r3, #8
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	43da      	mvns	r2, r3
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80171d8:	683b      	ldr	r3, [r7, #0]
 80171da:	3308      	adds	r3, #8
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80171e0:	429a      	cmp	r2, r3
 80171e2:	d101      	bne.n	80171e8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80171e4:	2301      	movs	r3, #1
 80171e6:	e000      	b.n	80171ea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80171e8:	2300      	movs	r3, #0
  }
}
 80171ea:	4618      	mov	r0, r3
 80171ec:	3714      	adds	r7, #20
 80171ee:	46bd      	mov	sp, r7
 80171f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f4:	4770      	bx	lr
	...

080171f8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b084      	sub	sp, #16
 80171fc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80171fe:	2300      	movs	r3, #0
 8017200:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017202:	4b12      	ldr	r3, [pc, #72]	; (801724c <ip_reass_tmr+0x54>)
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017208:	e018      	b.n	801723c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	7fdb      	ldrb	r3, [r3, #31]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d00b      	beq.n	801722a <ip_reass_tmr+0x32>
      r->timer--;
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	7fdb      	ldrb	r3, [r3, #31]
 8017216:	3b01      	subs	r3, #1
 8017218:	b2da      	uxtb	r2, r3
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	60fb      	str	r3, [r7, #12]
 8017228:	e008      	b.n	801723c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017234:	68b9      	ldr	r1, [r7, #8]
 8017236:	6878      	ldr	r0, [r7, #4]
 8017238:	f000 f80a 	bl	8017250 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d1e3      	bne.n	801720a <ip_reass_tmr+0x12>
    }
  }
}
 8017242:	bf00      	nop
 8017244:	bf00      	nop
 8017246:	3710      	adds	r7, #16
 8017248:	46bd      	mov	sp, r7
 801724a:	bd80      	pop	{r7, pc}
 801724c:	200116e8 	.word	0x200116e8

08017250 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b088      	sub	sp, #32
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
 8017258:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801725a:	2300      	movs	r3, #0
 801725c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801725e:	683a      	ldr	r2, [r7, #0]
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	429a      	cmp	r2, r3
 8017264:	d105      	bne.n	8017272 <ip_reass_free_complete_datagram+0x22>
 8017266:	4b45      	ldr	r3, [pc, #276]	; (801737c <ip_reass_free_complete_datagram+0x12c>)
 8017268:	22ab      	movs	r2, #171	; 0xab
 801726a:	4945      	ldr	r1, [pc, #276]	; (8017380 <ip_reass_free_complete_datagram+0x130>)
 801726c:	4845      	ldr	r0, [pc, #276]	; (8017384 <ip_reass_free_complete_datagram+0x134>)
 801726e:	f001 f9a7 	bl	80185c0 <iprintf>
  if (prev != NULL) {
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d00a      	beq.n	801728e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017278:	683b      	ldr	r3, [r7, #0]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	687a      	ldr	r2, [r7, #4]
 801727e:	429a      	cmp	r2, r3
 8017280:	d005      	beq.n	801728e <ip_reass_free_complete_datagram+0x3e>
 8017282:	4b3e      	ldr	r3, [pc, #248]	; (801737c <ip_reass_free_complete_datagram+0x12c>)
 8017284:	22ad      	movs	r2, #173	; 0xad
 8017286:	4940      	ldr	r1, [pc, #256]	; (8017388 <ip_reass_free_complete_datagram+0x138>)
 8017288:	483e      	ldr	r0, [pc, #248]	; (8017384 <ip_reass_free_complete_datagram+0x134>)
 801728a:	f001 f999 	bl	80185c0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	685b      	ldr	r3, [r3, #4]
 8017292:	685b      	ldr	r3, [r3, #4]
 8017294:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017296:	697b      	ldr	r3, [r7, #20]
 8017298:	889b      	ldrh	r3, [r3, #4]
 801729a:	b29b      	uxth	r3, r3
 801729c:	2b00      	cmp	r3, #0
 801729e:	d12a      	bne.n	80172f6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	685b      	ldr	r3, [r3, #4]
 80172a4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80172a6:	697b      	ldr	r3, [r7, #20]
 80172a8:	681a      	ldr	r2, [r3, #0]
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80172ae:	69bb      	ldr	r3, [r7, #24]
 80172b0:	6858      	ldr	r0, [r3, #4]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	3308      	adds	r3, #8
 80172b6:	2214      	movs	r2, #20
 80172b8:	4619      	mov	r1, r3
 80172ba:	f001 fb81 	bl	80189c0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80172be:	2101      	movs	r1, #1
 80172c0:	69b8      	ldr	r0, [r7, #24]
 80172c2:	f7ff fc29 	bl	8016b18 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80172c6:	69b8      	ldr	r0, [r7, #24]
 80172c8:	f7f5 fc1c 	bl	800cb04 <pbuf_clen>
 80172cc:	4603      	mov	r3, r0
 80172ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80172d0:	8bfa      	ldrh	r2, [r7, #30]
 80172d2:	8a7b      	ldrh	r3, [r7, #18]
 80172d4:	4413      	add	r3, r2
 80172d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80172da:	db05      	blt.n	80172e8 <ip_reass_free_complete_datagram+0x98>
 80172dc:	4b27      	ldr	r3, [pc, #156]	; (801737c <ip_reass_free_complete_datagram+0x12c>)
 80172de:	22bc      	movs	r2, #188	; 0xbc
 80172e0:	492a      	ldr	r1, [pc, #168]	; (801738c <ip_reass_free_complete_datagram+0x13c>)
 80172e2:	4828      	ldr	r0, [pc, #160]	; (8017384 <ip_reass_free_complete_datagram+0x134>)
 80172e4:	f001 f96c 	bl	80185c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80172e8:	8bfa      	ldrh	r2, [r7, #30]
 80172ea:	8a7b      	ldrh	r3, [r7, #18]
 80172ec:	4413      	add	r3, r2
 80172ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80172f0:	69b8      	ldr	r0, [r7, #24]
 80172f2:	f7f5 fb79 	bl	800c9e8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	685b      	ldr	r3, [r3, #4]
 80172fa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80172fc:	e01f      	b.n	801733e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80172fe:	69bb      	ldr	r3, [r7, #24]
 8017300:	685b      	ldr	r3, [r3, #4]
 8017302:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017304:	69bb      	ldr	r3, [r7, #24]
 8017306:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017308:	697b      	ldr	r3, [r7, #20]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801730e:	68f8      	ldr	r0, [r7, #12]
 8017310:	f7f5 fbf8 	bl	800cb04 <pbuf_clen>
 8017314:	4603      	mov	r3, r0
 8017316:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017318:	8bfa      	ldrh	r2, [r7, #30]
 801731a:	8a7b      	ldrh	r3, [r7, #18]
 801731c:	4413      	add	r3, r2
 801731e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017322:	db05      	blt.n	8017330 <ip_reass_free_complete_datagram+0xe0>
 8017324:	4b15      	ldr	r3, [pc, #84]	; (801737c <ip_reass_free_complete_datagram+0x12c>)
 8017326:	22cc      	movs	r2, #204	; 0xcc
 8017328:	4918      	ldr	r1, [pc, #96]	; (801738c <ip_reass_free_complete_datagram+0x13c>)
 801732a:	4816      	ldr	r0, [pc, #88]	; (8017384 <ip_reass_free_complete_datagram+0x134>)
 801732c:	f001 f948 	bl	80185c0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017330:	8bfa      	ldrh	r2, [r7, #30]
 8017332:	8a7b      	ldrh	r3, [r7, #18]
 8017334:	4413      	add	r3, r2
 8017336:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017338:	68f8      	ldr	r0, [r7, #12]
 801733a:	f7f5 fb55 	bl	800c9e8 <pbuf_free>
  while (p != NULL) {
 801733e:	69bb      	ldr	r3, [r7, #24]
 8017340:	2b00      	cmp	r3, #0
 8017342:	d1dc      	bne.n	80172fe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017344:	6839      	ldr	r1, [r7, #0]
 8017346:	6878      	ldr	r0, [r7, #4]
 8017348:	f000 f8c2 	bl	80174d0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801734c:	4b10      	ldr	r3, [pc, #64]	; (8017390 <ip_reass_free_complete_datagram+0x140>)
 801734e:	881b      	ldrh	r3, [r3, #0]
 8017350:	8bfa      	ldrh	r2, [r7, #30]
 8017352:	429a      	cmp	r2, r3
 8017354:	d905      	bls.n	8017362 <ip_reass_free_complete_datagram+0x112>
 8017356:	4b09      	ldr	r3, [pc, #36]	; (801737c <ip_reass_free_complete_datagram+0x12c>)
 8017358:	22d2      	movs	r2, #210	; 0xd2
 801735a:	490e      	ldr	r1, [pc, #56]	; (8017394 <ip_reass_free_complete_datagram+0x144>)
 801735c:	4809      	ldr	r0, [pc, #36]	; (8017384 <ip_reass_free_complete_datagram+0x134>)
 801735e:	f001 f92f 	bl	80185c0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017362:	4b0b      	ldr	r3, [pc, #44]	; (8017390 <ip_reass_free_complete_datagram+0x140>)
 8017364:	881a      	ldrh	r2, [r3, #0]
 8017366:	8bfb      	ldrh	r3, [r7, #30]
 8017368:	1ad3      	subs	r3, r2, r3
 801736a:	b29a      	uxth	r2, r3
 801736c:	4b08      	ldr	r3, [pc, #32]	; (8017390 <ip_reass_free_complete_datagram+0x140>)
 801736e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017370:	8bfb      	ldrh	r3, [r7, #30]
}
 8017372:	4618      	mov	r0, r3
 8017374:	3720      	adds	r7, #32
 8017376:	46bd      	mov	sp, r7
 8017378:	bd80      	pop	{r7, pc}
 801737a:	bf00      	nop
 801737c:	0801d348 	.word	0x0801d348
 8017380:	0801d384 	.word	0x0801d384
 8017384:	0801d390 	.word	0x0801d390
 8017388:	0801d3b8 	.word	0x0801d3b8
 801738c:	0801d3cc 	.word	0x0801d3cc
 8017390:	200116ec 	.word	0x200116ec
 8017394:	0801d3ec 	.word	0x0801d3ec

08017398 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b08a      	sub	sp, #40	; 0x28
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
 80173a0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80173a2:	2300      	movs	r3, #0
 80173a4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80173a6:	2300      	movs	r3, #0
 80173a8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80173aa:	2300      	movs	r3, #0
 80173ac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80173ae:	2300      	movs	r3, #0
 80173b0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80173b2:	2300      	movs	r3, #0
 80173b4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80173b6:	4b28      	ldr	r3, [pc, #160]	; (8017458 <ip_reass_remove_oldest_datagram+0xc0>)
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80173bc:	e030      	b.n	8017420 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80173be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c0:	695a      	ldr	r2, [r3, #20]
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	68db      	ldr	r3, [r3, #12]
 80173c6:	429a      	cmp	r2, r3
 80173c8:	d10c      	bne.n	80173e4 <ip_reass_remove_oldest_datagram+0x4c>
 80173ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173cc:	699a      	ldr	r2, [r3, #24]
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	691b      	ldr	r3, [r3, #16]
 80173d2:	429a      	cmp	r2, r3
 80173d4:	d106      	bne.n	80173e4 <ip_reass_remove_oldest_datagram+0x4c>
 80173d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d8:	899a      	ldrh	r2, [r3, #12]
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	889b      	ldrh	r3, [r3, #4]
 80173de:	b29b      	uxth	r3, r3
 80173e0:	429a      	cmp	r2, r3
 80173e2:	d014      	beq.n	801740e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80173e4:	693b      	ldr	r3, [r7, #16]
 80173e6:	3301      	adds	r3, #1
 80173e8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80173ea:	6a3b      	ldr	r3, [r7, #32]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d104      	bne.n	80173fa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80173f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173f2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80173f4:	69fb      	ldr	r3, [r7, #28]
 80173f6:	61bb      	str	r3, [r7, #24]
 80173f8:	e009      	b.n	801740e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80173fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173fc:	7fda      	ldrb	r2, [r3, #31]
 80173fe:	6a3b      	ldr	r3, [r7, #32]
 8017400:	7fdb      	ldrb	r3, [r3, #31]
 8017402:	429a      	cmp	r2, r3
 8017404:	d803      	bhi.n	801740e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017408:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801740a:	69fb      	ldr	r3, [r7, #28]
 801740c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d001      	beq.n	801741a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017418:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017422:	2b00      	cmp	r3, #0
 8017424:	d1cb      	bne.n	80173be <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017426:	6a3b      	ldr	r3, [r7, #32]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d008      	beq.n	801743e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801742c:	69b9      	ldr	r1, [r7, #24]
 801742e:	6a38      	ldr	r0, [r7, #32]
 8017430:	f7ff ff0e 	bl	8017250 <ip_reass_free_complete_datagram>
 8017434:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017436:	697a      	ldr	r2, [r7, #20]
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	4413      	add	r3, r2
 801743c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801743e:	697a      	ldr	r2, [r7, #20]
 8017440:	683b      	ldr	r3, [r7, #0]
 8017442:	429a      	cmp	r2, r3
 8017444:	da02      	bge.n	801744c <ip_reass_remove_oldest_datagram+0xb4>
 8017446:	693b      	ldr	r3, [r7, #16]
 8017448:	2b01      	cmp	r3, #1
 801744a:	dcac      	bgt.n	80173a6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801744c:	697b      	ldr	r3, [r7, #20]
}
 801744e:	4618      	mov	r0, r3
 8017450:	3728      	adds	r7, #40	; 0x28
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}
 8017456:	bf00      	nop
 8017458:	200116e8 	.word	0x200116e8

0801745c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b084      	sub	sp, #16
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
 8017464:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017466:	2004      	movs	r0, #4
 8017468:	f7f4 fb98 	bl	800bb9c <memp_malloc>
 801746c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d110      	bne.n	8017496 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017474:	6839      	ldr	r1, [r7, #0]
 8017476:	6878      	ldr	r0, [r7, #4]
 8017478:	f7ff ff8e 	bl	8017398 <ip_reass_remove_oldest_datagram>
 801747c:	4602      	mov	r2, r0
 801747e:	683b      	ldr	r3, [r7, #0]
 8017480:	4293      	cmp	r3, r2
 8017482:	dc03      	bgt.n	801748c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017484:	2004      	movs	r0, #4
 8017486:	f7f4 fb89 	bl	800bb9c <memp_malloc>
 801748a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d101      	bne.n	8017496 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017492:	2300      	movs	r3, #0
 8017494:	e016      	b.n	80174c4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017496:	2220      	movs	r2, #32
 8017498:	2100      	movs	r1, #0
 801749a:	68f8      	ldr	r0, [r7, #12]
 801749c:	f001 f92f 	bl	80186fe <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	220f      	movs	r2, #15
 80174a4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80174a6:	4b09      	ldr	r3, [pc, #36]	; (80174cc <ip_reass_enqueue_new_datagram+0x70>)
 80174a8:	681a      	ldr	r2, [r3, #0]
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80174ae:	4a07      	ldr	r2, [pc, #28]	; (80174cc <ip_reass_enqueue_new_datagram+0x70>)
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	3308      	adds	r3, #8
 80174b8:	2214      	movs	r2, #20
 80174ba:	6879      	ldr	r1, [r7, #4]
 80174bc:	4618      	mov	r0, r3
 80174be:	f001 fa7f 	bl	80189c0 <memcpy>
  return ipr;
 80174c2:	68fb      	ldr	r3, [r7, #12]
}
 80174c4:	4618      	mov	r0, r3
 80174c6:	3710      	adds	r7, #16
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd80      	pop	{r7, pc}
 80174cc:	200116e8 	.word	0x200116e8

080174d0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b082      	sub	sp, #8
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
 80174d8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80174da:	4b10      	ldr	r3, [pc, #64]	; (801751c <ip_reass_dequeue_datagram+0x4c>)
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	687a      	ldr	r2, [r7, #4]
 80174e0:	429a      	cmp	r2, r3
 80174e2:	d104      	bne.n	80174ee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	4a0c      	ldr	r2, [pc, #48]	; (801751c <ip_reass_dequeue_datagram+0x4c>)
 80174ea:	6013      	str	r3, [r2, #0]
 80174ec:	e00d      	b.n	801750a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80174ee:	683b      	ldr	r3, [r7, #0]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d106      	bne.n	8017502 <ip_reass_dequeue_datagram+0x32>
 80174f4:	4b0a      	ldr	r3, [pc, #40]	; (8017520 <ip_reass_dequeue_datagram+0x50>)
 80174f6:	f240 1245 	movw	r2, #325	; 0x145
 80174fa:	490a      	ldr	r1, [pc, #40]	; (8017524 <ip_reass_dequeue_datagram+0x54>)
 80174fc:	480a      	ldr	r0, [pc, #40]	; (8017528 <ip_reass_dequeue_datagram+0x58>)
 80174fe:	f001 f85f 	bl	80185c0 <iprintf>
    prev->next = ipr->next;
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	681a      	ldr	r2, [r3, #0]
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801750a:	6879      	ldr	r1, [r7, #4]
 801750c:	2004      	movs	r0, #4
 801750e:	f7f4 fbbb 	bl	800bc88 <memp_free>
}
 8017512:	bf00      	nop
 8017514:	3708      	adds	r7, #8
 8017516:	46bd      	mov	sp, r7
 8017518:	bd80      	pop	{r7, pc}
 801751a:	bf00      	nop
 801751c:	200116e8 	.word	0x200116e8
 8017520:	0801d348 	.word	0x0801d348
 8017524:	0801d410 	.word	0x0801d410
 8017528:	0801d390 	.word	0x0801d390

0801752c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b08c      	sub	sp, #48	; 0x30
 8017530:	af00      	add	r7, sp, #0
 8017532:	60f8      	str	r0, [r7, #12]
 8017534:	60b9      	str	r1, [r7, #8]
 8017536:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017538:	2300      	movs	r3, #0
 801753a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801753c:	2301      	movs	r3, #1
 801753e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017540:	68bb      	ldr	r3, [r7, #8]
 8017542:	685b      	ldr	r3, [r3, #4]
 8017544:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017546:	69fb      	ldr	r3, [r7, #28]
 8017548:	885b      	ldrh	r3, [r3, #2]
 801754a:	b29b      	uxth	r3, r3
 801754c:	4618      	mov	r0, r3
 801754e:	f7f3 fe17 	bl	800b180 <lwip_htons>
 8017552:	4603      	mov	r3, r0
 8017554:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017556:	69fb      	ldr	r3, [r7, #28]
 8017558:	781b      	ldrb	r3, [r3, #0]
 801755a:	f003 030f 	and.w	r3, r3, #15
 801755e:	b2db      	uxtb	r3, r3
 8017560:	009b      	lsls	r3, r3, #2
 8017562:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017564:	7e7b      	ldrb	r3, [r7, #25]
 8017566:	b29b      	uxth	r3, r3
 8017568:	8b7a      	ldrh	r2, [r7, #26]
 801756a:	429a      	cmp	r2, r3
 801756c:	d202      	bcs.n	8017574 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801756e:	f04f 33ff 	mov.w	r3, #4294967295
 8017572:	e135      	b.n	80177e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017574:	7e7b      	ldrb	r3, [r7, #25]
 8017576:	b29b      	uxth	r3, r3
 8017578:	8b7a      	ldrh	r2, [r7, #26]
 801757a:	1ad3      	subs	r3, r2, r3
 801757c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801757e:	69fb      	ldr	r3, [r7, #28]
 8017580:	88db      	ldrh	r3, [r3, #6]
 8017582:	b29b      	uxth	r3, r3
 8017584:	4618      	mov	r0, r3
 8017586:	f7f3 fdfb 	bl	800b180 <lwip_htons>
 801758a:	4603      	mov	r3, r0
 801758c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017590:	b29b      	uxth	r3, r3
 8017592:	00db      	lsls	r3, r3, #3
 8017594:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017596:	68bb      	ldr	r3, [r7, #8]
 8017598:	685b      	ldr	r3, [r3, #4]
 801759a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801759c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801759e:	2200      	movs	r2, #0
 80175a0:	701a      	strb	r2, [r3, #0]
 80175a2:	2200      	movs	r2, #0
 80175a4:	705a      	strb	r2, [r3, #1]
 80175a6:	2200      	movs	r2, #0
 80175a8:	709a      	strb	r2, [r3, #2]
 80175aa:	2200      	movs	r2, #0
 80175ac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80175ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175b0:	8afa      	ldrh	r2, [r7, #22]
 80175b2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80175b4:	8afa      	ldrh	r2, [r7, #22]
 80175b6:	8b7b      	ldrh	r3, [r7, #26]
 80175b8:	4413      	add	r3, r2
 80175ba:	b29a      	uxth	r2, r3
 80175bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175be:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80175c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c2:	88db      	ldrh	r3, [r3, #6]
 80175c4:	b29b      	uxth	r3, r3
 80175c6:	8afa      	ldrh	r2, [r7, #22]
 80175c8:	429a      	cmp	r2, r3
 80175ca:	d902      	bls.n	80175d2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80175cc:	f04f 33ff 	mov.w	r3, #4294967295
 80175d0:	e106      	b.n	80177e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	685b      	ldr	r3, [r3, #4]
 80175d6:	627b      	str	r3, [r7, #36]	; 0x24
 80175d8:	e068      	b.n	80176ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80175da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175dc:	685b      	ldr	r3, [r3, #4]
 80175de:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80175e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e2:	889b      	ldrh	r3, [r3, #4]
 80175e4:	b29a      	uxth	r2, r3
 80175e6:	693b      	ldr	r3, [r7, #16]
 80175e8:	889b      	ldrh	r3, [r3, #4]
 80175ea:	b29b      	uxth	r3, r3
 80175ec:	429a      	cmp	r2, r3
 80175ee:	d235      	bcs.n	801765c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80175f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80175f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d020      	beq.n	801763e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80175fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175fe:	889b      	ldrh	r3, [r3, #4]
 8017600:	b29a      	uxth	r2, r3
 8017602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017604:	88db      	ldrh	r3, [r3, #6]
 8017606:	b29b      	uxth	r3, r3
 8017608:	429a      	cmp	r2, r3
 801760a:	d307      	bcc.n	801761c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801760c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801760e:	88db      	ldrh	r3, [r3, #6]
 8017610:	b29a      	uxth	r2, r3
 8017612:	693b      	ldr	r3, [r7, #16]
 8017614:	889b      	ldrh	r3, [r3, #4]
 8017616:	b29b      	uxth	r3, r3
 8017618:	429a      	cmp	r2, r3
 801761a:	d902      	bls.n	8017622 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801761c:	f04f 33ff 	mov.w	r3, #4294967295
 8017620:	e0de      	b.n	80177e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017624:	68ba      	ldr	r2, [r7, #8]
 8017626:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801762a:	88db      	ldrh	r3, [r3, #6]
 801762c:	b29a      	uxth	r2, r3
 801762e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017630:	889b      	ldrh	r3, [r3, #4]
 8017632:	b29b      	uxth	r3, r3
 8017634:	429a      	cmp	r2, r3
 8017636:	d03d      	beq.n	80176b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017638:	2300      	movs	r3, #0
 801763a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801763c:	e03a      	b.n	80176b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017640:	88db      	ldrh	r3, [r3, #6]
 8017642:	b29a      	uxth	r2, r3
 8017644:	693b      	ldr	r3, [r7, #16]
 8017646:	889b      	ldrh	r3, [r3, #4]
 8017648:	b29b      	uxth	r3, r3
 801764a:	429a      	cmp	r2, r3
 801764c:	d902      	bls.n	8017654 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801764e:	f04f 33ff 	mov.w	r3, #4294967295
 8017652:	e0c5      	b.n	80177e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	68ba      	ldr	r2, [r7, #8]
 8017658:	605a      	str	r2, [r3, #4]
      break;
 801765a:	e02b      	b.n	80176b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801765e:	889b      	ldrh	r3, [r3, #4]
 8017660:	b29a      	uxth	r2, r3
 8017662:	693b      	ldr	r3, [r7, #16]
 8017664:	889b      	ldrh	r3, [r3, #4]
 8017666:	b29b      	uxth	r3, r3
 8017668:	429a      	cmp	r2, r3
 801766a:	d102      	bne.n	8017672 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801766c:	f04f 33ff 	mov.w	r3, #4294967295
 8017670:	e0b6      	b.n	80177e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017674:	889b      	ldrh	r3, [r3, #4]
 8017676:	b29a      	uxth	r2, r3
 8017678:	693b      	ldr	r3, [r7, #16]
 801767a:	88db      	ldrh	r3, [r3, #6]
 801767c:	b29b      	uxth	r3, r3
 801767e:	429a      	cmp	r2, r3
 8017680:	d202      	bcs.n	8017688 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017682:	f04f 33ff 	mov.w	r3, #4294967295
 8017686:	e0ab      	b.n	80177e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801768a:	2b00      	cmp	r3, #0
 801768c:	d009      	beq.n	80176a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017690:	88db      	ldrh	r3, [r3, #6]
 8017692:	b29a      	uxth	r2, r3
 8017694:	693b      	ldr	r3, [r7, #16]
 8017696:	889b      	ldrh	r3, [r3, #4]
 8017698:	b29b      	uxth	r3, r3
 801769a:	429a      	cmp	r2, r3
 801769c:	d001      	beq.n	80176a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801769e:	2300      	movs	r3, #0
 80176a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80176a2:	693b      	ldr	r3, [r7, #16]
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80176a8:	693b      	ldr	r3, [r7, #16]
 80176aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80176ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d193      	bne.n	80175da <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80176b2:	e000      	b.n	80176b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80176b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80176b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d12d      	bne.n	8017718 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80176bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d01c      	beq.n	80176fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80176c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176c4:	88db      	ldrh	r3, [r3, #6]
 80176c6:	b29a      	uxth	r2, r3
 80176c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176ca:	889b      	ldrh	r3, [r3, #4]
 80176cc:	b29b      	uxth	r3, r3
 80176ce:	429a      	cmp	r2, r3
 80176d0:	d906      	bls.n	80176e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80176d2:	4b45      	ldr	r3, [pc, #276]	; (80177e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80176d4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80176d8:	4944      	ldr	r1, [pc, #272]	; (80177ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80176da:	4845      	ldr	r0, [pc, #276]	; (80177f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80176dc:	f000 ff70 	bl	80185c0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80176e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176e2:	68ba      	ldr	r2, [r7, #8]
 80176e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80176e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176e8:	88db      	ldrh	r3, [r3, #6]
 80176ea:	b29a      	uxth	r2, r3
 80176ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176ee:	889b      	ldrh	r3, [r3, #4]
 80176f0:	b29b      	uxth	r3, r3
 80176f2:	429a      	cmp	r2, r3
 80176f4:	d010      	beq.n	8017718 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80176f6:	2300      	movs	r3, #0
 80176f8:	623b      	str	r3, [r7, #32]
 80176fa:	e00d      	b.n	8017718 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	685b      	ldr	r3, [r3, #4]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d006      	beq.n	8017712 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017704:	4b38      	ldr	r3, [pc, #224]	; (80177e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017706:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801770a:	493a      	ldr	r1, [pc, #232]	; (80177f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801770c:	4838      	ldr	r0, [pc, #224]	; (80177f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801770e:	f000 ff57 	bl	80185c0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	68ba      	ldr	r2, [r7, #8]
 8017716:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	2b00      	cmp	r3, #0
 801771c:	d105      	bne.n	801772a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	7f9b      	ldrb	r3, [r3, #30]
 8017722:	f003 0301 	and.w	r3, r3, #1
 8017726:	2b00      	cmp	r3, #0
 8017728:	d059      	beq.n	80177de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801772a:	6a3b      	ldr	r3, [r7, #32]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d04f      	beq.n	80177d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	685b      	ldr	r3, [r3, #4]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d006      	beq.n	8017746 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	685b      	ldr	r3, [r3, #4]
 801773c:	685b      	ldr	r3, [r3, #4]
 801773e:	889b      	ldrh	r3, [r3, #4]
 8017740:	b29b      	uxth	r3, r3
 8017742:	2b00      	cmp	r3, #0
 8017744:	d002      	beq.n	801774c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017746:	2300      	movs	r3, #0
 8017748:	623b      	str	r3, [r7, #32]
 801774a:	e041      	b.n	80177d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801774e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017756:	e012      	b.n	801777e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801775a:	685b      	ldr	r3, [r3, #4]
 801775c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017760:	88db      	ldrh	r3, [r3, #6]
 8017762:	b29a      	uxth	r2, r3
 8017764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017766:	889b      	ldrh	r3, [r3, #4]
 8017768:	b29b      	uxth	r3, r3
 801776a:	429a      	cmp	r2, r3
 801776c:	d002      	beq.n	8017774 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801776e:	2300      	movs	r3, #0
 8017770:	623b      	str	r3, [r7, #32]
            break;
 8017772:	e007      	b.n	8017784 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017776:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017780:	2b00      	cmp	r3, #0
 8017782:	d1e9      	bne.n	8017758 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017784:	6a3b      	ldr	r3, [r7, #32]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d022      	beq.n	80177d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	685b      	ldr	r3, [r3, #4]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d106      	bne.n	80177a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017792:	4b15      	ldr	r3, [pc, #84]	; (80177e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017794:	f240 12df 	movw	r2, #479	; 0x1df
 8017798:	4917      	ldr	r1, [pc, #92]	; (80177f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801779a:	4815      	ldr	r0, [pc, #84]	; (80177f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801779c:	f000 ff10 	bl	80185c0 <iprintf>
          LWIP_ASSERT("sanity check",
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	685b      	ldr	r3, [r3, #4]
 80177a4:	685b      	ldr	r3, [r3, #4]
 80177a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177a8:	429a      	cmp	r2, r3
 80177aa:	d106      	bne.n	80177ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80177ac:	4b0e      	ldr	r3, [pc, #56]	; (80177e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80177ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80177b2:	4911      	ldr	r1, [pc, #68]	; (80177f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80177b4:	480e      	ldr	r0, [pc, #56]	; (80177f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80177b6:	f000 ff03 	bl	80185c0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80177ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d006      	beq.n	80177d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80177c2:	4b09      	ldr	r3, [pc, #36]	; (80177e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80177c4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80177c8:	490c      	ldr	r1, [pc, #48]	; (80177fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80177ca:	4809      	ldr	r0, [pc, #36]	; (80177f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80177cc:	f000 fef8 	bl	80185c0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80177d0:	6a3b      	ldr	r3, [r7, #32]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	bf14      	ite	ne
 80177d6:	2301      	movne	r3, #1
 80177d8:	2300      	moveq	r3, #0
 80177da:	b2db      	uxtb	r3, r3
 80177dc:	e000      	b.n	80177e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80177de:	2300      	movs	r3, #0
}
 80177e0:	4618      	mov	r0, r3
 80177e2:	3730      	adds	r7, #48	; 0x30
 80177e4:	46bd      	mov	sp, r7
 80177e6:	bd80      	pop	{r7, pc}
 80177e8:	0801d348 	.word	0x0801d348
 80177ec:	0801d42c 	.word	0x0801d42c
 80177f0:	0801d390 	.word	0x0801d390
 80177f4:	0801d44c 	.word	0x0801d44c
 80177f8:	0801d484 	.word	0x0801d484
 80177fc:	0801d494 	.word	0x0801d494

08017800 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b08e      	sub	sp, #56	; 0x38
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	685b      	ldr	r3, [r3, #4]
 801780c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017810:	781b      	ldrb	r3, [r3, #0]
 8017812:	f003 030f 	and.w	r3, r3, #15
 8017816:	b2db      	uxtb	r3, r3
 8017818:	009b      	lsls	r3, r3, #2
 801781a:	b2db      	uxtb	r3, r3
 801781c:	2b14      	cmp	r3, #20
 801781e:	f040 8171 	bne.w	8017b04 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017824:	88db      	ldrh	r3, [r3, #6]
 8017826:	b29b      	uxth	r3, r3
 8017828:	4618      	mov	r0, r3
 801782a:	f7f3 fca9 	bl	800b180 <lwip_htons>
 801782e:	4603      	mov	r3, r0
 8017830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017834:	b29b      	uxth	r3, r3
 8017836:	00db      	lsls	r3, r3, #3
 8017838:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801783c:	885b      	ldrh	r3, [r3, #2]
 801783e:	b29b      	uxth	r3, r3
 8017840:	4618      	mov	r0, r3
 8017842:	f7f3 fc9d 	bl	800b180 <lwip_htons>
 8017846:	4603      	mov	r3, r0
 8017848:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801784c:	781b      	ldrb	r3, [r3, #0]
 801784e:	f003 030f 	and.w	r3, r3, #15
 8017852:	b2db      	uxtb	r3, r3
 8017854:	009b      	lsls	r3, r3, #2
 8017856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801785a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801785e:	b29b      	uxth	r3, r3
 8017860:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017862:	429a      	cmp	r2, r3
 8017864:	f0c0 8150 	bcc.w	8017b08 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017868:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801786c:	b29b      	uxth	r3, r3
 801786e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017870:	1ad3      	subs	r3, r2, r3
 8017872:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017874:	6878      	ldr	r0, [r7, #4]
 8017876:	f7f5 f945 	bl	800cb04 <pbuf_clen>
 801787a:	4603      	mov	r3, r0
 801787c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801787e:	4b8c      	ldr	r3, [pc, #560]	; (8017ab0 <ip4_reass+0x2b0>)
 8017880:	881b      	ldrh	r3, [r3, #0]
 8017882:	461a      	mov	r2, r3
 8017884:	8c3b      	ldrh	r3, [r7, #32]
 8017886:	4413      	add	r3, r2
 8017888:	2b0a      	cmp	r3, #10
 801788a:	dd10      	ble.n	80178ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801788c:	8c3b      	ldrh	r3, [r7, #32]
 801788e:	4619      	mov	r1, r3
 8017890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017892:	f7ff fd81 	bl	8017398 <ip_reass_remove_oldest_datagram>
 8017896:	4603      	mov	r3, r0
 8017898:	2b00      	cmp	r3, #0
 801789a:	f000 8137 	beq.w	8017b0c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801789e:	4b84      	ldr	r3, [pc, #528]	; (8017ab0 <ip4_reass+0x2b0>)
 80178a0:	881b      	ldrh	r3, [r3, #0]
 80178a2:	461a      	mov	r2, r3
 80178a4:	8c3b      	ldrh	r3, [r7, #32]
 80178a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80178a8:	2b0a      	cmp	r3, #10
 80178aa:	f300 812f 	bgt.w	8017b0c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80178ae:	4b81      	ldr	r3, [pc, #516]	; (8017ab4 <ip4_reass+0x2b4>)
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	633b      	str	r3, [r7, #48]	; 0x30
 80178b4:	e015      	b.n	80178e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80178b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178b8:	695a      	ldr	r2, [r3, #20]
 80178ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178bc:	68db      	ldr	r3, [r3, #12]
 80178be:	429a      	cmp	r2, r3
 80178c0:	d10c      	bne.n	80178dc <ip4_reass+0xdc>
 80178c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178c4:	699a      	ldr	r2, [r3, #24]
 80178c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178c8:	691b      	ldr	r3, [r3, #16]
 80178ca:	429a      	cmp	r2, r3
 80178cc:	d106      	bne.n	80178dc <ip4_reass+0xdc>
 80178ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178d0:	899a      	ldrh	r2, [r3, #12]
 80178d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178d4:	889b      	ldrh	r3, [r3, #4]
 80178d6:	b29b      	uxth	r3, r3
 80178d8:	429a      	cmp	r2, r3
 80178da:	d006      	beq.n	80178ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80178dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	633b      	str	r3, [r7, #48]	; 0x30
 80178e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d1e6      	bne.n	80178b6 <ip4_reass+0xb6>
 80178e8:	e000      	b.n	80178ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80178ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80178ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d109      	bne.n	8017906 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80178f2:	8c3b      	ldrh	r3, [r7, #32]
 80178f4:	4619      	mov	r1, r3
 80178f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80178f8:	f7ff fdb0 	bl	801745c <ip_reass_enqueue_new_datagram>
 80178fc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80178fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017900:	2b00      	cmp	r3, #0
 8017902:	d11c      	bne.n	801793e <ip4_reass+0x13e>
      goto nullreturn;
 8017904:	e105      	b.n	8017b12 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017908:	88db      	ldrh	r3, [r3, #6]
 801790a:	b29b      	uxth	r3, r3
 801790c:	4618      	mov	r0, r3
 801790e:	f7f3 fc37 	bl	800b180 <lwip_htons>
 8017912:	4603      	mov	r3, r0
 8017914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017918:	2b00      	cmp	r3, #0
 801791a:	d110      	bne.n	801793e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801791e:	89db      	ldrh	r3, [r3, #14]
 8017920:	4618      	mov	r0, r3
 8017922:	f7f3 fc2d 	bl	800b180 <lwip_htons>
 8017926:	4603      	mov	r3, r0
 8017928:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801792c:	2b00      	cmp	r3, #0
 801792e:	d006      	beq.n	801793e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017932:	3308      	adds	r3, #8
 8017934:	2214      	movs	r2, #20
 8017936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017938:	4618      	mov	r0, r3
 801793a:	f001 f841 	bl	80189c0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017940:	88db      	ldrh	r3, [r3, #6]
 8017942:	b29b      	uxth	r3, r3
 8017944:	f003 0320 	and.w	r3, r3, #32
 8017948:	2b00      	cmp	r3, #0
 801794a:	bf0c      	ite	eq
 801794c:	2301      	moveq	r3, #1
 801794e:	2300      	movne	r3, #0
 8017950:	b2db      	uxtb	r3, r3
 8017952:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017954:	69fb      	ldr	r3, [r7, #28]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d00e      	beq.n	8017978 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801795a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801795c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801795e:	4413      	add	r3, r2
 8017960:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017962:	8b7a      	ldrh	r2, [r7, #26]
 8017964:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017966:	429a      	cmp	r2, r3
 8017968:	f0c0 80a0 	bcc.w	8017aac <ip4_reass+0x2ac>
 801796c:	8b7b      	ldrh	r3, [r7, #26]
 801796e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017972:	4293      	cmp	r3, r2
 8017974:	f200 809a 	bhi.w	8017aac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017978:	69fa      	ldr	r2, [r7, #28]
 801797a:	6879      	ldr	r1, [r7, #4]
 801797c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801797e:	f7ff fdd5 	bl	801752c <ip_reass_chain_frag_into_datagram_and_validate>
 8017982:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017984:	697b      	ldr	r3, [r7, #20]
 8017986:	f1b3 3fff 	cmp.w	r3, #4294967295
 801798a:	f000 809b 	beq.w	8017ac4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801798e:	4b48      	ldr	r3, [pc, #288]	; (8017ab0 <ip4_reass+0x2b0>)
 8017990:	881a      	ldrh	r2, [r3, #0]
 8017992:	8c3b      	ldrh	r3, [r7, #32]
 8017994:	4413      	add	r3, r2
 8017996:	b29a      	uxth	r2, r3
 8017998:	4b45      	ldr	r3, [pc, #276]	; (8017ab0 <ip4_reass+0x2b0>)
 801799a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801799c:	69fb      	ldr	r3, [r7, #28]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d00d      	beq.n	80179be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80179a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80179a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80179a6:	4413      	add	r3, r2
 80179a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80179aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ac:	8a7a      	ldrh	r2, [r7, #18]
 80179ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80179b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179b2:	7f9b      	ldrb	r3, [r3, #30]
 80179b4:	f043 0301 	orr.w	r3, r3, #1
 80179b8:	b2da      	uxtb	r2, r3
 80179ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80179be:	697b      	ldr	r3, [r7, #20]
 80179c0:	2b01      	cmp	r3, #1
 80179c2:	d171      	bne.n	8017aa8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80179c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179c6:	8b9b      	ldrh	r3, [r3, #28]
 80179c8:	3314      	adds	r3, #20
 80179ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80179cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ce:	685b      	ldr	r3, [r3, #4]
 80179d0:	685b      	ldr	r3, [r3, #4]
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80179d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179d8:	685b      	ldr	r3, [r3, #4]
 80179da:	685b      	ldr	r3, [r3, #4]
 80179dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80179de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179e0:	3308      	adds	r3, #8
 80179e2:	2214      	movs	r2, #20
 80179e4:	4619      	mov	r1, r3
 80179e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80179e8:	f000 ffea 	bl	80189c0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80179ec:	8a3b      	ldrh	r3, [r7, #16]
 80179ee:	4618      	mov	r0, r3
 80179f0:	f7f3 fbc6 	bl	800b180 <lwip_htons>
 80179f4:	4603      	mov	r3, r0
 80179f6:	461a      	mov	r2, r3
 80179f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80179fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179fe:	2200      	movs	r2, #0
 8017a00:	719a      	strb	r2, [r3, #6]
 8017a02:	2200      	movs	r2, #0
 8017a04:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a08:	2200      	movs	r2, #0
 8017a0a:	729a      	strb	r2, [r3, #10]
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a12:	685b      	ldr	r3, [r3, #4]
 8017a14:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017a16:	e00d      	b.n	8017a34 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a1a:	685b      	ldr	r3, [r3, #4]
 8017a1c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017a1e:	2114      	movs	r1, #20
 8017a20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017a22:	f7f4 ff5b 	bl	800c8dc <pbuf_remove_header>
      pbuf_cat(p, r);
 8017a26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017a28:	6878      	ldr	r0, [r7, #4]
 8017a2a:	f7f5 f8ab 	bl	800cb84 <pbuf_cat>
      r = iprh->next_pbuf;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d1ee      	bne.n	8017a18 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017a3a:	4b1e      	ldr	r3, [pc, #120]	; (8017ab4 <ip4_reass+0x2b4>)
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a40:	429a      	cmp	r2, r3
 8017a42:	d102      	bne.n	8017a4a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017a44:	2300      	movs	r3, #0
 8017a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a48:	e010      	b.n	8017a6c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017a4a:	4b1a      	ldr	r3, [pc, #104]	; (8017ab4 <ip4_reass+0x2b4>)
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a50:	e007      	b.n	8017a62 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d006      	beq.n	8017a6a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d1f4      	bne.n	8017a52 <ip4_reass+0x252>
 8017a68:	e000      	b.n	8017a6c <ip4_reass+0x26c>
          break;
 8017a6a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017a6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a70:	f7ff fd2e 	bl	80174d0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017a74:	6878      	ldr	r0, [r7, #4]
 8017a76:	f7f5 f845 	bl	800cb04 <pbuf_clen>
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017a7e:	4b0c      	ldr	r3, [pc, #48]	; (8017ab0 <ip4_reass+0x2b0>)
 8017a80:	881b      	ldrh	r3, [r3, #0]
 8017a82:	8c3a      	ldrh	r2, [r7, #32]
 8017a84:	429a      	cmp	r2, r3
 8017a86:	d906      	bls.n	8017a96 <ip4_reass+0x296>
 8017a88:	4b0b      	ldr	r3, [pc, #44]	; (8017ab8 <ip4_reass+0x2b8>)
 8017a8a:	f240 229b 	movw	r2, #667	; 0x29b
 8017a8e:	490b      	ldr	r1, [pc, #44]	; (8017abc <ip4_reass+0x2bc>)
 8017a90:	480b      	ldr	r0, [pc, #44]	; (8017ac0 <ip4_reass+0x2c0>)
 8017a92:	f000 fd95 	bl	80185c0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017a96:	4b06      	ldr	r3, [pc, #24]	; (8017ab0 <ip4_reass+0x2b0>)
 8017a98:	881a      	ldrh	r2, [r3, #0]
 8017a9a:	8c3b      	ldrh	r3, [r7, #32]
 8017a9c:	1ad3      	subs	r3, r2, r3
 8017a9e:	b29a      	uxth	r2, r3
 8017aa0:	4b03      	ldr	r3, [pc, #12]	; (8017ab0 <ip4_reass+0x2b0>)
 8017aa2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	e038      	b.n	8017b1a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	e036      	b.n	8017b1a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017aac:	bf00      	nop
 8017aae:	e00a      	b.n	8017ac6 <ip4_reass+0x2c6>
 8017ab0:	200116ec 	.word	0x200116ec
 8017ab4:	200116e8 	.word	0x200116e8
 8017ab8:	0801d348 	.word	0x0801d348
 8017abc:	0801d4b8 	.word	0x0801d4b8
 8017ac0:	0801d390 	.word	0x0801d390
    goto nullreturn_ipr;
 8017ac4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d106      	bne.n	8017ada <ip4_reass+0x2da>
 8017acc:	4b15      	ldr	r3, [pc, #84]	; (8017b24 <ip4_reass+0x324>)
 8017ace:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017ad2:	4915      	ldr	r1, [pc, #84]	; (8017b28 <ip4_reass+0x328>)
 8017ad4:	4815      	ldr	r0, [pc, #84]	; (8017b2c <ip4_reass+0x32c>)
 8017ad6:	f000 fd73 	bl	80185c0 <iprintf>
  if (ipr->p == NULL) {
 8017ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017adc:	685b      	ldr	r3, [r3, #4]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d116      	bne.n	8017b10 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017ae2:	4b13      	ldr	r3, [pc, #76]	; (8017b30 <ip4_reass+0x330>)
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ae8:	429a      	cmp	r2, r3
 8017aea:	d006      	beq.n	8017afa <ip4_reass+0x2fa>
 8017aec:	4b0d      	ldr	r3, [pc, #52]	; (8017b24 <ip4_reass+0x324>)
 8017aee:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017af2:	4910      	ldr	r1, [pc, #64]	; (8017b34 <ip4_reass+0x334>)
 8017af4:	480d      	ldr	r0, [pc, #52]	; (8017b2c <ip4_reass+0x32c>)
 8017af6:	f000 fd63 	bl	80185c0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017afa:	2100      	movs	r1, #0
 8017afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017afe:	f7ff fce7 	bl	80174d0 <ip_reass_dequeue_datagram>
 8017b02:	e006      	b.n	8017b12 <ip4_reass+0x312>
    goto nullreturn;
 8017b04:	bf00      	nop
 8017b06:	e004      	b.n	8017b12 <ip4_reass+0x312>
    goto nullreturn;
 8017b08:	bf00      	nop
 8017b0a:	e002      	b.n	8017b12 <ip4_reass+0x312>
      goto nullreturn;
 8017b0c:	bf00      	nop
 8017b0e:	e000      	b.n	8017b12 <ip4_reass+0x312>
  }

nullreturn:
 8017b10:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017b12:	6878      	ldr	r0, [r7, #4]
 8017b14:	f7f4 ff68 	bl	800c9e8 <pbuf_free>
  return NULL;
 8017b18:	2300      	movs	r3, #0
}
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	3738      	adds	r7, #56	; 0x38
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}
 8017b22:	bf00      	nop
 8017b24:	0801d348 	.word	0x0801d348
 8017b28:	0801d4d4 	.word	0x0801d4d4
 8017b2c:	0801d390 	.word	0x0801d390
 8017b30:	200116e8 	.word	0x200116e8
 8017b34:	0801d4e0 	.word	0x0801d4e0

08017b38 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017b3c:	2005      	movs	r0, #5
 8017b3e:	f7f4 f82d 	bl	800bb9c <memp_malloc>
 8017b42:	4603      	mov	r3, r0
}
 8017b44:	4618      	mov	r0, r3
 8017b46:	bd80      	pop	{r7, pc}

08017b48 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b082      	sub	sp, #8
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d106      	bne.n	8017b64 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017b56:	4b07      	ldr	r3, [pc, #28]	; (8017b74 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017b58:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017b5c:	4906      	ldr	r1, [pc, #24]	; (8017b78 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017b5e:	4807      	ldr	r0, [pc, #28]	; (8017b7c <ip_frag_free_pbuf_custom_ref+0x34>)
 8017b60:	f000 fd2e 	bl	80185c0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017b64:	6879      	ldr	r1, [r7, #4]
 8017b66:	2005      	movs	r0, #5
 8017b68:	f7f4 f88e 	bl	800bc88 <memp_free>
}
 8017b6c:	bf00      	nop
 8017b6e:	3708      	adds	r7, #8
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}
 8017b74:	0801d348 	.word	0x0801d348
 8017b78:	0801d500 	.word	0x0801d500
 8017b7c:	0801d390 	.word	0x0801d390

08017b80 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b084      	sub	sp, #16
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d106      	bne.n	8017ba0 <ipfrag_free_pbuf_custom+0x20>
 8017b92:	4b11      	ldr	r3, [pc, #68]	; (8017bd8 <ipfrag_free_pbuf_custom+0x58>)
 8017b94:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017b98:	4910      	ldr	r1, [pc, #64]	; (8017bdc <ipfrag_free_pbuf_custom+0x5c>)
 8017b9a:	4811      	ldr	r0, [pc, #68]	; (8017be0 <ipfrag_free_pbuf_custom+0x60>)
 8017b9c:	f000 fd10 	bl	80185c0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017ba0:	68fa      	ldr	r2, [r7, #12]
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d006      	beq.n	8017bb6 <ipfrag_free_pbuf_custom+0x36>
 8017ba8:	4b0b      	ldr	r3, [pc, #44]	; (8017bd8 <ipfrag_free_pbuf_custom+0x58>)
 8017baa:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017bae:	490d      	ldr	r1, [pc, #52]	; (8017be4 <ipfrag_free_pbuf_custom+0x64>)
 8017bb0:	480b      	ldr	r0, [pc, #44]	; (8017be0 <ipfrag_free_pbuf_custom+0x60>)
 8017bb2:	f000 fd05 	bl	80185c0 <iprintf>
  if (pcr->original != NULL) {
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	695b      	ldr	r3, [r3, #20]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d004      	beq.n	8017bc8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	695b      	ldr	r3, [r3, #20]
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	f7f4 ff10 	bl	800c9e8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017bc8:	68f8      	ldr	r0, [r7, #12]
 8017bca:	f7ff ffbd 	bl	8017b48 <ip_frag_free_pbuf_custom_ref>
}
 8017bce:	bf00      	nop
 8017bd0:	3710      	adds	r7, #16
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	bd80      	pop	{r7, pc}
 8017bd6:	bf00      	nop
 8017bd8:	0801d348 	.word	0x0801d348
 8017bdc:	0801d50c 	.word	0x0801d50c
 8017be0:	0801d390 	.word	0x0801d390
 8017be4:	0801d518 	.word	0x0801d518

08017be8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b094      	sub	sp, #80	; 0x50
 8017bec:	af02      	add	r7, sp, #8
 8017bee:	60f8      	str	r0, [r7, #12]
 8017bf0:	60b9      	str	r1, [r7, #8]
 8017bf2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017bfa:	68bb      	ldr	r3, [r7, #8]
 8017bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017bfe:	3b14      	subs	r3, #20
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	da00      	bge.n	8017c06 <ip4_frag+0x1e>
 8017c04:	3307      	adds	r3, #7
 8017c06:	10db      	asrs	r3, r3, #3
 8017c08:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017c0a:	2314      	movs	r3, #20
 8017c0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	685b      	ldr	r3, [r3, #4]
 8017c12:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c16:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c1a:	781b      	ldrb	r3, [r3, #0]
 8017c1c:	f003 030f 	and.w	r3, r3, #15
 8017c20:	b2db      	uxtb	r3, r3
 8017c22:	009b      	lsls	r3, r3, #2
 8017c24:	b2db      	uxtb	r3, r3
 8017c26:	2b14      	cmp	r3, #20
 8017c28:	d002      	beq.n	8017c30 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017c2a:	f06f 0305 	mvn.w	r3, #5
 8017c2e:	e110      	b.n	8017e52 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	895b      	ldrh	r3, [r3, #10]
 8017c34:	2b13      	cmp	r3, #19
 8017c36:	d809      	bhi.n	8017c4c <ip4_frag+0x64>
 8017c38:	4b88      	ldr	r3, [pc, #544]	; (8017e5c <ip4_frag+0x274>)
 8017c3a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017c3e:	4988      	ldr	r1, [pc, #544]	; (8017e60 <ip4_frag+0x278>)
 8017c40:	4888      	ldr	r0, [pc, #544]	; (8017e64 <ip4_frag+0x27c>)
 8017c42:	f000 fcbd 	bl	80185c0 <iprintf>
 8017c46:	f06f 0305 	mvn.w	r3, #5
 8017c4a:	e102      	b.n	8017e52 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c4e:	88db      	ldrh	r3, [r3, #6]
 8017c50:	b29b      	uxth	r3, r3
 8017c52:	4618      	mov	r0, r3
 8017c54:	f7f3 fa94 	bl	800b180 <lwip_htons>
 8017c58:	4603      	mov	r3, r0
 8017c5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017c5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017c62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017c66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017c6c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	891b      	ldrh	r3, [r3, #8]
 8017c72:	3b14      	subs	r3, #20
 8017c74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017c78:	e0e1      	b.n	8017e3e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017c7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017c7c:	00db      	lsls	r3, r3, #3
 8017c7e:	b29b      	uxth	r3, r3
 8017c80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017c84:	4293      	cmp	r3, r2
 8017c86:	bf28      	it	cs
 8017c88:	4613      	movcs	r3, r2
 8017c8a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017c8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c90:	2114      	movs	r1, #20
 8017c92:	200e      	movs	r0, #14
 8017c94:	f7f4 fbc4 	bl	800c420 <pbuf_alloc>
 8017c98:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	f000 80d5 	beq.w	8017e4c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ca4:	895b      	ldrh	r3, [r3, #10]
 8017ca6:	2b13      	cmp	r3, #19
 8017ca8:	d806      	bhi.n	8017cb8 <ip4_frag+0xd0>
 8017caa:	4b6c      	ldr	r3, [pc, #432]	; (8017e5c <ip4_frag+0x274>)
 8017cac:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017cb0:	496d      	ldr	r1, [pc, #436]	; (8017e68 <ip4_frag+0x280>)
 8017cb2:	486c      	ldr	r0, [pc, #432]	; (8017e64 <ip4_frag+0x27c>)
 8017cb4:	f000 fc84 	bl	80185c0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cba:	685b      	ldr	r3, [r3, #4]
 8017cbc:	2214      	movs	r2, #20
 8017cbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f000 fe7d 	bl	80189c0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cc8:	685b      	ldr	r3, [r3, #4]
 8017cca:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017ccc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017cce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017cd2:	e064      	b.n	8017d9e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	895a      	ldrh	r2, [r3, #10]
 8017cd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017cda:	1ad3      	subs	r3, r2, r3
 8017cdc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	895b      	ldrh	r3, [r3, #10]
 8017ce2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017ce4:	429a      	cmp	r2, r3
 8017ce6:	d906      	bls.n	8017cf6 <ip4_frag+0x10e>
 8017ce8:	4b5c      	ldr	r3, [pc, #368]	; (8017e5c <ip4_frag+0x274>)
 8017cea:	f240 322d 	movw	r2, #813	; 0x32d
 8017cee:	495f      	ldr	r1, [pc, #380]	; (8017e6c <ip4_frag+0x284>)
 8017cf0:	485c      	ldr	r0, [pc, #368]	; (8017e64 <ip4_frag+0x27c>)
 8017cf2:	f000 fc65 	bl	80185c0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017cf6:	8bfa      	ldrh	r2, [r7, #30]
 8017cf8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017cfc:	4293      	cmp	r3, r2
 8017cfe:	bf28      	it	cs
 8017d00:	4613      	movcs	r3, r2
 8017d02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017d06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d105      	bne.n	8017d1a <ip4_frag+0x132>
        poff = 0;
 8017d0e:	2300      	movs	r3, #0
 8017d10:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	60fb      	str	r3, [r7, #12]
        continue;
 8017d18:	e041      	b.n	8017d9e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017d1a:	f7ff ff0d 	bl	8017b38 <ip_frag_alloc_pbuf_custom_ref>
 8017d1e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017d20:	69bb      	ldr	r3, [r7, #24]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d103      	bne.n	8017d2e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017d26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d28:	f7f4 fe5e 	bl	800c9e8 <pbuf_free>
        goto memerr;
 8017d2c:	e08f      	b.n	8017e4e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017d2e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017d34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017d36:	4413      	add	r3, r2
 8017d38:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017d3c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017d40:	9201      	str	r2, [sp, #4]
 8017d42:	9300      	str	r3, [sp, #0]
 8017d44:	4603      	mov	r3, r0
 8017d46:	2241      	movs	r2, #65	; 0x41
 8017d48:	2000      	movs	r0, #0
 8017d4a:	f7f4 fc93 	bl	800c674 <pbuf_alloced_custom>
 8017d4e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017d50:	697b      	ldr	r3, [r7, #20]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d106      	bne.n	8017d64 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017d56:	69b8      	ldr	r0, [r7, #24]
 8017d58:	f7ff fef6 	bl	8017b48 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017d5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d5e:	f7f4 fe43 	bl	800c9e8 <pbuf_free>
        goto memerr;
 8017d62:	e074      	b.n	8017e4e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017d64:	68f8      	ldr	r0, [r7, #12]
 8017d66:	f7f4 fee5 	bl	800cb34 <pbuf_ref>
      pcr->original = p;
 8017d6a:	69bb      	ldr	r3, [r7, #24]
 8017d6c:	68fa      	ldr	r2, [r7, #12]
 8017d6e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017d70:	69bb      	ldr	r3, [r7, #24]
 8017d72:	4a3f      	ldr	r2, [pc, #252]	; (8017e70 <ip4_frag+0x288>)
 8017d74:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017d76:	6979      	ldr	r1, [r7, #20]
 8017d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d7a:	f7f4 ff03 	bl	800cb84 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017d7e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017d82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017d86:	1ad3      	subs	r3, r2, r3
 8017d88:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017d8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d004      	beq.n	8017d9e <ip4_frag+0x1b6>
        poff = 0;
 8017d94:	2300      	movs	r3, #0
 8017d96:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017d9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d196      	bne.n	8017cd4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017da6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017da8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017dac:	4413      	add	r3, r2
 8017dae:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017db0:	68bb      	ldr	r3, [r7, #8]
 8017db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017db4:	f1a3 0213 	sub.w	r2, r3, #19
 8017db8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017dbc:	429a      	cmp	r2, r3
 8017dbe:	bfcc      	ite	gt
 8017dc0:	2301      	movgt	r3, #1
 8017dc2:	2300      	movle	r3, #0
 8017dc4:	b2db      	uxtb	r3, r3
 8017dc6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017dc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017dd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017dd2:	6a3b      	ldr	r3, [r7, #32]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d002      	beq.n	8017dde <ip4_frag+0x1f6>
 8017dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d003      	beq.n	8017de6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017dde:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017de0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017de4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017de6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017de8:	4618      	mov	r0, r3
 8017dea:	f7f3 f9c9 	bl	800b180 <lwip_htons>
 8017dee:	4603      	mov	r3, r0
 8017df0:	461a      	mov	r2, r3
 8017df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017df4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017df6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017df8:	3314      	adds	r3, #20
 8017dfa:	b29b      	uxth	r3, r3
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	f7f3 f9bf 	bl	800b180 <lwip_htons>
 8017e02:	4603      	mov	r3, r0
 8017e04:	461a      	mov	r2, r3
 8017e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e08:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	729a      	strb	r2, [r3, #10]
 8017e10:	2200      	movs	r2, #0
 8017e12:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017e14:	68bb      	ldr	r3, [r7, #8]
 8017e16:	695b      	ldr	r3, [r3, #20]
 8017e18:	687a      	ldr	r2, [r7, #4]
 8017e1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e1c:	68b8      	ldr	r0, [r7, #8]
 8017e1e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017e20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e22:	f7f4 fde1 	bl	800c9e8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017e26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e2c:	1ad3      	subs	r3, r2, r3
 8017e2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017e32:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017e36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e38:	4413      	add	r3, r2
 8017e3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017e3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	f47f af19 	bne.w	8017c7a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017e48:	2300      	movs	r3, #0
 8017e4a:	e002      	b.n	8017e52 <ip4_frag+0x26a>
      goto memerr;
 8017e4c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017e52:	4618      	mov	r0, r3
 8017e54:	3748      	adds	r7, #72	; 0x48
 8017e56:	46bd      	mov	sp, r7
 8017e58:	bd80      	pop	{r7, pc}
 8017e5a:	bf00      	nop
 8017e5c:	0801d348 	.word	0x0801d348
 8017e60:	0801d524 	.word	0x0801d524
 8017e64:	0801d390 	.word	0x0801d390
 8017e68:	0801d540 	.word	0x0801d540
 8017e6c:	0801d560 	.word	0x0801d560
 8017e70:	08017b81 	.word	0x08017b81

08017e74 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b086      	sub	sp, #24
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
 8017e7c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017e7e:	230e      	movs	r3, #14
 8017e80:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	895b      	ldrh	r3, [r3, #10]
 8017e86:	2b0e      	cmp	r3, #14
 8017e88:	d96e      	bls.n	8017f68 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	7bdb      	ldrb	r3, [r3, #15]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d106      	bne.n	8017ea0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017e92:	683b      	ldr	r3, [r7, #0]
 8017e94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017e98:	3301      	adds	r3, #1
 8017e9a:	b2da      	uxtb	r2, r3
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	685b      	ldr	r3, [r3, #4]
 8017ea4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017ea6:	693b      	ldr	r3, [r7, #16]
 8017ea8:	7b1a      	ldrb	r2, [r3, #12]
 8017eaa:	7b5b      	ldrb	r3, [r3, #13]
 8017eac:	021b      	lsls	r3, r3, #8
 8017eae:	4313      	orrs	r3, r2
 8017eb0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017eb2:	693b      	ldr	r3, [r7, #16]
 8017eb4:	781b      	ldrb	r3, [r3, #0]
 8017eb6:	f003 0301 	and.w	r3, r3, #1
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d023      	beq.n	8017f06 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017ebe:	693b      	ldr	r3, [r7, #16]
 8017ec0:	781b      	ldrb	r3, [r3, #0]
 8017ec2:	2b01      	cmp	r3, #1
 8017ec4:	d10f      	bne.n	8017ee6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017ec6:	693b      	ldr	r3, [r7, #16]
 8017ec8:	785b      	ldrb	r3, [r3, #1]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d11b      	bne.n	8017f06 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017ece:	693b      	ldr	r3, [r7, #16]
 8017ed0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017ed2:	2b5e      	cmp	r3, #94	; 0x5e
 8017ed4:	d117      	bne.n	8017f06 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	7b5b      	ldrb	r3, [r3, #13]
 8017eda:	f043 0310 	orr.w	r3, r3, #16
 8017ede:	b2da      	uxtb	r2, r3
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	735a      	strb	r2, [r3, #13]
 8017ee4:	e00f      	b.n	8017f06 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017ee6:	693b      	ldr	r3, [r7, #16]
 8017ee8:	2206      	movs	r2, #6
 8017eea:	4928      	ldr	r1, [pc, #160]	; (8017f8c <ethernet_input+0x118>)
 8017eec:	4618      	mov	r0, r3
 8017eee:	f000 fbdc 	bl	80186aa <memcmp>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d106      	bne.n	8017f06 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	7b5b      	ldrb	r3, [r3, #13]
 8017efc:	f043 0308 	orr.w	r3, r3, #8
 8017f00:	b2da      	uxtb	r2, r3
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017f06:	89fb      	ldrh	r3, [r7, #14]
 8017f08:	2b08      	cmp	r3, #8
 8017f0a:	d003      	beq.n	8017f14 <ethernet_input+0xa0>
 8017f0c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017f10:	d014      	beq.n	8017f3c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017f12:	e032      	b.n	8017f7a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017f14:	683b      	ldr	r3, [r7, #0]
 8017f16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017f1a:	f003 0308 	and.w	r3, r3, #8
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d024      	beq.n	8017f6c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017f22:	8afb      	ldrh	r3, [r7, #22]
 8017f24:	4619      	mov	r1, r3
 8017f26:	6878      	ldr	r0, [r7, #4]
 8017f28:	f7f4 fcd8 	bl	800c8dc <pbuf_remove_header>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d11e      	bne.n	8017f70 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017f32:	6839      	ldr	r1, [r7, #0]
 8017f34:	6878      	ldr	r0, [r7, #4]
 8017f36:	f7fe ff03 	bl	8016d40 <ip4_input>
      break;
 8017f3a:	e013      	b.n	8017f64 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017f3c:	683b      	ldr	r3, [r7, #0]
 8017f3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017f42:	f003 0308 	and.w	r3, r3, #8
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d014      	beq.n	8017f74 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017f4a:	8afb      	ldrh	r3, [r7, #22]
 8017f4c:	4619      	mov	r1, r3
 8017f4e:	6878      	ldr	r0, [r7, #4]
 8017f50:	f7f4 fcc4 	bl	800c8dc <pbuf_remove_header>
 8017f54:	4603      	mov	r3, r0
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d10e      	bne.n	8017f78 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017f5a:	6839      	ldr	r1, [r7, #0]
 8017f5c:	6878      	ldr	r0, [r7, #4]
 8017f5e:	f7fe f89f 	bl	80160a0 <etharp_input>
      break;
 8017f62:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017f64:	2300      	movs	r3, #0
 8017f66:	e00c      	b.n	8017f82 <ethernet_input+0x10e>
    goto free_and_return;
 8017f68:	bf00      	nop
 8017f6a:	e006      	b.n	8017f7a <ethernet_input+0x106>
        goto free_and_return;
 8017f6c:	bf00      	nop
 8017f6e:	e004      	b.n	8017f7a <ethernet_input+0x106>
        goto free_and_return;
 8017f70:	bf00      	nop
 8017f72:	e002      	b.n	8017f7a <ethernet_input+0x106>
        goto free_and_return;
 8017f74:	bf00      	nop
 8017f76:	e000      	b.n	8017f7a <ethernet_input+0x106>
        goto free_and_return;
 8017f78:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017f7a:	6878      	ldr	r0, [r7, #4]
 8017f7c:	f7f4 fd34 	bl	800c9e8 <pbuf_free>
  return ERR_OK;
 8017f80:	2300      	movs	r3, #0
}
 8017f82:	4618      	mov	r0, r3
 8017f84:	3718      	adds	r7, #24
 8017f86:	46bd      	mov	sp, r7
 8017f88:	bd80      	pop	{r7, pc}
 8017f8a:	bf00      	nop
 8017f8c:	0802788c 	.word	0x0802788c

08017f90 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b086      	sub	sp, #24
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	60f8      	str	r0, [r7, #12]
 8017f98:	60b9      	str	r1, [r7, #8]
 8017f9a:	607a      	str	r2, [r7, #4]
 8017f9c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017f9e:	8c3b      	ldrh	r3, [r7, #32]
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f7f3 f8ed 	bl	800b180 <lwip_htons>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017faa:	210e      	movs	r1, #14
 8017fac:	68b8      	ldr	r0, [r7, #8]
 8017fae:	f7f4 fc85 	bl	800c8bc <pbuf_add_header>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d125      	bne.n	8018004 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	685b      	ldr	r3, [r3, #4]
 8017fbc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017fbe:	693b      	ldr	r3, [r7, #16]
 8017fc0:	8afa      	ldrh	r2, [r7, #22]
 8017fc2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017fc4:	693b      	ldr	r3, [r7, #16]
 8017fc6:	2206      	movs	r2, #6
 8017fc8:	6839      	ldr	r1, [r7, #0]
 8017fca:	4618      	mov	r0, r3
 8017fcc:	f000 fcf8 	bl	80189c0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017fd0:	693b      	ldr	r3, [r7, #16]
 8017fd2:	3306      	adds	r3, #6
 8017fd4:	2206      	movs	r2, #6
 8017fd6:	6879      	ldr	r1, [r7, #4]
 8017fd8:	4618      	mov	r0, r3
 8017fda:	f000 fcf1 	bl	80189c0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017fe4:	2b06      	cmp	r3, #6
 8017fe6:	d006      	beq.n	8017ff6 <ethernet_output+0x66>
 8017fe8:	4b0a      	ldr	r3, [pc, #40]	; (8018014 <ethernet_output+0x84>)
 8017fea:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017fee:	490a      	ldr	r1, [pc, #40]	; (8018018 <ethernet_output+0x88>)
 8017ff0:	480a      	ldr	r0, [pc, #40]	; (801801c <ethernet_output+0x8c>)
 8017ff2:	f000 fae5 	bl	80185c0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	699b      	ldr	r3, [r3, #24]
 8017ffa:	68b9      	ldr	r1, [r7, #8]
 8017ffc:	68f8      	ldr	r0, [r7, #12]
 8017ffe:	4798      	blx	r3
 8018000:	4603      	mov	r3, r0
 8018002:	e002      	b.n	801800a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018004:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018006:	f06f 0301 	mvn.w	r3, #1
}
 801800a:	4618      	mov	r0, r3
 801800c:	3718      	adds	r7, #24
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	0801d570 	.word	0x0801d570
 8018018:	0801d5a8 	.word	0x0801d5a8
 801801c:	0801d5dc 	.word	0x0801d5dc

08018020 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b086      	sub	sp, #24
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
 8018028:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801802a:	683b      	ldr	r3, [r7, #0]
 801802c:	60bb      	str	r3, [r7, #8]
 801802e:	2304      	movs	r3, #4
 8018030:	60fb      	str	r3, [r7, #12]
 8018032:	2300      	movs	r3, #0
 8018034:	613b      	str	r3, [r7, #16]
 8018036:	2300      	movs	r3, #0
 8018038:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801803a:	f107 0308 	add.w	r3, r7, #8
 801803e:	2100      	movs	r1, #0
 8018040:	4618      	mov	r0, r3
 8018042:	f7ed f984 	bl	800534e <osMessageCreate>
 8018046:	4602      	mov	r2, r0
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d102      	bne.n	801805a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018054:	f04f 33ff 	mov.w	r3, #4294967295
 8018058:	e000      	b.n	801805c <sys_mbox_new+0x3c>

  return ERR_OK;
 801805a:	2300      	movs	r3, #0
}
 801805c:	4618      	mov	r0, r3
 801805e:	3718      	adds	r7, #24
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}

08018064 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b082      	sub	sp, #8
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	4618      	mov	r0, r3
 8018072:	f7ed fa49 	bl	8005508 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	4618      	mov	r0, r3
 801807c:	f7ed fa5a 	bl	8005534 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018080:	bf00      	nop
 8018082:	3708      	adds	r7, #8
 8018084:	46bd      	mov	sp, r7
 8018086:	bd80      	pop	{r7, pc}

08018088 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018088:	b580      	push	{r7, lr}
 801808a:	b084      	sub	sp, #16
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
 8018090:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	6839      	ldr	r1, [r7, #0]
 8018098:	2200      	movs	r2, #0
 801809a:	4618      	mov	r0, r3
 801809c:	f7ed f980 	bl	80053a0 <osMessagePut>
 80180a0:	4603      	mov	r3, r0
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d102      	bne.n	80180ac <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80180a6:	2300      	movs	r3, #0
 80180a8:	73fb      	strb	r3, [r7, #15]
 80180aa:	e001      	b.n	80180b0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80180ac:	23ff      	movs	r3, #255	; 0xff
 80180ae:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80180b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80180b4:	4618      	mov	r0, r3
 80180b6:	3710      	adds	r7, #16
 80180b8:	46bd      	mov	sp, r7
 80180ba:	bd80      	pop	{r7, pc}

080180bc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b08c      	sub	sp, #48	; 0x30
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	61f8      	str	r0, [r7, #28]
 80180c4:	61b9      	str	r1, [r7, #24]
 80180c6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80180c8:	f7ec ff6c 	bl	8004fa4 <osKernelSysTick>
 80180cc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80180ce:	697b      	ldr	r3, [r7, #20]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d017      	beq.n	8018104 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80180d4:	69fb      	ldr	r3, [r7, #28]
 80180d6:	6819      	ldr	r1, [r3, #0]
 80180d8:	f107 0320 	add.w	r3, r7, #32
 80180dc:	697a      	ldr	r2, [r7, #20]
 80180de:	4618      	mov	r0, r3
 80180e0:	f7ed f99e 	bl	8005420 <osMessageGet>

    if(event.status == osEventMessage)
 80180e4:	6a3b      	ldr	r3, [r7, #32]
 80180e6:	2b10      	cmp	r3, #16
 80180e8:	d109      	bne.n	80180fe <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80180ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ec:	461a      	mov	r2, r3
 80180ee:	69bb      	ldr	r3, [r7, #24]
 80180f0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80180f2:	f7ec ff57 	bl	8004fa4 <osKernelSysTick>
 80180f6:	4602      	mov	r2, r0
 80180f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180fa:	1ad3      	subs	r3, r2, r3
 80180fc:	e019      	b.n	8018132 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80180fe:	f04f 33ff 	mov.w	r3, #4294967295
 8018102:	e016      	b.n	8018132 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018104:	69fb      	ldr	r3, [r7, #28]
 8018106:	6819      	ldr	r1, [r3, #0]
 8018108:	463b      	mov	r3, r7
 801810a:	f04f 32ff 	mov.w	r2, #4294967295
 801810e:	4618      	mov	r0, r3
 8018110:	f7ed f986 	bl	8005420 <osMessageGet>
 8018114:	f107 0320 	add.w	r3, r7, #32
 8018118:	463a      	mov	r2, r7
 801811a:	ca07      	ldmia	r2, {r0, r1, r2}
 801811c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018122:	461a      	mov	r2, r3
 8018124:	69bb      	ldr	r3, [r7, #24]
 8018126:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018128:	f7ec ff3c 	bl	8004fa4 <osKernelSysTick>
 801812c:	4602      	mov	r2, r0
 801812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018130:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018132:	4618      	mov	r0, r3
 8018134:	3730      	adds	r7, #48	; 0x30
 8018136:	46bd      	mov	sp, r7
 8018138:	bd80      	pop	{r7, pc}

0801813a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801813a:	b580      	push	{r7, lr}
 801813c:	b086      	sub	sp, #24
 801813e:	af00      	add	r7, sp, #0
 8018140:	6078      	str	r0, [r7, #4]
 8018142:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	6819      	ldr	r1, [r3, #0]
 8018148:	f107 030c 	add.w	r3, r7, #12
 801814c:	2200      	movs	r2, #0
 801814e:	4618      	mov	r0, r3
 8018150:	f7ed f966 	bl	8005420 <osMessageGet>

  if(event.status == osEventMessage)
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	2b10      	cmp	r3, #16
 8018158:	d105      	bne.n	8018166 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801815a:	693b      	ldr	r3, [r7, #16]
 801815c:	461a      	mov	r2, r3
 801815e:	683b      	ldr	r3, [r7, #0]
 8018160:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018162:	2300      	movs	r3, #0
 8018164:	e001      	b.n	801816a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018166:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801816a:	4618      	mov	r0, r3
 801816c:	3718      	adds	r7, #24
 801816e:	46bd      	mov	sp, r7
 8018170:	bd80      	pop	{r7, pc}

08018172 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018172:	b480      	push	{r7}
 8018174:	b083      	sub	sp, #12
 8018176:	af00      	add	r7, sp, #0
 8018178:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d101      	bne.n	8018186 <sys_mbox_valid+0x14>
    return 0;
 8018182:	2300      	movs	r3, #0
 8018184:	e000      	b.n	8018188 <sys_mbox_valid+0x16>
  else
    return 1;
 8018186:	2301      	movs	r3, #1
}
 8018188:	4618      	mov	r0, r3
 801818a:	370c      	adds	r7, #12
 801818c:	46bd      	mov	sp, r7
 801818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018192:	4770      	bx	lr

08018194 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018194:	b480      	push	{r7}
 8018196:	b083      	sub	sp, #12
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	2200      	movs	r2, #0
 80181a0:	601a      	str	r2, [r3, #0]
}
 80181a2:	bf00      	nop
 80181a4:	370c      	adds	r7, #12
 80181a6:	46bd      	mov	sp, r7
 80181a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ac:	4770      	bx	lr

080181ae <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80181ae:	b580      	push	{r7, lr}
 80181b0:	b084      	sub	sp, #16
 80181b2:	af00      	add	r7, sp, #0
 80181b4:	6078      	str	r0, [r7, #4]
 80181b6:	460b      	mov	r3, r1
 80181b8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80181ba:	2300      	movs	r3, #0
 80181bc:	60bb      	str	r3, [r7, #8]
 80181be:	2300      	movs	r3, #0
 80181c0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80181c2:	f107 0308 	add.w	r3, r7, #8
 80181c6:	2101      	movs	r1, #1
 80181c8:	4618      	mov	r0, r3
 80181ca:	f7ec fff7 	bl	80051bc <osSemaphoreCreate>
 80181ce:	4602      	mov	r2, r0
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d102      	bne.n	80181e2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80181dc:	f04f 33ff 	mov.w	r3, #4294967295
 80181e0:	e009      	b.n	80181f6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80181e2:	78fb      	ldrb	r3, [r7, #3]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d105      	bne.n	80181f4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	2100      	movs	r1, #0
 80181ee:	4618      	mov	r0, r3
 80181f0:	f7ed f816 	bl	8005220 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80181f4:	2300      	movs	r3, #0
}
 80181f6:	4618      	mov	r0, r3
 80181f8:	3710      	adds	r7, #16
 80181fa:	46bd      	mov	sp, r7
 80181fc:	bd80      	pop	{r7, pc}

080181fe <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80181fe:	b580      	push	{r7, lr}
 8018200:	b084      	sub	sp, #16
 8018202:	af00      	add	r7, sp, #0
 8018204:	6078      	str	r0, [r7, #4]
 8018206:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018208:	f7ec fecc 	bl	8004fa4 <osKernelSysTick>
 801820c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801820e:	683b      	ldr	r3, [r7, #0]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d011      	beq.n	8018238 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	6839      	ldr	r1, [r7, #0]
 801821a:	4618      	mov	r0, r3
 801821c:	f7ed f800 	bl	8005220 <osSemaphoreWait>
 8018220:	4603      	mov	r3, r0
 8018222:	2b00      	cmp	r3, #0
 8018224:	d105      	bne.n	8018232 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018226:	f7ec febd 	bl	8004fa4 <osKernelSysTick>
 801822a:	4602      	mov	r2, r0
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	1ad3      	subs	r3, r2, r3
 8018230:	e012      	b.n	8018258 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018232:	f04f 33ff 	mov.w	r3, #4294967295
 8018236:	e00f      	b.n	8018258 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018238:	bf00      	nop
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	f04f 31ff 	mov.w	r1, #4294967295
 8018242:	4618      	mov	r0, r3
 8018244:	f7ec ffec 	bl	8005220 <osSemaphoreWait>
 8018248:	4603      	mov	r3, r0
 801824a:	2b00      	cmp	r3, #0
 801824c:	d1f5      	bne.n	801823a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801824e:	f7ec fea9 	bl	8004fa4 <osKernelSysTick>
 8018252:	4602      	mov	r2, r0
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018258:	4618      	mov	r0, r3
 801825a:	3710      	adds	r7, #16
 801825c:	46bd      	mov	sp, r7
 801825e:	bd80      	pop	{r7, pc}

08018260 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018260:	b580      	push	{r7, lr}
 8018262:	b082      	sub	sp, #8
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	4618      	mov	r0, r3
 801826e:	f7ed f825 	bl	80052bc <osSemaphoreRelease>
}
 8018272:	bf00      	nop
 8018274:	3708      	adds	r7, #8
 8018276:	46bd      	mov	sp, r7
 8018278:	bd80      	pop	{r7, pc}

0801827a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801827a:	b580      	push	{r7, lr}
 801827c:	b082      	sub	sp, #8
 801827e:	af00      	add	r7, sp, #0
 8018280:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	4618      	mov	r0, r3
 8018288:	f7ed f84e 	bl	8005328 <osSemaphoreDelete>
}
 801828c:	bf00      	nop
 801828e:	3708      	adds	r7, #8
 8018290:	46bd      	mov	sp, r7
 8018292:	bd80      	pop	{r7, pc}

08018294 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018294:	b480      	push	{r7}
 8018296:	b083      	sub	sp, #12
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d101      	bne.n	80182a8 <sys_sem_valid+0x14>
    return 0;
 80182a4:	2300      	movs	r3, #0
 80182a6:	e000      	b.n	80182aa <sys_sem_valid+0x16>
  else
    return 1;
 80182a8:	2301      	movs	r3, #1
}
 80182aa:	4618      	mov	r0, r3
 80182ac:	370c      	adds	r7, #12
 80182ae:	46bd      	mov	sp, r7
 80182b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b4:	4770      	bx	lr

080182b6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80182b6:	b480      	push	{r7}
 80182b8:	b083      	sub	sp, #12
 80182ba:	af00      	add	r7, sp, #0
 80182bc:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	2200      	movs	r2, #0
 80182c2:	601a      	str	r2, [r3, #0]
}
 80182c4:	bf00      	nop
 80182c6:	370c      	adds	r7, #12
 80182c8:	46bd      	mov	sp, r7
 80182ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ce:	4770      	bx	lr

080182d0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80182d0:	b580      	push	{r7, lr}
 80182d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80182d4:	4803      	ldr	r0, [pc, #12]	; (80182e4 <sys_init+0x14>)
 80182d6:	f7ec fed5 	bl	8005084 <osMutexCreate>
 80182da:	4603      	mov	r3, r0
 80182dc:	4a02      	ldr	r2, [pc, #8]	; (80182e8 <sys_init+0x18>)
 80182de:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80182e0:	bf00      	nop
 80182e2:	bd80      	pop	{r7, pc}
 80182e4:	0802789c 	.word	0x0802789c
 80182e8:	200116f0 	.word	0x200116f0

080182ec <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b084      	sub	sp, #16
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80182f4:	2300      	movs	r3, #0
 80182f6:	60bb      	str	r3, [r7, #8]
 80182f8:	2300      	movs	r3, #0
 80182fa:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80182fc:	f107 0308 	add.w	r3, r7, #8
 8018300:	4618      	mov	r0, r3
 8018302:	f7ec febf 	bl	8005084 <osMutexCreate>
 8018306:	4602      	mov	r2, r0
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d102      	bne.n	801831a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018314:	f04f 33ff 	mov.w	r3, #4294967295
 8018318:	e000      	b.n	801831c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801831a:	2300      	movs	r3, #0
}
 801831c:	4618      	mov	r0, r3
 801831e:	3710      	adds	r7, #16
 8018320:	46bd      	mov	sp, r7
 8018322:	bd80      	pop	{r7, pc}

08018324 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b082      	sub	sp, #8
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	f04f 31ff 	mov.w	r1, #4294967295
 8018334:	4618      	mov	r0, r3
 8018336:	f7ec febd 	bl	80050b4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801833a:	bf00      	nop
 801833c:	3708      	adds	r7, #8
 801833e:	46bd      	mov	sp, r7
 8018340:	bd80      	pop	{r7, pc}

08018342 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018342:	b580      	push	{r7, lr}
 8018344:	b082      	sub	sp, #8
 8018346:	af00      	add	r7, sp, #0
 8018348:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	4618      	mov	r0, r3
 8018350:	f7ec fefe 	bl	8005150 <osMutexRelease>
}
 8018354:	bf00      	nop
 8018356:	3708      	adds	r7, #8
 8018358:	46bd      	mov	sp, r7
 801835a:	bd80      	pop	{r7, pc}

0801835c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801835c:	b580      	push	{r7, lr}
 801835e:	b08c      	sub	sp, #48	; 0x30
 8018360:	af00      	add	r7, sp, #0
 8018362:	60f8      	str	r0, [r7, #12]
 8018364:	60b9      	str	r1, [r7, #8]
 8018366:	607a      	str	r2, [r7, #4]
 8018368:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801836a:	f107 0314 	add.w	r3, r7, #20
 801836e:	2200      	movs	r2, #0
 8018370:	601a      	str	r2, [r3, #0]
 8018372:	605a      	str	r2, [r3, #4]
 8018374:	609a      	str	r2, [r3, #8]
 8018376:	60da      	str	r2, [r3, #12]
 8018378:	611a      	str	r2, [r3, #16]
 801837a:	615a      	str	r2, [r3, #20]
 801837c:	619a      	str	r2, [r3, #24]
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	617b      	str	r3, [r7, #20]
 8018382:	68bb      	ldr	r3, [r7, #8]
 8018384:	61bb      	str	r3, [r7, #24]
 8018386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018388:	b21b      	sxth	r3, r3
 801838a:	83bb      	strh	r3, [r7, #28]
 801838c:	683b      	ldr	r3, [r7, #0]
 801838e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018390:	f107 0314 	add.w	r3, r7, #20
 8018394:	6879      	ldr	r1, [r7, #4]
 8018396:	4618      	mov	r0, r3
 8018398:	f7ec fe14 	bl	8004fc4 <osThreadCreate>
 801839c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801839e:	4618      	mov	r0, r3
 80183a0:	3730      	adds	r7, #48	; 0x30
 80183a2:	46bd      	mov	sp, r7
 80183a4:	bd80      	pop	{r7, pc}
	...

080183a8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80183ac:	4b04      	ldr	r3, [pc, #16]	; (80183c0 <sys_arch_protect+0x18>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	f04f 31ff 	mov.w	r1, #4294967295
 80183b4:	4618      	mov	r0, r3
 80183b6:	f7ec fe7d 	bl	80050b4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80183ba:	2301      	movs	r3, #1
}
 80183bc:	4618      	mov	r0, r3
 80183be:	bd80      	pop	{r7, pc}
 80183c0:	200116f0 	.word	0x200116f0

080183c4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b082      	sub	sp, #8
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80183cc:	4b04      	ldr	r3, [pc, #16]	; (80183e0 <sys_arch_unprotect+0x1c>)
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	4618      	mov	r0, r3
 80183d2:	f7ec febd 	bl	8005150 <osMutexRelease>
}
 80183d6:	bf00      	nop
 80183d8:	3708      	adds	r7, #8
 80183da:	46bd      	mov	sp, r7
 80183dc:	bd80      	pop	{r7, pc}
 80183de:	bf00      	nop
 80183e0:	200116f0 	.word	0x200116f0

080183e4 <rand>:
 80183e4:	4b16      	ldr	r3, [pc, #88]	; (8018440 <rand+0x5c>)
 80183e6:	b510      	push	{r4, lr}
 80183e8:	681c      	ldr	r4, [r3, #0]
 80183ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80183ec:	b9b3      	cbnz	r3, 801841c <rand+0x38>
 80183ee:	2018      	movs	r0, #24
 80183f0:	f000 fb5e 	bl	8018ab0 <malloc>
 80183f4:	4602      	mov	r2, r0
 80183f6:	6320      	str	r0, [r4, #48]	; 0x30
 80183f8:	b920      	cbnz	r0, 8018404 <rand+0x20>
 80183fa:	4b12      	ldr	r3, [pc, #72]	; (8018444 <rand+0x60>)
 80183fc:	4812      	ldr	r0, [pc, #72]	; (8018448 <rand+0x64>)
 80183fe:	2152      	movs	r1, #82	; 0x52
 8018400:	f000 faec 	bl	80189dc <__assert_func>
 8018404:	4911      	ldr	r1, [pc, #68]	; (801844c <rand+0x68>)
 8018406:	4b12      	ldr	r3, [pc, #72]	; (8018450 <rand+0x6c>)
 8018408:	e9c0 1300 	strd	r1, r3, [r0]
 801840c:	4b11      	ldr	r3, [pc, #68]	; (8018454 <rand+0x70>)
 801840e:	6083      	str	r3, [r0, #8]
 8018410:	230b      	movs	r3, #11
 8018412:	8183      	strh	r3, [r0, #12]
 8018414:	2100      	movs	r1, #0
 8018416:	2001      	movs	r0, #1
 8018418:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801841c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801841e:	480e      	ldr	r0, [pc, #56]	; (8018458 <rand+0x74>)
 8018420:	690b      	ldr	r3, [r1, #16]
 8018422:	694c      	ldr	r4, [r1, #20]
 8018424:	4a0d      	ldr	r2, [pc, #52]	; (801845c <rand+0x78>)
 8018426:	4358      	muls	r0, r3
 8018428:	fb02 0004 	mla	r0, r2, r4, r0
 801842c:	fba3 3202 	umull	r3, r2, r3, r2
 8018430:	3301      	adds	r3, #1
 8018432:	eb40 0002 	adc.w	r0, r0, r2
 8018436:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801843a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801843e:	bd10      	pop	{r4, pc}
 8018440:	2000008c 	.word	0x2000008c
 8018444:	080278a4 	.word	0x080278a4
 8018448:	080278bb 	.word	0x080278bb
 801844c:	abcd330e 	.word	0xabcd330e
 8018450:	e66d1234 	.word	0xe66d1234
 8018454:	0005deec 	.word	0x0005deec
 8018458:	5851f42d 	.word	0x5851f42d
 801845c:	4c957f2d 	.word	0x4c957f2d

08018460 <std>:
 8018460:	2300      	movs	r3, #0
 8018462:	b510      	push	{r4, lr}
 8018464:	4604      	mov	r4, r0
 8018466:	e9c0 3300 	strd	r3, r3, [r0]
 801846a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801846e:	6083      	str	r3, [r0, #8]
 8018470:	8181      	strh	r1, [r0, #12]
 8018472:	6643      	str	r3, [r0, #100]	; 0x64
 8018474:	81c2      	strh	r2, [r0, #14]
 8018476:	6183      	str	r3, [r0, #24]
 8018478:	4619      	mov	r1, r3
 801847a:	2208      	movs	r2, #8
 801847c:	305c      	adds	r0, #92	; 0x5c
 801847e:	f000 f93e 	bl	80186fe <memset>
 8018482:	4b05      	ldr	r3, [pc, #20]	; (8018498 <std+0x38>)
 8018484:	6263      	str	r3, [r4, #36]	; 0x24
 8018486:	4b05      	ldr	r3, [pc, #20]	; (801849c <std+0x3c>)
 8018488:	62a3      	str	r3, [r4, #40]	; 0x28
 801848a:	4b05      	ldr	r3, [pc, #20]	; (80184a0 <std+0x40>)
 801848c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801848e:	4b05      	ldr	r3, [pc, #20]	; (80184a4 <std+0x44>)
 8018490:	6224      	str	r4, [r4, #32]
 8018492:	6323      	str	r3, [r4, #48]	; 0x30
 8018494:	bd10      	pop	{r4, pc}
 8018496:	bf00      	nop
 8018498:	08018625 	.word	0x08018625
 801849c:	08018647 	.word	0x08018647
 80184a0:	0801867f 	.word	0x0801867f
 80184a4:	080186a3 	.word	0x080186a3

080184a8 <stdio_exit_handler>:
 80184a8:	4a02      	ldr	r2, [pc, #8]	; (80184b4 <stdio_exit_handler+0xc>)
 80184aa:	4903      	ldr	r1, [pc, #12]	; (80184b8 <stdio_exit_handler+0x10>)
 80184ac:	4803      	ldr	r0, [pc, #12]	; (80184bc <stdio_exit_handler+0x14>)
 80184ae:	f000 b869 	b.w	8018584 <_fwalk_sglue>
 80184b2:	bf00      	nop
 80184b4:	20000034 	.word	0x20000034
 80184b8:	0801957d 	.word	0x0801957d
 80184bc:	20000040 	.word	0x20000040

080184c0 <cleanup_stdio>:
 80184c0:	6841      	ldr	r1, [r0, #4]
 80184c2:	4b0c      	ldr	r3, [pc, #48]	; (80184f4 <cleanup_stdio+0x34>)
 80184c4:	4299      	cmp	r1, r3
 80184c6:	b510      	push	{r4, lr}
 80184c8:	4604      	mov	r4, r0
 80184ca:	d001      	beq.n	80184d0 <cleanup_stdio+0x10>
 80184cc:	f001 f856 	bl	801957c <_fflush_r>
 80184d0:	68a1      	ldr	r1, [r4, #8]
 80184d2:	4b09      	ldr	r3, [pc, #36]	; (80184f8 <cleanup_stdio+0x38>)
 80184d4:	4299      	cmp	r1, r3
 80184d6:	d002      	beq.n	80184de <cleanup_stdio+0x1e>
 80184d8:	4620      	mov	r0, r4
 80184da:	f001 f84f 	bl	801957c <_fflush_r>
 80184de:	68e1      	ldr	r1, [r4, #12]
 80184e0:	4b06      	ldr	r3, [pc, #24]	; (80184fc <cleanup_stdio+0x3c>)
 80184e2:	4299      	cmp	r1, r3
 80184e4:	d004      	beq.n	80184f0 <cleanup_stdio+0x30>
 80184e6:	4620      	mov	r0, r4
 80184e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184ec:	f001 b846 	b.w	801957c <_fflush_r>
 80184f0:	bd10      	pop	{r4, pc}
 80184f2:	bf00      	nop
 80184f4:	200116f4 	.word	0x200116f4
 80184f8:	2001175c 	.word	0x2001175c
 80184fc:	200117c4 	.word	0x200117c4

08018500 <global_stdio_init.part.0>:
 8018500:	b510      	push	{r4, lr}
 8018502:	4b0b      	ldr	r3, [pc, #44]	; (8018530 <global_stdio_init.part.0+0x30>)
 8018504:	4c0b      	ldr	r4, [pc, #44]	; (8018534 <global_stdio_init.part.0+0x34>)
 8018506:	4a0c      	ldr	r2, [pc, #48]	; (8018538 <global_stdio_init.part.0+0x38>)
 8018508:	601a      	str	r2, [r3, #0]
 801850a:	4620      	mov	r0, r4
 801850c:	2200      	movs	r2, #0
 801850e:	2104      	movs	r1, #4
 8018510:	f7ff ffa6 	bl	8018460 <std>
 8018514:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018518:	2201      	movs	r2, #1
 801851a:	2109      	movs	r1, #9
 801851c:	f7ff ffa0 	bl	8018460 <std>
 8018520:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018524:	2202      	movs	r2, #2
 8018526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801852a:	2112      	movs	r1, #18
 801852c:	f7ff bf98 	b.w	8018460 <std>
 8018530:	2001182c 	.word	0x2001182c
 8018534:	200116f4 	.word	0x200116f4
 8018538:	080184a9 	.word	0x080184a9

0801853c <__sfp_lock_acquire>:
 801853c:	4801      	ldr	r0, [pc, #4]	; (8018544 <__sfp_lock_acquire+0x8>)
 801853e:	f000 ba3d 	b.w	80189bc <__retarget_lock_acquire_recursive>
 8018542:	bf00      	nop
 8018544:	20011835 	.word	0x20011835

08018548 <__sfp_lock_release>:
 8018548:	4801      	ldr	r0, [pc, #4]	; (8018550 <__sfp_lock_release+0x8>)
 801854a:	f000 ba38 	b.w	80189be <__retarget_lock_release_recursive>
 801854e:	bf00      	nop
 8018550:	20011835 	.word	0x20011835

08018554 <__sinit>:
 8018554:	b510      	push	{r4, lr}
 8018556:	4604      	mov	r4, r0
 8018558:	f7ff fff0 	bl	801853c <__sfp_lock_acquire>
 801855c:	6a23      	ldr	r3, [r4, #32]
 801855e:	b11b      	cbz	r3, 8018568 <__sinit+0x14>
 8018560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018564:	f7ff bff0 	b.w	8018548 <__sfp_lock_release>
 8018568:	4b04      	ldr	r3, [pc, #16]	; (801857c <__sinit+0x28>)
 801856a:	6223      	str	r3, [r4, #32]
 801856c:	4b04      	ldr	r3, [pc, #16]	; (8018580 <__sinit+0x2c>)
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	2b00      	cmp	r3, #0
 8018572:	d1f5      	bne.n	8018560 <__sinit+0xc>
 8018574:	f7ff ffc4 	bl	8018500 <global_stdio_init.part.0>
 8018578:	e7f2      	b.n	8018560 <__sinit+0xc>
 801857a:	bf00      	nop
 801857c:	080184c1 	.word	0x080184c1
 8018580:	2001182c 	.word	0x2001182c

08018584 <_fwalk_sglue>:
 8018584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018588:	4607      	mov	r7, r0
 801858a:	4688      	mov	r8, r1
 801858c:	4614      	mov	r4, r2
 801858e:	2600      	movs	r6, #0
 8018590:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018594:	f1b9 0901 	subs.w	r9, r9, #1
 8018598:	d505      	bpl.n	80185a6 <_fwalk_sglue+0x22>
 801859a:	6824      	ldr	r4, [r4, #0]
 801859c:	2c00      	cmp	r4, #0
 801859e:	d1f7      	bne.n	8018590 <_fwalk_sglue+0xc>
 80185a0:	4630      	mov	r0, r6
 80185a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185a6:	89ab      	ldrh	r3, [r5, #12]
 80185a8:	2b01      	cmp	r3, #1
 80185aa:	d907      	bls.n	80185bc <_fwalk_sglue+0x38>
 80185ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80185b0:	3301      	adds	r3, #1
 80185b2:	d003      	beq.n	80185bc <_fwalk_sglue+0x38>
 80185b4:	4629      	mov	r1, r5
 80185b6:	4638      	mov	r0, r7
 80185b8:	47c0      	blx	r8
 80185ba:	4306      	orrs	r6, r0
 80185bc:	3568      	adds	r5, #104	; 0x68
 80185be:	e7e9      	b.n	8018594 <_fwalk_sglue+0x10>

080185c0 <iprintf>:
 80185c0:	b40f      	push	{r0, r1, r2, r3}
 80185c2:	b507      	push	{r0, r1, r2, lr}
 80185c4:	4906      	ldr	r1, [pc, #24]	; (80185e0 <iprintf+0x20>)
 80185c6:	ab04      	add	r3, sp, #16
 80185c8:	6808      	ldr	r0, [r1, #0]
 80185ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80185ce:	6881      	ldr	r1, [r0, #8]
 80185d0:	9301      	str	r3, [sp, #4]
 80185d2:	f000 fca3 	bl	8018f1c <_vfiprintf_r>
 80185d6:	b003      	add	sp, #12
 80185d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80185dc:	b004      	add	sp, #16
 80185de:	4770      	bx	lr
 80185e0:	2000008c 	.word	0x2000008c

080185e4 <siprintf>:
 80185e4:	b40e      	push	{r1, r2, r3}
 80185e6:	b500      	push	{lr}
 80185e8:	b09c      	sub	sp, #112	; 0x70
 80185ea:	ab1d      	add	r3, sp, #116	; 0x74
 80185ec:	9002      	str	r0, [sp, #8]
 80185ee:	9006      	str	r0, [sp, #24]
 80185f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80185f4:	4809      	ldr	r0, [pc, #36]	; (801861c <siprintf+0x38>)
 80185f6:	9107      	str	r1, [sp, #28]
 80185f8:	9104      	str	r1, [sp, #16]
 80185fa:	4909      	ldr	r1, [pc, #36]	; (8018620 <siprintf+0x3c>)
 80185fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8018600:	9105      	str	r1, [sp, #20]
 8018602:	6800      	ldr	r0, [r0, #0]
 8018604:	9301      	str	r3, [sp, #4]
 8018606:	a902      	add	r1, sp, #8
 8018608:	f000 fb60 	bl	8018ccc <_svfiprintf_r>
 801860c:	9b02      	ldr	r3, [sp, #8]
 801860e:	2200      	movs	r2, #0
 8018610:	701a      	strb	r2, [r3, #0]
 8018612:	b01c      	add	sp, #112	; 0x70
 8018614:	f85d eb04 	ldr.w	lr, [sp], #4
 8018618:	b003      	add	sp, #12
 801861a:	4770      	bx	lr
 801861c:	2000008c 	.word	0x2000008c
 8018620:	ffff0208 	.word	0xffff0208

08018624 <__sread>:
 8018624:	b510      	push	{r4, lr}
 8018626:	460c      	mov	r4, r1
 8018628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801862c:	f000 f97e 	bl	801892c <_read_r>
 8018630:	2800      	cmp	r0, #0
 8018632:	bfab      	itete	ge
 8018634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018636:	89a3      	ldrhlt	r3, [r4, #12]
 8018638:	181b      	addge	r3, r3, r0
 801863a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801863e:	bfac      	ite	ge
 8018640:	6563      	strge	r3, [r4, #84]	; 0x54
 8018642:	81a3      	strhlt	r3, [r4, #12]
 8018644:	bd10      	pop	{r4, pc}

08018646 <__swrite>:
 8018646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801864a:	461f      	mov	r7, r3
 801864c:	898b      	ldrh	r3, [r1, #12]
 801864e:	05db      	lsls	r3, r3, #23
 8018650:	4605      	mov	r5, r0
 8018652:	460c      	mov	r4, r1
 8018654:	4616      	mov	r6, r2
 8018656:	d505      	bpl.n	8018664 <__swrite+0x1e>
 8018658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801865c:	2302      	movs	r3, #2
 801865e:	2200      	movs	r2, #0
 8018660:	f000 f952 	bl	8018908 <_lseek_r>
 8018664:	89a3      	ldrh	r3, [r4, #12]
 8018666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801866a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801866e:	81a3      	strh	r3, [r4, #12]
 8018670:	4632      	mov	r2, r6
 8018672:	463b      	mov	r3, r7
 8018674:	4628      	mov	r0, r5
 8018676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801867a:	f000 b969 	b.w	8018950 <_write_r>

0801867e <__sseek>:
 801867e:	b510      	push	{r4, lr}
 8018680:	460c      	mov	r4, r1
 8018682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018686:	f000 f93f 	bl	8018908 <_lseek_r>
 801868a:	1c43      	adds	r3, r0, #1
 801868c:	89a3      	ldrh	r3, [r4, #12]
 801868e:	bf15      	itete	ne
 8018690:	6560      	strne	r0, [r4, #84]	; 0x54
 8018692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801869a:	81a3      	strheq	r3, [r4, #12]
 801869c:	bf18      	it	ne
 801869e:	81a3      	strhne	r3, [r4, #12]
 80186a0:	bd10      	pop	{r4, pc}

080186a2 <__sclose>:
 80186a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80186a6:	f000 b8c9 	b.w	801883c <_close_r>

080186aa <memcmp>:
 80186aa:	b510      	push	{r4, lr}
 80186ac:	3901      	subs	r1, #1
 80186ae:	4402      	add	r2, r0
 80186b0:	4290      	cmp	r0, r2
 80186b2:	d101      	bne.n	80186b8 <memcmp+0xe>
 80186b4:	2000      	movs	r0, #0
 80186b6:	e005      	b.n	80186c4 <memcmp+0x1a>
 80186b8:	7803      	ldrb	r3, [r0, #0]
 80186ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80186be:	42a3      	cmp	r3, r4
 80186c0:	d001      	beq.n	80186c6 <memcmp+0x1c>
 80186c2:	1b18      	subs	r0, r3, r4
 80186c4:	bd10      	pop	{r4, pc}
 80186c6:	3001      	adds	r0, #1
 80186c8:	e7f2      	b.n	80186b0 <memcmp+0x6>

080186ca <memmove>:
 80186ca:	4288      	cmp	r0, r1
 80186cc:	b510      	push	{r4, lr}
 80186ce:	eb01 0402 	add.w	r4, r1, r2
 80186d2:	d902      	bls.n	80186da <memmove+0x10>
 80186d4:	4284      	cmp	r4, r0
 80186d6:	4623      	mov	r3, r4
 80186d8:	d807      	bhi.n	80186ea <memmove+0x20>
 80186da:	1e43      	subs	r3, r0, #1
 80186dc:	42a1      	cmp	r1, r4
 80186de:	d008      	beq.n	80186f2 <memmove+0x28>
 80186e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80186e8:	e7f8      	b.n	80186dc <memmove+0x12>
 80186ea:	4402      	add	r2, r0
 80186ec:	4601      	mov	r1, r0
 80186ee:	428a      	cmp	r2, r1
 80186f0:	d100      	bne.n	80186f4 <memmove+0x2a>
 80186f2:	bd10      	pop	{r4, pc}
 80186f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80186f8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80186fc:	e7f7      	b.n	80186ee <memmove+0x24>

080186fe <memset>:
 80186fe:	4402      	add	r2, r0
 8018700:	4603      	mov	r3, r0
 8018702:	4293      	cmp	r3, r2
 8018704:	d100      	bne.n	8018708 <memset+0xa>
 8018706:	4770      	bx	lr
 8018708:	f803 1b01 	strb.w	r1, [r3], #1
 801870c:	e7f9      	b.n	8018702 <memset+0x4>
	...

08018710 <strcasecmp>:
 8018710:	b530      	push	{r4, r5, lr}
 8018712:	4d0b      	ldr	r5, [pc, #44]	; (8018740 <strcasecmp+0x30>)
 8018714:	4604      	mov	r4, r0
 8018716:	f814 3b01 	ldrb.w	r3, [r4], #1
 801871a:	5cea      	ldrb	r2, [r5, r3]
 801871c:	f002 0203 	and.w	r2, r2, #3
 8018720:	2a01      	cmp	r2, #1
 8018722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018726:	5ca8      	ldrb	r0, [r5, r2]
 8018728:	f000 0003 	and.w	r0, r0, #3
 801872c:	bf08      	it	eq
 801872e:	3320      	addeq	r3, #32
 8018730:	2801      	cmp	r0, #1
 8018732:	bf08      	it	eq
 8018734:	3220      	addeq	r2, #32
 8018736:	1a98      	subs	r0, r3, r2
 8018738:	d101      	bne.n	801873e <strcasecmp+0x2e>
 801873a:	2a00      	cmp	r2, #0
 801873c:	d1eb      	bne.n	8018716 <strcasecmp+0x6>
 801873e:	bd30      	pop	{r4, r5, pc}
 8018740:	08027914 	.word	0x08027914

08018744 <strchr>:
 8018744:	b2c9      	uxtb	r1, r1
 8018746:	4603      	mov	r3, r0
 8018748:	f810 2b01 	ldrb.w	r2, [r0], #1
 801874c:	b11a      	cbz	r2, 8018756 <strchr+0x12>
 801874e:	428a      	cmp	r2, r1
 8018750:	d1f9      	bne.n	8018746 <strchr+0x2>
 8018752:	4618      	mov	r0, r3
 8018754:	4770      	bx	lr
 8018756:	2900      	cmp	r1, #0
 8018758:	bf18      	it	ne
 801875a:	2300      	movne	r3, #0
 801875c:	e7f9      	b.n	8018752 <strchr+0xe>

0801875e <strncmp>:
 801875e:	b510      	push	{r4, lr}
 8018760:	b16a      	cbz	r2, 801877e <strncmp+0x20>
 8018762:	3901      	subs	r1, #1
 8018764:	1884      	adds	r4, r0, r2
 8018766:	f810 2b01 	ldrb.w	r2, [r0], #1
 801876a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801876e:	429a      	cmp	r2, r3
 8018770:	d103      	bne.n	801877a <strncmp+0x1c>
 8018772:	42a0      	cmp	r0, r4
 8018774:	d001      	beq.n	801877a <strncmp+0x1c>
 8018776:	2a00      	cmp	r2, #0
 8018778:	d1f5      	bne.n	8018766 <strncmp+0x8>
 801877a:	1ad0      	subs	r0, r2, r3
 801877c:	bd10      	pop	{r4, pc}
 801877e:	4610      	mov	r0, r2
 8018780:	e7fc      	b.n	801877c <strncmp+0x1e>
	...

08018784 <strtok>:
 8018784:	4b16      	ldr	r3, [pc, #88]	; (80187e0 <strtok+0x5c>)
 8018786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018788:	681e      	ldr	r6, [r3, #0]
 801878a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 801878c:	4605      	mov	r5, r0
 801878e:	b9fc      	cbnz	r4, 80187d0 <strtok+0x4c>
 8018790:	2050      	movs	r0, #80	; 0x50
 8018792:	9101      	str	r1, [sp, #4]
 8018794:	f000 f98c 	bl	8018ab0 <malloc>
 8018798:	9901      	ldr	r1, [sp, #4]
 801879a:	6470      	str	r0, [r6, #68]	; 0x44
 801879c:	4602      	mov	r2, r0
 801879e:	b920      	cbnz	r0, 80187aa <strtok+0x26>
 80187a0:	4b10      	ldr	r3, [pc, #64]	; (80187e4 <strtok+0x60>)
 80187a2:	4811      	ldr	r0, [pc, #68]	; (80187e8 <strtok+0x64>)
 80187a4:	215b      	movs	r1, #91	; 0x5b
 80187a6:	f000 f919 	bl	80189dc <__assert_func>
 80187aa:	e9c0 4400 	strd	r4, r4, [r0]
 80187ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80187b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80187b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80187ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80187be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80187c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80187c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80187ca:	6184      	str	r4, [r0, #24]
 80187cc:	7704      	strb	r4, [r0, #28]
 80187ce:	6244      	str	r4, [r0, #36]	; 0x24
 80187d0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80187d2:	2301      	movs	r3, #1
 80187d4:	4628      	mov	r0, r5
 80187d6:	b002      	add	sp, #8
 80187d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80187dc:	f000 b806 	b.w	80187ec <__strtok_r>
 80187e0:	2000008c 	.word	0x2000008c
 80187e4:	080278a4 	.word	0x080278a4
 80187e8:	08027a14 	.word	0x08027a14

080187ec <__strtok_r>:
 80187ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187ee:	b908      	cbnz	r0, 80187f4 <__strtok_r+0x8>
 80187f0:	6810      	ldr	r0, [r2, #0]
 80187f2:	b188      	cbz	r0, 8018818 <__strtok_r+0x2c>
 80187f4:	4604      	mov	r4, r0
 80187f6:	4620      	mov	r0, r4
 80187f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80187fc:	460f      	mov	r7, r1
 80187fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018802:	b91e      	cbnz	r6, 801880c <__strtok_r+0x20>
 8018804:	b965      	cbnz	r5, 8018820 <__strtok_r+0x34>
 8018806:	6015      	str	r5, [r2, #0]
 8018808:	4628      	mov	r0, r5
 801880a:	e005      	b.n	8018818 <__strtok_r+0x2c>
 801880c:	42b5      	cmp	r5, r6
 801880e:	d1f6      	bne.n	80187fe <__strtok_r+0x12>
 8018810:	2b00      	cmp	r3, #0
 8018812:	d1f0      	bne.n	80187f6 <__strtok_r+0xa>
 8018814:	6014      	str	r4, [r2, #0]
 8018816:	7003      	strb	r3, [r0, #0]
 8018818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801881a:	461c      	mov	r4, r3
 801881c:	e00c      	b.n	8018838 <__strtok_r+0x4c>
 801881e:	b915      	cbnz	r5, 8018826 <__strtok_r+0x3a>
 8018820:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018824:	460e      	mov	r6, r1
 8018826:	f816 5b01 	ldrb.w	r5, [r6], #1
 801882a:	42ab      	cmp	r3, r5
 801882c:	d1f7      	bne.n	801881e <__strtok_r+0x32>
 801882e:	2b00      	cmp	r3, #0
 8018830:	d0f3      	beq.n	801881a <__strtok_r+0x2e>
 8018832:	2300      	movs	r3, #0
 8018834:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018838:	6014      	str	r4, [r2, #0]
 801883a:	e7ed      	b.n	8018818 <__strtok_r+0x2c>

0801883c <_close_r>:
 801883c:	b538      	push	{r3, r4, r5, lr}
 801883e:	4d06      	ldr	r5, [pc, #24]	; (8018858 <_close_r+0x1c>)
 8018840:	2300      	movs	r3, #0
 8018842:	4604      	mov	r4, r0
 8018844:	4608      	mov	r0, r1
 8018846:	602b      	str	r3, [r5, #0]
 8018848:	f7e8 f9f7 	bl	8000c3a <_close>
 801884c:	1c43      	adds	r3, r0, #1
 801884e:	d102      	bne.n	8018856 <_close_r+0x1a>
 8018850:	682b      	ldr	r3, [r5, #0]
 8018852:	b103      	cbz	r3, 8018856 <_close_r+0x1a>
 8018854:	6023      	str	r3, [r4, #0]
 8018856:	bd38      	pop	{r3, r4, r5, pc}
 8018858:	20011830 	.word	0x20011830

0801885c <_reclaim_reent>:
 801885c:	4b29      	ldr	r3, [pc, #164]	; (8018904 <_reclaim_reent+0xa8>)
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	4283      	cmp	r3, r0
 8018862:	b570      	push	{r4, r5, r6, lr}
 8018864:	4604      	mov	r4, r0
 8018866:	d04b      	beq.n	8018900 <_reclaim_reent+0xa4>
 8018868:	69c3      	ldr	r3, [r0, #28]
 801886a:	b143      	cbz	r3, 801887e <_reclaim_reent+0x22>
 801886c:	68db      	ldr	r3, [r3, #12]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d144      	bne.n	80188fc <_reclaim_reent+0xa0>
 8018872:	69e3      	ldr	r3, [r4, #28]
 8018874:	6819      	ldr	r1, [r3, #0]
 8018876:	b111      	cbz	r1, 801887e <_reclaim_reent+0x22>
 8018878:	4620      	mov	r0, r4
 801887a:	f000 f8cd 	bl	8018a18 <_free_r>
 801887e:	6961      	ldr	r1, [r4, #20]
 8018880:	b111      	cbz	r1, 8018888 <_reclaim_reent+0x2c>
 8018882:	4620      	mov	r0, r4
 8018884:	f000 f8c8 	bl	8018a18 <_free_r>
 8018888:	69e1      	ldr	r1, [r4, #28]
 801888a:	b111      	cbz	r1, 8018892 <_reclaim_reent+0x36>
 801888c:	4620      	mov	r0, r4
 801888e:	f000 f8c3 	bl	8018a18 <_free_r>
 8018892:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018894:	b111      	cbz	r1, 801889c <_reclaim_reent+0x40>
 8018896:	4620      	mov	r0, r4
 8018898:	f000 f8be 	bl	8018a18 <_free_r>
 801889c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801889e:	b111      	cbz	r1, 80188a6 <_reclaim_reent+0x4a>
 80188a0:	4620      	mov	r0, r4
 80188a2:	f000 f8b9 	bl	8018a18 <_free_r>
 80188a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80188a8:	b111      	cbz	r1, 80188b0 <_reclaim_reent+0x54>
 80188aa:	4620      	mov	r0, r4
 80188ac:	f000 f8b4 	bl	8018a18 <_free_r>
 80188b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80188b2:	b111      	cbz	r1, 80188ba <_reclaim_reent+0x5e>
 80188b4:	4620      	mov	r0, r4
 80188b6:	f000 f8af 	bl	8018a18 <_free_r>
 80188ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80188bc:	b111      	cbz	r1, 80188c4 <_reclaim_reent+0x68>
 80188be:	4620      	mov	r0, r4
 80188c0:	f000 f8aa 	bl	8018a18 <_free_r>
 80188c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80188c6:	b111      	cbz	r1, 80188ce <_reclaim_reent+0x72>
 80188c8:	4620      	mov	r0, r4
 80188ca:	f000 f8a5 	bl	8018a18 <_free_r>
 80188ce:	6a23      	ldr	r3, [r4, #32]
 80188d0:	b1b3      	cbz	r3, 8018900 <_reclaim_reent+0xa4>
 80188d2:	4620      	mov	r0, r4
 80188d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80188d8:	4718      	bx	r3
 80188da:	5949      	ldr	r1, [r1, r5]
 80188dc:	b941      	cbnz	r1, 80188f0 <_reclaim_reent+0x94>
 80188de:	3504      	adds	r5, #4
 80188e0:	69e3      	ldr	r3, [r4, #28]
 80188e2:	2d80      	cmp	r5, #128	; 0x80
 80188e4:	68d9      	ldr	r1, [r3, #12]
 80188e6:	d1f8      	bne.n	80188da <_reclaim_reent+0x7e>
 80188e8:	4620      	mov	r0, r4
 80188ea:	f000 f895 	bl	8018a18 <_free_r>
 80188ee:	e7c0      	b.n	8018872 <_reclaim_reent+0x16>
 80188f0:	680e      	ldr	r6, [r1, #0]
 80188f2:	4620      	mov	r0, r4
 80188f4:	f000 f890 	bl	8018a18 <_free_r>
 80188f8:	4631      	mov	r1, r6
 80188fa:	e7ef      	b.n	80188dc <_reclaim_reent+0x80>
 80188fc:	2500      	movs	r5, #0
 80188fe:	e7ef      	b.n	80188e0 <_reclaim_reent+0x84>
 8018900:	bd70      	pop	{r4, r5, r6, pc}
 8018902:	bf00      	nop
 8018904:	2000008c 	.word	0x2000008c

08018908 <_lseek_r>:
 8018908:	b538      	push	{r3, r4, r5, lr}
 801890a:	4d07      	ldr	r5, [pc, #28]	; (8018928 <_lseek_r+0x20>)
 801890c:	4604      	mov	r4, r0
 801890e:	4608      	mov	r0, r1
 8018910:	4611      	mov	r1, r2
 8018912:	2200      	movs	r2, #0
 8018914:	602a      	str	r2, [r5, #0]
 8018916:	461a      	mov	r2, r3
 8018918:	f7e8 f9b6 	bl	8000c88 <_lseek>
 801891c:	1c43      	adds	r3, r0, #1
 801891e:	d102      	bne.n	8018926 <_lseek_r+0x1e>
 8018920:	682b      	ldr	r3, [r5, #0]
 8018922:	b103      	cbz	r3, 8018926 <_lseek_r+0x1e>
 8018924:	6023      	str	r3, [r4, #0]
 8018926:	bd38      	pop	{r3, r4, r5, pc}
 8018928:	20011830 	.word	0x20011830

0801892c <_read_r>:
 801892c:	b538      	push	{r3, r4, r5, lr}
 801892e:	4d07      	ldr	r5, [pc, #28]	; (801894c <_read_r+0x20>)
 8018930:	4604      	mov	r4, r0
 8018932:	4608      	mov	r0, r1
 8018934:	4611      	mov	r1, r2
 8018936:	2200      	movs	r2, #0
 8018938:	602a      	str	r2, [r5, #0]
 801893a:	461a      	mov	r2, r3
 801893c:	f7e8 f944 	bl	8000bc8 <_read>
 8018940:	1c43      	adds	r3, r0, #1
 8018942:	d102      	bne.n	801894a <_read_r+0x1e>
 8018944:	682b      	ldr	r3, [r5, #0]
 8018946:	b103      	cbz	r3, 801894a <_read_r+0x1e>
 8018948:	6023      	str	r3, [r4, #0]
 801894a:	bd38      	pop	{r3, r4, r5, pc}
 801894c:	20011830 	.word	0x20011830

08018950 <_write_r>:
 8018950:	b538      	push	{r3, r4, r5, lr}
 8018952:	4d07      	ldr	r5, [pc, #28]	; (8018970 <_write_r+0x20>)
 8018954:	4604      	mov	r4, r0
 8018956:	4608      	mov	r0, r1
 8018958:	4611      	mov	r1, r2
 801895a:	2200      	movs	r2, #0
 801895c:	602a      	str	r2, [r5, #0]
 801895e:	461a      	mov	r2, r3
 8018960:	f7e8 f94f 	bl	8000c02 <_write>
 8018964:	1c43      	adds	r3, r0, #1
 8018966:	d102      	bne.n	801896e <_write_r+0x1e>
 8018968:	682b      	ldr	r3, [r5, #0]
 801896a:	b103      	cbz	r3, 801896e <_write_r+0x1e>
 801896c:	6023      	str	r3, [r4, #0]
 801896e:	bd38      	pop	{r3, r4, r5, pc}
 8018970:	20011830 	.word	0x20011830

08018974 <__libc_init_array>:
 8018974:	b570      	push	{r4, r5, r6, lr}
 8018976:	4d0d      	ldr	r5, [pc, #52]	; (80189ac <__libc_init_array+0x38>)
 8018978:	4c0d      	ldr	r4, [pc, #52]	; (80189b0 <__libc_init_array+0x3c>)
 801897a:	1b64      	subs	r4, r4, r5
 801897c:	10a4      	asrs	r4, r4, #2
 801897e:	2600      	movs	r6, #0
 8018980:	42a6      	cmp	r6, r4
 8018982:	d109      	bne.n	8018998 <__libc_init_array+0x24>
 8018984:	4d0b      	ldr	r5, [pc, #44]	; (80189b4 <__libc_init_array+0x40>)
 8018986:	4c0c      	ldr	r4, [pc, #48]	; (80189b8 <__libc_init_array+0x44>)
 8018988:	f000 ffde 	bl	8019948 <_init>
 801898c:	1b64      	subs	r4, r4, r5
 801898e:	10a4      	asrs	r4, r4, #2
 8018990:	2600      	movs	r6, #0
 8018992:	42a6      	cmp	r6, r4
 8018994:	d105      	bne.n	80189a2 <__libc_init_array+0x2e>
 8018996:	bd70      	pop	{r4, r5, r6, pc}
 8018998:	f855 3b04 	ldr.w	r3, [r5], #4
 801899c:	4798      	blx	r3
 801899e:	3601      	adds	r6, #1
 80189a0:	e7ee      	b.n	8018980 <__libc_init_array+0xc>
 80189a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80189a6:	4798      	blx	r3
 80189a8:	3601      	adds	r6, #1
 80189aa:	e7f2      	b.n	8018992 <__libc_init_array+0x1e>
 80189ac:	08027ae8 	.word	0x08027ae8
 80189b0:	08027ae8 	.word	0x08027ae8
 80189b4:	08027ae8 	.word	0x08027ae8
 80189b8:	08027aec 	.word	0x08027aec

080189bc <__retarget_lock_acquire_recursive>:
 80189bc:	4770      	bx	lr

080189be <__retarget_lock_release_recursive>:
 80189be:	4770      	bx	lr

080189c0 <memcpy>:
 80189c0:	440a      	add	r2, r1
 80189c2:	4291      	cmp	r1, r2
 80189c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80189c8:	d100      	bne.n	80189cc <memcpy+0xc>
 80189ca:	4770      	bx	lr
 80189cc:	b510      	push	{r4, lr}
 80189ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80189d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80189d6:	4291      	cmp	r1, r2
 80189d8:	d1f9      	bne.n	80189ce <memcpy+0xe>
 80189da:	bd10      	pop	{r4, pc}

080189dc <__assert_func>:
 80189dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80189de:	4614      	mov	r4, r2
 80189e0:	461a      	mov	r2, r3
 80189e2:	4b09      	ldr	r3, [pc, #36]	; (8018a08 <__assert_func+0x2c>)
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	4605      	mov	r5, r0
 80189e8:	68d8      	ldr	r0, [r3, #12]
 80189ea:	b14c      	cbz	r4, 8018a00 <__assert_func+0x24>
 80189ec:	4b07      	ldr	r3, [pc, #28]	; (8018a0c <__assert_func+0x30>)
 80189ee:	9100      	str	r1, [sp, #0]
 80189f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80189f4:	4906      	ldr	r1, [pc, #24]	; (8018a10 <__assert_func+0x34>)
 80189f6:	462b      	mov	r3, r5
 80189f8:	f000 fde8 	bl	80195cc <fiprintf>
 80189fc:	f000 fe9e 	bl	801973c <abort>
 8018a00:	4b04      	ldr	r3, [pc, #16]	; (8018a14 <__assert_func+0x38>)
 8018a02:	461c      	mov	r4, r3
 8018a04:	e7f3      	b.n	80189ee <__assert_func+0x12>
 8018a06:	bf00      	nop
 8018a08:	2000008c 	.word	0x2000008c
 8018a0c:	08027a6e 	.word	0x08027a6e
 8018a10:	08027a7b 	.word	0x08027a7b
 8018a14:	08027aa9 	.word	0x08027aa9

08018a18 <_free_r>:
 8018a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018a1a:	2900      	cmp	r1, #0
 8018a1c:	d044      	beq.n	8018aa8 <_free_r+0x90>
 8018a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a22:	9001      	str	r0, [sp, #4]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	f1a1 0404 	sub.w	r4, r1, #4
 8018a2a:	bfb8      	it	lt
 8018a2c:	18e4      	addlt	r4, r4, r3
 8018a2e:	f000 f8e7 	bl	8018c00 <__malloc_lock>
 8018a32:	4a1e      	ldr	r2, [pc, #120]	; (8018aac <_free_r+0x94>)
 8018a34:	9801      	ldr	r0, [sp, #4]
 8018a36:	6813      	ldr	r3, [r2, #0]
 8018a38:	b933      	cbnz	r3, 8018a48 <_free_r+0x30>
 8018a3a:	6063      	str	r3, [r4, #4]
 8018a3c:	6014      	str	r4, [r2, #0]
 8018a3e:	b003      	add	sp, #12
 8018a40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018a44:	f000 b8e2 	b.w	8018c0c <__malloc_unlock>
 8018a48:	42a3      	cmp	r3, r4
 8018a4a:	d908      	bls.n	8018a5e <_free_r+0x46>
 8018a4c:	6825      	ldr	r5, [r4, #0]
 8018a4e:	1961      	adds	r1, r4, r5
 8018a50:	428b      	cmp	r3, r1
 8018a52:	bf01      	itttt	eq
 8018a54:	6819      	ldreq	r1, [r3, #0]
 8018a56:	685b      	ldreq	r3, [r3, #4]
 8018a58:	1949      	addeq	r1, r1, r5
 8018a5a:	6021      	streq	r1, [r4, #0]
 8018a5c:	e7ed      	b.n	8018a3a <_free_r+0x22>
 8018a5e:	461a      	mov	r2, r3
 8018a60:	685b      	ldr	r3, [r3, #4]
 8018a62:	b10b      	cbz	r3, 8018a68 <_free_r+0x50>
 8018a64:	42a3      	cmp	r3, r4
 8018a66:	d9fa      	bls.n	8018a5e <_free_r+0x46>
 8018a68:	6811      	ldr	r1, [r2, #0]
 8018a6a:	1855      	adds	r5, r2, r1
 8018a6c:	42a5      	cmp	r5, r4
 8018a6e:	d10b      	bne.n	8018a88 <_free_r+0x70>
 8018a70:	6824      	ldr	r4, [r4, #0]
 8018a72:	4421      	add	r1, r4
 8018a74:	1854      	adds	r4, r2, r1
 8018a76:	42a3      	cmp	r3, r4
 8018a78:	6011      	str	r1, [r2, #0]
 8018a7a:	d1e0      	bne.n	8018a3e <_free_r+0x26>
 8018a7c:	681c      	ldr	r4, [r3, #0]
 8018a7e:	685b      	ldr	r3, [r3, #4]
 8018a80:	6053      	str	r3, [r2, #4]
 8018a82:	440c      	add	r4, r1
 8018a84:	6014      	str	r4, [r2, #0]
 8018a86:	e7da      	b.n	8018a3e <_free_r+0x26>
 8018a88:	d902      	bls.n	8018a90 <_free_r+0x78>
 8018a8a:	230c      	movs	r3, #12
 8018a8c:	6003      	str	r3, [r0, #0]
 8018a8e:	e7d6      	b.n	8018a3e <_free_r+0x26>
 8018a90:	6825      	ldr	r5, [r4, #0]
 8018a92:	1961      	adds	r1, r4, r5
 8018a94:	428b      	cmp	r3, r1
 8018a96:	bf04      	itt	eq
 8018a98:	6819      	ldreq	r1, [r3, #0]
 8018a9a:	685b      	ldreq	r3, [r3, #4]
 8018a9c:	6063      	str	r3, [r4, #4]
 8018a9e:	bf04      	itt	eq
 8018aa0:	1949      	addeq	r1, r1, r5
 8018aa2:	6021      	streq	r1, [r4, #0]
 8018aa4:	6054      	str	r4, [r2, #4]
 8018aa6:	e7ca      	b.n	8018a3e <_free_r+0x26>
 8018aa8:	b003      	add	sp, #12
 8018aaa:	bd30      	pop	{r4, r5, pc}
 8018aac:	20011838 	.word	0x20011838

08018ab0 <malloc>:
 8018ab0:	4b02      	ldr	r3, [pc, #8]	; (8018abc <malloc+0xc>)
 8018ab2:	4601      	mov	r1, r0
 8018ab4:	6818      	ldr	r0, [r3, #0]
 8018ab6:	f000 b823 	b.w	8018b00 <_malloc_r>
 8018aba:	bf00      	nop
 8018abc:	2000008c 	.word	0x2000008c

08018ac0 <sbrk_aligned>:
 8018ac0:	b570      	push	{r4, r5, r6, lr}
 8018ac2:	4e0e      	ldr	r6, [pc, #56]	; (8018afc <sbrk_aligned+0x3c>)
 8018ac4:	460c      	mov	r4, r1
 8018ac6:	6831      	ldr	r1, [r6, #0]
 8018ac8:	4605      	mov	r5, r0
 8018aca:	b911      	cbnz	r1, 8018ad2 <sbrk_aligned+0x12>
 8018acc:	f000 fe26 	bl	801971c <_sbrk_r>
 8018ad0:	6030      	str	r0, [r6, #0]
 8018ad2:	4621      	mov	r1, r4
 8018ad4:	4628      	mov	r0, r5
 8018ad6:	f000 fe21 	bl	801971c <_sbrk_r>
 8018ada:	1c43      	adds	r3, r0, #1
 8018adc:	d00a      	beq.n	8018af4 <sbrk_aligned+0x34>
 8018ade:	1cc4      	adds	r4, r0, #3
 8018ae0:	f024 0403 	bic.w	r4, r4, #3
 8018ae4:	42a0      	cmp	r0, r4
 8018ae6:	d007      	beq.n	8018af8 <sbrk_aligned+0x38>
 8018ae8:	1a21      	subs	r1, r4, r0
 8018aea:	4628      	mov	r0, r5
 8018aec:	f000 fe16 	bl	801971c <_sbrk_r>
 8018af0:	3001      	adds	r0, #1
 8018af2:	d101      	bne.n	8018af8 <sbrk_aligned+0x38>
 8018af4:	f04f 34ff 	mov.w	r4, #4294967295
 8018af8:	4620      	mov	r0, r4
 8018afa:	bd70      	pop	{r4, r5, r6, pc}
 8018afc:	2001183c 	.word	0x2001183c

08018b00 <_malloc_r>:
 8018b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b04:	1ccd      	adds	r5, r1, #3
 8018b06:	f025 0503 	bic.w	r5, r5, #3
 8018b0a:	3508      	adds	r5, #8
 8018b0c:	2d0c      	cmp	r5, #12
 8018b0e:	bf38      	it	cc
 8018b10:	250c      	movcc	r5, #12
 8018b12:	2d00      	cmp	r5, #0
 8018b14:	4607      	mov	r7, r0
 8018b16:	db01      	blt.n	8018b1c <_malloc_r+0x1c>
 8018b18:	42a9      	cmp	r1, r5
 8018b1a:	d905      	bls.n	8018b28 <_malloc_r+0x28>
 8018b1c:	230c      	movs	r3, #12
 8018b1e:	603b      	str	r3, [r7, #0]
 8018b20:	2600      	movs	r6, #0
 8018b22:	4630      	mov	r0, r6
 8018b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018bfc <_malloc_r+0xfc>
 8018b2c:	f000 f868 	bl	8018c00 <__malloc_lock>
 8018b30:	f8d8 3000 	ldr.w	r3, [r8]
 8018b34:	461c      	mov	r4, r3
 8018b36:	bb5c      	cbnz	r4, 8018b90 <_malloc_r+0x90>
 8018b38:	4629      	mov	r1, r5
 8018b3a:	4638      	mov	r0, r7
 8018b3c:	f7ff ffc0 	bl	8018ac0 <sbrk_aligned>
 8018b40:	1c43      	adds	r3, r0, #1
 8018b42:	4604      	mov	r4, r0
 8018b44:	d155      	bne.n	8018bf2 <_malloc_r+0xf2>
 8018b46:	f8d8 4000 	ldr.w	r4, [r8]
 8018b4a:	4626      	mov	r6, r4
 8018b4c:	2e00      	cmp	r6, #0
 8018b4e:	d145      	bne.n	8018bdc <_malloc_r+0xdc>
 8018b50:	2c00      	cmp	r4, #0
 8018b52:	d048      	beq.n	8018be6 <_malloc_r+0xe6>
 8018b54:	6823      	ldr	r3, [r4, #0]
 8018b56:	4631      	mov	r1, r6
 8018b58:	4638      	mov	r0, r7
 8018b5a:	eb04 0903 	add.w	r9, r4, r3
 8018b5e:	f000 fddd 	bl	801971c <_sbrk_r>
 8018b62:	4581      	cmp	r9, r0
 8018b64:	d13f      	bne.n	8018be6 <_malloc_r+0xe6>
 8018b66:	6821      	ldr	r1, [r4, #0]
 8018b68:	1a6d      	subs	r5, r5, r1
 8018b6a:	4629      	mov	r1, r5
 8018b6c:	4638      	mov	r0, r7
 8018b6e:	f7ff ffa7 	bl	8018ac0 <sbrk_aligned>
 8018b72:	3001      	adds	r0, #1
 8018b74:	d037      	beq.n	8018be6 <_malloc_r+0xe6>
 8018b76:	6823      	ldr	r3, [r4, #0]
 8018b78:	442b      	add	r3, r5
 8018b7a:	6023      	str	r3, [r4, #0]
 8018b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d038      	beq.n	8018bf6 <_malloc_r+0xf6>
 8018b84:	685a      	ldr	r2, [r3, #4]
 8018b86:	42a2      	cmp	r2, r4
 8018b88:	d12b      	bne.n	8018be2 <_malloc_r+0xe2>
 8018b8a:	2200      	movs	r2, #0
 8018b8c:	605a      	str	r2, [r3, #4]
 8018b8e:	e00f      	b.n	8018bb0 <_malloc_r+0xb0>
 8018b90:	6822      	ldr	r2, [r4, #0]
 8018b92:	1b52      	subs	r2, r2, r5
 8018b94:	d41f      	bmi.n	8018bd6 <_malloc_r+0xd6>
 8018b96:	2a0b      	cmp	r2, #11
 8018b98:	d917      	bls.n	8018bca <_malloc_r+0xca>
 8018b9a:	1961      	adds	r1, r4, r5
 8018b9c:	42a3      	cmp	r3, r4
 8018b9e:	6025      	str	r5, [r4, #0]
 8018ba0:	bf18      	it	ne
 8018ba2:	6059      	strne	r1, [r3, #4]
 8018ba4:	6863      	ldr	r3, [r4, #4]
 8018ba6:	bf08      	it	eq
 8018ba8:	f8c8 1000 	streq.w	r1, [r8]
 8018bac:	5162      	str	r2, [r4, r5]
 8018bae:	604b      	str	r3, [r1, #4]
 8018bb0:	4638      	mov	r0, r7
 8018bb2:	f104 060b 	add.w	r6, r4, #11
 8018bb6:	f000 f829 	bl	8018c0c <__malloc_unlock>
 8018bba:	f026 0607 	bic.w	r6, r6, #7
 8018bbe:	1d23      	adds	r3, r4, #4
 8018bc0:	1af2      	subs	r2, r6, r3
 8018bc2:	d0ae      	beq.n	8018b22 <_malloc_r+0x22>
 8018bc4:	1b9b      	subs	r3, r3, r6
 8018bc6:	50a3      	str	r3, [r4, r2]
 8018bc8:	e7ab      	b.n	8018b22 <_malloc_r+0x22>
 8018bca:	42a3      	cmp	r3, r4
 8018bcc:	6862      	ldr	r2, [r4, #4]
 8018bce:	d1dd      	bne.n	8018b8c <_malloc_r+0x8c>
 8018bd0:	f8c8 2000 	str.w	r2, [r8]
 8018bd4:	e7ec      	b.n	8018bb0 <_malloc_r+0xb0>
 8018bd6:	4623      	mov	r3, r4
 8018bd8:	6864      	ldr	r4, [r4, #4]
 8018bda:	e7ac      	b.n	8018b36 <_malloc_r+0x36>
 8018bdc:	4634      	mov	r4, r6
 8018bde:	6876      	ldr	r6, [r6, #4]
 8018be0:	e7b4      	b.n	8018b4c <_malloc_r+0x4c>
 8018be2:	4613      	mov	r3, r2
 8018be4:	e7cc      	b.n	8018b80 <_malloc_r+0x80>
 8018be6:	230c      	movs	r3, #12
 8018be8:	603b      	str	r3, [r7, #0]
 8018bea:	4638      	mov	r0, r7
 8018bec:	f000 f80e 	bl	8018c0c <__malloc_unlock>
 8018bf0:	e797      	b.n	8018b22 <_malloc_r+0x22>
 8018bf2:	6025      	str	r5, [r4, #0]
 8018bf4:	e7dc      	b.n	8018bb0 <_malloc_r+0xb0>
 8018bf6:	605b      	str	r3, [r3, #4]
 8018bf8:	deff      	udf	#255	; 0xff
 8018bfa:	bf00      	nop
 8018bfc:	20011838 	.word	0x20011838

08018c00 <__malloc_lock>:
 8018c00:	4801      	ldr	r0, [pc, #4]	; (8018c08 <__malloc_lock+0x8>)
 8018c02:	f7ff bedb 	b.w	80189bc <__retarget_lock_acquire_recursive>
 8018c06:	bf00      	nop
 8018c08:	20011834 	.word	0x20011834

08018c0c <__malloc_unlock>:
 8018c0c:	4801      	ldr	r0, [pc, #4]	; (8018c14 <__malloc_unlock+0x8>)
 8018c0e:	f7ff bed6 	b.w	80189be <__retarget_lock_release_recursive>
 8018c12:	bf00      	nop
 8018c14:	20011834 	.word	0x20011834

08018c18 <__ssputs_r>:
 8018c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c1c:	688e      	ldr	r6, [r1, #8]
 8018c1e:	461f      	mov	r7, r3
 8018c20:	42be      	cmp	r6, r7
 8018c22:	680b      	ldr	r3, [r1, #0]
 8018c24:	4682      	mov	sl, r0
 8018c26:	460c      	mov	r4, r1
 8018c28:	4690      	mov	r8, r2
 8018c2a:	d82c      	bhi.n	8018c86 <__ssputs_r+0x6e>
 8018c2c:	898a      	ldrh	r2, [r1, #12]
 8018c2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018c32:	d026      	beq.n	8018c82 <__ssputs_r+0x6a>
 8018c34:	6965      	ldr	r5, [r4, #20]
 8018c36:	6909      	ldr	r1, [r1, #16]
 8018c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018c3c:	eba3 0901 	sub.w	r9, r3, r1
 8018c40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018c44:	1c7b      	adds	r3, r7, #1
 8018c46:	444b      	add	r3, r9
 8018c48:	106d      	asrs	r5, r5, #1
 8018c4a:	429d      	cmp	r5, r3
 8018c4c:	bf38      	it	cc
 8018c4e:	461d      	movcc	r5, r3
 8018c50:	0553      	lsls	r3, r2, #21
 8018c52:	d527      	bpl.n	8018ca4 <__ssputs_r+0x8c>
 8018c54:	4629      	mov	r1, r5
 8018c56:	f7ff ff53 	bl	8018b00 <_malloc_r>
 8018c5a:	4606      	mov	r6, r0
 8018c5c:	b360      	cbz	r0, 8018cb8 <__ssputs_r+0xa0>
 8018c5e:	6921      	ldr	r1, [r4, #16]
 8018c60:	464a      	mov	r2, r9
 8018c62:	f7ff fead 	bl	80189c0 <memcpy>
 8018c66:	89a3      	ldrh	r3, [r4, #12]
 8018c68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c70:	81a3      	strh	r3, [r4, #12]
 8018c72:	6126      	str	r6, [r4, #16]
 8018c74:	6165      	str	r5, [r4, #20]
 8018c76:	444e      	add	r6, r9
 8018c78:	eba5 0509 	sub.w	r5, r5, r9
 8018c7c:	6026      	str	r6, [r4, #0]
 8018c7e:	60a5      	str	r5, [r4, #8]
 8018c80:	463e      	mov	r6, r7
 8018c82:	42be      	cmp	r6, r7
 8018c84:	d900      	bls.n	8018c88 <__ssputs_r+0x70>
 8018c86:	463e      	mov	r6, r7
 8018c88:	6820      	ldr	r0, [r4, #0]
 8018c8a:	4632      	mov	r2, r6
 8018c8c:	4641      	mov	r1, r8
 8018c8e:	f7ff fd1c 	bl	80186ca <memmove>
 8018c92:	68a3      	ldr	r3, [r4, #8]
 8018c94:	1b9b      	subs	r3, r3, r6
 8018c96:	60a3      	str	r3, [r4, #8]
 8018c98:	6823      	ldr	r3, [r4, #0]
 8018c9a:	4433      	add	r3, r6
 8018c9c:	6023      	str	r3, [r4, #0]
 8018c9e:	2000      	movs	r0, #0
 8018ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ca4:	462a      	mov	r2, r5
 8018ca6:	f000 fd50 	bl	801974a <_realloc_r>
 8018caa:	4606      	mov	r6, r0
 8018cac:	2800      	cmp	r0, #0
 8018cae:	d1e0      	bne.n	8018c72 <__ssputs_r+0x5a>
 8018cb0:	6921      	ldr	r1, [r4, #16]
 8018cb2:	4650      	mov	r0, sl
 8018cb4:	f7ff feb0 	bl	8018a18 <_free_r>
 8018cb8:	230c      	movs	r3, #12
 8018cba:	f8ca 3000 	str.w	r3, [sl]
 8018cbe:	89a3      	ldrh	r3, [r4, #12]
 8018cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cc4:	81a3      	strh	r3, [r4, #12]
 8018cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8018cca:	e7e9      	b.n	8018ca0 <__ssputs_r+0x88>

08018ccc <_svfiprintf_r>:
 8018ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cd0:	4698      	mov	r8, r3
 8018cd2:	898b      	ldrh	r3, [r1, #12]
 8018cd4:	061b      	lsls	r3, r3, #24
 8018cd6:	b09d      	sub	sp, #116	; 0x74
 8018cd8:	4607      	mov	r7, r0
 8018cda:	460d      	mov	r5, r1
 8018cdc:	4614      	mov	r4, r2
 8018cde:	d50e      	bpl.n	8018cfe <_svfiprintf_r+0x32>
 8018ce0:	690b      	ldr	r3, [r1, #16]
 8018ce2:	b963      	cbnz	r3, 8018cfe <_svfiprintf_r+0x32>
 8018ce4:	2140      	movs	r1, #64	; 0x40
 8018ce6:	f7ff ff0b 	bl	8018b00 <_malloc_r>
 8018cea:	6028      	str	r0, [r5, #0]
 8018cec:	6128      	str	r0, [r5, #16]
 8018cee:	b920      	cbnz	r0, 8018cfa <_svfiprintf_r+0x2e>
 8018cf0:	230c      	movs	r3, #12
 8018cf2:	603b      	str	r3, [r7, #0]
 8018cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8018cf8:	e0d0      	b.n	8018e9c <_svfiprintf_r+0x1d0>
 8018cfa:	2340      	movs	r3, #64	; 0x40
 8018cfc:	616b      	str	r3, [r5, #20]
 8018cfe:	2300      	movs	r3, #0
 8018d00:	9309      	str	r3, [sp, #36]	; 0x24
 8018d02:	2320      	movs	r3, #32
 8018d04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8018d0c:	2330      	movs	r3, #48	; 0x30
 8018d0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018eb4 <_svfiprintf_r+0x1e8>
 8018d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018d16:	f04f 0901 	mov.w	r9, #1
 8018d1a:	4623      	mov	r3, r4
 8018d1c:	469a      	mov	sl, r3
 8018d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d22:	b10a      	cbz	r2, 8018d28 <_svfiprintf_r+0x5c>
 8018d24:	2a25      	cmp	r2, #37	; 0x25
 8018d26:	d1f9      	bne.n	8018d1c <_svfiprintf_r+0x50>
 8018d28:	ebba 0b04 	subs.w	fp, sl, r4
 8018d2c:	d00b      	beq.n	8018d46 <_svfiprintf_r+0x7a>
 8018d2e:	465b      	mov	r3, fp
 8018d30:	4622      	mov	r2, r4
 8018d32:	4629      	mov	r1, r5
 8018d34:	4638      	mov	r0, r7
 8018d36:	f7ff ff6f 	bl	8018c18 <__ssputs_r>
 8018d3a:	3001      	adds	r0, #1
 8018d3c:	f000 80a9 	beq.w	8018e92 <_svfiprintf_r+0x1c6>
 8018d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018d42:	445a      	add	r2, fp
 8018d44:	9209      	str	r2, [sp, #36]	; 0x24
 8018d46:	f89a 3000 	ldrb.w	r3, [sl]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	f000 80a1 	beq.w	8018e92 <_svfiprintf_r+0x1c6>
 8018d50:	2300      	movs	r3, #0
 8018d52:	f04f 32ff 	mov.w	r2, #4294967295
 8018d56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d5a:	f10a 0a01 	add.w	sl, sl, #1
 8018d5e:	9304      	str	r3, [sp, #16]
 8018d60:	9307      	str	r3, [sp, #28]
 8018d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018d66:	931a      	str	r3, [sp, #104]	; 0x68
 8018d68:	4654      	mov	r4, sl
 8018d6a:	2205      	movs	r2, #5
 8018d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d70:	4850      	ldr	r0, [pc, #320]	; (8018eb4 <_svfiprintf_r+0x1e8>)
 8018d72:	f7e7 fa55 	bl	8000220 <memchr>
 8018d76:	9a04      	ldr	r2, [sp, #16]
 8018d78:	b9d8      	cbnz	r0, 8018db2 <_svfiprintf_r+0xe6>
 8018d7a:	06d0      	lsls	r0, r2, #27
 8018d7c:	bf44      	itt	mi
 8018d7e:	2320      	movmi	r3, #32
 8018d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d84:	0711      	lsls	r1, r2, #28
 8018d86:	bf44      	itt	mi
 8018d88:	232b      	movmi	r3, #43	; 0x2b
 8018d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8018d92:	2b2a      	cmp	r3, #42	; 0x2a
 8018d94:	d015      	beq.n	8018dc2 <_svfiprintf_r+0xf6>
 8018d96:	9a07      	ldr	r2, [sp, #28]
 8018d98:	4654      	mov	r4, sl
 8018d9a:	2000      	movs	r0, #0
 8018d9c:	f04f 0c0a 	mov.w	ip, #10
 8018da0:	4621      	mov	r1, r4
 8018da2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018da6:	3b30      	subs	r3, #48	; 0x30
 8018da8:	2b09      	cmp	r3, #9
 8018daa:	d94d      	bls.n	8018e48 <_svfiprintf_r+0x17c>
 8018dac:	b1b0      	cbz	r0, 8018ddc <_svfiprintf_r+0x110>
 8018dae:	9207      	str	r2, [sp, #28]
 8018db0:	e014      	b.n	8018ddc <_svfiprintf_r+0x110>
 8018db2:	eba0 0308 	sub.w	r3, r0, r8
 8018db6:	fa09 f303 	lsl.w	r3, r9, r3
 8018dba:	4313      	orrs	r3, r2
 8018dbc:	9304      	str	r3, [sp, #16]
 8018dbe:	46a2      	mov	sl, r4
 8018dc0:	e7d2      	b.n	8018d68 <_svfiprintf_r+0x9c>
 8018dc2:	9b03      	ldr	r3, [sp, #12]
 8018dc4:	1d19      	adds	r1, r3, #4
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	9103      	str	r1, [sp, #12]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	bfbb      	ittet	lt
 8018dce:	425b      	neglt	r3, r3
 8018dd0:	f042 0202 	orrlt.w	r2, r2, #2
 8018dd4:	9307      	strge	r3, [sp, #28]
 8018dd6:	9307      	strlt	r3, [sp, #28]
 8018dd8:	bfb8      	it	lt
 8018dda:	9204      	strlt	r2, [sp, #16]
 8018ddc:	7823      	ldrb	r3, [r4, #0]
 8018dde:	2b2e      	cmp	r3, #46	; 0x2e
 8018de0:	d10c      	bne.n	8018dfc <_svfiprintf_r+0x130>
 8018de2:	7863      	ldrb	r3, [r4, #1]
 8018de4:	2b2a      	cmp	r3, #42	; 0x2a
 8018de6:	d134      	bne.n	8018e52 <_svfiprintf_r+0x186>
 8018de8:	9b03      	ldr	r3, [sp, #12]
 8018dea:	1d1a      	adds	r2, r3, #4
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	9203      	str	r2, [sp, #12]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	bfb8      	it	lt
 8018df4:	f04f 33ff 	movlt.w	r3, #4294967295
 8018df8:	3402      	adds	r4, #2
 8018dfa:	9305      	str	r3, [sp, #20]
 8018dfc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018ec4 <_svfiprintf_r+0x1f8>
 8018e00:	7821      	ldrb	r1, [r4, #0]
 8018e02:	2203      	movs	r2, #3
 8018e04:	4650      	mov	r0, sl
 8018e06:	f7e7 fa0b 	bl	8000220 <memchr>
 8018e0a:	b138      	cbz	r0, 8018e1c <_svfiprintf_r+0x150>
 8018e0c:	9b04      	ldr	r3, [sp, #16]
 8018e0e:	eba0 000a 	sub.w	r0, r0, sl
 8018e12:	2240      	movs	r2, #64	; 0x40
 8018e14:	4082      	lsls	r2, r0
 8018e16:	4313      	orrs	r3, r2
 8018e18:	3401      	adds	r4, #1
 8018e1a:	9304      	str	r3, [sp, #16]
 8018e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e20:	4825      	ldr	r0, [pc, #148]	; (8018eb8 <_svfiprintf_r+0x1ec>)
 8018e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018e26:	2206      	movs	r2, #6
 8018e28:	f7e7 f9fa 	bl	8000220 <memchr>
 8018e2c:	2800      	cmp	r0, #0
 8018e2e:	d038      	beq.n	8018ea2 <_svfiprintf_r+0x1d6>
 8018e30:	4b22      	ldr	r3, [pc, #136]	; (8018ebc <_svfiprintf_r+0x1f0>)
 8018e32:	bb1b      	cbnz	r3, 8018e7c <_svfiprintf_r+0x1b0>
 8018e34:	9b03      	ldr	r3, [sp, #12]
 8018e36:	3307      	adds	r3, #7
 8018e38:	f023 0307 	bic.w	r3, r3, #7
 8018e3c:	3308      	adds	r3, #8
 8018e3e:	9303      	str	r3, [sp, #12]
 8018e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e42:	4433      	add	r3, r6
 8018e44:	9309      	str	r3, [sp, #36]	; 0x24
 8018e46:	e768      	b.n	8018d1a <_svfiprintf_r+0x4e>
 8018e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e4c:	460c      	mov	r4, r1
 8018e4e:	2001      	movs	r0, #1
 8018e50:	e7a6      	b.n	8018da0 <_svfiprintf_r+0xd4>
 8018e52:	2300      	movs	r3, #0
 8018e54:	3401      	adds	r4, #1
 8018e56:	9305      	str	r3, [sp, #20]
 8018e58:	4619      	mov	r1, r3
 8018e5a:	f04f 0c0a 	mov.w	ip, #10
 8018e5e:	4620      	mov	r0, r4
 8018e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e64:	3a30      	subs	r2, #48	; 0x30
 8018e66:	2a09      	cmp	r2, #9
 8018e68:	d903      	bls.n	8018e72 <_svfiprintf_r+0x1a6>
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d0c6      	beq.n	8018dfc <_svfiprintf_r+0x130>
 8018e6e:	9105      	str	r1, [sp, #20]
 8018e70:	e7c4      	b.n	8018dfc <_svfiprintf_r+0x130>
 8018e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8018e76:	4604      	mov	r4, r0
 8018e78:	2301      	movs	r3, #1
 8018e7a:	e7f0      	b.n	8018e5e <_svfiprintf_r+0x192>
 8018e7c:	ab03      	add	r3, sp, #12
 8018e7e:	9300      	str	r3, [sp, #0]
 8018e80:	462a      	mov	r2, r5
 8018e82:	4b0f      	ldr	r3, [pc, #60]	; (8018ec0 <_svfiprintf_r+0x1f4>)
 8018e84:	a904      	add	r1, sp, #16
 8018e86:	4638      	mov	r0, r7
 8018e88:	f3af 8000 	nop.w
 8018e8c:	1c42      	adds	r2, r0, #1
 8018e8e:	4606      	mov	r6, r0
 8018e90:	d1d6      	bne.n	8018e40 <_svfiprintf_r+0x174>
 8018e92:	89ab      	ldrh	r3, [r5, #12]
 8018e94:	065b      	lsls	r3, r3, #25
 8018e96:	f53f af2d 	bmi.w	8018cf4 <_svfiprintf_r+0x28>
 8018e9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e9c:	b01d      	add	sp, #116	; 0x74
 8018e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ea2:	ab03      	add	r3, sp, #12
 8018ea4:	9300      	str	r3, [sp, #0]
 8018ea6:	462a      	mov	r2, r5
 8018ea8:	4b05      	ldr	r3, [pc, #20]	; (8018ec0 <_svfiprintf_r+0x1f4>)
 8018eaa:	a904      	add	r1, sp, #16
 8018eac:	4638      	mov	r0, r7
 8018eae:	f000 f9bd 	bl	801922c <_printf_i>
 8018eb2:	e7eb      	b.n	8018e8c <_svfiprintf_r+0x1c0>
 8018eb4:	08027aaa 	.word	0x08027aaa
 8018eb8:	08027ab4 	.word	0x08027ab4
 8018ebc:	00000000 	.word	0x00000000
 8018ec0:	08018c19 	.word	0x08018c19
 8018ec4:	08027ab0 	.word	0x08027ab0

08018ec8 <__sfputc_r>:
 8018ec8:	6893      	ldr	r3, [r2, #8]
 8018eca:	3b01      	subs	r3, #1
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	b410      	push	{r4}
 8018ed0:	6093      	str	r3, [r2, #8]
 8018ed2:	da08      	bge.n	8018ee6 <__sfputc_r+0x1e>
 8018ed4:	6994      	ldr	r4, [r2, #24]
 8018ed6:	42a3      	cmp	r3, r4
 8018ed8:	db01      	blt.n	8018ede <__sfputc_r+0x16>
 8018eda:	290a      	cmp	r1, #10
 8018edc:	d103      	bne.n	8018ee6 <__sfputc_r+0x1e>
 8018ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ee2:	f000 bb85 	b.w	80195f0 <__swbuf_r>
 8018ee6:	6813      	ldr	r3, [r2, #0]
 8018ee8:	1c58      	adds	r0, r3, #1
 8018eea:	6010      	str	r0, [r2, #0]
 8018eec:	7019      	strb	r1, [r3, #0]
 8018eee:	4608      	mov	r0, r1
 8018ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ef4:	4770      	bx	lr

08018ef6 <__sfputs_r>:
 8018ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ef8:	4606      	mov	r6, r0
 8018efa:	460f      	mov	r7, r1
 8018efc:	4614      	mov	r4, r2
 8018efe:	18d5      	adds	r5, r2, r3
 8018f00:	42ac      	cmp	r4, r5
 8018f02:	d101      	bne.n	8018f08 <__sfputs_r+0x12>
 8018f04:	2000      	movs	r0, #0
 8018f06:	e007      	b.n	8018f18 <__sfputs_r+0x22>
 8018f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f0c:	463a      	mov	r2, r7
 8018f0e:	4630      	mov	r0, r6
 8018f10:	f7ff ffda 	bl	8018ec8 <__sfputc_r>
 8018f14:	1c43      	adds	r3, r0, #1
 8018f16:	d1f3      	bne.n	8018f00 <__sfputs_r+0xa>
 8018f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018f1c <_vfiprintf_r>:
 8018f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f20:	460d      	mov	r5, r1
 8018f22:	b09d      	sub	sp, #116	; 0x74
 8018f24:	4614      	mov	r4, r2
 8018f26:	4698      	mov	r8, r3
 8018f28:	4606      	mov	r6, r0
 8018f2a:	b118      	cbz	r0, 8018f34 <_vfiprintf_r+0x18>
 8018f2c:	6a03      	ldr	r3, [r0, #32]
 8018f2e:	b90b      	cbnz	r3, 8018f34 <_vfiprintf_r+0x18>
 8018f30:	f7ff fb10 	bl	8018554 <__sinit>
 8018f34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018f36:	07d9      	lsls	r1, r3, #31
 8018f38:	d405      	bmi.n	8018f46 <_vfiprintf_r+0x2a>
 8018f3a:	89ab      	ldrh	r3, [r5, #12]
 8018f3c:	059a      	lsls	r2, r3, #22
 8018f3e:	d402      	bmi.n	8018f46 <_vfiprintf_r+0x2a>
 8018f40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018f42:	f7ff fd3b 	bl	80189bc <__retarget_lock_acquire_recursive>
 8018f46:	89ab      	ldrh	r3, [r5, #12]
 8018f48:	071b      	lsls	r3, r3, #28
 8018f4a:	d501      	bpl.n	8018f50 <_vfiprintf_r+0x34>
 8018f4c:	692b      	ldr	r3, [r5, #16]
 8018f4e:	b99b      	cbnz	r3, 8018f78 <_vfiprintf_r+0x5c>
 8018f50:	4629      	mov	r1, r5
 8018f52:	4630      	mov	r0, r6
 8018f54:	f000 fb8a 	bl	801966c <__swsetup_r>
 8018f58:	b170      	cbz	r0, 8018f78 <_vfiprintf_r+0x5c>
 8018f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018f5c:	07dc      	lsls	r4, r3, #31
 8018f5e:	d504      	bpl.n	8018f6a <_vfiprintf_r+0x4e>
 8018f60:	f04f 30ff 	mov.w	r0, #4294967295
 8018f64:	b01d      	add	sp, #116	; 0x74
 8018f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f6a:	89ab      	ldrh	r3, [r5, #12]
 8018f6c:	0598      	lsls	r0, r3, #22
 8018f6e:	d4f7      	bmi.n	8018f60 <_vfiprintf_r+0x44>
 8018f70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018f72:	f7ff fd24 	bl	80189be <__retarget_lock_release_recursive>
 8018f76:	e7f3      	b.n	8018f60 <_vfiprintf_r+0x44>
 8018f78:	2300      	movs	r3, #0
 8018f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8018f7c:	2320      	movs	r3, #32
 8018f7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8018f86:	2330      	movs	r3, #48	; 0x30
 8018f88:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801913c <_vfiprintf_r+0x220>
 8018f8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f90:	f04f 0901 	mov.w	r9, #1
 8018f94:	4623      	mov	r3, r4
 8018f96:	469a      	mov	sl, r3
 8018f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f9c:	b10a      	cbz	r2, 8018fa2 <_vfiprintf_r+0x86>
 8018f9e:	2a25      	cmp	r2, #37	; 0x25
 8018fa0:	d1f9      	bne.n	8018f96 <_vfiprintf_r+0x7a>
 8018fa2:	ebba 0b04 	subs.w	fp, sl, r4
 8018fa6:	d00b      	beq.n	8018fc0 <_vfiprintf_r+0xa4>
 8018fa8:	465b      	mov	r3, fp
 8018faa:	4622      	mov	r2, r4
 8018fac:	4629      	mov	r1, r5
 8018fae:	4630      	mov	r0, r6
 8018fb0:	f7ff ffa1 	bl	8018ef6 <__sfputs_r>
 8018fb4:	3001      	adds	r0, #1
 8018fb6:	f000 80a9 	beq.w	801910c <_vfiprintf_r+0x1f0>
 8018fba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018fbc:	445a      	add	r2, fp
 8018fbe:	9209      	str	r2, [sp, #36]	; 0x24
 8018fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	f000 80a1 	beq.w	801910c <_vfiprintf_r+0x1f0>
 8018fca:	2300      	movs	r3, #0
 8018fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8018fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018fd4:	f10a 0a01 	add.w	sl, sl, #1
 8018fd8:	9304      	str	r3, [sp, #16]
 8018fda:	9307      	str	r3, [sp, #28]
 8018fdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018fe0:	931a      	str	r3, [sp, #104]	; 0x68
 8018fe2:	4654      	mov	r4, sl
 8018fe4:	2205      	movs	r2, #5
 8018fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fea:	4854      	ldr	r0, [pc, #336]	; (801913c <_vfiprintf_r+0x220>)
 8018fec:	f7e7 f918 	bl	8000220 <memchr>
 8018ff0:	9a04      	ldr	r2, [sp, #16]
 8018ff2:	b9d8      	cbnz	r0, 801902c <_vfiprintf_r+0x110>
 8018ff4:	06d1      	lsls	r1, r2, #27
 8018ff6:	bf44      	itt	mi
 8018ff8:	2320      	movmi	r3, #32
 8018ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ffe:	0713      	lsls	r3, r2, #28
 8019000:	bf44      	itt	mi
 8019002:	232b      	movmi	r3, #43	; 0x2b
 8019004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019008:	f89a 3000 	ldrb.w	r3, [sl]
 801900c:	2b2a      	cmp	r3, #42	; 0x2a
 801900e:	d015      	beq.n	801903c <_vfiprintf_r+0x120>
 8019010:	9a07      	ldr	r2, [sp, #28]
 8019012:	4654      	mov	r4, sl
 8019014:	2000      	movs	r0, #0
 8019016:	f04f 0c0a 	mov.w	ip, #10
 801901a:	4621      	mov	r1, r4
 801901c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019020:	3b30      	subs	r3, #48	; 0x30
 8019022:	2b09      	cmp	r3, #9
 8019024:	d94d      	bls.n	80190c2 <_vfiprintf_r+0x1a6>
 8019026:	b1b0      	cbz	r0, 8019056 <_vfiprintf_r+0x13a>
 8019028:	9207      	str	r2, [sp, #28]
 801902a:	e014      	b.n	8019056 <_vfiprintf_r+0x13a>
 801902c:	eba0 0308 	sub.w	r3, r0, r8
 8019030:	fa09 f303 	lsl.w	r3, r9, r3
 8019034:	4313      	orrs	r3, r2
 8019036:	9304      	str	r3, [sp, #16]
 8019038:	46a2      	mov	sl, r4
 801903a:	e7d2      	b.n	8018fe2 <_vfiprintf_r+0xc6>
 801903c:	9b03      	ldr	r3, [sp, #12]
 801903e:	1d19      	adds	r1, r3, #4
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	9103      	str	r1, [sp, #12]
 8019044:	2b00      	cmp	r3, #0
 8019046:	bfbb      	ittet	lt
 8019048:	425b      	neglt	r3, r3
 801904a:	f042 0202 	orrlt.w	r2, r2, #2
 801904e:	9307      	strge	r3, [sp, #28]
 8019050:	9307      	strlt	r3, [sp, #28]
 8019052:	bfb8      	it	lt
 8019054:	9204      	strlt	r2, [sp, #16]
 8019056:	7823      	ldrb	r3, [r4, #0]
 8019058:	2b2e      	cmp	r3, #46	; 0x2e
 801905a:	d10c      	bne.n	8019076 <_vfiprintf_r+0x15a>
 801905c:	7863      	ldrb	r3, [r4, #1]
 801905e:	2b2a      	cmp	r3, #42	; 0x2a
 8019060:	d134      	bne.n	80190cc <_vfiprintf_r+0x1b0>
 8019062:	9b03      	ldr	r3, [sp, #12]
 8019064:	1d1a      	adds	r2, r3, #4
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	9203      	str	r2, [sp, #12]
 801906a:	2b00      	cmp	r3, #0
 801906c:	bfb8      	it	lt
 801906e:	f04f 33ff 	movlt.w	r3, #4294967295
 8019072:	3402      	adds	r4, #2
 8019074:	9305      	str	r3, [sp, #20]
 8019076:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801914c <_vfiprintf_r+0x230>
 801907a:	7821      	ldrb	r1, [r4, #0]
 801907c:	2203      	movs	r2, #3
 801907e:	4650      	mov	r0, sl
 8019080:	f7e7 f8ce 	bl	8000220 <memchr>
 8019084:	b138      	cbz	r0, 8019096 <_vfiprintf_r+0x17a>
 8019086:	9b04      	ldr	r3, [sp, #16]
 8019088:	eba0 000a 	sub.w	r0, r0, sl
 801908c:	2240      	movs	r2, #64	; 0x40
 801908e:	4082      	lsls	r2, r0
 8019090:	4313      	orrs	r3, r2
 8019092:	3401      	adds	r4, #1
 8019094:	9304      	str	r3, [sp, #16]
 8019096:	f814 1b01 	ldrb.w	r1, [r4], #1
 801909a:	4829      	ldr	r0, [pc, #164]	; (8019140 <_vfiprintf_r+0x224>)
 801909c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80190a0:	2206      	movs	r2, #6
 80190a2:	f7e7 f8bd 	bl	8000220 <memchr>
 80190a6:	2800      	cmp	r0, #0
 80190a8:	d03f      	beq.n	801912a <_vfiprintf_r+0x20e>
 80190aa:	4b26      	ldr	r3, [pc, #152]	; (8019144 <_vfiprintf_r+0x228>)
 80190ac:	bb1b      	cbnz	r3, 80190f6 <_vfiprintf_r+0x1da>
 80190ae:	9b03      	ldr	r3, [sp, #12]
 80190b0:	3307      	adds	r3, #7
 80190b2:	f023 0307 	bic.w	r3, r3, #7
 80190b6:	3308      	adds	r3, #8
 80190b8:	9303      	str	r3, [sp, #12]
 80190ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190bc:	443b      	add	r3, r7
 80190be:	9309      	str	r3, [sp, #36]	; 0x24
 80190c0:	e768      	b.n	8018f94 <_vfiprintf_r+0x78>
 80190c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80190c6:	460c      	mov	r4, r1
 80190c8:	2001      	movs	r0, #1
 80190ca:	e7a6      	b.n	801901a <_vfiprintf_r+0xfe>
 80190cc:	2300      	movs	r3, #0
 80190ce:	3401      	adds	r4, #1
 80190d0:	9305      	str	r3, [sp, #20]
 80190d2:	4619      	mov	r1, r3
 80190d4:	f04f 0c0a 	mov.w	ip, #10
 80190d8:	4620      	mov	r0, r4
 80190da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80190de:	3a30      	subs	r2, #48	; 0x30
 80190e0:	2a09      	cmp	r2, #9
 80190e2:	d903      	bls.n	80190ec <_vfiprintf_r+0x1d0>
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d0c6      	beq.n	8019076 <_vfiprintf_r+0x15a>
 80190e8:	9105      	str	r1, [sp, #20]
 80190ea:	e7c4      	b.n	8019076 <_vfiprintf_r+0x15a>
 80190ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80190f0:	4604      	mov	r4, r0
 80190f2:	2301      	movs	r3, #1
 80190f4:	e7f0      	b.n	80190d8 <_vfiprintf_r+0x1bc>
 80190f6:	ab03      	add	r3, sp, #12
 80190f8:	9300      	str	r3, [sp, #0]
 80190fa:	462a      	mov	r2, r5
 80190fc:	4b12      	ldr	r3, [pc, #72]	; (8019148 <_vfiprintf_r+0x22c>)
 80190fe:	a904      	add	r1, sp, #16
 8019100:	4630      	mov	r0, r6
 8019102:	f3af 8000 	nop.w
 8019106:	4607      	mov	r7, r0
 8019108:	1c78      	adds	r0, r7, #1
 801910a:	d1d6      	bne.n	80190ba <_vfiprintf_r+0x19e>
 801910c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801910e:	07d9      	lsls	r1, r3, #31
 8019110:	d405      	bmi.n	801911e <_vfiprintf_r+0x202>
 8019112:	89ab      	ldrh	r3, [r5, #12]
 8019114:	059a      	lsls	r2, r3, #22
 8019116:	d402      	bmi.n	801911e <_vfiprintf_r+0x202>
 8019118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801911a:	f7ff fc50 	bl	80189be <__retarget_lock_release_recursive>
 801911e:	89ab      	ldrh	r3, [r5, #12]
 8019120:	065b      	lsls	r3, r3, #25
 8019122:	f53f af1d 	bmi.w	8018f60 <_vfiprintf_r+0x44>
 8019126:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019128:	e71c      	b.n	8018f64 <_vfiprintf_r+0x48>
 801912a:	ab03      	add	r3, sp, #12
 801912c:	9300      	str	r3, [sp, #0]
 801912e:	462a      	mov	r2, r5
 8019130:	4b05      	ldr	r3, [pc, #20]	; (8019148 <_vfiprintf_r+0x22c>)
 8019132:	a904      	add	r1, sp, #16
 8019134:	4630      	mov	r0, r6
 8019136:	f000 f879 	bl	801922c <_printf_i>
 801913a:	e7e4      	b.n	8019106 <_vfiprintf_r+0x1ea>
 801913c:	08027aaa 	.word	0x08027aaa
 8019140:	08027ab4 	.word	0x08027ab4
 8019144:	00000000 	.word	0x00000000
 8019148:	08018ef7 	.word	0x08018ef7
 801914c:	08027ab0 	.word	0x08027ab0

08019150 <_printf_common>:
 8019150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019154:	4616      	mov	r6, r2
 8019156:	4699      	mov	r9, r3
 8019158:	688a      	ldr	r2, [r1, #8]
 801915a:	690b      	ldr	r3, [r1, #16]
 801915c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019160:	4293      	cmp	r3, r2
 8019162:	bfb8      	it	lt
 8019164:	4613      	movlt	r3, r2
 8019166:	6033      	str	r3, [r6, #0]
 8019168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801916c:	4607      	mov	r7, r0
 801916e:	460c      	mov	r4, r1
 8019170:	b10a      	cbz	r2, 8019176 <_printf_common+0x26>
 8019172:	3301      	adds	r3, #1
 8019174:	6033      	str	r3, [r6, #0]
 8019176:	6823      	ldr	r3, [r4, #0]
 8019178:	0699      	lsls	r1, r3, #26
 801917a:	bf42      	ittt	mi
 801917c:	6833      	ldrmi	r3, [r6, #0]
 801917e:	3302      	addmi	r3, #2
 8019180:	6033      	strmi	r3, [r6, #0]
 8019182:	6825      	ldr	r5, [r4, #0]
 8019184:	f015 0506 	ands.w	r5, r5, #6
 8019188:	d106      	bne.n	8019198 <_printf_common+0x48>
 801918a:	f104 0a19 	add.w	sl, r4, #25
 801918e:	68e3      	ldr	r3, [r4, #12]
 8019190:	6832      	ldr	r2, [r6, #0]
 8019192:	1a9b      	subs	r3, r3, r2
 8019194:	42ab      	cmp	r3, r5
 8019196:	dc26      	bgt.n	80191e6 <_printf_common+0x96>
 8019198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801919c:	1e13      	subs	r3, r2, #0
 801919e:	6822      	ldr	r2, [r4, #0]
 80191a0:	bf18      	it	ne
 80191a2:	2301      	movne	r3, #1
 80191a4:	0692      	lsls	r2, r2, #26
 80191a6:	d42b      	bmi.n	8019200 <_printf_common+0xb0>
 80191a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80191ac:	4649      	mov	r1, r9
 80191ae:	4638      	mov	r0, r7
 80191b0:	47c0      	blx	r8
 80191b2:	3001      	adds	r0, #1
 80191b4:	d01e      	beq.n	80191f4 <_printf_common+0xa4>
 80191b6:	6823      	ldr	r3, [r4, #0]
 80191b8:	6922      	ldr	r2, [r4, #16]
 80191ba:	f003 0306 	and.w	r3, r3, #6
 80191be:	2b04      	cmp	r3, #4
 80191c0:	bf02      	ittt	eq
 80191c2:	68e5      	ldreq	r5, [r4, #12]
 80191c4:	6833      	ldreq	r3, [r6, #0]
 80191c6:	1aed      	subeq	r5, r5, r3
 80191c8:	68a3      	ldr	r3, [r4, #8]
 80191ca:	bf0c      	ite	eq
 80191cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80191d0:	2500      	movne	r5, #0
 80191d2:	4293      	cmp	r3, r2
 80191d4:	bfc4      	itt	gt
 80191d6:	1a9b      	subgt	r3, r3, r2
 80191d8:	18ed      	addgt	r5, r5, r3
 80191da:	2600      	movs	r6, #0
 80191dc:	341a      	adds	r4, #26
 80191de:	42b5      	cmp	r5, r6
 80191e0:	d11a      	bne.n	8019218 <_printf_common+0xc8>
 80191e2:	2000      	movs	r0, #0
 80191e4:	e008      	b.n	80191f8 <_printf_common+0xa8>
 80191e6:	2301      	movs	r3, #1
 80191e8:	4652      	mov	r2, sl
 80191ea:	4649      	mov	r1, r9
 80191ec:	4638      	mov	r0, r7
 80191ee:	47c0      	blx	r8
 80191f0:	3001      	adds	r0, #1
 80191f2:	d103      	bne.n	80191fc <_printf_common+0xac>
 80191f4:	f04f 30ff 	mov.w	r0, #4294967295
 80191f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191fc:	3501      	adds	r5, #1
 80191fe:	e7c6      	b.n	801918e <_printf_common+0x3e>
 8019200:	18e1      	adds	r1, r4, r3
 8019202:	1c5a      	adds	r2, r3, #1
 8019204:	2030      	movs	r0, #48	; 0x30
 8019206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801920a:	4422      	add	r2, r4
 801920c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019214:	3302      	adds	r3, #2
 8019216:	e7c7      	b.n	80191a8 <_printf_common+0x58>
 8019218:	2301      	movs	r3, #1
 801921a:	4622      	mov	r2, r4
 801921c:	4649      	mov	r1, r9
 801921e:	4638      	mov	r0, r7
 8019220:	47c0      	blx	r8
 8019222:	3001      	adds	r0, #1
 8019224:	d0e6      	beq.n	80191f4 <_printf_common+0xa4>
 8019226:	3601      	adds	r6, #1
 8019228:	e7d9      	b.n	80191de <_printf_common+0x8e>
	...

0801922c <_printf_i>:
 801922c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019230:	7e0f      	ldrb	r7, [r1, #24]
 8019232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019234:	2f78      	cmp	r7, #120	; 0x78
 8019236:	4691      	mov	r9, r2
 8019238:	4680      	mov	r8, r0
 801923a:	460c      	mov	r4, r1
 801923c:	469a      	mov	sl, r3
 801923e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019242:	d807      	bhi.n	8019254 <_printf_i+0x28>
 8019244:	2f62      	cmp	r7, #98	; 0x62
 8019246:	d80a      	bhi.n	801925e <_printf_i+0x32>
 8019248:	2f00      	cmp	r7, #0
 801924a:	f000 80d4 	beq.w	80193f6 <_printf_i+0x1ca>
 801924e:	2f58      	cmp	r7, #88	; 0x58
 8019250:	f000 80c0 	beq.w	80193d4 <_printf_i+0x1a8>
 8019254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801925c:	e03a      	b.n	80192d4 <_printf_i+0xa8>
 801925e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019262:	2b15      	cmp	r3, #21
 8019264:	d8f6      	bhi.n	8019254 <_printf_i+0x28>
 8019266:	a101      	add	r1, pc, #4	; (adr r1, 801926c <_printf_i+0x40>)
 8019268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801926c:	080192c5 	.word	0x080192c5
 8019270:	080192d9 	.word	0x080192d9
 8019274:	08019255 	.word	0x08019255
 8019278:	08019255 	.word	0x08019255
 801927c:	08019255 	.word	0x08019255
 8019280:	08019255 	.word	0x08019255
 8019284:	080192d9 	.word	0x080192d9
 8019288:	08019255 	.word	0x08019255
 801928c:	08019255 	.word	0x08019255
 8019290:	08019255 	.word	0x08019255
 8019294:	08019255 	.word	0x08019255
 8019298:	080193dd 	.word	0x080193dd
 801929c:	08019305 	.word	0x08019305
 80192a0:	08019397 	.word	0x08019397
 80192a4:	08019255 	.word	0x08019255
 80192a8:	08019255 	.word	0x08019255
 80192ac:	080193ff 	.word	0x080193ff
 80192b0:	08019255 	.word	0x08019255
 80192b4:	08019305 	.word	0x08019305
 80192b8:	08019255 	.word	0x08019255
 80192bc:	08019255 	.word	0x08019255
 80192c0:	0801939f 	.word	0x0801939f
 80192c4:	682b      	ldr	r3, [r5, #0]
 80192c6:	1d1a      	adds	r2, r3, #4
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	602a      	str	r2, [r5, #0]
 80192cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80192d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80192d4:	2301      	movs	r3, #1
 80192d6:	e09f      	b.n	8019418 <_printf_i+0x1ec>
 80192d8:	6820      	ldr	r0, [r4, #0]
 80192da:	682b      	ldr	r3, [r5, #0]
 80192dc:	0607      	lsls	r7, r0, #24
 80192de:	f103 0104 	add.w	r1, r3, #4
 80192e2:	6029      	str	r1, [r5, #0]
 80192e4:	d501      	bpl.n	80192ea <_printf_i+0xbe>
 80192e6:	681e      	ldr	r6, [r3, #0]
 80192e8:	e003      	b.n	80192f2 <_printf_i+0xc6>
 80192ea:	0646      	lsls	r6, r0, #25
 80192ec:	d5fb      	bpl.n	80192e6 <_printf_i+0xba>
 80192ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80192f2:	2e00      	cmp	r6, #0
 80192f4:	da03      	bge.n	80192fe <_printf_i+0xd2>
 80192f6:	232d      	movs	r3, #45	; 0x2d
 80192f8:	4276      	negs	r6, r6
 80192fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80192fe:	485a      	ldr	r0, [pc, #360]	; (8019468 <_printf_i+0x23c>)
 8019300:	230a      	movs	r3, #10
 8019302:	e012      	b.n	801932a <_printf_i+0xfe>
 8019304:	682b      	ldr	r3, [r5, #0]
 8019306:	6820      	ldr	r0, [r4, #0]
 8019308:	1d19      	adds	r1, r3, #4
 801930a:	6029      	str	r1, [r5, #0]
 801930c:	0605      	lsls	r5, r0, #24
 801930e:	d501      	bpl.n	8019314 <_printf_i+0xe8>
 8019310:	681e      	ldr	r6, [r3, #0]
 8019312:	e002      	b.n	801931a <_printf_i+0xee>
 8019314:	0641      	lsls	r1, r0, #25
 8019316:	d5fb      	bpl.n	8019310 <_printf_i+0xe4>
 8019318:	881e      	ldrh	r6, [r3, #0]
 801931a:	4853      	ldr	r0, [pc, #332]	; (8019468 <_printf_i+0x23c>)
 801931c:	2f6f      	cmp	r7, #111	; 0x6f
 801931e:	bf0c      	ite	eq
 8019320:	2308      	moveq	r3, #8
 8019322:	230a      	movne	r3, #10
 8019324:	2100      	movs	r1, #0
 8019326:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801932a:	6865      	ldr	r5, [r4, #4]
 801932c:	60a5      	str	r5, [r4, #8]
 801932e:	2d00      	cmp	r5, #0
 8019330:	bfa2      	ittt	ge
 8019332:	6821      	ldrge	r1, [r4, #0]
 8019334:	f021 0104 	bicge.w	r1, r1, #4
 8019338:	6021      	strge	r1, [r4, #0]
 801933a:	b90e      	cbnz	r6, 8019340 <_printf_i+0x114>
 801933c:	2d00      	cmp	r5, #0
 801933e:	d04b      	beq.n	80193d8 <_printf_i+0x1ac>
 8019340:	4615      	mov	r5, r2
 8019342:	fbb6 f1f3 	udiv	r1, r6, r3
 8019346:	fb03 6711 	mls	r7, r3, r1, r6
 801934a:	5dc7      	ldrb	r7, [r0, r7]
 801934c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019350:	4637      	mov	r7, r6
 8019352:	42bb      	cmp	r3, r7
 8019354:	460e      	mov	r6, r1
 8019356:	d9f4      	bls.n	8019342 <_printf_i+0x116>
 8019358:	2b08      	cmp	r3, #8
 801935a:	d10b      	bne.n	8019374 <_printf_i+0x148>
 801935c:	6823      	ldr	r3, [r4, #0]
 801935e:	07de      	lsls	r6, r3, #31
 8019360:	d508      	bpl.n	8019374 <_printf_i+0x148>
 8019362:	6923      	ldr	r3, [r4, #16]
 8019364:	6861      	ldr	r1, [r4, #4]
 8019366:	4299      	cmp	r1, r3
 8019368:	bfde      	ittt	le
 801936a:	2330      	movle	r3, #48	; 0x30
 801936c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019370:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019374:	1b52      	subs	r2, r2, r5
 8019376:	6122      	str	r2, [r4, #16]
 8019378:	f8cd a000 	str.w	sl, [sp]
 801937c:	464b      	mov	r3, r9
 801937e:	aa03      	add	r2, sp, #12
 8019380:	4621      	mov	r1, r4
 8019382:	4640      	mov	r0, r8
 8019384:	f7ff fee4 	bl	8019150 <_printf_common>
 8019388:	3001      	adds	r0, #1
 801938a:	d14a      	bne.n	8019422 <_printf_i+0x1f6>
 801938c:	f04f 30ff 	mov.w	r0, #4294967295
 8019390:	b004      	add	sp, #16
 8019392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019396:	6823      	ldr	r3, [r4, #0]
 8019398:	f043 0320 	orr.w	r3, r3, #32
 801939c:	6023      	str	r3, [r4, #0]
 801939e:	4833      	ldr	r0, [pc, #204]	; (801946c <_printf_i+0x240>)
 80193a0:	2778      	movs	r7, #120	; 0x78
 80193a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80193a6:	6823      	ldr	r3, [r4, #0]
 80193a8:	6829      	ldr	r1, [r5, #0]
 80193aa:	061f      	lsls	r7, r3, #24
 80193ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80193b0:	d402      	bmi.n	80193b8 <_printf_i+0x18c>
 80193b2:	065f      	lsls	r7, r3, #25
 80193b4:	bf48      	it	mi
 80193b6:	b2b6      	uxthmi	r6, r6
 80193b8:	07df      	lsls	r7, r3, #31
 80193ba:	bf48      	it	mi
 80193bc:	f043 0320 	orrmi.w	r3, r3, #32
 80193c0:	6029      	str	r1, [r5, #0]
 80193c2:	bf48      	it	mi
 80193c4:	6023      	strmi	r3, [r4, #0]
 80193c6:	b91e      	cbnz	r6, 80193d0 <_printf_i+0x1a4>
 80193c8:	6823      	ldr	r3, [r4, #0]
 80193ca:	f023 0320 	bic.w	r3, r3, #32
 80193ce:	6023      	str	r3, [r4, #0]
 80193d0:	2310      	movs	r3, #16
 80193d2:	e7a7      	b.n	8019324 <_printf_i+0xf8>
 80193d4:	4824      	ldr	r0, [pc, #144]	; (8019468 <_printf_i+0x23c>)
 80193d6:	e7e4      	b.n	80193a2 <_printf_i+0x176>
 80193d8:	4615      	mov	r5, r2
 80193da:	e7bd      	b.n	8019358 <_printf_i+0x12c>
 80193dc:	682b      	ldr	r3, [r5, #0]
 80193de:	6826      	ldr	r6, [r4, #0]
 80193e0:	6961      	ldr	r1, [r4, #20]
 80193e2:	1d18      	adds	r0, r3, #4
 80193e4:	6028      	str	r0, [r5, #0]
 80193e6:	0635      	lsls	r5, r6, #24
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	d501      	bpl.n	80193f0 <_printf_i+0x1c4>
 80193ec:	6019      	str	r1, [r3, #0]
 80193ee:	e002      	b.n	80193f6 <_printf_i+0x1ca>
 80193f0:	0670      	lsls	r0, r6, #25
 80193f2:	d5fb      	bpl.n	80193ec <_printf_i+0x1c0>
 80193f4:	8019      	strh	r1, [r3, #0]
 80193f6:	2300      	movs	r3, #0
 80193f8:	6123      	str	r3, [r4, #16]
 80193fa:	4615      	mov	r5, r2
 80193fc:	e7bc      	b.n	8019378 <_printf_i+0x14c>
 80193fe:	682b      	ldr	r3, [r5, #0]
 8019400:	1d1a      	adds	r2, r3, #4
 8019402:	602a      	str	r2, [r5, #0]
 8019404:	681d      	ldr	r5, [r3, #0]
 8019406:	6862      	ldr	r2, [r4, #4]
 8019408:	2100      	movs	r1, #0
 801940a:	4628      	mov	r0, r5
 801940c:	f7e6 ff08 	bl	8000220 <memchr>
 8019410:	b108      	cbz	r0, 8019416 <_printf_i+0x1ea>
 8019412:	1b40      	subs	r0, r0, r5
 8019414:	6060      	str	r0, [r4, #4]
 8019416:	6863      	ldr	r3, [r4, #4]
 8019418:	6123      	str	r3, [r4, #16]
 801941a:	2300      	movs	r3, #0
 801941c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019420:	e7aa      	b.n	8019378 <_printf_i+0x14c>
 8019422:	6923      	ldr	r3, [r4, #16]
 8019424:	462a      	mov	r2, r5
 8019426:	4649      	mov	r1, r9
 8019428:	4640      	mov	r0, r8
 801942a:	47d0      	blx	sl
 801942c:	3001      	adds	r0, #1
 801942e:	d0ad      	beq.n	801938c <_printf_i+0x160>
 8019430:	6823      	ldr	r3, [r4, #0]
 8019432:	079b      	lsls	r3, r3, #30
 8019434:	d413      	bmi.n	801945e <_printf_i+0x232>
 8019436:	68e0      	ldr	r0, [r4, #12]
 8019438:	9b03      	ldr	r3, [sp, #12]
 801943a:	4298      	cmp	r0, r3
 801943c:	bfb8      	it	lt
 801943e:	4618      	movlt	r0, r3
 8019440:	e7a6      	b.n	8019390 <_printf_i+0x164>
 8019442:	2301      	movs	r3, #1
 8019444:	4632      	mov	r2, r6
 8019446:	4649      	mov	r1, r9
 8019448:	4640      	mov	r0, r8
 801944a:	47d0      	blx	sl
 801944c:	3001      	adds	r0, #1
 801944e:	d09d      	beq.n	801938c <_printf_i+0x160>
 8019450:	3501      	adds	r5, #1
 8019452:	68e3      	ldr	r3, [r4, #12]
 8019454:	9903      	ldr	r1, [sp, #12]
 8019456:	1a5b      	subs	r3, r3, r1
 8019458:	42ab      	cmp	r3, r5
 801945a:	dcf2      	bgt.n	8019442 <_printf_i+0x216>
 801945c:	e7eb      	b.n	8019436 <_printf_i+0x20a>
 801945e:	2500      	movs	r5, #0
 8019460:	f104 0619 	add.w	r6, r4, #25
 8019464:	e7f5      	b.n	8019452 <_printf_i+0x226>
 8019466:	bf00      	nop
 8019468:	08027abb 	.word	0x08027abb
 801946c:	08027acc 	.word	0x08027acc

08019470 <__sflush_r>:
 8019470:	898a      	ldrh	r2, [r1, #12]
 8019472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019476:	4605      	mov	r5, r0
 8019478:	0710      	lsls	r0, r2, #28
 801947a:	460c      	mov	r4, r1
 801947c:	d458      	bmi.n	8019530 <__sflush_r+0xc0>
 801947e:	684b      	ldr	r3, [r1, #4]
 8019480:	2b00      	cmp	r3, #0
 8019482:	dc05      	bgt.n	8019490 <__sflush_r+0x20>
 8019484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019486:	2b00      	cmp	r3, #0
 8019488:	dc02      	bgt.n	8019490 <__sflush_r+0x20>
 801948a:	2000      	movs	r0, #0
 801948c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019492:	2e00      	cmp	r6, #0
 8019494:	d0f9      	beq.n	801948a <__sflush_r+0x1a>
 8019496:	2300      	movs	r3, #0
 8019498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801949c:	682f      	ldr	r7, [r5, #0]
 801949e:	6a21      	ldr	r1, [r4, #32]
 80194a0:	602b      	str	r3, [r5, #0]
 80194a2:	d032      	beq.n	801950a <__sflush_r+0x9a>
 80194a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80194a6:	89a3      	ldrh	r3, [r4, #12]
 80194a8:	075a      	lsls	r2, r3, #29
 80194aa:	d505      	bpl.n	80194b8 <__sflush_r+0x48>
 80194ac:	6863      	ldr	r3, [r4, #4]
 80194ae:	1ac0      	subs	r0, r0, r3
 80194b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80194b2:	b10b      	cbz	r3, 80194b8 <__sflush_r+0x48>
 80194b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80194b6:	1ac0      	subs	r0, r0, r3
 80194b8:	2300      	movs	r3, #0
 80194ba:	4602      	mov	r2, r0
 80194bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80194be:	6a21      	ldr	r1, [r4, #32]
 80194c0:	4628      	mov	r0, r5
 80194c2:	47b0      	blx	r6
 80194c4:	1c43      	adds	r3, r0, #1
 80194c6:	89a3      	ldrh	r3, [r4, #12]
 80194c8:	d106      	bne.n	80194d8 <__sflush_r+0x68>
 80194ca:	6829      	ldr	r1, [r5, #0]
 80194cc:	291d      	cmp	r1, #29
 80194ce:	d82b      	bhi.n	8019528 <__sflush_r+0xb8>
 80194d0:	4a29      	ldr	r2, [pc, #164]	; (8019578 <__sflush_r+0x108>)
 80194d2:	410a      	asrs	r2, r1
 80194d4:	07d6      	lsls	r6, r2, #31
 80194d6:	d427      	bmi.n	8019528 <__sflush_r+0xb8>
 80194d8:	2200      	movs	r2, #0
 80194da:	6062      	str	r2, [r4, #4]
 80194dc:	04d9      	lsls	r1, r3, #19
 80194de:	6922      	ldr	r2, [r4, #16]
 80194e0:	6022      	str	r2, [r4, #0]
 80194e2:	d504      	bpl.n	80194ee <__sflush_r+0x7e>
 80194e4:	1c42      	adds	r2, r0, #1
 80194e6:	d101      	bne.n	80194ec <__sflush_r+0x7c>
 80194e8:	682b      	ldr	r3, [r5, #0]
 80194ea:	b903      	cbnz	r3, 80194ee <__sflush_r+0x7e>
 80194ec:	6560      	str	r0, [r4, #84]	; 0x54
 80194ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80194f0:	602f      	str	r7, [r5, #0]
 80194f2:	2900      	cmp	r1, #0
 80194f4:	d0c9      	beq.n	801948a <__sflush_r+0x1a>
 80194f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80194fa:	4299      	cmp	r1, r3
 80194fc:	d002      	beq.n	8019504 <__sflush_r+0x94>
 80194fe:	4628      	mov	r0, r5
 8019500:	f7ff fa8a 	bl	8018a18 <_free_r>
 8019504:	2000      	movs	r0, #0
 8019506:	6360      	str	r0, [r4, #52]	; 0x34
 8019508:	e7c0      	b.n	801948c <__sflush_r+0x1c>
 801950a:	2301      	movs	r3, #1
 801950c:	4628      	mov	r0, r5
 801950e:	47b0      	blx	r6
 8019510:	1c41      	adds	r1, r0, #1
 8019512:	d1c8      	bne.n	80194a6 <__sflush_r+0x36>
 8019514:	682b      	ldr	r3, [r5, #0]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d0c5      	beq.n	80194a6 <__sflush_r+0x36>
 801951a:	2b1d      	cmp	r3, #29
 801951c:	d001      	beq.n	8019522 <__sflush_r+0xb2>
 801951e:	2b16      	cmp	r3, #22
 8019520:	d101      	bne.n	8019526 <__sflush_r+0xb6>
 8019522:	602f      	str	r7, [r5, #0]
 8019524:	e7b1      	b.n	801948a <__sflush_r+0x1a>
 8019526:	89a3      	ldrh	r3, [r4, #12]
 8019528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801952c:	81a3      	strh	r3, [r4, #12]
 801952e:	e7ad      	b.n	801948c <__sflush_r+0x1c>
 8019530:	690f      	ldr	r7, [r1, #16]
 8019532:	2f00      	cmp	r7, #0
 8019534:	d0a9      	beq.n	801948a <__sflush_r+0x1a>
 8019536:	0793      	lsls	r3, r2, #30
 8019538:	680e      	ldr	r6, [r1, #0]
 801953a:	bf08      	it	eq
 801953c:	694b      	ldreq	r3, [r1, #20]
 801953e:	600f      	str	r7, [r1, #0]
 8019540:	bf18      	it	ne
 8019542:	2300      	movne	r3, #0
 8019544:	eba6 0807 	sub.w	r8, r6, r7
 8019548:	608b      	str	r3, [r1, #8]
 801954a:	f1b8 0f00 	cmp.w	r8, #0
 801954e:	dd9c      	ble.n	801948a <__sflush_r+0x1a>
 8019550:	6a21      	ldr	r1, [r4, #32]
 8019552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019554:	4643      	mov	r3, r8
 8019556:	463a      	mov	r2, r7
 8019558:	4628      	mov	r0, r5
 801955a:	47b0      	blx	r6
 801955c:	2800      	cmp	r0, #0
 801955e:	dc06      	bgt.n	801956e <__sflush_r+0xfe>
 8019560:	89a3      	ldrh	r3, [r4, #12]
 8019562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019566:	81a3      	strh	r3, [r4, #12]
 8019568:	f04f 30ff 	mov.w	r0, #4294967295
 801956c:	e78e      	b.n	801948c <__sflush_r+0x1c>
 801956e:	4407      	add	r7, r0
 8019570:	eba8 0800 	sub.w	r8, r8, r0
 8019574:	e7e9      	b.n	801954a <__sflush_r+0xda>
 8019576:	bf00      	nop
 8019578:	dfbffffe 	.word	0xdfbffffe

0801957c <_fflush_r>:
 801957c:	b538      	push	{r3, r4, r5, lr}
 801957e:	690b      	ldr	r3, [r1, #16]
 8019580:	4605      	mov	r5, r0
 8019582:	460c      	mov	r4, r1
 8019584:	b913      	cbnz	r3, 801958c <_fflush_r+0x10>
 8019586:	2500      	movs	r5, #0
 8019588:	4628      	mov	r0, r5
 801958a:	bd38      	pop	{r3, r4, r5, pc}
 801958c:	b118      	cbz	r0, 8019596 <_fflush_r+0x1a>
 801958e:	6a03      	ldr	r3, [r0, #32]
 8019590:	b90b      	cbnz	r3, 8019596 <_fflush_r+0x1a>
 8019592:	f7fe ffdf 	bl	8018554 <__sinit>
 8019596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801959a:	2b00      	cmp	r3, #0
 801959c:	d0f3      	beq.n	8019586 <_fflush_r+0xa>
 801959e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80195a0:	07d0      	lsls	r0, r2, #31
 80195a2:	d404      	bmi.n	80195ae <_fflush_r+0x32>
 80195a4:	0599      	lsls	r1, r3, #22
 80195a6:	d402      	bmi.n	80195ae <_fflush_r+0x32>
 80195a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195aa:	f7ff fa07 	bl	80189bc <__retarget_lock_acquire_recursive>
 80195ae:	4628      	mov	r0, r5
 80195b0:	4621      	mov	r1, r4
 80195b2:	f7ff ff5d 	bl	8019470 <__sflush_r>
 80195b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195b8:	07da      	lsls	r2, r3, #31
 80195ba:	4605      	mov	r5, r0
 80195bc:	d4e4      	bmi.n	8019588 <_fflush_r+0xc>
 80195be:	89a3      	ldrh	r3, [r4, #12]
 80195c0:	059b      	lsls	r3, r3, #22
 80195c2:	d4e1      	bmi.n	8019588 <_fflush_r+0xc>
 80195c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195c6:	f7ff f9fa 	bl	80189be <__retarget_lock_release_recursive>
 80195ca:	e7dd      	b.n	8019588 <_fflush_r+0xc>

080195cc <fiprintf>:
 80195cc:	b40e      	push	{r1, r2, r3}
 80195ce:	b503      	push	{r0, r1, lr}
 80195d0:	4601      	mov	r1, r0
 80195d2:	ab03      	add	r3, sp, #12
 80195d4:	4805      	ldr	r0, [pc, #20]	; (80195ec <fiprintf+0x20>)
 80195d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80195da:	6800      	ldr	r0, [r0, #0]
 80195dc:	9301      	str	r3, [sp, #4]
 80195de:	f7ff fc9d 	bl	8018f1c <_vfiprintf_r>
 80195e2:	b002      	add	sp, #8
 80195e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80195e8:	b003      	add	sp, #12
 80195ea:	4770      	bx	lr
 80195ec:	2000008c 	.word	0x2000008c

080195f0 <__swbuf_r>:
 80195f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195f2:	460e      	mov	r6, r1
 80195f4:	4614      	mov	r4, r2
 80195f6:	4605      	mov	r5, r0
 80195f8:	b118      	cbz	r0, 8019602 <__swbuf_r+0x12>
 80195fa:	6a03      	ldr	r3, [r0, #32]
 80195fc:	b90b      	cbnz	r3, 8019602 <__swbuf_r+0x12>
 80195fe:	f7fe ffa9 	bl	8018554 <__sinit>
 8019602:	69a3      	ldr	r3, [r4, #24]
 8019604:	60a3      	str	r3, [r4, #8]
 8019606:	89a3      	ldrh	r3, [r4, #12]
 8019608:	071a      	lsls	r2, r3, #28
 801960a:	d525      	bpl.n	8019658 <__swbuf_r+0x68>
 801960c:	6923      	ldr	r3, [r4, #16]
 801960e:	b31b      	cbz	r3, 8019658 <__swbuf_r+0x68>
 8019610:	6823      	ldr	r3, [r4, #0]
 8019612:	6922      	ldr	r2, [r4, #16]
 8019614:	1a98      	subs	r0, r3, r2
 8019616:	6963      	ldr	r3, [r4, #20]
 8019618:	b2f6      	uxtb	r6, r6
 801961a:	4283      	cmp	r3, r0
 801961c:	4637      	mov	r7, r6
 801961e:	dc04      	bgt.n	801962a <__swbuf_r+0x3a>
 8019620:	4621      	mov	r1, r4
 8019622:	4628      	mov	r0, r5
 8019624:	f7ff ffaa 	bl	801957c <_fflush_r>
 8019628:	b9e0      	cbnz	r0, 8019664 <__swbuf_r+0x74>
 801962a:	68a3      	ldr	r3, [r4, #8]
 801962c:	3b01      	subs	r3, #1
 801962e:	60a3      	str	r3, [r4, #8]
 8019630:	6823      	ldr	r3, [r4, #0]
 8019632:	1c5a      	adds	r2, r3, #1
 8019634:	6022      	str	r2, [r4, #0]
 8019636:	701e      	strb	r6, [r3, #0]
 8019638:	6962      	ldr	r2, [r4, #20]
 801963a:	1c43      	adds	r3, r0, #1
 801963c:	429a      	cmp	r2, r3
 801963e:	d004      	beq.n	801964a <__swbuf_r+0x5a>
 8019640:	89a3      	ldrh	r3, [r4, #12]
 8019642:	07db      	lsls	r3, r3, #31
 8019644:	d506      	bpl.n	8019654 <__swbuf_r+0x64>
 8019646:	2e0a      	cmp	r6, #10
 8019648:	d104      	bne.n	8019654 <__swbuf_r+0x64>
 801964a:	4621      	mov	r1, r4
 801964c:	4628      	mov	r0, r5
 801964e:	f7ff ff95 	bl	801957c <_fflush_r>
 8019652:	b938      	cbnz	r0, 8019664 <__swbuf_r+0x74>
 8019654:	4638      	mov	r0, r7
 8019656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019658:	4621      	mov	r1, r4
 801965a:	4628      	mov	r0, r5
 801965c:	f000 f806 	bl	801966c <__swsetup_r>
 8019660:	2800      	cmp	r0, #0
 8019662:	d0d5      	beq.n	8019610 <__swbuf_r+0x20>
 8019664:	f04f 37ff 	mov.w	r7, #4294967295
 8019668:	e7f4      	b.n	8019654 <__swbuf_r+0x64>
	...

0801966c <__swsetup_r>:
 801966c:	b538      	push	{r3, r4, r5, lr}
 801966e:	4b2a      	ldr	r3, [pc, #168]	; (8019718 <__swsetup_r+0xac>)
 8019670:	4605      	mov	r5, r0
 8019672:	6818      	ldr	r0, [r3, #0]
 8019674:	460c      	mov	r4, r1
 8019676:	b118      	cbz	r0, 8019680 <__swsetup_r+0x14>
 8019678:	6a03      	ldr	r3, [r0, #32]
 801967a:	b90b      	cbnz	r3, 8019680 <__swsetup_r+0x14>
 801967c:	f7fe ff6a 	bl	8018554 <__sinit>
 8019680:	89a3      	ldrh	r3, [r4, #12]
 8019682:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019686:	0718      	lsls	r0, r3, #28
 8019688:	d422      	bmi.n	80196d0 <__swsetup_r+0x64>
 801968a:	06d9      	lsls	r1, r3, #27
 801968c:	d407      	bmi.n	801969e <__swsetup_r+0x32>
 801968e:	2309      	movs	r3, #9
 8019690:	602b      	str	r3, [r5, #0]
 8019692:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019696:	81a3      	strh	r3, [r4, #12]
 8019698:	f04f 30ff 	mov.w	r0, #4294967295
 801969c:	e034      	b.n	8019708 <__swsetup_r+0x9c>
 801969e:	0758      	lsls	r0, r3, #29
 80196a0:	d512      	bpl.n	80196c8 <__swsetup_r+0x5c>
 80196a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80196a4:	b141      	cbz	r1, 80196b8 <__swsetup_r+0x4c>
 80196a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80196aa:	4299      	cmp	r1, r3
 80196ac:	d002      	beq.n	80196b4 <__swsetup_r+0x48>
 80196ae:	4628      	mov	r0, r5
 80196b0:	f7ff f9b2 	bl	8018a18 <_free_r>
 80196b4:	2300      	movs	r3, #0
 80196b6:	6363      	str	r3, [r4, #52]	; 0x34
 80196b8:	89a3      	ldrh	r3, [r4, #12]
 80196ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80196be:	81a3      	strh	r3, [r4, #12]
 80196c0:	2300      	movs	r3, #0
 80196c2:	6063      	str	r3, [r4, #4]
 80196c4:	6923      	ldr	r3, [r4, #16]
 80196c6:	6023      	str	r3, [r4, #0]
 80196c8:	89a3      	ldrh	r3, [r4, #12]
 80196ca:	f043 0308 	orr.w	r3, r3, #8
 80196ce:	81a3      	strh	r3, [r4, #12]
 80196d0:	6923      	ldr	r3, [r4, #16]
 80196d2:	b94b      	cbnz	r3, 80196e8 <__swsetup_r+0x7c>
 80196d4:	89a3      	ldrh	r3, [r4, #12]
 80196d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80196da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80196de:	d003      	beq.n	80196e8 <__swsetup_r+0x7c>
 80196e0:	4621      	mov	r1, r4
 80196e2:	4628      	mov	r0, r5
 80196e4:	f000 f886 	bl	80197f4 <__smakebuf_r>
 80196e8:	89a0      	ldrh	r0, [r4, #12]
 80196ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80196ee:	f010 0301 	ands.w	r3, r0, #1
 80196f2:	d00a      	beq.n	801970a <__swsetup_r+0x9e>
 80196f4:	2300      	movs	r3, #0
 80196f6:	60a3      	str	r3, [r4, #8]
 80196f8:	6963      	ldr	r3, [r4, #20]
 80196fa:	425b      	negs	r3, r3
 80196fc:	61a3      	str	r3, [r4, #24]
 80196fe:	6923      	ldr	r3, [r4, #16]
 8019700:	b943      	cbnz	r3, 8019714 <__swsetup_r+0xa8>
 8019702:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019706:	d1c4      	bne.n	8019692 <__swsetup_r+0x26>
 8019708:	bd38      	pop	{r3, r4, r5, pc}
 801970a:	0781      	lsls	r1, r0, #30
 801970c:	bf58      	it	pl
 801970e:	6963      	ldrpl	r3, [r4, #20]
 8019710:	60a3      	str	r3, [r4, #8]
 8019712:	e7f4      	b.n	80196fe <__swsetup_r+0x92>
 8019714:	2000      	movs	r0, #0
 8019716:	e7f7      	b.n	8019708 <__swsetup_r+0x9c>
 8019718:	2000008c 	.word	0x2000008c

0801971c <_sbrk_r>:
 801971c:	b538      	push	{r3, r4, r5, lr}
 801971e:	4d06      	ldr	r5, [pc, #24]	; (8019738 <_sbrk_r+0x1c>)
 8019720:	2300      	movs	r3, #0
 8019722:	4604      	mov	r4, r0
 8019724:	4608      	mov	r0, r1
 8019726:	602b      	str	r3, [r5, #0]
 8019728:	f7e7 fabc 	bl	8000ca4 <_sbrk>
 801972c:	1c43      	adds	r3, r0, #1
 801972e:	d102      	bne.n	8019736 <_sbrk_r+0x1a>
 8019730:	682b      	ldr	r3, [r5, #0]
 8019732:	b103      	cbz	r3, 8019736 <_sbrk_r+0x1a>
 8019734:	6023      	str	r3, [r4, #0]
 8019736:	bd38      	pop	{r3, r4, r5, pc}
 8019738:	20011830 	.word	0x20011830

0801973c <abort>:
 801973c:	b508      	push	{r3, lr}
 801973e:	2006      	movs	r0, #6
 8019740:	f000 f8bc 	bl	80198bc <raise>
 8019744:	2001      	movs	r0, #1
 8019746:	f7e7 fa35 	bl	8000bb4 <_exit>

0801974a <_realloc_r>:
 801974a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801974e:	4680      	mov	r8, r0
 8019750:	4614      	mov	r4, r2
 8019752:	460e      	mov	r6, r1
 8019754:	b921      	cbnz	r1, 8019760 <_realloc_r+0x16>
 8019756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801975a:	4611      	mov	r1, r2
 801975c:	f7ff b9d0 	b.w	8018b00 <_malloc_r>
 8019760:	b92a      	cbnz	r2, 801976e <_realloc_r+0x24>
 8019762:	f7ff f959 	bl	8018a18 <_free_r>
 8019766:	4625      	mov	r5, r4
 8019768:	4628      	mov	r0, r5
 801976a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801976e:	f000 f8e3 	bl	8019938 <_malloc_usable_size_r>
 8019772:	4284      	cmp	r4, r0
 8019774:	4607      	mov	r7, r0
 8019776:	d802      	bhi.n	801977e <_realloc_r+0x34>
 8019778:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801977c:	d812      	bhi.n	80197a4 <_realloc_r+0x5a>
 801977e:	4621      	mov	r1, r4
 8019780:	4640      	mov	r0, r8
 8019782:	f7ff f9bd 	bl	8018b00 <_malloc_r>
 8019786:	4605      	mov	r5, r0
 8019788:	2800      	cmp	r0, #0
 801978a:	d0ed      	beq.n	8019768 <_realloc_r+0x1e>
 801978c:	42bc      	cmp	r4, r7
 801978e:	4622      	mov	r2, r4
 8019790:	4631      	mov	r1, r6
 8019792:	bf28      	it	cs
 8019794:	463a      	movcs	r2, r7
 8019796:	f7ff f913 	bl	80189c0 <memcpy>
 801979a:	4631      	mov	r1, r6
 801979c:	4640      	mov	r0, r8
 801979e:	f7ff f93b 	bl	8018a18 <_free_r>
 80197a2:	e7e1      	b.n	8019768 <_realloc_r+0x1e>
 80197a4:	4635      	mov	r5, r6
 80197a6:	e7df      	b.n	8019768 <_realloc_r+0x1e>

080197a8 <__swhatbuf_r>:
 80197a8:	b570      	push	{r4, r5, r6, lr}
 80197aa:	460c      	mov	r4, r1
 80197ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197b0:	2900      	cmp	r1, #0
 80197b2:	b096      	sub	sp, #88	; 0x58
 80197b4:	4615      	mov	r5, r2
 80197b6:	461e      	mov	r6, r3
 80197b8:	da0d      	bge.n	80197d6 <__swhatbuf_r+0x2e>
 80197ba:	89a3      	ldrh	r3, [r4, #12]
 80197bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80197c0:	f04f 0100 	mov.w	r1, #0
 80197c4:	bf0c      	ite	eq
 80197c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80197ca:	2340      	movne	r3, #64	; 0x40
 80197cc:	2000      	movs	r0, #0
 80197ce:	6031      	str	r1, [r6, #0]
 80197d0:	602b      	str	r3, [r5, #0]
 80197d2:	b016      	add	sp, #88	; 0x58
 80197d4:	bd70      	pop	{r4, r5, r6, pc}
 80197d6:	466a      	mov	r2, sp
 80197d8:	f000 f878 	bl	80198cc <_fstat_r>
 80197dc:	2800      	cmp	r0, #0
 80197de:	dbec      	blt.n	80197ba <__swhatbuf_r+0x12>
 80197e0:	9901      	ldr	r1, [sp, #4]
 80197e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80197e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80197ea:	4259      	negs	r1, r3
 80197ec:	4159      	adcs	r1, r3
 80197ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80197f2:	e7eb      	b.n	80197cc <__swhatbuf_r+0x24>

080197f4 <__smakebuf_r>:
 80197f4:	898b      	ldrh	r3, [r1, #12]
 80197f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80197f8:	079d      	lsls	r5, r3, #30
 80197fa:	4606      	mov	r6, r0
 80197fc:	460c      	mov	r4, r1
 80197fe:	d507      	bpl.n	8019810 <__smakebuf_r+0x1c>
 8019800:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019804:	6023      	str	r3, [r4, #0]
 8019806:	6123      	str	r3, [r4, #16]
 8019808:	2301      	movs	r3, #1
 801980a:	6163      	str	r3, [r4, #20]
 801980c:	b002      	add	sp, #8
 801980e:	bd70      	pop	{r4, r5, r6, pc}
 8019810:	ab01      	add	r3, sp, #4
 8019812:	466a      	mov	r2, sp
 8019814:	f7ff ffc8 	bl	80197a8 <__swhatbuf_r>
 8019818:	9900      	ldr	r1, [sp, #0]
 801981a:	4605      	mov	r5, r0
 801981c:	4630      	mov	r0, r6
 801981e:	f7ff f96f 	bl	8018b00 <_malloc_r>
 8019822:	b948      	cbnz	r0, 8019838 <__smakebuf_r+0x44>
 8019824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019828:	059a      	lsls	r2, r3, #22
 801982a:	d4ef      	bmi.n	801980c <__smakebuf_r+0x18>
 801982c:	f023 0303 	bic.w	r3, r3, #3
 8019830:	f043 0302 	orr.w	r3, r3, #2
 8019834:	81a3      	strh	r3, [r4, #12]
 8019836:	e7e3      	b.n	8019800 <__smakebuf_r+0xc>
 8019838:	89a3      	ldrh	r3, [r4, #12]
 801983a:	6020      	str	r0, [r4, #0]
 801983c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019840:	81a3      	strh	r3, [r4, #12]
 8019842:	9b00      	ldr	r3, [sp, #0]
 8019844:	6163      	str	r3, [r4, #20]
 8019846:	9b01      	ldr	r3, [sp, #4]
 8019848:	6120      	str	r0, [r4, #16]
 801984a:	b15b      	cbz	r3, 8019864 <__smakebuf_r+0x70>
 801984c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019850:	4630      	mov	r0, r6
 8019852:	f000 f84d 	bl	80198f0 <_isatty_r>
 8019856:	b128      	cbz	r0, 8019864 <__smakebuf_r+0x70>
 8019858:	89a3      	ldrh	r3, [r4, #12]
 801985a:	f023 0303 	bic.w	r3, r3, #3
 801985e:	f043 0301 	orr.w	r3, r3, #1
 8019862:	81a3      	strh	r3, [r4, #12]
 8019864:	89a3      	ldrh	r3, [r4, #12]
 8019866:	431d      	orrs	r5, r3
 8019868:	81a5      	strh	r5, [r4, #12]
 801986a:	e7cf      	b.n	801980c <__smakebuf_r+0x18>

0801986c <_raise_r>:
 801986c:	291f      	cmp	r1, #31
 801986e:	b538      	push	{r3, r4, r5, lr}
 8019870:	4604      	mov	r4, r0
 8019872:	460d      	mov	r5, r1
 8019874:	d904      	bls.n	8019880 <_raise_r+0x14>
 8019876:	2316      	movs	r3, #22
 8019878:	6003      	str	r3, [r0, #0]
 801987a:	f04f 30ff 	mov.w	r0, #4294967295
 801987e:	bd38      	pop	{r3, r4, r5, pc}
 8019880:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019882:	b112      	cbz	r2, 801988a <_raise_r+0x1e>
 8019884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019888:	b94b      	cbnz	r3, 801989e <_raise_r+0x32>
 801988a:	4620      	mov	r0, r4
 801988c:	f000 f852 	bl	8019934 <_getpid_r>
 8019890:	462a      	mov	r2, r5
 8019892:	4601      	mov	r1, r0
 8019894:	4620      	mov	r0, r4
 8019896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801989a:	f000 b839 	b.w	8019910 <_kill_r>
 801989e:	2b01      	cmp	r3, #1
 80198a0:	d00a      	beq.n	80198b8 <_raise_r+0x4c>
 80198a2:	1c59      	adds	r1, r3, #1
 80198a4:	d103      	bne.n	80198ae <_raise_r+0x42>
 80198a6:	2316      	movs	r3, #22
 80198a8:	6003      	str	r3, [r0, #0]
 80198aa:	2001      	movs	r0, #1
 80198ac:	e7e7      	b.n	801987e <_raise_r+0x12>
 80198ae:	2400      	movs	r4, #0
 80198b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80198b4:	4628      	mov	r0, r5
 80198b6:	4798      	blx	r3
 80198b8:	2000      	movs	r0, #0
 80198ba:	e7e0      	b.n	801987e <_raise_r+0x12>

080198bc <raise>:
 80198bc:	4b02      	ldr	r3, [pc, #8]	; (80198c8 <raise+0xc>)
 80198be:	4601      	mov	r1, r0
 80198c0:	6818      	ldr	r0, [r3, #0]
 80198c2:	f7ff bfd3 	b.w	801986c <_raise_r>
 80198c6:	bf00      	nop
 80198c8:	2000008c 	.word	0x2000008c

080198cc <_fstat_r>:
 80198cc:	b538      	push	{r3, r4, r5, lr}
 80198ce:	4d07      	ldr	r5, [pc, #28]	; (80198ec <_fstat_r+0x20>)
 80198d0:	2300      	movs	r3, #0
 80198d2:	4604      	mov	r4, r0
 80198d4:	4608      	mov	r0, r1
 80198d6:	4611      	mov	r1, r2
 80198d8:	602b      	str	r3, [r5, #0]
 80198da:	f7e7 f9ba 	bl	8000c52 <_fstat>
 80198de:	1c43      	adds	r3, r0, #1
 80198e0:	d102      	bne.n	80198e8 <_fstat_r+0x1c>
 80198e2:	682b      	ldr	r3, [r5, #0]
 80198e4:	b103      	cbz	r3, 80198e8 <_fstat_r+0x1c>
 80198e6:	6023      	str	r3, [r4, #0]
 80198e8:	bd38      	pop	{r3, r4, r5, pc}
 80198ea:	bf00      	nop
 80198ec:	20011830 	.word	0x20011830

080198f0 <_isatty_r>:
 80198f0:	b538      	push	{r3, r4, r5, lr}
 80198f2:	4d06      	ldr	r5, [pc, #24]	; (801990c <_isatty_r+0x1c>)
 80198f4:	2300      	movs	r3, #0
 80198f6:	4604      	mov	r4, r0
 80198f8:	4608      	mov	r0, r1
 80198fa:	602b      	str	r3, [r5, #0]
 80198fc:	f7e7 f9b9 	bl	8000c72 <_isatty>
 8019900:	1c43      	adds	r3, r0, #1
 8019902:	d102      	bne.n	801990a <_isatty_r+0x1a>
 8019904:	682b      	ldr	r3, [r5, #0]
 8019906:	b103      	cbz	r3, 801990a <_isatty_r+0x1a>
 8019908:	6023      	str	r3, [r4, #0]
 801990a:	bd38      	pop	{r3, r4, r5, pc}
 801990c:	20011830 	.word	0x20011830

08019910 <_kill_r>:
 8019910:	b538      	push	{r3, r4, r5, lr}
 8019912:	4d07      	ldr	r5, [pc, #28]	; (8019930 <_kill_r+0x20>)
 8019914:	2300      	movs	r3, #0
 8019916:	4604      	mov	r4, r0
 8019918:	4608      	mov	r0, r1
 801991a:	4611      	mov	r1, r2
 801991c:	602b      	str	r3, [r5, #0]
 801991e:	f7e7 f937 	bl	8000b90 <_kill>
 8019922:	1c43      	adds	r3, r0, #1
 8019924:	d102      	bne.n	801992c <_kill_r+0x1c>
 8019926:	682b      	ldr	r3, [r5, #0]
 8019928:	b103      	cbz	r3, 801992c <_kill_r+0x1c>
 801992a:	6023      	str	r3, [r4, #0]
 801992c:	bd38      	pop	{r3, r4, r5, pc}
 801992e:	bf00      	nop
 8019930:	20011830 	.word	0x20011830

08019934 <_getpid_r>:
 8019934:	f7e7 b924 	b.w	8000b80 <_getpid>

08019938 <_malloc_usable_size_r>:
 8019938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801993c:	1f18      	subs	r0, r3, #4
 801993e:	2b00      	cmp	r3, #0
 8019940:	bfbc      	itt	lt
 8019942:	580b      	ldrlt	r3, [r1, r0]
 8019944:	18c0      	addlt	r0, r0, r3
 8019946:	4770      	bx	lr

08019948 <_init>:
 8019948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801994a:	bf00      	nop
 801994c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801994e:	bc08      	pop	{r3}
 8019950:	469e      	mov	lr, r3
 8019952:	4770      	bx	lr

08019954 <_fini>:
 8019954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019956:	bf00      	nop
 8019958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801995a:	bc08      	pop	{r3}
 801995c:	469e      	mov	lr, r3
 801995e:	4770      	bx	lr
